
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c094  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  0800c244  0800c244  0001c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeb4  0800eeb4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eeb4  0800eeb4  0001eeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eebc  0800eebc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eebc  0800eebc  0001eebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eec0  0800eec0  0001eec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800eec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020bc0  200000a8  0800ef6c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20020c68  0800ef6c  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d803  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000060df  00000000  00000000  0004d8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002578  00000000  00000000  000539c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002270  00000000  00000000  00055f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aca5  00000000  00000000  000581a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023197  00000000  00000000  00082e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f17fe  00000000  00000000  000a5fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001977e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a38  00000000  00000000  00197860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c22c 	.word	0x0800c22c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	0800c22c 	.word	0x0800c22c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <showChooseCanvaInterface>:
#include "chooseViewStructure.h"
#include "chooseCanvaInterface.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void showChooseCanvaInterface(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f002 ff0a 	bl	8003310 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 80004fc:	481c      	ldr	r0, [pc, #112]	; (8000570 <showChooseCanvaInterface+0x80>)
 80004fe:	f002 fe15 	bl	800312c <BSP_LCD_SetTextColor>

	BSP_LCD_FillRect(30, 45, 180, 70);
 8000502:	2346      	movs	r3, #70	; 0x46
 8000504:	22b4      	movs	r2, #180	; 0xb4
 8000506:	212d      	movs	r1, #45	; 0x2d
 8000508:	201e      	movs	r0, #30
 800050a:	f003 f9c9 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 125, 180, 70);
 800050e:	2346      	movs	r3, #70	; 0x46
 8000510:	22b4      	movs	r2, #180	; 0xb4
 8000512:	217d      	movs	r1, #125	; 0x7d
 8000514:	201e      	movs	r0, #30
 8000516:	f003 f9c3 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 205, 180, 70);
 800051a:	2346      	movs	r3, #70	; 0x46
 800051c:	22b4      	movs	r2, #180	; 0xb4
 800051e:	21cd      	movs	r1, #205	; 0xcd
 8000520:	201e      	movs	r0, #30
 8000522:	f003 f9bd 	bl	80038a0 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000526:	f04f 30ff 	mov.w	r0, #4294967295
 800052a:	f002 fdff 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800052e:	4811      	ldr	r0, [pc, #68]	; (8000574 <showChooseCanvaInterface+0x84>)
 8000530:	f002 fe2e 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <showChooseCanvaInterface+0x80>)
 8000536:	f002 fe11 	bl	800315c <BSP_LCD_SetBackColor>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"CANVAS #1", CENTER_MODE);
 800053a:	2301      	movs	r3, #1
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <showChooseCanvaInterface+0x88>)
 800053e:	2144      	movs	r1, #68	; 0x44
 8000540:	2000      	movs	r0, #0
 8000542:	f002 ff51 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,148, (uint8_t*)"CANVAS #2", CENTER_MODE);
 8000546:	2301      	movs	r3, #1
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <showChooseCanvaInterface+0x8c>)
 800054a:	2194      	movs	r1, #148	; 0x94
 800054c:	2000      	movs	r0, #0
 800054e:	f002 ff4b 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"INFO", CENTER_MODE);
 8000552:	2301      	movs	r3, #1
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <showChooseCanvaInterface+0x90>)
 8000556:	21e4      	movs	r1, #228	; 0xe4
 8000558:	2000      	movs	r0, #0
 800055a:	f002 ff45 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	activeView = ChooseScreen;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <showChooseCanvaInterface+0x94>)
 8000560:	2203      	movs	r2, #3
 8000562:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f003 ff8a 	bl	8004480 <HAL_Delay>


}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	ff800080 	.word	0xff800080
 8000574:	20000080 	.word	0x20000080
 8000578:	0800c244 	.word	0x0800c244
 800057c:	0800c250 	.word	0x0800c250
 8000580:	0800c25c 	.word	0x0800c25c
 8000584:	20004b98 	.word	0x20004b98

08000588 <choose>:

void choose(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	while(activeView == ChooseScreen)
 800058c:	e032      	b.n	80005f4 <choose+0x6c>
	{
		BSP_TS_GetState(&tsChooseCanva);
 800058e:	481c      	ldr	r0, [pc, #112]	; (8000600 <choose+0x78>)
 8000590:	f003 fe82 	bl	8004298 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 45 && tsChooseCanva.Y < 115)
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <choose+0x78>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <choose+0x2c>
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <choose+0x78>)
 800059e:	889b      	ldrh	r3, [r3, #4]
 80005a0:	2b2d      	cmp	r3, #45	; 0x2d
 80005a2:	d907      	bls.n	80005b4 <choose+0x2c>
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <choose+0x78>)
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	2b72      	cmp	r3, #114	; 0x72
 80005aa:	d803      	bhi.n	80005b4 <choose+0x2c>
		{
			activeView = Canvas1;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <choose+0x7c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e01f      	b.n	80005f4 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 125 && tsChooseCanva.Y < 195)
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <choose+0x78>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <choose+0x4c>
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <choose+0x78>)
 80005be:	889b      	ldrh	r3, [r3, #4]
 80005c0:	2b7d      	cmp	r3, #125	; 0x7d
 80005c2:	d907      	bls.n	80005d4 <choose+0x4c>
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <choose+0x78>)
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	2bc2      	cmp	r3, #194	; 0xc2
 80005ca:	d803      	bhi.n	80005d4 <choose+0x4c>
		{
			activeView = Canvas2;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <choose+0x7c>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e00f      	b.n	80005f4 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <choose+0x78>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <choose+0x6c>
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <choose+0x78>)
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	2bcd      	cmp	r3, #205	; 0xcd
 80005e2:	d907      	bls.n	80005f4 <choose+0x6c>
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <choose+0x78>)
 80005e6:	889b      	ldrh	r3, [r3, #4]
 80005e8:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80005ec:	d802      	bhi.n	80005f4 <choose+0x6c>
		{
			activeView = Info;
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <choose+0x7c>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	701a      	strb	r2, [r3, #0]
	while(activeView == ChooseScreen)
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <choose+0x7c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d0c8      	beq.n	800058e <choose+0x6>
		}
	}
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20004b9c 	.word	0x20004b9c
 8000604:	20004b98 	.word	0x20004b98

08000608 <showInfoScreen>:

void showInfoScreen(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f002 fe7e 	bl	8003310 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000614:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000618:	f002 fd88 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f002 fd9c 	bl	800315c <BSP_LCD_SetBackColor>


	BSP_LCD_SetFont(&Font16);
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <showInfoScreen+0xc8>)
 8000626:	f002 fdb3 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,50, (uint8_t*)"App:",CENTER_MODE);
 800062a:	2301      	movs	r3, #1
 800062c:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <showInfoScreen+0xcc>)
 800062e:	2132      	movs	r1, #50	; 0x32
 8000630:	2000      	movs	r0, #0
 8000632:	f002 fed9 	bl	80033e8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 8000636:	4828      	ldr	r0, [pc, #160]	; (80006d8 <showInfoScreen+0xd0>)
 8000638:	f002 fdaa 	bl	8003190 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"App has autosave mode. When you",CENTER_MODE);
 800063c:	2301      	movs	r3, #1
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <showInfoScreen+0xd4>)
 8000640:	2144      	movs	r1, #68	; 0x44
 8000642:	2000      	movs	r0, #0
 8000644:	f002 fed0 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,82, (uint8_t*)"leave canvas and return,",CENTER_MODE);
 8000648:	2301      	movs	r3, #1
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <showInfoScreen+0xd8>)
 800064c:	2152      	movs	r1, #82	; 0x52
 800064e:	2000      	movs	r0, #0
 8000650:	f002 feca 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,96, (uint8_t*)"you will see your last drawing.",CENTER_MODE);
 8000654:	2301      	movs	r3, #1
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <showInfoScreen+0xdc>)
 8000658:	2160      	movs	r1, #96	; 0x60
 800065a:	2000      	movs	r0, #0
 800065c:	f002 fec4 	bl	80033e8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <showInfoScreen+0xc8>)
 8000662:	f002 fd95 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,125, (uint8_t*)"Authors:",CENTER_MODE);
 8000666:	2301      	movs	r3, #1
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <showInfoScreen+0xe0>)
 800066a:	217d      	movs	r1, #125	; 0x7d
 800066c:	2000      	movs	r0, #0
 800066e:	f002 febb 	bl	80033e8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 8000672:	4819      	ldr	r0, [pc, #100]	; (80006d8 <showInfoScreen+0xd0>)
 8000674:	f002 fd8c 	bl	8003190 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,142, (uint8_t*)"Anna Bernas",CENTER_MODE);
 8000678:	2301      	movs	r3, #1
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <showInfoScreen+0xe4>)
 800067c:	218e      	movs	r1, #142	; 0x8e
 800067e:	2000      	movs	r0, #0
 8000680:	f002 feb2 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,160, (uint8_t*)"Emilia Kalinska",CENTER_MODE);
 8000684:	2301      	movs	r3, #1
 8000686:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <showInfoScreen+0xe8>)
 8000688:	21a0      	movs	r1, #160	; 0xa0
 800068a:	2000      	movs	r0, #0
 800068c:	f002 feac 	bl	80033e8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8000690:	4818      	ldr	r0, [pc, #96]	; (80006f4 <showInfoScreen+0xec>)
 8000692:	f002 fd4b 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000696:	4817      	ldr	r0, [pc, #92]	; (80006f4 <showInfoScreen+0xec>)
 8000698:	f002 fd60 	bl	800315c <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(30, 205, 180, 70);
 800069c:	2346      	movs	r3, #70	; 0x46
 800069e:	22b4      	movs	r2, #180	; 0xb4
 80006a0:	21cd      	movs	r1, #205	; 0xcd
 80006a2:	201e      	movs	r0, #30
 80006a4:	f003 f8fc 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f002 fd3e 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80006b0:	4811      	ldr	r0, [pc, #68]	; (80006f8 <showInfoScreen+0xf0>)
 80006b2:	f002 fd6d 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"BACK", CENTER_MODE);
 80006b6:	2301      	movs	r3, #1
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <showInfoScreen+0xf4>)
 80006ba:	21e4      	movs	r1, #228	; 0xe4
 80006bc:	2000      	movs	r0, #0
 80006be:	f002 fe93 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295
 80006c6:	f002 fd49 	bl	800315c <BSP_LCD_SetBackColor>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000088 	.word	0x20000088
 80006d4:	0800c264 	.word	0x0800c264
 80006d8:	20000090 	.word	0x20000090
 80006dc:	0800c26c 	.word	0x0800c26c
 80006e0:	0800c28c 	.word	0x0800c28c
 80006e4:	0800c2a8 	.word	0x0800c2a8
 80006e8:	0800c2c8 	.word	0x0800c2c8
 80006ec:	0800c2d4 	.word	0x0800c2d4
 80006f0:	0800c2e0 	.word	0x0800c2e0
 80006f4:	ff800080 	.word	0xff800080
 80006f8:	20000080 	.word	0x20000080
 80006fc:	0800c2f0 	.word	0x0800c2f0

08000700 <serviceInfoScreen>:

void serviceInfoScreen(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	showInfoScreen();
 8000704:	f7ff ff80 	bl	8000608 <showInfoScreen>
	HAL_Delay(500);
 8000708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070c:	f003 feb8 	bl	8004480 <HAL_Delay>
	while(activeView == Info)
 8000710:	e012      	b.n	8000738 <serviceInfoScreen+0x38>
	{
		BSP_TS_GetState(&tsChooseCanva);
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <serviceInfoScreen+0x44>)
 8000714:	f003 fdc0 	bl	8004298 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <serviceInfoScreen+0x44>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <serviceInfoScreen+0x38>
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <serviceInfoScreen+0x44>)
 8000722:	889b      	ldrh	r3, [r3, #4]
 8000724:	2bcd      	cmp	r3, #205	; 0xcd
 8000726:	d907      	bls.n	8000738 <serviceInfoScreen+0x38>
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <serviceInfoScreen+0x44>)
 800072a:	889b      	ldrh	r3, [r3, #4]
 800072c:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000730:	d802      	bhi.n	8000738 <serviceInfoScreen+0x38>
		{
			activeView = ChooseScreen;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <serviceInfoScreen+0x48>)
 8000734:	2203      	movs	r2, #3
 8000736:	701a      	strb	r2, [r3, #0]
	while(activeView == Info)
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <serviceInfoScreen+0x48>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d0e8      	beq.n	8000712 <serviceInfoScreen+0x12>
		}
	}
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20004b9c 	.word	0x20004b9c
 8000748:	20004b98 	.word	0x20004b98

0800074c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_DMA2D_Init+0x34>)
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <MX_DMA2D_Init+0x38>)
 8000754:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_DMA2D_Init+0x34>)
 8000758:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800075c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_DMA2D_Init+0x34>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_DMA2D_Init+0x34>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_DMA2D_Init+0x34>)
 800076c:	f004 f948 	bl	8004a00 <HAL_DMA2D_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000776:	f000 fda5 	bl	80012c4 <Error_Handler>
  }

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20004ba4 	.word	0x20004ba4
 8000784:	4002b000 	.word	0x4002b000

08000788 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <HAL_DMA2D_MspInit+0x3c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d10d      	bne.n	80007b6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_DMA2D_MspInit+0x40>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <HAL_DMA2D_MspInit+0x40>)
 80007a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_DMA2D_MspInit+0x40>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	4002b000 	.word	0x4002b000
 80007c8:	40023800 	.word	0x40023800

080007cc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_FMC_Init+0x98>)
 80007e6:	4a20      	ldr	r2, [pc, #128]	; (8000868 <MX_FMC_Init+0x9c>)
 80007e8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_FMC_Init+0x98>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_FMC_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_FMC_Init+0x98>)
 80007f8:	2204      	movs	r2, #4
 80007fa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_FMC_Init+0x98>)
 80007fe:	2210      	movs	r2, #16
 8000800:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_FMC_Init+0x98>)
 8000804:	2240      	movs	r2, #64	; 0x40
 8000806:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_FMC_Init+0x98>)
 800080a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800080e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_FMC_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_FMC_Init+0x98>)
 8000818:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800081c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_FMC_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_FMC_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800082e:	2307      	movs	r3, #7
 8000830:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000832:	2304      	movs	r3, #4
 8000834:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000836:	2307      	movs	r3, #7
 8000838:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800083a:	2303      	movs	r3, #3
 800083c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_FMC_Init+0x98>)
 800084c:	f007 fa1e 	bl	8007c8c <HAL_SDRAM_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000856:	f000 fd35 	bl	80012c4 <Error_Handler>
  }

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20004be4 	.word	0x20004be4
 8000868:	a0000140 	.word	0xa0000140

0800086c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <HAL_FMC_MspInit+0x104>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d16f      	bne.n	8000968 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000888:	4b39      	ldr	r3, [pc, #228]	; (8000970 <HAL_FMC_MspInit+0x104>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b38      	ldr	r3, [pc, #224]	; (8000974 <HAL_FMC_MspInit+0x108>)
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <HAL_FMC_MspInit+0x108>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6393      	str	r3, [r2, #56]	; 0x38
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <HAL_FMC_MspInit+0x108>)
 80008a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80008aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008bc:	230c      	movs	r3, #12
 80008be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <HAL_FMC_MspInit+0x10c>)
 80008c6:	f004 fd39 	bl	800533c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ca:	2301      	movs	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008da:	230c      	movs	r3, #12
 80008dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4826      	ldr	r0, [pc, #152]	; (800097c <HAL_FMC_MspInit+0x110>)
 80008e4:	f004 fd2a 	bl	800533c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80008e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80008ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	481f      	ldr	r0, [pc, #124]	; (8000980 <HAL_FMC_MspInit+0x114>)
 8000904:	f004 fd1a 	bl	800533c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000908:	f64f 7380 	movw	r3, #65408	; 0xff80
 800090c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <HAL_FMC_MspInit+0x118>)
 8000924:	f004 fd0a 	bl	800533c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8000928:	f24c 7303 	movw	r3, #50947	; 0xc703
 800092c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <HAL_FMC_MspInit+0x11c>)
 8000944:	f004 fcfa 	bl	800533c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000958:	230c      	movs	r3, #12
 800095a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <HAL_FMC_MspInit+0x120>)
 8000962:	f004 fceb 	bl	800533c <HAL_GPIO_Init>
 8000966:	e000      	b.n	800096a <HAL_FMC_MspInit+0xfe>
    return;
 8000968:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000c4 	.word	0x200000c4
 8000974:	40023800 	.word	0x40023800
 8000978:	40021400 	.word	0x40021400
 800097c:	40020800 	.word	0x40020800
 8000980:	40021800 	.word	0x40021800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020400 	.word	0x40020400

08000990 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000998:	f7ff ff68 	bl	800086c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(mainTaskfunction, NULL, &mainTask_attributes);
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <MX_FREERTOS_Init+0x28>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_FREERTOS_Init+0x2c>)
 80009ae:	f008 ff31 	bl	8009814 <osThreadNew>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_FREERTOS_Init+0x30>)
 80009b6:	601a      	str	r2, [r3, #0]

  /* creation of painterTask */
  painterTaskHandle = osThreadNew(painterTaskFunction, NULL, &painterTask_attributes);
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <MX_FREERTOS_Init+0x34>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <MX_FREERTOS_Init+0x38>)
 80009be:	f008 ff29 	bl	8009814 <osThreadNew>
 80009c2:	4602      	mov	r2, r0
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_FREERTOS_Init+0x3c>)
 80009c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	0800c340 	.word	0x0800c340
 80009d0:	080009e5 	.word	0x080009e5
 80009d4:	20004c18 	.word	0x20004c18
 80009d8:	0800c364 	.word	0x0800c364
 80009dc:	08000ab9 	.word	0x08000ab9
 80009e0:	20004c1c 	.word	0x20004c1c

080009e4 <mainTaskfunction>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_mainTaskfunction */
void mainTaskfunction(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainTaskfunction */
  /* Infinite loop */
  for(;;)
  {

	  if(printer == 0)
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <mainTaskfunction+0xb8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14f      	bne.n	8000a94 <mainTaskfunction+0xb0>
	  {
		  switch(activeView)
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <mainTaskfunction+0xbc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d84d      	bhi.n	8000a98 <mainTaskfunction+0xb4>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <mainTaskfunction+0x20>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a4d 	.word	0x08000a4d
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	08000a85 	.word	0x08000a85
		  		  	  		{
		  		  	  		case Canvas1:
		  		  	  			canvas = '1';
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <mainTaskfunction+0xc0>)
 8000a16:	2231      	movs	r2, #49	; 0x31
 8000a18:	701a      	strb	r2, [r3, #0]
		  		  	  			clearWorkspace(canvas);
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <mainTaskfunction+0xc0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 ff50 	bl	80018c4 <clearWorkspace>
		  		  	  			loadPartOfSketch(10, 0x080C0000, 38, 38);
 8000a24:	2326      	movs	r3, #38	; 0x26
 8000a26:	2226      	movs	r2, #38	; 0x26
 8000a28:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <mainTaskfunction+0xc4>)
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f000 ffa6 	bl	800197c <loadPartOfSketch>
		  		  	  			loadPartOfSketch(11, 0x080E0000, 38, 179);
 8000a30:	23b3      	movs	r3, #179	; 0xb3
 8000a32:	2226      	movs	r2, #38	; 0x26
 8000a34:	491d      	ldr	r1, [pc, #116]	; (8000aac <mainTaskfunction+0xc8>)
 8000a36:	200b      	movs	r0, #11
 8000a38:	f000 ffa0 	bl	800197c <loadPartOfSketch>

		  		  	  			osDelay(500);
 8000a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a40:	f008 ff8e 	bl	8009960 <osDelay>
		  		  	  			printer = 1;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <mainTaskfunction+0xb8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
		  		  	  			break;
 8000a4a:	e026      	b.n	8000a9a <mainTaskfunction+0xb6>
		  		  	  		case Canvas2:
		  		  	  			canvas = '2';
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <mainTaskfunction+0xc0>)
 8000a4e:	2232      	movs	r2, #50	; 0x32
 8000a50:	701a      	strb	r2, [r3, #0]
		  		  	  			clearWorkspace(canvas);
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <mainTaskfunction+0xc0>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 ff34 	bl	80018c4 <clearWorkspace>
		  		  	  			loadPartOfSketch(8, 0x08080000, 38, 38);
 8000a5c:	2326      	movs	r3, #38	; 0x26
 8000a5e:	2226      	movs	r2, #38	; 0x26
 8000a60:	4913      	ldr	r1, [pc, #76]	; (8000ab0 <mainTaskfunction+0xcc>)
 8000a62:	2008      	movs	r0, #8
 8000a64:	f000 ff8a 	bl	800197c <loadPartOfSketch>
		  		  	  			loadPartOfSketch(9, 0x080A0000, 38, 179);
 8000a68:	23b3      	movs	r3, #179	; 0xb3
 8000a6a:	2226      	movs	r2, #38	; 0x26
 8000a6c:	4911      	ldr	r1, [pc, #68]	; (8000ab4 <mainTaskfunction+0xd0>)
 8000a6e:	2009      	movs	r0, #9
 8000a70:	f000 ff84 	bl	800197c <loadPartOfSketch>
		  		  	  			osDelay(500);
 8000a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a78:	f008 ff72 	bl	8009960 <osDelay>
		  		  	  			printer = 1;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <mainTaskfunction+0xb8>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
		  		  	  			break;
 8000a82:	e00a      	b.n	8000a9a <mainTaskfunction+0xb6>
		  		  	  		case ChooseScreen:
		  		  	  			showChooseCanvaInterface();
 8000a84:	f7ff fd34 	bl	80004f0 <showChooseCanvaInterface>
		  		  	  			choose();
 8000a88:	f7ff fd7e 	bl	8000588 <choose>
		  		  	  			break;
 8000a8c:	e005      	b.n	8000a9a <mainTaskfunction+0xb6>
		  		  	  		case Info:
		  		  	  			serviceInfoScreen();
 8000a8e:	f7ff fe37 	bl	8000700 <serviceInfoScreen>
		  		  	  			break;
 8000a92:	e002      	b.n	8000a9a <mainTaskfunction+0xb6>
		  		  	  		default:

		  		  	  			break;

		  		  	  		}
	  }
 8000a94:	bf00      	nop
 8000a96:	e7a9      	b.n	80009ec <mainTaskfunction+0x8>
		  		  	  			break;
 8000a98:	bf00      	nop
	  if(printer == 0)
 8000a9a:	e7a7      	b.n	80009ec <mainTaskfunction+0x8>
 8000a9c:	200000c8 	.word	0x200000c8
 8000aa0:	20004b98 	.word	0x20004b98
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	080c0000 	.word	0x080c0000
 8000aac:	080e0000 	.word	0x080e0000
 8000ab0:	08080000 	.word	0x08080000
 8000ab4:	080a0000 	.word	0x080a0000

08000ab8 <painterTaskFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_painterTaskFunction */
void painterTaskFunction(void *argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN painterTaskFunction */
  /* Infinite loop */
  for(;;)
  {
	  if(printer == 1) paintProcess(canvas);
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <painterTaskFunction+0x30>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d104      	bne.n	8000ad2 <painterTaskFunction+0x1a>
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <painterTaskFunction+0x34>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fc19 	bl	8001304 <paintProcess>
	  if(activeView == ChooseScreen) printer = 0;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <painterTaskFunction+0x38>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d102      	bne.n	8000ae0 <painterTaskFunction+0x28>
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <painterTaskFunction+0x30>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
	  osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f008 ff3d 	bl	8009960 <osDelay>
	  if(printer == 1) paintProcess(canvas);
 8000ae6:	e7eb      	b.n	8000ac0 <painterTaskFunction+0x8>
 8000ae8:	200000c8 	.word	0x200000c8
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20004b98 	.word	0x20004b98

08000af4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
 8000b0e:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b14:	f043 0320 	orr.w	r3, r3, #32
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0320 	and.w	r3, r3, #32
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a2d      	ldr	r2, [pc, #180]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DebugDiode_GPIO_Port, DebugDiode_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_GPIO_Init+0x12c>)
 8000bf2:	f004 fe57 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DebugDiode_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DebugDiode_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_GPIO_Init+0x12c>)
 8000c10:	f004 fb94 	bl	800533c <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40021800 	.word	0x40021800

08000c24 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <MX_I2C3_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <MX_I2C3_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c62:	f004 fe39 	bl	80058d8 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 fb2a 	bl	80012c4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c74:	f005 fe1d 	bl	80068b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 fb21 	bl	80012c4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_I2C3_Init+0x74>)
 8000c86:	f005 fe50 	bl	800692a <HAL_I2CEx_ConfigDigitalFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 fb18 	bl	80012c4 <Error_Handler>
  }

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20004c28 	.word	0x20004c28
 8000c9c:	40005c00 	.word	0x40005c00
 8000ca0:	000186a0 	.word	0x000186a0

08000ca4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <HAL_I2C_MspInit+0xc4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d14b      	bne.n	8000d5e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d10:	2304      	movs	r3, #4
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4815      	ldr	r0, [pc, #84]	; (8000d70 <HAL_I2C_MspInit+0xcc>)
 8000d1c:	f004 fb0e 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d32:	2304      	movs	r3, #4
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <HAL_I2C_MspInit+0xd0>)
 8000d3e:	f004 fafd 	bl	800533c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40005c00 	.word	0x40005c00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_I2C_MspDeInit+0x3c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10f      	bne.n	8000daa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_I2C_MspDeInit+0x40>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_I2C_MspDeInit+0x40>)
 8000d90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9a:	4808      	ldr	r0, [pc, #32]	; (8000dbc <HAL_I2C_MspDeInit+0x44>)
 8000d9c:	f004 fc78 	bl	8005690 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_I2C_MspDeInit+0x48>)
 8000da6:	f004 fc73 	bl	8005690 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005c00 	.word	0x40005c00
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09a      	sub	sp, #104	; 0x68
 8000dc8:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00b fa21 	bl	800c21a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2234      	movs	r2, #52	; 0x34
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00b fa1b 	bl	800c21a <memset>

  hltdc.Instance = LTDC;
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000de6:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <MX_LTDC_Init+0x160>)
 8000de8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000df0:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000df6:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dfc:	4b48      	ldr	r3, [pc, #288]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000e02:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e10:	220e      	movs	r2, #14
 8000e12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e16:	2205      	movs	r2, #5
 8000e18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8000e1a:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e1c:	22fe      	movs	r2, #254	; 0xfe
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e22:	f240 1245 	movw	r2, #325	; 0x145
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e32:	f240 1247 	movw	r2, #327	; 0x147
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000e52:	f005 fda9 	bl	80069a8 <HAL_LTDC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8000e5c:	f000 fa32 	bl	80012c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e70:	2300      	movs	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e80:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e82:	2305      	movs	r3, #5
 8000e84:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481c      	ldr	r0, [pc, #112]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000eae:	f005 fe4b 	bl	8006b48 <HAL_LTDC_ConfigLayer>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000eb8:	f000 fa04 	bl	80012c4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000edc:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_LTDC_Init+0x15c>)
 8000f08:	f005 fe1e 	bl	8006b48 <HAL_LTDC_ConfigLayer>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8000f12:	f000 f9d7 	bl	80012c4 <Error_Handler>
  }

}
 8000f16:	bf00      	nop
 8000f18:	3768      	adds	r7, #104	; 0x68
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20004c7c 	.word	0x20004c7c
 8000f24:	40016800 	.word	0x40016800

08000f28 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a77      	ldr	r2, [pc, #476]	; (8001124 <HAL_LTDC_MspInit+0x1fc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	f040 80e8 	bne.w	800111c <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
 8000f50:	4b75      	ldr	r3, [pc, #468]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	4a74      	ldr	r2, [pc, #464]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5c:	4b72      	ldr	r3, [pc, #456]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f64:	623b      	str	r3, [r7, #32]
 8000f66:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	4b6e      	ldr	r3, [pc, #440]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a6d      	ldr	r2, [pc, #436]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	4b67      	ldr	r3, [pc, #412]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a66      	ldr	r2, [pc, #408]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b64      	ldr	r3, [pc, #400]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	4b60      	ldr	r3, [pc, #384]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	4b59      	ldr	r3, [pc, #356]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b56      	ldr	r3, [pc, #344]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4a51      	ldr	r2, [pc, #324]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b48      	ldr	r3, [pc, #288]	; (8001128 <HAL_LTDC_MspInit+0x200>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001022:	230e      	movs	r3, #14
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	483f      	ldr	r0, [pc, #252]	; (800112c <HAL_LTDC_MspInit+0x204>)
 800102e:	f004 f985 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8001032:	f641 0358 	movw	r3, #6232	; 0x1858
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001044:	230e      	movs	r3, #14
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4838      	ldr	r0, [pc, #224]	; (8001130 <HAL_LTDC_MspInit+0x208>)
 8001050:	f004 f974 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001054:	2303      	movs	r3, #3
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001064:	2309      	movs	r3, #9
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4831      	ldr	r0, [pc, #196]	; (8001134 <HAL_LTDC_MspInit+0x20c>)
 8001070:	f004 f964 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001074:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001086:	230e      	movs	r3, #14
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4828      	ldr	r0, [pc, #160]	; (8001134 <HAL_LTDC_MspInit+0x20c>)
 8001092:	f004 f953 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001096:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a8:	230e      	movs	r3, #14
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <HAL_LTDC_MspInit+0x210>)
 80010b4:	f004 f942 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80010b8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ca:	230e      	movs	r3, #14
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <HAL_LTDC_MspInit+0x214>)
 80010d6:	f004 f931 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80010da:	2348      	movs	r3, #72	; 0x48
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ea:	230e      	movs	r3, #14
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4812      	ldr	r0, [pc, #72]	; (8001140 <HAL_LTDC_MspInit+0x218>)
 80010f6:	f004 f921 	bl	800533c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80010fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800110c:	2309      	movs	r3, #9
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <HAL_LTDC_MspInit+0x210>)
 8001118:	f004 f910 	bl	800533c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	; 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40016800 	.word	0x40016800
 8001128:	40023800 	.word	0x40023800
 800112c:	40021400 	.word	0x40021400
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40021800 	.word	0x40021800
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f003 f958 	bl	80043fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f81e 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f7ff fcd0 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001154:	f7ff fafa 	bl	800074c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001158:	f7ff fb38 	bl	80007cc <MX_FMC_Init>
  MX_I2C3_Init();
 800115c:	f7ff fd62 	bl	8000c24 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001160:	f7ff fe30 	bl	8000dc4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001164:	f000 fd58 	bl	8001c18 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001168:	f000 feb2 	bl	8001ed0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initLCD();
 800116c:	f000 fc50 	bl	8001a10 <initLCD>
	printHelloScreen();
 8001170:	f000 fc5e 	bl	8001a30 <printHelloScreen>
	configTS();
 8001174:	f000 f8ad 	bl	80012d2 <configTS>
	showChooseCanvaInterface();
 8001178:	f7ff f9ba 	bl	80004f0 <showChooseCanvaInterface>
	//showPaintInterface();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800117c:	f008 fae0 	bl	8009740 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001180:	f7ff fc10 	bl	80009a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001184:	f008 fb10 	bl	80097a8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001188:	e7fe      	b.n	8001188 <main+0x44>
	...

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0a0      	sub	sp, #128	; 0x80
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00b f83d 	bl	800c21a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00b f82e 	bl	800c21a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <SystemClock_Config+0x10c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <SystemClock_Config+0x10c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <SystemClock_Config+0x10c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <SystemClock_Config+0x110>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <SystemClock_Config+0x110>)
 80011e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <SystemClock_Config+0x110>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f6:	2301      	movs	r3, #1
 80011f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	2302      	movs	r3, #2
 8001202:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001204:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001208:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800120a:	2304      	movs	r3, #4
 800120c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800120e:	23b4      	movs	r3, #180	; 0xb4
 8001210:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800121e:	4618      	mov	r0, r3
 8001220:	f005 fee2 	bl	8006fe8 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800122a:	f000 f84b 	bl	80012c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800122e:	f005 fe8b 	bl	8006f48 <HAL_PWREx_EnableOverDrive>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001238:	f000 f844 	bl	80012c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001248:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001258:	2105      	movs	r1, #5
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f934 	bl	80074c8 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001266:	f000 f82d 	bl	80012c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800126a:	2308      	movs	r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800126e:	23c0      	movs	r3, #192	; 0xc0
 8001270:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001272:	2304      	movs	r3, #4
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fb45 	bl	8007910 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800128c:	f000 f81a 	bl	80012c4 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3780      	adds	r7, #128	; 0x80
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f003 f8c5 	bl	8004440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40001000 	.word	0x40001000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <configTS>:

#include "paint.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void configTS(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012d6:	f04f 30ff 	mov.w	r0, #4294967295
 80012da:	f002 f819 	bl	8003310 <BSP_LCD_Clear>

	if(BSP_TS_Init(1000, 1000) == TS_OK)
 80012de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e6:	f002 ff9d 	bl	8004224 <BSP_TS_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <configTS+0x2e>
	{
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f002 f80c 	bl	8003310 <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012fc:	f001 ff16 	bl	800312c <BSP_LCD_SetTextColor>
	}
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <paintProcess>:
uint16_t LastThicknessMArkdownY = 3;

uint32_t buff[28482];

void paintProcess(uint8_t canvas)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]

	  if(activeView == Canvas1 || activeView == Canvas2)
 800130e:	4ba4      	ldr	r3, [pc, #656]	; (80015a0 <paintProcess+0x29c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <paintProcess+0x1c>
 8001316:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <paintProcess+0x29c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	f040 8186 	bne.w	800162c <paintProcess+0x328>
	  {
		  BSP_TS_GetState(&ts_struct);
 8001320:	48a0      	ldr	r0, [pc, #640]	; (80015a4 <paintProcess+0x2a0>)
 8001322:	f002 ffb9 	bl	8004298 <BSP_TS_GetState>
		  	  		if(ts_struct.TouchDetected && ts_struct.X < 240-LastRadius)
 8001326:	4b9f      	ldr	r3, [pc, #636]	; (80015a4 <paintProcess+0x2a0>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 817e 	beq.w	800162c <paintProcess+0x328>
 8001330:	4b9c      	ldr	r3, [pc, #624]	; (80015a4 <paintProcess+0x2a0>)
 8001332:	885b      	ldrh	r3, [r3, #2]
 8001334:	461a      	mov	r2, r3
 8001336:	4b9c      	ldr	r3, [pc, #624]	; (80015a8 <paintProcess+0x2a4>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800133e:	429a      	cmp	r2, r3
 8001340:	f280 8174 	bge.w	800162c <paintProcess+0x328>
		  	  		{
		  	  			if(ts_struct.TouchDetected && ts_struct.X > 37 + LastRadius && ts_struct.Y > 37+LastRadius)
 8001344:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <paintProcess+0x2a0>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01e      	beq.n	800138a <paintProcess+0x86>
 800134c:	4b95      	ldr	r3, [pc, #596]	; (80015a4 <paintProcess+0x2a0>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	461a      	mov	r2, r3
 8001352:	4b95      	ldr	r3, [pc, #596]	; (80015a8 <paintProcess+0x2a4>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	3325      	adds	r3, #37	; 0x25
 8001358:	429a      	cmp	r2, r3
 800135a:	dd16      	ble.n	800138a <paintProcess+0x86>
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <paintProcess+0x2a0>)
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	461a      	mov	r2, r3
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <paintProcess+0x2a4>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	3325      	adds	r3, #37	; 0x25
 8001368:	429a      	cmp	r2, r3
 800136a:	dd0e      	ble.n	800138a <paintProcess+0x86>
		  	  			{
		  	  				BSP_LCD_SetTextColor(LastColor);
 800136c:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <paintProcess+0x2a8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fedb 	bl	800312c <BSP_LCD_SetTextColor>
		  	  				BSP_LCD_FillCircle(ts_struct.X, ts_struct.Y, LastRadius);
 8001376:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <paintProcess+0x2a0>)
 8001378:	8858      	ldrh	r0, [r3, #2]
 800137a:	4b8a      	ldr	r3, [pc, #552]	; (80015a4 <paintProcess+0x2a0>)
 800137c:	8899      	ldrh	r1, [r3, #4]
 800137e:	4b8a      	ldr	r3, [pc, #552]	; (80015a8 <paintProcess+0x2a4>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f002 fae6 	bl	8003954 <BSP_LCD_FillCircle>
 8001388:	e150      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.X > 164) && (ts_struct.Y < 35) && (ts_struct.X <238))
 800138a:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <paintProcess+0x2a0>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03f      	beq.n	8001412 <paintProcess+0x10e>
 8001392:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <paintProcess+0x2a0>)
 8001394:	885b      	ldrh	r3, [r3, #2]
 8001396:	2ba4      	cmp	r3, #164	; 0xa4
 8001398:	d93b      	bls.n	8001412 <paintProcess+0x10e>
 800139a:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <paintProcess+0x2a0>)
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	2b22      	cmp	r3, #34	; 0x22
 80013a0:	d837      	bhi.n	8001412 <paintProcess+0x10e>
 80013a2:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <paintProcess+0x2a0>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	2bed      	cmp	r3, #237	; 0xed
 80013a8:	d833      	bhi.n	8001412 <paintProcess+0x10e>
		  	  			{
		  	  				LastColor = LCD_COLOR_BLACK;
 80013aa:	4b80      	ldr	r3, [pc, #512]	; (80015ac <paintProcess+0x2a8>)
 80013ac:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80013b0:	601a      	str	r2, [r3, #0]
		  	  				LastRadius = 5;
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <paintProcess+0x2a4>)
 80013b4:	2205      	movs	r2, #5
 80013b6:	801a      	strh	r2, [r3, #0]
		  	  				LastColorMarkdownX = 3;
 80013b8:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <paintProcess+0x2ac>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	801a      	strh	r2, [r3, #0]
		  	  				LastColorMArkdownY = 96;
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <paintProcess+0x2b0>)
 80013c0:	2260      	movs	r2, #96	; 0x60
 80013c2:	801a      	strh	r2, [r3, #0]
		  	  				LastThicknessMarkdownX = 53;
 80013c4:	4b7c      	ldr	r3, [pc, #496]	; (80015b8 <paintProcess+0x2b4>)
 80013c6:	2235      	movs	r2, #53	; 0x35
 80013c8:	801a      	strh	r2, [r3, #0]
		  	  				LastThicknessMArkdownY = 3;
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <paintProcess+0x2b8>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	801a      	strh	r2, [r3, #0]


		  	  				if(activeView == Canvas1)
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <paintProcess+0x29c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10c      	bne.n	80013f2 <paintProcess+0xee>
		  	  				{
		  	  					savePartOfSketch(10, 0x080C0000, 38, 38);
 80013d8:	2326      	movs	r3, #38	; 0x26
 80013da:	2226      	movs	r2, #38	; 0x26
 80013dc:	4978      	ldr	r1, [pc, #480]	; (80015c0 <paintProcess+0x2bc>)
 80013de:	200a      	movs	r0, #10
 80013e0:	f000 fa88 	bl	80018f4 <savePartOfSketch>
		  	  					savePartOfSketch(11, 0x080E0000, 38, 179);
 80013e4:	23b3      	movs	r3, #179	; 0xb3
 80013e6:	2226      	movs	r2, #38	; 0x26
 80013e8:	4976      	ldr	r1, [pc, #472]	; (80015c4 <paintProcess+0x2c0>)
 80013ea:	200b      	movs	r0, #11
 80013ec:	f000 fa82 	bl	80018f4 <savePartOfSketch>
 80013f0:	e00b      	b.n	800140a <paintProcess+0x106>
		  	  				}
		  	  				else
		  	  				{
		  	  					savePartOfSketch(8, 0x08080000, 38, 38);
 80013f2:	2326      	movs	r3, #38	; 0x26
 80013f4:	2226      	movs	r2, #38	; 0x26
 80013f6:	4974      	ldr	r1, [pc, #464]	; (80015c8 <paintProcess+0x2c4>)
 80013f8:	2008      	movs	r0, #8
 80013fa:	f000 fa7b 	bl	80018f4 <savePartOfSketch>
		  	  					savePartOfSketch(9, 0x080A0000, 38, 179);
 80013fe:	23b3      	movs	r3, #179	; 0xb3
 8001400:	2226      	movs	r2, #38	; 0x26
 8001402:	4972      	ldr	r1, [pc, #456]	; (80015cc <paintProcess+0x2c8>)
 8001404:	2009      	movs	r0, #9
 8001406:	f000 fa75 	bl	80018f4 <savePartOfSketch>
		  	  				}

		  	  				activeView = ChooseScreen;
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <paintProcess+0x29c>)
 800140c:	2203      	movs	r2, #3
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e10c      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 22) && (ts_struct.Y < 52) && (ts_struct.X <35))
 8001412:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <paintProcess+0x2a0>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d010      	beq.n	800143c <paintProcess+0x138>
 800141a:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <paintProcess+0x2a0>)
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	2b16      	cmp	r3, #22
 8001420:	d90c      	bls.n	800143c <paintProcess+0x138>
 8001422:	4b60      	ldr	r3, [pc, #384]	; (80015a4 <paintProcess+0x2a0>)
 8001424:	889b      	ldrh	r3, [r3, #4]
 8001426:	2b33      	cmp	r3, #51	; 0x33
 8001428:	d808      	bhi.n	800143c <paintProcess+0x138>
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <paintProcess+0x2a0>)
 800142c:	885b      	ldrh	r3, [r3, #2]
 800142e:	2b22      	cmp	r3, #34	; 0x22
 8001430:	d804      	bhi.n	800143c <paintProcess+0x138>
		  	  			{
		  	  				clearWorkspace(canvas);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fa45 	bl	80018c4 <clearWorkspace>
 800143a:	e0f7      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 60) && (ts_struct.Y < 90))
 800143c:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <paintProcess+0x2a0>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d011      	beq.n	8001468 <paintProcess+0x164>
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <paintProcess+0x2a0>)
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	2b3c      	cmp	r3, #60	; 0x3c
 800144a:	d90d      	bls.n	8001468 <paintProcess+0x164>
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <paintProcess+0x2a0>)
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	2b59      	cmp	r3, #89	; 0x59
 8001452:	d809      	bhi.n	8001468 <paintProcess+0x164>
		  	  			{
		  	  				markdown(3, 58, COLOR);
 8001454:	2200      	movs	r2, #0
 8001456:	213a      	movs	r1, #58	; 0x3a
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f9ff 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_WHITE;
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <paintProcess+0x2a8>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e0e1      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 98) && (ts_struct.Y < 128))
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <paintProcess+0x2a0>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d011      	beq.n	8001494 <paintProcess+0x190>
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <paintProcess+0x2a0>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	2b62      	cmp	r3, #98	; 0x62
 8001476:	d90d      	bls.n	8001494 <paintProcess+0x190>
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <paintProcess+0x2a0>)
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	2b7f      	cmp	r3, #127	; 0x7f
 800147e:	d809      	bhi.n	8001494 <paintProcess+0x190>
		  	  			{
		  	  				markdown(3, 96, COLOR);
 8001480:	2200      	movs	r2, #0
 8001482:	2160      	movs	r1, #96	; 0x60
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f9e9 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_BLACK;
 800148a:	4b48      	ldr	r3, [pc, #288]	; (80015ac <paintProcess+0x2a8>)
 800148c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e0cb      	b.n	800162c <paintProcess+0x328>

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 136) && (ts_struct.Y < 166))
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <paintProcess+0x2a0>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d011      	beq.n	80014c0 <paintProcess+0x1bc>
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <paintProcess+0x2a0>)
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	2b88      	cmp	r3, #136	; 0x88
 80014a2:	d90d      	bls.n	80014c0 <paintProcess+0x1bc>
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <paintProcess+0x2a0>)
 80014a6:	889b      	ldrh	r3, [r3, #4]
 80014a8:	2ba5      	cmp	r3, #165	; 0xa5
 80014aa:	d809      	bhi.n	80014c0 <paintProcess+0x1bc>
		  	  			{
		  	  				markdown(3, 134, COLOR);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2186      	movs	r1, #134	; 0x86
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f9d3 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_YELLOW;
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <paintProcess+0x2a8>)
 80014b8:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e0b5      	b.n	800162c <paintProcess+0x328>

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 174) && (ts_struct.Y < 204))
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <paintProcess+0x2a0>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d010      	beq.n	80014ea <paintProcess+0x1e6>
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <paintProcess+0x2a0>)
 80014ca:	889b      	ldrh	r3, [r3, #4]
 80014cc:	2bae      	cmp	r3, #174	; 0xae
 80014ce:	d90c      	bls.n	80014ea <paintProcess+0x1e6>
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <paintProcess+0x2a0>)
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	2bcb      	cmp	r3, #203	; 0xcb
 80014d6:	d808      	bhi.n	80014ea <paintProcess+0x1e6>
		  	  			{
		  	  				markdown(3, 172, COLOR);
 80014d8:	2200      	movs	r2, #0
 80014da:	21ac      	movs	r1, #172	; 0xac
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f9bd 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_RED;
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <paintProcess+0x2a8>)
 80014e4:	4a3a      	ldr	r2, [pc, #232]	; (80015d0 <paintProcess+0x2cc>)
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e0a0      	b.n	800162c <paintProcess+0x328>

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 212) && (ts_struct.Y < 242))
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <paintProcess+0x2a0>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d010      	beq.n	8001514 <paintProcess+0x210>
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <paintProcess+0x2a0>)
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	2bd4      	cmp	r3, #212	; 0xd4
 80014f8:	d90c      	bls.n	8001514 <paintProcess+0x210>
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <paintProcess+0x2a0>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	2bf1      	cmp	r3, #241	; 0xf1
 8001500:	d808      	bhi.n	8001514 <paintProcess+0x210>
		  	  			{
		  	  				markdown(3, 210, COLOR);
 8001502:	2200      	movs	r2, #0
 8001504:	21d2      	movs	r1, #210	; 0xd2
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f9a8 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_BLUE;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <paintProcess+0x2a8>)
 800150e:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <paintProcess+0x2d0>)
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e08b      	b.n	800162c <paintProcess+0x328>

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 250) && (ts_struct.Y < 280))
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <paintProcess+0x2a0>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d012      	beq.n	8001542 <paintProcess+0x23e>
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <paintProcess+0x2a0>)
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	2bfa      	cmp	r3, #250	; 0xfa
 8001522:	d90e      	bls.n	8001542 <paintProcess+0x23e>
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <paintProcess+0x2a0>)
 8001526:	889b      	ldrh	r3, [r3, #4]
 8001528:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800152c:	d209      	bcs.n	8001542 <paintProcess+0x23e>
		  	  			{
		  	  				markdown(3, 248, COLOR);
 800152e:	2200      	movs	r2, #0
 8001530:	21f8      	movs	r1, #248	; 0xf8
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f992 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_GREEN;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <paintProcess+0x2a8>)
 800153a:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e074      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.Y > 288) && (ts_struct.Y < 318))
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <paintProcess+0x2a0>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d014      	beq.n	8001574 <paintProcess+0x270>
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <paintProcess+0x2a0>)
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001552:	d90f      	bls.n	8001574 <paintProcess+0x270>
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <paintProcess+0x2a0>)
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800155c:	d20a      	bcs.n	8001574 <paintProcess+0x270>
		  	  			{
		  	  				markdown(3, 286, COLOR);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f979 	bl	800185c <markdown>
		  	  				LastColor = LCD_COLOR_MAGENTA;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <paintProcess+0x2a8>)
 800156c:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e05b      	b.n	800162c <paintProcess+0x328>

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.X > 55) && (ts_struct.X < 85))
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <paintProcess+0x2a0>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d02d      	beq.n	80015d8 <paintProcess+0x2d4>
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <paintProcess+0x2a0>)
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	2b37      	cmp	r3, #55	; 0x37
 8001582:	d929      	bls.n	80015d8 <paintProcess+0x2d4>
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <paintProcess+0x2a0>)
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	2b54      	cmp	r3, #84	; 0x54
 800158a:	d825      	bhi.n	80015d8 <paintProcess+0x2d4>
		  	  			{
		  	  				LastRadius = 5;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <paintProcess+0x2a4>)
 800158e:	2205      	movs	r2, #5
 8001590:	801a      	strh	r2, [r3, #0]
		  	  				markdown(53, 3, THICKNESS);
 8001592:	2201      	movs	r2, #1
 8001594:	2103      	movs	r1, #3
 8001596:	2035      	movs	r0, #53	; 0x35
 8001598:	f000 f960 	bl	800185c <markdown>
 800159c:	e046      	b.n	800162c <paintProcess+0x328>
 800159e:	bf00      	nop
 80015a0:	20004b98 	.word	0x20004b98
 80015a4:	20004c20 	.word	0x20004c20
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000004 	.word	0x20000004
 80015b0:	2000000a 	.word	0x2000000a
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	2000000e 	.word	0x2000000e
 80015bc:	20000010 	.word	0x20000010
 80015c0:	080c0000 	.word	0x080c0000
 80015c4:	080e0000 	.word	0x080e0000
 80015c8:	08080000 	.word	0x08080000
 80015cc:	080a0000 	.word	0x080a0000
 80015d0:	ffff0000 	.word	0xffff0000
 80015d4:	ff0000ff 	.word	0xff0000ff

		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.X > 93) && (ts_struct.X < 123))
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <paintProcess+0x330>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d010      	beq.n	8001602 <paintProcess+0x2fe>
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <paintProcess+0x330>)
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	2b5d      	cmp	r3, #93	; 0x5d
 80015e6:	d90c      	bls.n	8001602 <paintProcess+0x2fe>
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <paintProcess+0x330>)
 80015ea:	885b      	ldrh	r3, [r3, #2]
 80015ec:	2b7a      	cmp	r3, #122	; 0x7a
 80015ee:	d808      	bhi.n	8001602 <paintProcess+0x2fe>
		  	  			{
		  	  				LastRadius = 10;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <paintProcess+0x334>)
 80015f2:	220a      	movs	r2, #10
 80015f4:	801a      	strh	r2, [r3, #0]
		  	  				markdown(91, 3, THICKNESS);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2103      	movs	r1, #3
 80015fa:	205b      	movs	r0, #91	; 0x5b
 80015fc:	f000 f92e 	bl	800185c <markdown>
 8001600:	e014      	b.n	800162c <paintProcess+0x328>
		  	  			}
		  	  			else if(ts_struct.TouchDetected && (ts_struct.X > 131) && (ts_struct.X < 161))
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <paintProcess+0x330>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d010      	beq.n	800162c <paintProcess+0x328>
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <paintProcess+0x330>)
 800160c:	885b      	ldrh	r3, [r3, #2]
 800160e:	2b83      	cmp	r3, #131	; 0x83
 8001610:	d90c      	bls.n	800162c <paintProcess+0x328>
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <paintProcess+0x330>)
 8001614:	885b      	ldrh	r3, [r3, #2]
 8001616:	2ba0      	cmp	r3, #160	; 0xa0
 8001618:	d808      	bhi.n	800162c <paintProcess+0x328>
		  	  			{
		  	  				LastRadius = 15;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <paintProcess+0x334>)
 800161c:	220f      	movs	r2, #15
 800161e:	801a      	strh	r2, [r3, #0]
		  	  				markdown(129, 3, THICKNESS);
 8001620:	2201      	movs	r2, #1
 8001622:	2103      	movs	r1, #3
 8001624:	2081      	movs	r0, #129	; 0x81
 8001626:	f000 f919 	bl	800185c <markdown>
		  	  			}
		  	  		}
	  }
}
 800162a:	e7ff      	b.n	800162c <paintProcess+0x328>
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20004c20 	.word	0x20004c20
 8001638:	20000008 	.word	0x20000008

0800163c <showPaintInterface>:

void showPaintInterface(uint8_t canvas)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001646:	f04f 30ff 	mov.w	r0, #4294967295
 800164a:	f001 fe61 	bl	8003310 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800164e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001652:	f001 fd6b 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8001656:	4852      	ldr	r0, [pc, #328]	; (80017a0 <showPaintInterface+0x164>)
 8001658:	f001 fd9a 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f001 fd7c 	bl	800315c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(9, 5, '#');
 8001664:	2223      	movs	r2, #35	; 0x23
 8001666:	2105      	movs	r1, #5
 8001668:	2009      	movs	r0, #9
 800166a:	f001 fe79 	bl	8003360 <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(20,5, canvas);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	461a      	mov	r2, r3
 8001672:	2105      	movs	r1, #5
 8001674:	2014      	movs	r0, #20
 8001676:	f001 fe73 	bl	8003360 <BSP_LCD_DisplayChar>

	BSP_LCD_DrawRect(55, 5, 30, 30);
 800167a:	231e      	movs	r3, #30
 800167c:	221e      	movs	r2, #30
 800167e:	2105      	movs	r1, #5
 8001680:	2037      	movs	r0, #55	; 0x37
 8001682:	f001 ffeb 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(93, 5, 30, 30);
 8001686:	231e      	movs	r3, #30
 8001688:	221e      	movs	r2, #30
 800168a:	2105      	movs	r1, #5
 800168c:	205d      	movs	r0, #93	; 0x5d
 800168e:	f001 ffe5 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(131, 5, 30, 30);
 8001692:	231e      	movs	r3, #30
 8001694:	221e      	movs	r2, #30
 8001696:	2105      	movs	r1, #5
 8001698:	2083      	movs	r0, #131	; 0x83
 800169a:	f001 ffdf 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_FillCircle(70, 20, 5);
 800169e:	2205      	movs	r2, #5
 80016a0:	2114      	movs	r1, #20
 80016a2:	2046      	movs	r0, #70	; 0x46
 80016a4:	f002 f956 	bl	8003954 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(108, 20, 10);
 80016a8:	220a      	movs	r2, #10
 80016aa:	2114      	movs	r1, #20
 80016ac:	206c      	movs	r0, #108	; 0x6c
 80016ae:	f002 f951 	bl	8003954 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(146, 20, 15);
 80016b2:	220f      	movs	r2, #15
 80016b4:	2114      	movs	r1, #20
 80016b6:	2092      	movs	r0, #146	; 0x92
 80016b8:	f002 f94c 	bl	8003954 <BSP_LCD_FillCircle>

	BSP_LCD_DrawRect(164, 5, 74, 30);
 80016bc:	231e      	movs	r3, #30
 80016be:	224a      	movs	r2, #74	; 0x4a
 80016c0:	2105      	movs	r1, #5
 80016c2:	20a4      	movs	r0, #164	; 0xa4
 80016c4:	f001 ffca 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f001 fd46 	bl	800315c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(180, 15, (uint8_t *)"EXIT",LEFT_MODE);
 80016d0:	2303      	movs	r3, #3
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <showPaintInterface+0x168>)
 80016d4:	210f      	movs	r1, #15
 80016d6:	20b4      	movs	r0, #180	; 0xb4
 80016d8:	f001 fe86 	bl	80033e8 <BSP_LCD_DisplayStringAt>


	BSP_LCD_DrawRect(5, 22, 30, 30);
 80016dc:	231e      	movs	r3, #30
 80016de:	221e      	movs	r2, #30
 80016e0:	2116      	movs	r1, #22
 80016e2:	2005      	movs	r0, #5
 80016e4:	f001 ffba 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DisplayChar(15, 30, 'C');
 80016e8:	2243      	movs	r2, #67	; 0x43
 80016ea:	211e      	movs	r1, #30
 80016ec:	200f      	movs	r0, #15
 80016ee:	f001 fe37 	bl	8003360 <BSP_LCD_DisplayChar>

	BSP_LCD_DrawRect(5, 60, 30, 30);
 80016f2:	231e      	movs	r3, #30
 80016f4:	221e      	movs	r2, #30
 80016f6:	213c      	movs	r1, #60	; 0x3c
 80016f8:	2005      	movs	r0, #5
 80016fa:	f001 ffaf 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DisplayChar(15, 68, 'R');
 80016fe:	2252      	movs	r2, #82	; 0x52
 8001700:	2144      	movs	r1, #68	; 0x44
 8001702:	200f      	movs	r0, #15
 8001704:	f001 fe2c 	bl	8003360 <BSP_LCD_DisplayChar>
	BSP_LCD_FillRect(5, 98, 30, 30);
 8001708:	231e      	movs	r3, #30
 800170a:	221e      	movs	r2, #30
 800170c:	2162      	movs	r1, #98	; 0x62
 800170e:	2005      	movs	r0, #5
 8001710:	f002 f8c6 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001714:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001718:	f001 fd08 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 136, 30, 30);
 800171c:	231e      	movs	r3, #30
 800171e:	221e      	movs	r2, #30
 8001720:	2188      	movs	r1, #136	; 0x88
 8001722:	2005      	movs	r0, #5
 8001724:	f002 f8bc 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <showPaintInterface+0x16c>)
 800172a:	f001 fcff 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 174, 30, 30);
 800172e:	231e      	movs	r3, #30
 8001730:	221e      	movs	r2, #30
 8001732:	21ae      	movs	r1, #174	; 0xae
 8001734:	2005      	movs	r0, #5
 8001736:	f002 f8b3 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <showPaintInterface+0x170>)
 800173c:	f001 fcf6 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5,212 , 30, 30);
 8001740:	231e      	movs	r3, #30
 8001742:	221e      	movs	r2, #30
 8001744:	21d4      	movs	r1, #212	; 0xd4
 8001746:	2005      	movs	r0, #5
 8001748:	f002 f8aa 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800174c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001750:	f001 fcec 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 250, 30, 30);
 8001754:	231e      	movs	r3, #30
 8001756:	221e      	movs	r2, #30
 8001758:	21fa      	movs	r1, #250	; 0xfa
 800175a:	2005      	movs	r0, #5
 800175c:	f002 f8a0 	bl	80038a0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001760:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001764:	f001 fce2 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 288, 30, 30);
 8001768:	231e      	movs	r3, #30
 800176a:	221e      	movs	r2, #30
 800176c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001770:	2005      	movs	r0, #5
 8001772:	f002 f895 	bl	80038a0 <BSP_LCD_FillRect>

	markdown(LastColorMarkdownX, LastColorMArkdownY, COLOR);
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <showPaintInterface+0x174>)
 8001778:	8818      	ldrh	r0, [r3, #0]
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <showPaintInterface+0x178>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	4619      	mov	r1, r3
 8001782:	f000 f86b 	bl	800185c <markdown>
	markdown(LastThicknessMarkdownX, LastThicknessMArkdownY, THICKNESS);
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <showPaintInterface+0x17c>)
 8001788:	8818      	ldrh	r0, [r3, #0]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <showPaintInterface+0x180>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	4619      	mov	r1, r3
 8001792:	f000 f863 	bl	800185c <markdown>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000088 	.word	0x20000088
 80017a4:	0800c310 	.word	0x0800c310
 80017a8:	ffff0000 	.word	0xffff0000
 80017ac:	ff0000ff 	.word	0xff0000ff
 80017b0:	2000000a 	.word	0x2000000a
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	2000000e 	.word	0x2000000e
 80017bc:	20000010 	.word	0x20000010

080017c0 <resetColorMarkdown>:


void resetColorMarkdown(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f001 fcb0 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(3, 58, 34, 34);
 80017cc:	2322      	movs	r3, #34	; 0x22
 80017ce:	2222      	movs	r2, #34	; 0x22
 80017d0:	213a      	movs	r1, #58	; 0x3a
 80017d2:	2003      	movs	r0, #3
 80017d4:	f001 ff42 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 96, 34, 34);
 80017d8:	2322      	movs	r3, #34	; 0x22
 80017da:	2222      	movs	r2, #34	; 0x22
 80017dc:	2160      	movs	r1, #96	; 0x60
 80017de:	2003      	movs	r0, #3
 80017e0:	f001 ff3c 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 134, 34, 34);
 80017e4:	2322      	movs	r3, #34	; 0x22
 80017e6:	2222      	movs	r2, #34	; 0x22
 80017e8:	2186      	movs	r1, #134	; 0x86
 80017ea:	2003      	movs	r0, #3
 80017ec:	f001 ff36 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 172, 34, 34);
 80017f0:	2322      	movs	r3, #34	; 0x22
 80017f2:	2222      	movs	r2, #34	; 0x22
 80017f4:	21ac      	movs	r1, #172	; 0xac
 80017f6:	2003      	movs	r0, #3
 80017f8:	f001 ff30 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 210, 34, 34);
 80017fc:	2322      	movs	r3, #34	; 0x22
 80017fe:	2222      	movs	r2, #34	; 0x22
 8001800:	21d2      	movs	r1, #210	; 0xd2
 8001802:	2003      	movs	r0, #3
 8001804:	f001 ff2a 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 248, 34, 34);
 8001808:	2322      	movs	r3, #34	; 0x22
 800180a:	2222      	movs	r2, #34	; 0x22
 800180c:	21f8      	movs	r1, #248	; 0xf8
 800180e:	2003      	movs	r0, #3
 8001810:	f001 ff24 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 286, 34, 34);
 8001814:	2322      	movs	r3, #34	; 0x22
 8001816:	2222      	movs	r2, #34	; 0x22
 8001818:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800181c:	2003      	movs	r0, #3
 800181e:	f001 ff1d 	bl	800365c <BSP_LCD_DrawRect>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}

08001826 <resetThicknessMarkdown>:

void resetThicknessMarkdown(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800182a:	f04f 30ff 	mov.w	r0, #4294967295
 800182e:	f001 fc7d 	bl	800312c <BSP_LCD_SetTextColor>

	BSP_LCD_DrawRect(53, 3, 34, 34);
 8001832:	2322      	movs	r3, #34	; 0x22
 8001834:	2222      	movs	r2, #34	; 0x22
 8001836:	2103      	movs	r1, #3
 8001838:	2035      	movs	r0, #53	; 0x35
 800183a:	f001 ff0f 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(91, 3, 34, 34);
 800183e:	2322      	movs	r3, #34	; 0x22
 8001840:	2222      	movs	r2, #34	; 0x22
 8001842:	2103      	movs	r1, #3
 8001844:	205b      	movs	r0, #91	; 0x5b
 8001846:	f001 ff09 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(129, 3, 34, 34);
 800184a:	2322      	movs	r3, #34	; 0x22
 800184c:	2222      	movs	r2, #34	; 0x22
 800184e:	2103      	movs	r1, #3
 8001850:	2081      	movs	r0, #129	; 0x81
 8001852:	f001 ff03 	bl	800365c <BSP_LCD_DrawRect>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <markdown>:

void markdown(uint16_t x,uint16_t y,Markdown_type type)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	460b      	mov	r3, r1
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	70fb      	strb	r3, [r7, #3]
	if(type == COLOR)
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <markdown+0x2a>
	{
		resetColorMarkdown();
 8001874:	f7ff ffa4 	bl	80017c0 <resetColorMarkdown>
		LastColorMarkdownX = x;
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <markdown+0x54>)
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	8013      	strh	r3, [r2, #0]
		LastColorMArkdownY = y;
 800187e:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <markdown+0x58>)
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	8013      	strh	r3, [r2, #0]
 8001884:	e007      	b.n	8001896 <markdown+0x3a>
	}
	else
	{
		resetThicknessMarkdown();
 8001886:	f7ff ffce 	bl	8001826 <resetThicknessMarkdown>
		LastThicknessMarkdownX = x;
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <markdown+0x5c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	8013      	strh	r3, [r2, #0]
		LastThicknessMArkdownY = y;
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <markdown+0x60>)
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	8013      	strh	r3, [r2, #0]
	}
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <markdown+0x64>)
 8001898:	f001 fc48 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, 34, 34);
 800189c:	88b9      	ldrh	r1, [r7, #4]
 800189e:	88f8      	ldrh	r0, [r7, #6]
 80018a0:	2322      	movs	r3, #34	; 0x22
 80018a2:	2222      	movs	r2, #34	; 0x22
 80018a4:	f001 feda 	bl	800365c <BSP_LCD_DrawRect>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000000a 	.word	0x2000000a
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	2000000e 	.word	0x2000000e
 80018bc:	20000010 	.word	0x20000010
 80018c0:	ffff0000 	.word	0xffff0000

080018c4 <clearWorkspace>:

void clearWorkspace(uint8_t canvas)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295
 80018d2:	f001 fd1d 	bl	8003310 <BSP_LCD_Clear>
	showPaintInterface(canvas);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff feaf 	bl	800163c <showPaintInterface>
	BSP_LCD_SetTextColor(LastColor);
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <clearWorkspace+0x2c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fc22 	bl	800312c <BSP_LCD_SetTextColor>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000004 	.word	0x20000004

080018f4 <savePartOfSketch>:

void savePartOfSketch(uint8_t sector, uint32_t addrs,int startX,int startY)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
	for(i=startX ; i < 240; ++i)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	82fb      	strh	r3, [r7, #22]
 800190c:	e022      	b.n	8001954 <savePartOfSketch+0x60>
	{
		for(j=startY; j < startY+141; ++j)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	82bb      	strh	r3, [r7, #20]
 8001912:	e015      	b.n	8001940 <savePartOfSketch+0x4c>
		{
			if(bufferIter > 28481) break;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f646 7241 	movw	r2, #28481	; 0x6f41
 800191a:	4293      	cmp	r3, r2
 800191c:	dc16      	bgt.n	800194c <savePartOfSketch+0x58>
			buff[bufferIter] = BSP_LCD_ReadPixel(i, j);
 800191e:	8aba      	ldrh	r2, [r7, #20]
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fc4d 	bl	80031c4 <BSP_LCD_ReadPixel>
 800192a:	4601      	mov	r1, r0
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <savePartOfSketch+0x84>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			bufferIter++;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	3301      	adds	r3, #1
 8001938:	613b      	str	r3, [r7, #16]
		for(j=startY; j < startY+141; ++j)
 800193a:	8abb      	ldrh	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	82bb      	strh	r3, [r7, #20]
 8001940:	8aba      	ldrh	r2, [r7, #20]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	338d      	adds	r3, #141	; 0x8d
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe4      	blt.n	8001914 <savePartOfSketch+0x20>
 800194a:	e000      	b.n	800194e <savePartOfSketch+0x5a>
			if(bufferIter > 28481) break;
 800194c:	bf00      	nop
	for(i=startX ; i < 240; ++i)
 800194e:	8afb      	ldrh	r3, [r7, #22]
 8001950:	3301      	adds	r3, #1
 8001952:	82fb      	strh	r3, [r7, #22]
 8001954:	8afb      	ldrh	r3, [r7, #22]
 8001956:	2bef      	cmp	r3, #239	; 0xef
 8001958:	d9d9      	bls.n	800190e <savePartOfSketch+0x1a>
		}
	}

	SetSectorAddr(sector,addrs);
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f8ea 	bl	8001b38 <SetSectorAddr>
	WriteToFlash(0, buff,28482);
 8001964:	f646 7242 	movw	r2, #28482	; 0x6f42
 8001968:	4903      	ldr	r1, [pc, #12]	; (8001978 <savePartOfSketch+0x84>)
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f8fa 	bl	8001b64 <WriteToFlash>
}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20004d24 	.word	0x20004d24

0800197c <loadPartOfSketch>:

void loadPartOfSketch(uint8_t sector, uint32_t addrs,int startX,int startY)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); // zapalenie diody
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	481d      	ldr	r0, [pc, #116]	; (8001a08 <loadPartOfSketch+0x8c>)
 8001994:	f003 ff86 	bl	80058a4 <HAL_GPIO_WritePin>
	SetSectorAddr(sector,addrs);
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f8cb 	bl	8001b38 <SetSectorAddr>
	ReadFromFlash(0, buff,28482);
 80019a2:	f646 7242 	movw	r2, #28482	; 0x6f42
 80019a6:	4919      	ldr	r1, [pc, #100]	; (8001a0c <loadPartOfSketch+0x90>)
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f90d 	bl	8001bc8 <ReadFromFlash>
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
	for(i=startX ; i < 240; ++i)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	82fb      	strh	r3, [r7, #22]
 80019b6:	e020      	b.n	80019fa <loadPartOfSketch+0x7e>
	{
		for(j=startY; j < startY+141; ++j)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	82bb      	strh	r3, [r7, #20]
 80019bc:	e013      	b.n	80019e6 <loadPartOfSketch+0x6a>
		{
			if(bufferIter> 28481) break;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f646 7241 	movw	r2, #28481	; 0x6f41
 80019c4:	4293      	cmp	r3, r2
 80019c6:	dc14      	bgt.n	80019f2 <loadPartOfSketch+0x76>
			BSP_LCD_DrawPixel(i, j, buff[bufferIter]);
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <loadPartOfSketch+0x90>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d0:	8ab9      	ldrh	r1, [r7, #20]
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 f943 	bl	8003c60 <BSP_LCD_DrawPixel>
			bufferIter++;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3301      	adds	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
		for(j=startY; j < startY+141; ++j)
 80019e0:	8abb      	ldrh	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	82bb      	strh	r3, [r7, #20]
 80019e6:	8aba      	ldrh	r2, [r7, #20]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	338d      	adds	r3, #141	; 0x8d
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbe6      	blt.n	80019be <loadPartOfSketch+0x42>
 80019f0:	e000      	b.n	80019f4 <loadPartOfSketch+0x78>
			if(bufferIter> 28481) break;
 80019f2:	bf00      	nop
	for(i=startX ; i < 240; ++i)
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	3301      	adds	r3, #1
 80019f8:	82fb      	strh	r3, [r7, #22]
 80019fa:	8afb      	ldrh	r3, [r7, #22]
 80019fc:	2bef      	cmp	r3, #239	; 0xef
 80019fe:	d9db      	bls.n	80019b8 <loadPartOfSketch+0x3c>
		}
	}
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	20004d24 	.word	0x20004d24

08001a10 <initLCD>:

#include "paintIntro.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void initLCD(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8001a14:	f001 fa94 	bl	8002f40 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 8001a18:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f001 fb11 	bl	8003044 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f001 fb72 	bl	800310c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001a28:	f002 f834 	bl	8003a94 <BSP_LCD_DisplayOn>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <printHelloScreen>:

void printHelloScreen(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3a:	f001 fc69 	bl	8003310 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001a3e:	4831      	ldr	r0, [pc, #196]	; (8001b04 <printHelloScreen+0xd4>)
 8001a40:	f001 fb74 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 125, 220, 70);
 8001a44:	2346      	movs	r3, #70	; 0x46
 8001a46:	22dc      	movs	r2, #220	; 0xdc
 8001a48:	217d      	movs	r1, #125	; 0x7d
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f001 fe06 	bl	800365c <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font24);
 8001a50:	482d      	ldr	r0, [pc, #180]	; (8001b08 <printHelloScreen+0xd8>)
 8001a52:	f001 fb9d 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 135, (uint8_t*)"EKAB", CENTER_MODE);
 8001a56:	2301      	movs	r3, #1
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <printHelloScreen+0xdc>)
 8001a5a:	2187      	movs	r1, #135	; 0x87
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f001 fcc3 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <printHelloScreen+0xe0>)
 8001a64:	f001 fb94 	bl	8003190 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 155, (uint8_t*)"DRAW", CENTER_MODE);
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <printHelloScreen+0xe4>)
 8001a6c:	219b      	movs	r1, #155	; 0x9b
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f001 fcba 	bl	80033e8 <BSP_LCD_DisplayStringAt>
	HAL_Delay(750);
 8001a74:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001a78:	f002 fd02 	bl	8004480 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8001a7c:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8001a80:	f001 fb54 	bl	800312c <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(100, 176, 5);
 8001a84:	2205      	movs	r2, #5
 8001a86:	21b0      	movs	r1, #176	; 0xb0
 8001a88:	2064      	movs	r0, #100	; 0x64
 8001a8a:	f001 ff63 	bl	8003954 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(115, 176, 5);
 8001a8e:	2205      	movs	r2, #5
 8001a90:	21b0      	movs	r1, #176	; 0xb0
 8001a92:	2073      	movs	r0, #115	; 0x73
 8001a94:	f001 ff5e 	bl	8003954 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(130, 176, 5);
 8001a98:	2205      	movs	r2, #5
 8001a9a:	21b0      	movs	r1, #176	; 0xb0
 8001a9c:	2082      	movs	r0, #130	; 0x82
 8001a9e:	f001 ff59 	bl	8003954 <BSP_LCD_FillCircle>
	HAL_Delay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa6:	f002 fceb 	bl	8004480 <HAL_Delay>
	int i =0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]

	for(i = 100; i <=130; i+=15)
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	e01f      	b.n	8001af4 <printHelloScreen+0xc4>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001ab4:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001ab8:	f001 fb38 	bl	800312c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	21b0      	movs	r1, #176	; 0xb0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 ff45 	bl	8003954 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001aca:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001ace:	f002 fcd7 	bl	8004480 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001ad2:	480c      	ldr	r0, [pc, #48]	; (8001b04 <printHelloScreen+0xd4>)
 8001ad4:	f001 fb2a 	bl	800312c <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2205      	movs	r2, #5
 8001ade:	21b0      	movs	r1, #176	; 0xb0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 ff37 	bl	8003954 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001ae6:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001aea:	f002 fcc9 	bl	8004480 <HAL_Delay>
	for(i = 100; i <=130; i+=15)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	330f      	adds	r3, #15
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b82      	cmp	r3, #130	; 0x82
 8001af8:	dddc      	ble.n	8001ab4 <printHelloScreen+0x84>
	}
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	ff800080 	.word	0xff800080
 8001b08:	20000080 	.word	0x20000080
 8001b0c:	0800c318 	.word	0x0800c318
 8001b10:	20000088 	.word	0x20000088
 8001b14:	0800c320 	.word	0x0800c320

08001b18 <EraseSector>:
static uint8_t SectorNum;

//functions definitions
//1. Erase Sector
void EraseSector(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001b1c:	f003 fa50 	bl	8004fc0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <EraseSector+0x1c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fbba 	bl	80052a0 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8001b2c:	f003 fa6a 	bl	8005004 <HAL_FLASH_Lock>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200000d0 	.word	0x200000d0

08001b38 <SetSectorAddr>:

//2. Set Sector Adress
void SetSectorAddr(uint8_t sector, uint32_t addr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
	SectorNum = sector;
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SetSectorAddr+0x24>)
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	7013      	strb	r3, [r2, #0]
	SectorAddr = addr;
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SetSectorAddr+0x28>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	200000d0 	.word	0x200000d0
 8001b60:	200000cc 	.word	0x200000cc

08001b64 <WriteToFlash>:

//3. Write Flash
void WriteToFlash(uint32_t idx, void *wrBuf, uint32_t Nsize)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <WriteToFlash+0x60>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

	//Erase sector before write
	EraseSector();
 8001b7a:	f7ff ffcd 	bl	8001b18 <EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8001b7e:	f003 fa1f 	bl	8004fc0 <HAL_FLASH_Unlock>
	//Write to Flash

	for(uint32_t i=0; i<Nsize; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e012      	b.n	8001bae <WriteToFlash+0x4a>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 0400 	mov.w	r4, #0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4623      	mov	r3, r4
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f003 f9bb 	bl	8004f18 <HAL_FLASH_Program>
		flashAddress+=4;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Nsize; i++)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	3301      	adds	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3e8      	bcc.n	8001b88 <WriteToFlash+0x24>
	}

	HAL_FLASH_Lock();
 8001bb6:	f003 fa25 	bl	8005004 <HAL_FLASH_Lock>
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000cc 	.word	0x200000cc

08001bc8 <ReadFromFlash>:
//4. Read Flash
void ReadFromFlash(uint32_t idx, void *rdBuf, uint32_t Nsize)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <ReadFromFlash+0x4c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]


		for(uint32_t i=0; i<Nsize; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e00c      	b.n	8001bfe <ReadFromFlash+0x36>
		{
			*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	440b      	add	r3, r1
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
			flashAddress+=4;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	617b      	str	r3, [r7, #20]
		for(uint32_t i=0; i<Nsize; i++)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ee      	bcc.n	8001be4 <ReadFromFlash+0x1c>
		}

}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200000cc 	.word	0x200000cc

08001c18 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <MX_SPI5_Init+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c64:	220a      	movs	r2, #10
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_SPI5_Init+0x64>)
 8001c6a:	f006 f88e 	bl	8007d8a <HAL_SPI_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c74:	f7ff fb26 	bl	80012c4 <Error_Handler>
  }

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020a2c 	.word	0x20020a2c
 8001c80:	40015000 	.word	0x40015000

08001c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_SPI_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12c      	bne.n	8001d00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cde:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_SPI_MspInit+0x8c>)
 8001cfc:	f003 fb1e 	bl	800533c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40015000 	.word	0x40015000
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40021400 	.word	0x40021400

08001d14 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_SPI_MspDeInit+0x30>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10a      	bne.n	8001d3c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_SPI_MspDeInit+0x34>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_SPI_MspDeInit+0x34>)
 8001d2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001d32:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_SPI_MspDeInit+0x38>)
 8001d38:	f003 fcaa 	bl	8005690 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40015000 	.word	0x40015000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40021400 	.word	0x40021400

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_MspInit+0x54>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_MspInit+0x54>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_MspInit+0x54>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_MspInit+0x54>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_MspInit+0x54>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_MspInit+0x54>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	210f      	movs	r1, #15
 8001d92:	f06f 0001 	mvn.w	r0, #1
 8001d96:	f002 fc4d 	bl	8004634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	2036      	movs	r0, #54	; 0x36
 8001dbe:	f002 fc39 	bl	8004634 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001dc2:	2036      	movs	r0, #54	; 0x36
 8001dc4:	f002 fc52 	bl	800466c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_InitTick+0xa4>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_InitTick+0xa4>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_InitTick+0xa4>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de4:	f107 0210 	add.w	r2, r7, #16
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 fd5c 	bl	80078ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001df4:	f005 fd32 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_InitTick+0xa8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_InitTick+0xac>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_InitTick+0xb0>)
 8001e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_InitTick+0xac>)
 8001e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_InitTick+0xac>)
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_InitTick+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_InitTick+0xac>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_InitTick+0xac>)
 8001e2e:	f006 fd37 	bl	80088a0 <HAL_TIM_Base_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <HAL_InitTick+0xac>)
 8001e3a:	f006 fd66 	bl	800890a <HAL_TIM_Base_Start_IT>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	20020a84 	.word	0x20020a84
 8001e58:	40001000 	.word	0x40001000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM6_DAC_IRQHandler+0x10>)
 8001e96:	f006 fd5c 	bl	8008952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20020a84 	.word	0x20020a84

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <SystemInit+0x28>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <SystemInit+0x28>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SystemInit+0x28>)
 8001eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_USART1_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USART1_UART_Init+0x4c>)
 8001f08:	f006 ff08 	bl	8008d1c <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f7ff f9d7 	bl	80012c4 <Error_Handler>
  }

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20020ac4 	.word	0x20020ac4
 8001f20:	40011000 	.word	0x40011000

08001f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_UART_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12c      	bne.n	8001fa0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_UART_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f90:	2307      	movs	r3, #7
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_UART_MspInit+0x8c>)
 8001f9c:	f003 f9ce 	bl	800533c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fba:	e003      	b.n	8001fc4 <LoopCopyDataInit>

08001fbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fc2:	3104      	adds	r1, #4

08001fc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fcc:	d3f6      	bcc.n	8001fbc <CopyDataInit>
  ldr  r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fd0:	e002      	b.n	8001fd8 <LoopFillZerobss>

08001fd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fd4:	f842 3b04 	str.w	r3, [r2], #4

08001fd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fdc:	d3f9      	bcc.n	8001fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fde:	f7ff ff61 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f00a f8eb 	bl	800c1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff f8ad 	bl	8001144 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ff0:	0800eec4 	.word	0x0800eec4
  ldr  r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ff8:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8001ffc:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8002000:	20020c68 	.word	0x20020c68

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>

08002006 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800200a:	f000 fe4b 	bl	8002ca4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800200e:	20ca      	movs	r0, #202	; 0xca
 8002010:	f000 f95d 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002014:	20c3      	movs	r0, #195	; 0xc3
 8002016:	f000 f967 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800201a:	2008      	movs	r0, #8
 800201c:	f000 f964 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002020:	2050      	movs	r0, #80	; 0x50
 8002022:	f000 f961 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002026:	20cf      	movs	r0, #207	; 0xcf
 8002028:	f000 f951 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f000 f95b 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002032:	20c1      	movs	r0, #193	; 0xc1
 8002034:	f000 f958 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002038:	2030      	movs	r0, #48	; 0x30
 800203a:	f000 f955 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800203e:	20ed      	movs	r0, #237	; 0xed
 8002040:	f000 f945 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002044:	2064      	movs	r0, #100	; 0x64
 8002046:	f000 f94f 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800204a:	2003      	movs	r0, #3
 800204c:	f000 f94c 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002050:	2012      	movs	r0, #18
 8002052:	f000 f949 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002056:	2081      	movs	r0, #129	; 0x81
 8002058:	f000 f946 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800205c:	20e8      	movs	r0, #232	; 0xe8
 800205e:	f000 f936 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002062:	2085      	movs	r0, #133	; 0x85
 8002064:	f000 f940 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f93d 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800206e:	2078      	movs	r0, #120	; 0x78
 8002070:	f000 f93a 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002074:	20cb      	movs	r0, #203	; 0xcb
 8002076:	f000 f92a 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800207a:	2039      	movs	r0, #57	; 0x39
 800207c:	f000 f934 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002080:	202c      	movs	r0, #44	; 0x2c
 8002082:	f000 f931 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 f92e 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800208c:	2034      	movs	r0, #52	; 0x34
 800208e:	f000 f92b 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002092:	2002      	movs	r0, #2
 8002094:	f000 f928 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002098:	20f7      	movs	r0, #247	; 0xf7
 800209a:	f000 f918 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800209e:	2020      	movs	r0, #32
 80020a0:	f000 f922 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80020a4:	20ea      	movs	r0, #234	; 0xea
 80020a6:	f000 f912 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f91c 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f919 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80020b6:	20b1      	movs	r0, #177	; 0xb1
 80020b8:	f000 f909 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 f913 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80020c2:	201b      	movs	r0, #27
 80020c4:	f000 f910 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80020c8:	20b6      	movs	r0, #182	; 0xb6
 80020ca:	f000 f900 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80020ce:	200a      	movs	r0, #10
 80020d0:	f000 f90a 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80020d4:	20a2      	movs	r0, #162	; 0xa2
 80020d6:	f000 f907 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80020da:	20c0      	movs	r0, #192	; 0xc0
 80020dc:	f000 f8f7 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80020e0:	2010      	movs	r0, #16
 80020e2:	f000 f901 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80020e6:	20c1      	movs	r0, #193	; 0xc1
 80020e8:	f000 f8f1 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80020ec:	2010      	movs	r0, #16
 80020ee:	f000 f8fb 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80020f2:	20c5      	movs	r0, #197	; 0xc5
 80020f4:	f000 f8eb 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80020f8:	2045      	movs	r0, #69	; 0x45
 80020fa:	f000 f8f5 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80020fe:	2015      	movs	r0, #21
 8002100:	f000 f8f2 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002104:	20c7      	movs	r0, #199	; 0xc7
 8002106:	f000 f8e2 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800210a:	2090      	movs	r0, #144	; 0x90
 800210c:	f000 f8ec 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002110:	2036      	movs	r0, #54	; 0x36
 8002112:	f000 f8dc 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002116:	20c8      	movs	r0, #200	; 0xc8
 8002118:	f000 f8e6 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800211c:	20f2      	movs	r0, #242	; 0xf2
 800211e:	f000 f8d6 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f000 f8e0 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002128:	20b0      	movs	r0, #176	; 0xb0
 800212a:	f000 f8d0 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800212e:	20c2      	movs	r0, #194	; 0xc2
 8002130:	f000 f8da 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002134:	20b6      	movs	r0, #182	; 0xb6
 8002136:	f000 f8ca 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800213a:	200a      	movs	r0, #10
 800213c:	f000 f8d4 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002140:	20a7      	movs	r0, #167	; 0xa7
 8002142:	f000 f8d1 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002146:	2027      	movs	r0, #39	; 0x27
 8002148:	f000 f8ce 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800214c:	2004      	movs	r0, #4
 800214e:	f000 f8cb 	bl	80022e8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002152:	202a      	movs	r0, #42	; 0x2a
 8002154:	f000 f8bb 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f8c5 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f8c2 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f8bf 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800216a:	20ef      	movs	r0, #239	; 0xef
 800216c:	f000 f8bc 	bl	80022e8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002170:	202b      	movs	r0, #43	; 0x2b
 8002172:	f000 f8ac 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f8b6 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800217c:	2000      	movs	r0, #0
 800217e:	f000 f8b3 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 f8b0 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002188:	203f      	movs	r0, #63	; 0x3f
 800218a:	f000 f8ad 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800218e:	20f6      	movs	r0, #246	; 0xf6
 8002190:	f000 f89d 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002194:	2001      	movs	r0, #1
 8002196:	f000 f8a7 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f8a4 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80021a0:	2006      	movs	r0, #6
 80021a2:	f000 f8a1 	bl	80022e8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	f000 f891 	bl	80022ce <ili9341_WriteReg>
  LCD_Delay(200);
 80021ac:	20c8      	movs	r0, #200	; 0xc8
 80021ae:	f000 fe67 	bl	8002e80 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80021b2:	2026      	movs	r0, #38	; 0x26
 80021b4:	f000 f88b 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f000 f895 	bl	80022e8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80021be:	20e0      	movs	r0, #224	; 0xe0
 80021c0:	f000 f885 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80021c4:	200f      	movs	r0, #15
 80021c6:	f000 f88f 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80021ca:	2029      	movs	r0, #41	; 0x29
 80021cc:	f000 f88c 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80021d0:	2024      	movs	r0, #36	; 0x24
 80021d2:	f000 f889 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80021d6:	200c      	movs	r0, #12
 80021d8:	f000 f886 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80021dc:	200e      	movs	r0, #14
 80021de:	f000 f883 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80021e2:	2009      	movs	r0, #9
 80021e4:	f000 f880 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80021e8:	204e      	movs	r0, #78	; 0x4e
 80021ea:	f000 f87d 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80021ee:	2078      	movs	r0, #120	; 0x78
 80021f0:	f000 f87a 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80021f4:	203c      	movs	r0, #60	; 0x3c
 80021f6:	f000 f877 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80021fa:	2009      	movs	r0, #9
 80021fc:	f000 f874 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002200:	2013      	movs	r0, #19
 8002202:	f000 f871 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002206:	2005      	movs	r0, #5
 8002208:	f000 f86e 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800220c:	2017      	movs	r0, #23
 800220e:	f000 f86b 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002212:	2011      	movs	r0, #17
 8002214:	f000 f868 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002218:	2000      	movs	r0, #0
 800221a:	f000 f865 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800221e:	20e1      	movs	r0, #225	; 0xe1
 8002220:	f000 f855 	bl	80022ce <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f000 f85f 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800222a:	2016      	movs	r0, #22
 800222c:	f000 f85c 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002230:	201b      	movs	r0, #27
 8002232:	f000 f859 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002236:	2004      	movs	r0, #4
 8002238:	f000 f856 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800223c:	2011      	movs	r0, #17
 800223e:	f000 f853 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002242:	2007      	movs	r0, #7
 8002244:	f000 f850 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002248:	2031      	movs	r0, #49	; 0x31
 800224a:	f000 f84d 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800224e:	2033      	movs	r0, #51	; 0x33
 8002250:	f000 f84a 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002254:	2042      	movs	r0, #66	; 0x42
 8002256:	f000 f847 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800225a:	2005      	movs	r0, #5
 800225c:	f000 f844 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002260:	200c      	movs	r0, #12
 8002262:	f000 f841 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002266:	200a      	movs	r0, #10
 8002268:	f000 f83e 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800226c:	2028      	movs	r0, #40	; 0x28
 800226e:	f000 f83b 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002272:	202f      	movs	r0, #47	; 0x2f
 8002274:	f000 f838 	bl	80022e8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002278:	200f      	movs	r0, #15
 800227a:	f000 f835 	bl	80022e8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800227e:	2011      	movs	r0, #17
 8002280:	f000 f825 	bl	80022ce <ili9341_WriteReg>
  LCD_Delay(200);
 8002284:	20c8      	movs	r0, #200	; 0xc8
 8002286:	f000 fdfb 	bl	8002e80 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800228a:	2029      	movs	r0, #41	; 0x29
 800228c:	f000 f81f 	bl	80022ce <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002290:	202c      	movs	r0, #44	; 0x2c
 8002292:	f000 f81c 	bl	80022ce <ili9341_WriteReg>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}

0800229a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800229e:	f000 fd01 	bl	8002ca4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80022a2:	2103      	movs	r1, #3
 80022a4:	20d3      	movs	r0, #211	; 0xd3
 80022a6:	f000 f82c 	bl	8002302 <ili9341_ReadData>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b29b      	uxth	r3, r3
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80022b6:	2029      	movs	r0, #41	; 0x29
 80022b8:	f000 f809 	bl	80022ce <ili9341_WriteReg>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80022c4:	2028      	movs	r0, #40	; 0x28
 80022c6:	f000 f802 	bl	80022ce <ili9341_WriteReg>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fd7c 	bl	8002dd8 <LCD_IO_WriteReg>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd4d 	bl	8002d94 <LCD_IO_WriteData>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	460a      	mov	r2, r1
 800230c:	80fb      	strh	r3, [r7, #6]
 800230e:	4613      	mov	r3, r2
 8002310:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002312:	797a      	ldrb	r2, [r7, #5]
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fd7f 	bl	8002e1c <LCD_IO_ReadData>
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800232c:	23f0      	movs	r3, #240	; 0xf0
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800233c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa59 	bl	8002810 <stmpe811_GetInstance>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2bff      	cmp	r3, #255	; 0xff
 8002366:	d112      	bne.n	800238e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002368:	2000      	movs	r0, #0
 800236a:	f000 fa51 	bl	8002810 <stmpe811_GetInstance>
 800236e:	4603      	mov	r3, r0
 8002370:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d80a      	bhi.n	800238e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	b2d1      	uxtb	r1, r2
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <stmpe811_Init+0x4c>)
 8002380:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002382:	f000 fd88 	bl	8002e96 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f807 	bl	800239c <stmpe811_Reset>
    }
  }
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200000d4 	.word	0x200000d4

0800239c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2202      	movs	r2, #2
 80023ac:	2103      	movs	r1, #3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd7d 	bl	8002eae <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80023b4:	200a      	movs	r0, #10
 80023b6:	f000 fdb7 	bl	8002f28 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fd73 	bl	8002eae <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80023c8:	2002      	movs	r0, #2
 80023ca:	f000 fdad 	bl	8002f28 <IOE_Delay>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80023d6:	b590      	push	{r4, r7, lr}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80023e0:	f000 fd59 	bl	8002e96 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd72 	bl	8002ed4 <IOE_Read>
 80023f0:	4603      	mov	r3, r0
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fd69 	bl	8002ed4 <IOE_Read>
 8002402:	4603      	mov	r3, r0
 8002404:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002406:	4323      	orrs	r3, r4
 8002408:	b21b      	sxth	r3, r3
 800240a:	b29b      	uxth	r3, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2109      	movs	r1, #9
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd53 	bl	8002ed4 <IOE_Read>
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	2109      	movs	r1, #9
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fd33 	bl	8002eae <IOE_Write>
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2109      	movs	r1, #9
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fd35 	bl	8002ed4 <IOE_Read>
 800246a:	4603      	mov	r3, r0
 800246c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	2109      	movs	r1, #9
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fd15 	bl	8002eae <IOE_Write>
    
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	460a      	mov	r2, r1
 8002496:	80fb      	strh	r3, [r7, #6]
 8002498:	4613      	mov	r3, r2
 800249a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	210a      	movs	r1, #10
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fd14 	bl	8002ed4 <IOE_Read>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	210a      	movs	r1, #10
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fcf4 	bl	8002eae <IOE_Write>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	460a      	mov	r2, r1
 80024d8:	80fb      	strh	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	210a      	movs	r1, #10
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fcf3 	bl	8002ed4 <IOE_Read>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80024f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	b25a      	sxtb	r2, r3
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4013      	ands	r3, r2
 8002500:	b25b      	sxtb	r3, r3
 8002502:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	210a      	movs	r1, #10
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fcce 	bl	8002eae <IOE_Write>
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	460a      	mov	r2, r1
 8002524:	80fb      	strh	r3, [r7, #6]
 8002526:	4613      	mov	r3, r2
 8002528:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	210b      	movs	r1, #11
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fccf 	bl	8002ed4 <IOE_Read>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	797b      	ldrb	r3, [r7, #5]
 800253c:	4013      	ands	r3, r2
 800253e:	b2db      	uxtb	r3, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	460a      	mov	r2, r1
 8002552:	80fb      	strh	r3, [r7, #6]
 8002554:	4613      	mov	r3, r2
 8002556:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	797a      	ldrb	r2, [r7, #5]
 800255e:	210b      	movs	r1, #11
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fca4 	bl	8002eae <IOE_Write>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	6039      	str	r1, [r7, #0]
 8002578:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2117      	movs	r1, #23
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fca5 	bl	8002ed4 <IOE_Read>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b25b      	sxtb	r3, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	b25a      	sxtb	r2, r3
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4013      	ands	r3, r2
 800259c:	b25b      	sxtb	r3, r3
 800259e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	2117      	movs	r1, #23
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fc80 	bl	8002eae <IOE_Write>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2104      	movs	r1, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fc84 	bl	8002ed4 <IOE_Read>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	2104      	movs	r1, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fc64 	bl	8002eae <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	21f0      	movs	r1, #240	; 0xf0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ffbf 	bl	800256e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	2104      	movs	r1, #4
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc54 	bl	8002eae <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2249      	movs	r2, #73	; 0x49
 800260c:	2120      	movs	r1, #32
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fc4d 	bl	8002eae <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002614:	2002      	movs	r0, #2
 8002616:	f000 fc87 	bl	8002f28 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2201      	movs	r2, #1
 8002620:	2121      	movs	r1, #33	; 0x21
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fc43 	bl	8002eae <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	229a      	movs	r2, #154	; 0x9a
 800262e:	2141      	movs	r1, #65	; 0x41
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fc3c 	bl	8002eae <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2201      	movs	r2, #1
 800263c:	214a      	movs	r1, #74	; 0x4a
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fc35 	bl	8002eae <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2201      	movs	r2, #1
 800264a:	214b      	movs	r1, #75	; 0x4b
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fc2e 	bl	8002eae <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2200      	movs	r2, #0
 8002658:	214b      	movs	r1, #75	; 0x4b
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fc27 	bl	8002eae <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2201      	movs	r2, #1
 8002666:	2156      	movs	r1, #86	; 0x56
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fc20 	bl	8002eae <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2201      	movs	r2, #1
 8002674:	2158      	movs	r1, #88	; 0x58
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fc19 	bl	8002eae <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2201      	movs	r2, #1
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fc12 	bl	8002eae <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	210b      	movs	r1, #11
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fc0b 	bl	8002eae <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002698:	2002      	movs	r0, #2
 800269a:	f000 fc45 	bl	8002f28 <IOE_Delay>
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fc0a 	bl	8002ed4 <IOE_Read>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	214c      	movs	r1, #76	; 0x4c
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fbf8 	bl	8002ed4 <IOE_Read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e00d      	b.n	800270c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	214b      	movs	r1, #75	; 0x4b
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fbd8 	bl	8002eae <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2200      	movs	r2, #0
 8002704:	214b      	movs	r1, #75	; 0x4b
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fbd1 	bl	8002eae <IOE_Write>
  }
  
  return ret;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	b2d8      	uxtb	r0, r3
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	2304      	movs	r3, #4
 800272e:	21d7      	movs	r1, #215	; 0xd7
 8002730:	f000 fbe3 	bl	8002efa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002734:	7c3b      	ldrb	r3, [r7, #16]
 8002736:	061a      	lsls	r2, r3, #24
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	431a      	orrs	r2, r3
 800273e:	7cbb      	ldrb	r3, [r7, #18]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4313      	orrs	r3, r2
 8002744:	7cfa      	ldrb	r2, [r7, #19]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	0d1b      	lsrs	r3, r3, #20
 800274e:	b29a      	uxth	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b29b      	uxth	r3, r3
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2201      	movs	r2, #1
 800276a:	214b      	movs	r1, #75	; 0x4b
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fb9e 	bl	8002eae <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002772:	89fb      	ldrh	r3, [r7, #14]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2200      	movs	r2, #0
 8002778:	214b      	movs	r1, #75	; 0x4b
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fb97 	bl	8002eae <IOE_Write>
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002792:	f000 fb86 	bl	8002ea2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	211f      	movs	r1, #31
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe76 	bl	800248c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fe36 	bl	8002414 <stmpe811_EnableGlobalIT>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fe47 	bl	8002450 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	211f      	movs	r1, #31
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fe81 	bl	80024ce <stmpe811_DisableITSource>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	211f      	movs	r1, #31
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fe99 	bl	800251a <stmpe811_ReadGITStatus>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	211f      	movs	r1, #31
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fea1 	bl	8002548 <stmpe811_ClearGlobalIT>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e00b      	b.n	800283c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <stmpe811_GetInstance+0x40>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	b29b      	uxth	r3, r3
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	429a      	cmp	r2, r3
 8002830:	d101      	bne.n	8002836 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	e006      	b.n	8002844 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3301      	adds	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d9f0      	bls.n	8002824 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002842:	23ff      	movs	r3, #255	; 0xff
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	200000d4 	.word	0x200000d4

08002854 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a33      	ldr	r2, [pc, #204]	; (8002930 <I2Cx_MspInit+0xdc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d15f      	bne.n	8002926 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <I2Cx_MspInit+0xe0>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a31      	ldr	r2, [pc, #196]	; (8002934 <I2Cx_MspInit+0xe0>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <I2Cx_MspInit+0xe0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <I2Cx_MspInit+0xe0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <I2Cx_MspInit+0xe0>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <I2Cx_MspInit+0xe0>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800289e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80028a4:	2312      	movs	r3, #18
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80028ac:	2302      	movs	r3, #2
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80028b0:	2304      	movs	r3, #4
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	481f      	ldr	r0, [pc, #124]	; (8002938 <I2Cx_MspInit+0xe4>)
 80028bc:	f002 fd3e 	bl	800533c <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80028c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	481b      	ldr	r0, [pc, #108]	; (800293c <I2Cx_MspInit+0xe8>)
 80028ce:	f002 fd35 	bl	800533c <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a16      	ldr	r2, [pc, #88]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <I2Cx_MspInit+0xe0>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <I2Cx_MspInit+0xe0>)
 8002900:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002904:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	210f      	movs	r1, #15
 800290a:	2048      	movs	r0, #72	; 0x48
 800290c:	f001 fe92 	bl	8004634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002910:	2048      	movs	r0, #72	; 0x48
 8002912:	f001 feab 	bl	800466c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	210f      	movs	r1, #15
 800291a:	2049      	movs	r0, #73	; 0x49
 800291c:	f001 fe8a 	bl	8004634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002920:	2049      	movs	r0, #73	; 0x49
 8002922:	f001 fea3 	bl	800466c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40005c00 	.word	0x40005c00
 8002934:	40023800 	.word	0x40023800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020800 	.word	0x40020800

08002940 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <I2Cx_Init+0x58>)
 8002946:	f003 fc4f 	bl	80061e8 <HAL_I2C_GetState>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d121      	bne.n	8002994 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <I2Cx_Init+0x58>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <I2Cx_Init+0x5c>)
 8002954:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <I2Cx_Init+0x58>)
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <I2Cx_Init+0x60>)
 800295a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <I2Cx_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <I2Cx_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <I2Cx_Init+0x58>)
 800296a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800296e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <I2Cx_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <I2Cx_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <I2Cx_Init+0x58>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <I2Cx_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002988:	4803      	ldr	r0, [pc, #12]	; (8002998 <I2Cx_Init+0x58>)
 800298a:	f7ff ff63 	bl	8002854 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800298e:	4802      	ldr	r0, [pc, #8]	; (8002998 <I2Cx_Init+0x58>)
 8002990:	f002 ffa2 	bl	80058d8 <HAL_I2C_Init>
  }
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20020b04 	.word	0x20020b04
 800299c:	40005c00 	.word	0x40005c00
 80029a0:	000186a0 	.word	0x000186a0

080029a4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <I2Cx_ITConfig+0x58>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <I2Cx_ITConfig+0x58>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <I2Cx_ITConfig+0x58>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <I2Cx_ITConfig+0x5c>)
 80029d6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	4809      	ldr	r0, [pc, #36]	; (8002a04 <I2Cx_ITConfig+0x60>)
 80029de:	f002 fcad 	bl	800533c <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80029e2:	2200      	movs	r2, #0
 80029e4:	210f      	movs	r1, #15
 80029e6:	2028      	movs	r0, #40	; 0x28
 80029e8:	f001 fe24 	bl	8004634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f001 fe3d 	bl	800466c <HAL_NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	10210000 	.word	0x10210000
 8002a04:	40020000 	.word	0x40020000

08002a08 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af04      	add	r7, sp, #16
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	460b      	mov	r3, r1
 8002a14:	71bb      	strb	r3, [r7, #6]
 8002a16:	4613      	mov	r3, r2
 8002a18:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	b299      	uxth	r1, r3
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <I2Cx_WriteData+0x4c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	9302      	str	r3, [sp, #8]
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	1d7b      	adds	r3, r7, #5
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2301      	movs	r3, #1
 8002a36:	4808      	ldr	r0, [pc, #32]	; (8002a58 <I2Cx_WriteData+0x50>)
 8002a38:	f003 f8b6 	bl	8005ba8 <HAL_I2C_Mem_Write>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a46:	f000 f863 	bl	8002b10 <I2Cx_Error>
  }        
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000078 	.word	0x20000078
 8002a58:	20020b04 	.word	0x20020b04

08002a5c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af04      	add	r7, sp, #16
 8002a62:	4603      	mov	r3, r0
 8002a64:	460a      	mov	r2, r1
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	b299      	uxth	r1, r3
 8002a78:	79bb      	ldrb	r3, [r7, #6]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <I2Cx_ReadData+0x50>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	2301      	movs	r3, #1
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	f107 030e 	add.w	r3, r7, #14
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <I2Cx_ReadData+0x54>)
 8002a90:	f003 f984 	bl	8005d9c <HAL_I2C_Mem_Read>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a9e:	f000 f837 	bl	8002b10 <I2Cx_Error>
  
  }
  return value;
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000078 	.word	0x20000078
 8002ab0:	20020b04 	.word	0x20020b04

08002ab4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	603a      	str	r2, [r7, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	71bb      	strb	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <I2Cx_ReadBuffer+0x54>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4809      	ldr	r0, [pc, #36]	; (8002b0c <I2Cx_ReadBuffer+0x58>)
 8002ae8:	f003 f958 	bl	8005d9c <HAL_I2C_Mem_Read>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e002      	b.n	8002b00 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002afa:	f000 f809 	bl	8002b10 <I2Cx_Error>

    return 1;
 8002afe:	2301      	movs	r3, #1
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000078 	.word	0x20000078
 8002b0c:	20020b04 	.word	0x20020b04

08002b10 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002b14:	4803      	ldr	r0, [pc, #12]	; (8002b24 <I2Cx_Error+0x14>)
 8002b16:	f003 f817 	bl	8005b48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002b1a:	f7ff ff11 	bl	8002940 <I2Cx_Init>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20020b04 	.word	0x20020b04

08002b28 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002b2c:	4819      	ldr	r0, [pc, #100]	; (8002b94 <SPIx_Init+0x6c>)
 8002b2e:	f005 fd97 	bl	8008660 <HAL_SPI_GetState>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d12b      	bne.n	8002b90 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <SPIx_Init+0x6c>)
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <SPIx_Init+0x70>)
 8002b3c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <SPIx_Init+0x6c>)
 8002b40:	2218      	movs	r2, #24
 8002b42:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <SPIx_Init+0x6c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <SPIx_Init+0x6c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <SPIx_Init+0x6c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <SPIx_Init+0x6c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <SPIx_Init+0x6c>)
 8002b5e:	2207      	movs	r2, #7
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <SPIx_Init+0x6c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <SPIx_Init+0x6c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <SPIx_Init+0x6c>)
 8002b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b74:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <SPIx_Init+0x6c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SPIx_Init+0x6c>)
 8002b7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b82:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002b84:	4803      	ldr	r0, [pc, #12]	; (8002b94 <SPIx_Init+0x6c>)
 8002b86:	f000 f853 	bl	8002c30 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002b8a:	4802      	ldr	r0, [pc, #8]	; (8002b94 <SPIx_Init+0x6c>)
 8002b8c:	f005 f8fd 	bl	8007d8a <HAL_SPI_Init>
  } 
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200000d8 	.word	0x200000d8
 8002b98:	40015000 	.word	0x40015000

08002b9c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <SPIx_Read+0x38>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f107 0108 	add.w	r1, r7, #8
 8002bb6:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <SPIx_Read+0x3c>)
 8002bb8:	f005 faa7 	bl	800810a <HAL_SPI_Receive>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002bc6:	f000 f827 	bl	8002c18 <SPIx_Error>
  }
  
  return readvalue;
 8002bca:	68bb      	ldr	r3, [r7, #8]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000007c 	.word	0x2000007c
 8002bd8:	200000d8 	.word	0x200000d8

08002bdc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <SPIx_Write+0x34>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1db9      	adds	r1, r7, #6
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <SPIx_Write+0x38>)
 8002bf4:	f005 f955 	bl	8007ea2 <HAL_SPI_Transmit>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002c02:	f000 f809 	bl	8002c18 <SPIx_Error>
  }
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000007c 	.word	0x2000007c
 8002c14:	200000d8 	.word	0x200000d8

08002c18 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002c1c:	4803      	ldr	r0, [pc, #12]	; (8002c2c <SPIx_Error+0x14>)
 8002c1e:	f005 f918 	bl	8007e52 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002c22:	f7ff ff81 	bl	8002b28 <SPIx_Init>
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200000d8 	.word	0x200000d8

08002c30 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	6453      	str	r3, [r2, #68]	; 0x44
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	6313      	str	r3, [r2, #48]	; 0x30
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <SPIx_MspInit+0x6c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002c70:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002c82:	2305      	movs	r3, #5
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <SPIx_MspInit+0x70>)
 8002c8e:	f002 fb55 	bl	800533c <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40021400 	.word	0x40021400

08002ca4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <LCD_IO_Init+0xe0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d164      	bne.n	8002d7c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <LCD_IO_Init+0xe0>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4619      	mov	r1, r3
 8002cec:	4827      	ldr	r0, [pc, #156]	; (8002d8c <LCD_IO_Init+0xe8>)
 8002cee:	f002 fb25 	bl	800533c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	4619      	mov	r1, r3
 8002d26:	4819      	ldr	r0, [pc, #100]	; (8002d8c <LCD_IO_Init+0xe8>)
 8002d28:	f002 fb08 	bl	800533c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <LCD_IO_Init+0xe4>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <LCD_IO_Init+0xec>)
 8002d60:	f002 faec 	bl	800533c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002d64:	2200      	movs	r2, #0
 8002d66:	2104      	movs	r1, #4
 8002d68:	4809      	ldr	r0, [pc, #36]	; (8002d90 <LCD_IO_Init+0xec>)
 8002d6a:	f002 fd9b 	bl	80058a4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002d6e:	2201      	movs	r2, #1
 8002d70:	2104      	movs	r1, #4
 8002d72:	4807      	ldr	r0, [pc, #28]	; (8002d90 <LCD_IO_Init+0xec>)
 8002d74:	f002 fd96 	bl	80058a4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002d78:	f7ff fed6 	bl	8002b28 <SPIx_Init>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000130 	.word	0x20000130
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40020800 	.word	0x40020800

08002d94 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002da4:	480a      	ldr	r0, [pc, #40]	; (8002dd0 <LCD_IO_WriteData+0x3c>)
 8002da6:	f002 fd7d 	bl	80058a4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002daa:	2200      	movs	r2, #0
 8002dac:	2104      	movs	r1, #4
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <LCD_IO_WriteData+0x40>)
 8002db0:	f002 fd78 	bl	80058a4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff10 	bl	8002bdc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <LCD_IO_WriteData+0x40>)
 8002dc2:	f002 fd6f 	bl	80058a4 <HAL_GPIO_WritePin>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40020800 	.word	0x40020800

08002dd8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002de2:	2200      	movs	r2, #0
 8002de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <LCD_IO_WriteReg+0x3c>)
 8002dea:	f002 fd5b 	bl	80058a4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002dee:	2200      	movs	r2, #0
 8002df0:	2104      	movs	r1, #4
 8002df2:	4809      	ldr	r0, [pc, #36]	; (8002e18 <LCD_IO_WriteReg+0x40>)
 8002df4:	f002 fd56 	bl	80058a4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff feed 	bl	8002bdc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e02:	2201      	movs	r2, #1
 8002e04:	2104      	movs	r1, #4
 8002e06:	4804      	ldr	r0, [pc, #16]	; (8002e18 <LCD_IO_WriteReg+0x40>)
 8002e08:	f002 fd4c 	bl	80058a4 <HAL_GPIO_WritePin>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40020800 	.word	0x40020800

08002e1c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	460a      	mov	r2, r1
 8002e26:	80fb      	strh	r3, [r7, #6]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002e30:	2200      	movs	r2, #0
 8002e32:	2104      	movs	r1, #4
 8002e34:	4810      	ldr	r0, [pc, #64]	; (8002e78 <LCD_IO_ReadData+0x5c>)
 8002e36:	f002 fd35 	bl	80058a4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e40:	480e      	ldr	r0, [pc, #56]	; (8002e7c <LCD_IO_ReadData+0x60>)
 8002e42:	f002 fd2f 	bl	80058a4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fec7 	bl	8002bdc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002e4e:	797b      	ldrb	r3, [r7, #5]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fea3 	bl	8002b9c <SPIx_Read>
 8002e56:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <LCD_IO_ReadData+0x60>)
 8002e60:	f002 fd20 	bl	80058a4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e64:	2201      	movs	r2, #1
 8002e66:	2104      	movs	r1, #4
 8002e68:	4803      	ldr	r0, [pc, #12]	; (8002e78 <LCD_IO_ReadData+0x5c>)
 8002e6a:	f002 fd1b 	bl	80058a4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00

08002e80 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 faf9 	bl	8004480 <HAL_Delay>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002e9a:	f7ff fd51 	bl	8002940 <I2Cx_Init>
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002ea6:	f7ff fd7d 	bl	80029a4 <I2Cx_ITConfig>
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}

08002eae <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	71bb      	strb	r3, [r7, #6]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002ec0:	797a      	ldrb	r2, [r7, #5]
 8002ec2:	79b9      	ldrb	r1, [r7, #6]
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fd9e 	bl	8002a08 <I2Cx_WriteData>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002ee4:	79ba      	ldrb	r2, [r7, #6]
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fdb6 	bl	8002a5c <I2Cx_ReadData>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	603a      	str	r2, [r7, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	4603      	mov	r3, r0
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	71bb      	strb	r3, [r7, #6]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	79b9      	ldrb	r1, [r7, #6]
 8002f14:	79f8      	ldrb	r0, [r7, #7]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	f7ff fdcc 	bl	8002ab4 <I2Cx_ReadBuffer>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	b29b      	uxth	r3, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 faa5 	bl	8004480 <HAL_Delay>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f46:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <BSP_LCD_Init+0xc0>)
 8002f48:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f4c:	2209      	movs	r2, #9
 8002f4e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002f50:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f58:	221d      	movs	r2, #29
 8002f5a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f5e:	2203      	movs	r2, #3
 8002f60:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f64:	f240 120d 	movw	r2, #269	; 0x10d
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f6c:	f240 1243 	movw	r2, #323	; 0x143
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f74:	f240 1217 	movw	r2, #279	; 0x117
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f7c:	f240 1247 	movw	r2, #327	; 0x147
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <BSP_LCD_Init+0xc4>)
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <BSP_LCD_Init+0xc4>)
 8002fa2:	22c0      	movs	r2, #192	; 0xc0
 8002fa4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <BSP_LCD_Init+0xc4>)
 8002fa8:	2204      	movs	r2, #4
 8002faa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <BSP_LCD_Init+0xc4>)
 8002fae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002fb4:	4813      	ldr	r0, [pc, #76]	; (8003004 <BSP_LCD_Init+0xc4>)
 8002fb6:	f004 fcab 	bl	8007910 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002fd2:	f000 fd6f 	bl	8003ab4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002fd6:	4809      	ldr	r0, [pc, #36]	; (8002ffc <BSP_LCD_Init+0xbc>)
 8002fd8:	f003 fce6 	bl	80069a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <BSP_LCD_Init+0xc8>)
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <BSP_LCD_Init+0xcc>)
 8002fe0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <BSP_LCD_Init+0xc8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002fea:	f000 ff51 	bl	8003e90 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002fee:	4808      	ldr	r0, [pc, #32]	; (8003010 <BSP_LCD_Init+0xd0>)
 8002ff0:	f000 f8ce 	bl	8003190 <BSP_LCD_SetFont>

  return LCD_OK;
 8002ff4:	2300      	movs	r3, #0
}  
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20020b58 	.word	0x20020b58
 8003000:	40016800 	.word	0x40016800
 8003004:	20000174 	.word	0x20000174
 8003008:	20020c00 	.word	0x20020c00
 800300c:	20000018 	.word	0x20000018
 8003010:	20000080 	.word	0x20000080

08003014 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <BSP_LCD_GetXSize+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20020c00 	.word	0x20020c00

0800302c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <BSP_LCD_GetYSize+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	4798      	blx	r3
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20020c00 	.word	0x20020c00

08003044 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003044:	b580      	push	{r7, lr}
 8003046:	b090      	sub	sp, #64	; 0x40
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003054:	f7ff ffde 	bl	8003014 <BSP_LCD_GetXSize>
 8003058:	4603      	mov	r3, r0
 800305a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003060:	f7ff ffe4 	bl	800302c <BSP_LCD_GetYSize>
 8003064:	4603      	mov	r3, r0
 8003066:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003070:	23ff      	movs	r3, #255	; 0xff
 8003072:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800308a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003090:	2307      	movs	r3, #7
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003094:	f7ff ffbe 	bl	8003014 <BSP_LCD_GetXSize>
 8003098:	4603      	mov	r3, r0
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800309c:	f7ff ffc6 	bl	800302c <BSP_LCD_GetYSize>
 80030a0:	4603      	mov	r3, r0
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	4619      	mov	r1, r3
 80030ac:	4814      	ldr	r0, [pc, #80]	; (8003100 <BSP_LCD_LayerDefaultInit+0xbc>)
 80030ae:	f003 fd4b 	bl	8006b48 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	4913      	ldr	r1, [pc, #76]	; (8003104 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3304      	adds	r3, #4
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	490e      	ldr	r1, [pc, #56]	; (8003104 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3308      	adds	r3, #8
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <BSP_LCD_LayerDefaultInit+0xc4>)
 80030da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	4909      	ldr	r1, [pc, #36]	; (8003104 <BSP_LCD_LayerDefaultInit+0xc0>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80030f0:	4803      	ldr	r0, [pc, #12]	; (8003100 <BSP_LCD_LayerDefaultInit+0xbc>)
 80030f2:	f003 fd67 	bl	8006bc4 <HAL_LTDC_EnableDither>
}
 80030f6:	bf00      	nop
 80030f8:	3740      	adds	r7, #64	; 0x40
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20020b58 	.word	0x20020b58
 8003104:	200001a8 	.word	0x200001a8
 8003108:	20000080 	.word	0x20000080

0800310c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <BSP_LCD_SelectLayer+0x1c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200001a4 	.word	0x200001a4

0800312c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <BSP_LCD_SetTextColor+0x28>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <BSP_LCD_SetTextColor+0x2c>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	200001a4 	.word	0x200001a4
 8003158:	200001a8 	.word	0x200001a8

0800315c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <BSP_LCD_SetBackColor+0x2c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4908      	ldr	r1, [pc, #32]	; (800318c <BSP_LCD_SetBackColor+0x30>)
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3304      	adds	r3, #4
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	200001a4 	.word	0x200001a4
 800318c:	200001a8 	.word	0x200001a8

08003190 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <BSP_LCD_SetFont+0x2c>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4908      	ldr	r1, [pc, #32]	; (80031c0 <BSP_LCD_SetFont+0x30>)
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3308      	adds	r3, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200001a4 	.word	0x200001a4
 80031c0:	200001a8 	.word	0x200001a8

080031c4 <BSP_LCD_ReadPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	460a      	mov	r2, r1
 80031ce:	80fb      	strh	r3, [r7, #6]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80031d8:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 80031de:	2134      	movs	r1, #52	; 0x34
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d115      	bne.n	800321a <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 80031ee:	4b46      	ldr	r3, [pc, #280]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 80031f4:	2134      	movs	r1, #52	; 0x34
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	88bd      	ldrh	r5, [r7, #4]
 8003202:	f7ff ff07 	bl	8003014 <BSP_LCD_GetXSize>
 8003206:	4603      	mov	r3, r0
 8003208:	fb03 f205 	mul.w	r2, r3, r5
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4423      	add	r3, r4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e070      	b.n	80032fc <BSP_LCD_ReadPixel+0x138>
  }
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a3b      	ldr	r2, [pc, #236]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 8003220:	2134      	movs	r1, #52	; 0x34
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3348      	adds	r3, #72	; 0x48
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d117      	bne.n	8003260 <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a35      	ldr	r2, [pc, #212]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 8003236:	2134      	movs	r1, #52	; 0x34
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	335c      	adds	r3, #92	; 0x5c
 8003240:	681c      	ldr	r4, [r3, #0]
 8003242:	88bd      	ldrh	r5, [r7, #4]
 8003244:	f7ff fee6 	bl	8003014 <BSP_LCD_GetXSize>
 8003248:	4603      	mov	r3, r0
 800324a:	fb03 f205 	mul.w	r2, r3, r5
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4423      	add	r3, r4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e04d      	b.n	80032fc <BSP_LCD_ReadPixel+0x138>
  }
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a29      	ldr	r2, [pc, #164]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 8003266:	2134      	movs	r1, #52	; 0x34
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3348      	adds	r3, #72	; 0x48
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d015      	beq.n	80032a2 <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a24      	ldr	r2, [pc, #144]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 800327c:	2134      	movs	r1, #52	; 0x34
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3348      	adds	r3, #72	; 0x48
 8003286:	681b      	ldr	r3, [r3, #0]
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8003288:	2b04      	cmp	r3, #4
 800328a:	d00a      	beq.n	80032a2 <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 8003292:	2134      	movs	r1, #52	; 0x34
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3348      	adds	r3, #72	; 0x48
 800329c:	681b      	ldr	r3, [r3, #0]
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800329e:	2b07      	cmp	r3, #7
 80032a0:	d116      	bne.n	80032d0 <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 80032a8:	2134      	movs	r1, #52	; 0x34
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	335c      	adds	r3, #92	; 0x5c
 80032b2:	681c      	ldr	r4, [r3, #0]
 80032b4:	88bd      	ldrh	r5, [r7, #4]
 80032b6:	f7ff fead 	bl	8003014 <BSP_LCD_GetXSize>
 80032ba:	4603      	mov	r3, r0
 80032bc:	fb03 f205 	mul.w	r2, r3, r5
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	4413      	add	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4423      	add	r3, r4
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e015      	b.n	80032fc <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <BSP_LCD_ReadPixel+0x144>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <BSP_LCD_ReadPixel+0x148>)
 80032d6:	2134      	movs	r1, #52	; 0x34
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	88bd      	ldrh	r5, [r7, #4]
 80032e4:	f7ff fe96 	bl	8003014 <BSP_LCD_GetXSize>
 80032e8:	4603      	mov	r3, r0
 80032ea:	fb03 f205 	mul.w	r2, r3, r5
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	4413      	add	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4423      	add	r3, r4
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
 8003306:	bf00      	nop
 8003308:	200001a4 	.word	0x200001a4
 800330c:	20020b58 	.word	0x20020b58

08003310 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b085      	sub	sp, #20
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <BSP_LCD_Clear+0x48>)
 800331a:	681c      	ldr	r4, [r3, #0]
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <BSP_LCD_Clear+0x48>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0e      	ldr	r2, [pc, #56]	; (800335c <BSP_LCD_Clear+0x4c>)
 8003322:	2134      	movs	r1, #52	; 0x34
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461d      	mov	r5, r3
 8003330:	f7ff fe70 	bl	8003014 <BSP_LCD_GetXSize>
 8003334:	4606      	mov	r6, r0
 8003336:	f7ff fe79 	bl	800302c <BSP_LCD_GetYSize>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2300      	movs	r3, #0
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	4632      	mov	r2, r6
 8003348:	4629      	mov	r1, r5
 800334a:	4620      	mov	r0, r4
 800334c:	f000 fd68 	bl	8003e20 <FillBuffer>
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003358:	200001a4 	.word	0x200001a4
 800335c:	20020b58 	.word	0x20020b58

08003360 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
 800336a:	460b      	mov	r3, r1
 800336c:	80bb      	strh	r3, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <BSP_LCD_DisplayChar+0x80>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	491b      	ldr	r1, [pc, #108]	; (80033e4 <BSP_LCD_DisplayChar+0x84>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3308      	adds	r3, #8
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <BSP_LCD_DisplayChar+0x80>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4c14      	ldr	r4, [pc, #80]	; (80033e4 <BSP_LCD_DisplayChar+0x84>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4423      	add	r3, r4
 800339e:	3308      	adds	r3, #8
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80033a4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <BSP_LCD_DisplayChar+0x80>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4c0d      	ldr	r4, [pc, #52]	; (80033e4 <BSP_LCD_DisplayChar+0x84>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4423      	add	r3, r4
 80033b8:	3308      	adds	r3, #8
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	3307      	adds	r3, #7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da00      	bge.n	80033c6 <BSP_LCD_DisplayChar+0x66>
 80033c4:	3307      	adds	r3, #7
 80033c6:	10db      	asrs	r3, r3, #3
 80033c8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80033cc:	18ca      	adds	r2, r1, r3
 80033ce:	88b9      	ldrh	r1, [r7, #4]
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fc6a 	bl	8003cac <DrawChar>
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}
 80033e0:	200001a4 	.word	0x200001a4
 80033e4:	200001a8 	.word	0x200001a8

080033e8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60ba      	str	r2, [r7, #8]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	81fb      	strh	r3, [r7, #14]
 80033f6:	460b      	mov	r3, r1
 80033f8:	81bb      	strh	r3, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80033fe:	2301      	movs	r3, #1
 8003400:	83fb      	strh	r3, [r7, #30]
 8003402:	2300      	movs	r3, #0
 8003404:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003412:	e002      	b.n	800341a <BSP_LCD_DisplayStringAt+0x32>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	3301      	adds	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	617a      	str	r2, [r7, #20]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f6      	bne.n	8003414 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003426:	f7ff fdf5 	bl	8003014 <BSP_LCD_GetXSize>
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	494a      	ldr	r1, [pc, #296]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3308      	adds	r3, #8
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	889b      	ldrh	r3, [r3, #4]
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d01c      	beq.n	8003486 <BSP_LCD_DisplayStringAt+0x9e>
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <BSP_LCD_DisplayStringAt+0x98>
 8003450:	2b01      	cmp	r3, #1
 8003452:	d12e      	bne.n	80034b2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad1      	subs	r1, r2, r3
 800345a:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	483e      	ldr	r0, [pc, #248]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4403      	add	r3, r0
 800346a:	3308      	adds	r3, #8
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	889b      	ldrh	r3, [r3, #4]
 8003470:	fb03 f301 	mul.w	r3, r3, r1
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	4413      	add	r3, r2
 800347c:	83fb      	strh	r3, [r7, #30]
      break;
 800347e:	e01b      	b.n	80034b8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	83fb      	strh	r3, [r7, #30]
      break;
 8003484:	e018      	b.n	80034b8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	b299      	uxth	r1, r3
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4831      	ldr	r0, [pc, #196]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4403      	add	r3, r0
 800349e:	3308      	adds	r3, #8
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	889b      	ldrh	r3, [r3, #4]
 80034a4:	fb11 f303 	smulbb	r3, r1, r3
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	4413      	add	r3, r2
 80034ae:	83fb      	strh	r3, [r7, #30]
      break;
 80034b0:	e002      	b.n	80034b8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 80034b2:	89fb      	ldrh	r3, [r7, #14]
 80034b4:	83fb      	strh	r3, [r7, #30]
      break;
 80034b6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80034b8:	e01a      	b.n	80034f0 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	89b9      	ldrh	r1, [r7, #12]
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff4c 	bl	8003360 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80034c8:	4b22      	ldr	r3, [pc, #136]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4922      	ldr	r1, [pc, #136]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3308      	adds	r3, #8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	889a      	ldrh	r2, [r3, #4]
 80034de:	8bfb      	ldrh	r3, [r7, #30]
 80034e0:	4413      	add	r3, r2
 80034e2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
    i++;
 80034ea:	8bbb      	ldrh	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2dc      	uxtb	r4, r3
 80034fe:	f7ff fd89 	bl	8003014 <BSP_LCD_GetXSize>
 8003502:	4605      	mov	r5, r0
 8003504:	8bb9      	ldrh	r1, [r7, #28]
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4813      	ldr	r0, [pc, #76]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	3308      	adds	r3, #8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	889b      	ldrh	r3, [r3, #4]
 800351c:	fb03 f301 	mul.w	r3, r3, r1
 8003520:	1aeb      	subs	r3, r5, r3
 8003522:	b299      	uxth	r1, r3
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <BSP_LCD_DisplayStringAt+0x16c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	480b      	ldr	r0, [pc, #44]	; (8003558 <BSP_LCD_DisplayStringAt+0x170>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	3308      	adds	r3, #8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	4299      	cmp	r1, r3
 800353c:	bf2c      	ite	cs
 800353e:	2301      	movcs	r3, #1
 8003540:	2300      	movcc	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4023      	ands	r3, r4
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1b6      	bne.n	80034ba <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 800354c:	bf00      	nop
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	200001a4 	.word	0x200001a4
 8003558:	200001a8 	.word	0x200001a8

0800355c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
 8003566:	460b      	mov	r3, r1
 8003568:	80bb      	strh	r3, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <BSP_LCD_DrawHLine+0x70>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <BSP_LCD_DrawHLine+0x74>)
 8003578:	2134      	movs	r1, #52	; 0x34
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	335c      	adds	r3, #92	; 0x5c
 8003582:	681c      	ldr	r4, [r3, #0]
 8003584:	f7ff fd46 	bl	8003014 <BSP_LCD_GetXSize>
 8003588:	4602      	mov	r2, r0
 800358a:	88bb      	ldrh	r3, [r7, #4]
 800358c:	fb03 f202 	mul.w	r2, r3, r2
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4423      	add	r3, r4
 8003598:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <BSP_LCD_DrawHLine+0x70>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	68fc      	ldr	r4, [r7, #12]
 80035a0:	887d      	ldrh	r5, [r7, #2]
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <BSP_LCD_DrawHLine+0x70>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	490b      	ldr	r1, [pc, #44]	; (80035d4 <BSP_LCD_DrawHLine+0x78>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2300      	movs	r3, #0
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2301      	movs	r3, #1
 80035bc:	462a      	mov	r2, r5
 80035be:	4621      	mov	r1, r4
 80035c0:	f000 fc2e 	bl	8003e20 <FillBuffer>
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	200001a4 	.word	0x200001a4
 80035d0:	20020b58 	.word	0x20020b58
 80035d4:	200001a8 	.word	0x200001a8

080035d8 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035da:	b087      	sub	sp, #28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
 80035e2:	460b      	mov	r3, r1
 80035e4:	80bb      	strh	r3, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80035ee:	4b18      	ldr	r3, [pc, #96]	; (8003650 <BSP_LCD_DrawVLine+0x78>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <BSP_LCD_DrawVLine+0x7c>)
 80035f4:	2134      	movs	r1, #52	; 0x34
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	335c      	adds	r3, #92	; 0x5c
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	f7ff fd08 	bl	8003014 <BSP_LCD_GetXSize>
 8003604:	4602      	mov	r2, r0
 8003606:	88bb      	ldrh	r3, [r7, #4]
 8003608:	fb03 f202 	mul.w	r2, r3, r2
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4423      	add	r3, r4
 8003614:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <BSP_LCD_DrawVLine+0x78>)
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	68fd      	ldr	r5, [r7, #12]
 800361c:	887e      	ldrh	r6, [r7, #2]
 800361e:	f7ff fcf9 	bl	8003014 <BSP_LCD_GetXSize>
 8003622:	4603      	mov	r3, r0
 8003624:	1e59      	subs	r1, r3, #1
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <BSP_LCD_DrawVLine+0x78>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	480b      	ldr	r0, [pc, #44]	; (8003658 <BSP_LCD_DrawVLine+0x80>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	9100      	str	r1, [sp, #0]
 800363c:	4633      	mov	r3, r6
 800363e:	2201      	movs	r2, #1
 8003640:	4629      	mov	r1, r5
 8003642:	4620      	mov	r0, r4
 8003644:	f000 fbec 	bl	8003e20 <FillBuffer>
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003650:	200001a4 	.word	0x200001a4
 8003654:	20020b58 	.word	0x20020b58
 8003658:	200001a8 	.word	0x200001a8

0800365c <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4623      	mov	r3, r4
 800366c:	80fb      	strh	r3, [r7, #6]
 800366e:	4603      	mov	r3, r0
 8003670:	80bb      	strh	r3, [r7, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	807b      	strh	r3, [r7, #2]
 8003676:	4613      	mov	r3, r2
 8003678:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	88b9      	ldrh	r1, [r7, #4]
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff6b 	bl	800355c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003686:	88ba      	ldrh	r2, [r7, #4]
 8003688:	883b      	ldrh	r3, [r7, #0]
 800368a:	4413      	add	r3, r2
 800368c:	b299      	uxth	r1, r3
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff62 	bl	800355c <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003698:	883a      	ldrh	r2, [r7, #0]
 800369a:	88b9      	ldrh	r1, [r7, #4]
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff9a 	bl	80035d8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	4413      	add	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	883a      	ldrh	r2, [r7, #0]
 80036ae:	88b9      	ldrh	r1, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff91 	bl	80035d8 <BSP_LCD_DrawVLine>
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}
	...

080036c0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
 80036ca:	460b      	mov	r3, r1
 80036cc:	80bb      	strh	r3, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	f1c3 0303 	rsb	r3, r3, #3
 80036da:	617b      	str	r3, [r7, #20]
  curx = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80036e0:	887b      	ldrh	r3, [r7, #2]
 80036e2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80036e4:	e0cf      	b.n	8003886 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	4413      	add	r3, r2
 80036ee:	b298      	uxth	r0, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	88ba      	ldrh	r2, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	b29c      	uxth	r4, r3
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4967      	ldr	r1, [pc, #412]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	4621      	mov	r1, r4
 8003710:	f000 faa6 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	b29b      	uxth	r3, r3
 8003718:	88fa      	ldrh	r2, [r7, #6]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b298      	uxth	r0, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	b29b      	uxth	r3, r3
 8003722:	88ba      	ldrh	r2, [r7, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	b29c      	uxth	r4, r3
 8003728:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	495b      	ldr	r1, [pc, #364]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4621      	mov	r1, r4
 800373e:	f000 fa8f 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	b29a      	uxth	r2, r3
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	4413      	add	r3, r2
 800374a:	b298      	uxth	r0, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	b29b      	uxth	r3, r3
 8003750:	88ba      	ldrh	r2, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	b29c      	uxth	r4, r3
 8003756:	4b50      	ldr	r3, [pc, #320]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4950      	ldr	r1, [pc, #320]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4621      	mov	r1, r4
 800376c:	f000 fa78 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	b29b      	uxth	r3, r3
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	b298      	uxth	r0, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	b29b      	uxth	r3, r3
 800377e:	88ba      	ldrh	r2, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	b29c      	uxth	r4, r3
 8003784:	4b44      	ldr	r3, [pc, #272]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4944      	ldr	r1, [pc, #272]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4621      	mov	r1, r4
 800379a:	f000 fa61 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	4413      	add	r3, r2
 80037a6:	b298      	uxth	r0, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	88bb      	ldrh	r3, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4939      	ldr	r1, [pc, #228]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4621      	mov	r1, r4
 80037c8:	f000 fa4a 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	b298      	uxth	r0, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	88bb      	ldrh	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	b29c      	uxth	r4, r3
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	492d      	ldr	r1, [pc, #180]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	f000 fa33 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	4413      	add	r3, r2
 8003802:	b298      	uxth	r0, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	b29a      	uxth	r2, r3
 8003808:	88bb      	ldrh	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	b29c      	uxth	r4, r3
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4922      	ldr	r1, [pc, #136]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4621      	mov	r1, r4
 8003824:	f000 fa1c 	bl	8003c60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	b29b      	uxth	r3, r3
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b298      	uxth	r0, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	b29a      	uxth	r2, r3
 8003836:	88bb      	ldrh	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	b29c      	uxth	r4, r3
 800383c:	4b16      	ldr	r3, [pc, #88]	; (8003898 <BSP_LCD_DrawCircle+0x1d8>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4916      	ldr	r1, [pc, #88]	; (800389c <BSP_LCD_DrawCircle+0x1dc>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	4621      	mov	r1, r4
 8003852:	f000 fa05 	bl	8003c60 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	da06      	bge.n	800386a <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	3306      	adds	r3, #6
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e00a      	b.n	8003880 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4413      	add	r3, r2
 8003876:	330a      	adds	r3, #10
 8003878:	617b      	str	r3, [r7, #20]
      cury--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b01      	subs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3301      	adds	r3, #1
 8003884:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	429a      	cmp	r2, r3
 800388c:	f67f af2b 	bls.w	80036e6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	200001a4 	.word	0x200001a4
 800389c:	200001a8 	.word	0x200001a8

080038a0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80038a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af02      	add	r7, sp, #8
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	461a      	mov	r2, r3
 80038b0:	4623      	mov	r3, r4
 80038b2:	80fb      	strh	r3, [r7, #6]
 80038b4:	4603      	mov	r3, r0
 80038b6:	80bb      	strh	r3, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
 80038bc:	4613      	mov	r3, r2
 80038be:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <BSP_LCD_FillRect+0xa8>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4920      	ldr	r1, [pc, #128]	; (800394c <BSP_LCD_FillRect+0xac>)
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc28 	bl	800312c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <BSP_LCD_FillRect+0xa8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <BSP_LCD_FillRect+0xb0>)
 80038e2:	2134      	movs	r1, #52	; 0x34
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	335c      	adds	r3, #92	; 0x5c
 80038ec:	681c      	ldr	r4, [r3, #0]
 80038ee:	f7ff fb91 	bl	8003014 <BSP_LCD_GetXSize>
 80038f2:	4602      	mov	r2, r0
 80038f4:	88bb      	ldrh	r3, [r7, #4]
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4423      	add	r3, r4
 8003902:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <BSP_LCD_FillRect+0xa8>)
 8003906:	681c      	ldr	r4, [r3, #0]
 8003908:	68fd      	ldr	r5, [r7, #12]
 800390a:	887e      	ldrh	r6, [r7, #2]
 800390c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003910:	f7ff fb80 	bl	8003014 <BSP_LCD_GetXSize>
 8003914:	4602      	mov	r2, r0
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	1ad1      	subs	r1, r2, r3
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <BSP_LCD_FillRect+0xa8>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	480b      	ldr	r0, [pc, #44]	; (800394c <BSP_LCD_FillRect+0xac>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4403      	add	r3, r0
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	9100      	str	r1, [sp, #0]
 8003930:	4643      	mov	r3, r8
 8003932:	4632      	mov	r2, r6
 8003934:	4629      	mov	r1, r5
 8003936:	4620      	mov	r0, r4
 8003938:	f000 fa72 	bl	8003e20 <FillBuffer>
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003946:	bf00      	nop
 8003948:	200001a4 	.word	0x200001a4
 800394c:	200001a8 	.word	0x200001a8
 8003950:	20020b58 	.word	0x20020b58

08003954 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
 800395e:	460b      	mov	r3, r1
 8003960:	80bb      	strh	r3, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	f1c3 0303 	rsb	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003978:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <BSP_LCD_FillCircle+0x138>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4944      	ldr	r1, [pc, #272]	; (8003a90 <BSP_LCD_FillCircle+0x13c>)
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fbce 	bl	800312c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003990:	e061      	b.n	8003a56 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d021      	beq.n	80039dc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	b29b      	uxth	r3, r3
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	b298      	uxth	r0, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	88bb      	ldrh	r3, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	b299      	uxth	r1, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	f7ff fdd1 	bl	800355c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	b298      	uxth	r0, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	88ba      	ldrh	r2, [r7, #4]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	b299      	uxth	r1, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7ff fdc0 	bl	800355c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d021      	beq.n	8003a26 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	b298      	uxth	r0, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	88ba      	ldrh	r2, [r7, #4]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	b299      	uxth	r1, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7ff fdac 	bl	800355c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b298      	uxth	r0, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	88bb      	ldrh	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	b299      	uxth	r1, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7ff fd9b 	bl	800355c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da06      	bge.n	8003a3a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	3306      	adds	r3, #6
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e00a      	b.n	8003a50 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	330a      	adds	r3, #10
 8003a48:	617b      	str	r3, [r7, #20]
      cury--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3301      	adds	r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d999      	bls.n	8003992 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <BSP_LCD_FillCircle+0x138>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	490b      	ldr	r1, [pc, #44]	; (8003a90 <BSP_LCD_FillCircle+0x13c>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fb5b 	bl	800312c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	88b9      	ldrh	r1, [r7, #4]
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fe1f 	bl	80036c0 <BSP_LCD_DrawCircle>
}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200001a4 	.word	0x200001a4
 8003a90:	200001a8 	.word	0x200001a8

08003a94 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <BSP_LCD_DisplayOn+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003aa2:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <BSP_LCD_DisplayOn+0x1c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4798      	blx	r3
  }
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20020c00 	.word	0x20020c00

08003ab4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a60      	ldr	r2, [pc, #384]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a59      	ldr	r2, [pc, #356]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b57      	ldr	r3, [pc, #348]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a4b      	ldr	r2, [pc, #300]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a44      	ldr	r2, [pc, #272]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b42      	ldr	r3, [pc, #264]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a36      	ldr	r2, [pc, #216]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b6c:	f043 0320 	orr.w	r3, r3, #32
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <BSP_LCD_MspInit+0x190>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003b9a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003bac:	230e      	movs	r3, #14
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4824      	ldr	r0, [pc, #144]	; (8003c48 <BSP_LCD_MspInit+0x194>)
 8003bb8:	f001 fbc0 	bl	800533c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003bbc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4820      	ldr	r0, [pc, #128]	; (8003c4c <BSP_LCD_MspInit+0x198>)
 8003bca:	f001 fbb7 	bl	800533c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003bce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481d      	ldr	r0, [pc, #116]	; (8003c50 <BSP_LCD_MspInit+0x19c>)
 8003bdc:	f001 fbae 	bl	800533c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003be0:	2348      	movs	r3, #72	; 0x48
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be8:	4619      	mov	r1, r3
 8003bea:	481a      	ldr	r0, [pc, #104]	; (8003c54 <BSP_LCD_MspInit+0x1a0>)
 8003bec:	f001 fba6 	bl	800533c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4816      	ldr	r0, [pc, #88]	; (8003c58 <BSP_LCD_MspInit+0x1a4>)
 8003bfe:	f001 fb9d 	bl	800533c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003c02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4813      	ldr	r0, [pc, #76]	; (8003c5c <BSP_LCD_MspInit+0x1a8>)
 8003c10:	f001 fb94 	bl	800533c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c14:	2303      	movs	r3, #3
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003c18:	2309      	movs	r3, #9
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c20:	4619      	mov	r1, r3
 8003c22:	480a      	ldr	r0, [pc, #40]	; (8003c4c <BSP_LCD_MspInit+0x198>)
 8003c24:	f001 fb8a 	bl	800533c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c32:	4619      	mov	r1, r3
 8003c34:	4809      	ldr	r0, [pc, #36]	; (8003c5c <BSP_LCD_MspInit+0x1a8>)
 8003c36:	f001 fb81 	bl	800533c <HAL_GPIO_Init>
}
 8003c3a:	bf00      	nop
 8003c3c:	3738      	adds	r7, #56	; 0x38
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020c00 	.word	0x40020c00
 8003c58:	40021400 	.word	0x40021400
 8003c5c:	40021800 	.word	0x40021800

08003c60 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003c60:	b5b0      	push	{r4, r5, r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	603a      	str	r2, [r7, #0]
 8003c6a:	80fb      	strh	r3, [r7, #6]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <BSP_LCD_DrawPixel+0x44>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <BSP_LCD_DrawPixel+0x48>)
 8003c76:	2134      	movs	r1, #52	; 0x34
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	335c      	adds	r3, #92	; 0x5c
 8003c80:	681c      	ldr	r4, [r3, #0]
 8003c82:	88bd      	ldrh	r5, [r7, #4]
 8003c84:	f7ff f9c6 	bl	8003014 <BSP_LCD_GetXSize>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	fb03 f205 	mul.w	r2, r3, r5
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4423      	add	r3, r4
 8003c96:	461a      	mov	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca4:	200001a4 	.word	0x200001a4
 8003ca8:	20020b58 	.word	0x20020b58

08003cac <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	603a      	str	r2, [r7, #0]
 8003cb6:	80fb      	strh	r3, [r7, #6]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <DrawChar+0x16c>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4953      	ldr	r1, [pc, #332]	; (8003e1c <DrawChar+0x170>)
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3308      	adds	r3, #8
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	88db      	ldrh	r3, [r3, #6]
 8003cde:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <DrawChar+0x16c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	494d      	ldr	r1, [pc, #308]	; (8003e1c <DrawChar+0x170>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	889b      	ldrh	r3, [r3, #4]
 8003cf6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003cf8:	8a3b      	ldrh	r3, [r7, #16]
 8003cfa:	3307      	adds	r3, #7
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	da00      	bge.n	8003d02 <DrawChar+0x56>
 8003d00:	3307      	adds	r3, #7
 8003d02:	10db      	asrs	r3, r3, #3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	8a3b      	ldrh	r3, [r7, #16]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e076      	b.n	8003e06 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003d18:	8a3b      	ldrh	r3, [r7, #16]
 8003d1a:	3307      	adds	r3, #7
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da00      	bge.n	8003d22 <DrawChar+0x76>
 8003d20:	3307      	adds	r3, #7
 8003d22:	10db      	asrs	r3, r3, #3
 8003d24:	461a      	mov	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fb03 f302 	mul.w	r3, r3, r2
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003d32:	8a3b      	ldrh	r3, [r7, #16]
 8003d34:	3307      	adds	r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da00      	bge.n	8003d3c <DrawChar+0x90>
 8003d3a:	3307      	adds	r3, #7
 8003d3c:	10db      	asrs	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d002      	beq.n	8003d48 <DrawChar+0x9c>
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d004      	beq.n	8003d50 <DrawChar+0xa4>
 8003d46:	e00c      	b.n	8003d62 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	617b      	str	r3, [r7, #20]
      break;
 8003d4e:	e016      	b.n	8003d7e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	3201      	adds	r2, #1
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
      break;
 8003d60:	e00d      	b.n	8003d7e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	041a      	lsls	r2, r3, #16
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	3202      	adds	r2, #2
 8003d76:	7812      	ldrb	r2, [r2, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
      break;
 8003d7c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e036      	b.n	8003df2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003d84:	8a3a      	ldrh	r2, [r7, #16]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	2201      	movs	r2, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4413      	add	r3, r2
 8003da8:	b298      	uxth	r0, r3
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <DrawChar+0x16c>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <DrawChar+0x170>)
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	88bb      	ldrh	r3, [r7, #4]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f7ff ff4e 	bl	8003c60 <BSP_LCD_DrawPixel>
 8003dc4:	e012      	b.n	8003dec <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	4413      	add	r3, r2
 8003dce:	b298      	uxth	r0, r3
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <DrawChar+0x16c>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4911      	ldr	r1, [pc, #68]	; (8003e1c <DrawChar+0x170>)
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3304      	adds	r3, #4
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	88bb      	ldrh	r3, [r7, #4]
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7ff ff3a 	bl	8003c60 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3301      	adds	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	8a3b      	ldrh	r3, [r7, #16]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3c4      	bcc.n	8003d84 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	8a7b      	ldrh	r3, [r7, #18]
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d384      	bcc.n	8003d18 <DrawChar+0x6c>
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200001a4 	.word	0x200001a4
 8003e1c:	200001a8 	.word	0x200001a8

08003e20 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <FillBuffer+0x68>)
 8003e30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e34:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <FillBuffer+0x68>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003e3c:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <FillBuffer+0x68>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <FillBuffer+0x68>)
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <FillBuffer+0x6c>)
 8003e46:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e48:	480f      	ldr	r0, [pc, #60]	; (8003e88 <FillBuffer+0x68>)
 8003e4a:	f000 fdd9 	bl	8004a00 <HAL_DMA2D_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d115      	bne.n	8003e80 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	480c      	ldr	r0, [pc, #48]	; (8003e88 <FillBuffer+0x68>)
 8003e58:	f000 ff30 	bl	8004cbc <HAL_DMA2D_ConfigLayer>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69f9      	ldr	r1, [r7, #28]
 8003e6c:	4806      	ldr	r0, [pc, #24]	; (8003e88 <FillBuffer+0x68>)
 8003e6e:	f000 fe10 	bl	8004a92 <HAL_DMA2D_Start>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003e78:	210a      	movs	r1, #10
 8003e7a:	4803      	ldr	r0, [pc, #12]	; (8003e88 <FillBuffer+0x68>)
 8003e7c:	f000 fe34 	bl	8004ae8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000134 	.word	0x20000134
 8003e8c:	4002b000 	.word	0x4002b000

08003e90 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003e96:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <BSP_SDRAM_Init+0xb0>)
 8003e98:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003ea0:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003eae:	2207      	movs	r2, #7
 8003eb0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003eba:	2202      	movs	r2, #2
 8003ebc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003ebe:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ed8:	2210      	movs	r2, #16
 8003eda:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ee4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003ee8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003f00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003f06:	2100      	movs	r1, #0
 8003f08:	480c      	ldr	r0, [pc, #48]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003f0a:	f000 f87f 	bl	800400c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003f0e:	490d      	ldr	r1, [pc, #52]	; (8003f44 <BSP_SDRAM_Init+0xb4>)
 8003f10:	480a      	ldr	r0, [pc, #40]	; (8003f3c <BSP_SDRAM_Init+0xac>)
 8003f12:	f003 febb 	bl	8007c8c <HAL_SDRAM_Init>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <BSP_SDRAM_Init+0xb8>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <BSP_SDRAM_Init+0xb8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003f2a:	f240 506a 	movw	r0, #1386	; 0x56a
 8003f2e:	f000 f80d 	bl	8003f4c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <BSP_SDRAM_Init+0xb8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	200001c0 	.word	0x200001c0
 8003f40:	a0000140 	.word	0xa0000140
 8003f44:	200001f4 	.word	0x200001f4
 8003f48:	20000098 	.word	0x20000098

08003f4c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f60:	2208      	movs	r2, #8
 8003f62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f64:	4b27      	ldr	r3, [pc, #156]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f6a:	4b26      	ldr	r3, [pc, #152]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f74:	4923      	ldr	r1, [pc, #140]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f76:	4824      	ldr	r0, [pc, #144]	; (8004008 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f78:	f003 febc 	bl	8007cf4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f000 fa7f 	bl	8004480 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f84:	2202      	movs	r2, #2
 8003f86:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f94:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9e:	4919      	ldr	r1, [pc, #100]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa0:	4819      	ldr	r0, [pc, #100]	; (8004008 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fa2:	f003 fea7 	bl	8007cf4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003fa6:	4b17      	ldr	r3, [pc, #92]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa8:	2203      	movs	r2, #3
 8003faa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003fac:	4b15      	ldr	r3, [pc, #84]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fae:	2208      	movs	r2, #8
 8003fb0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc2:	4910      	ldr	r1, [pc, #64]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fc4:	4810      	ldr	r0, [pc, #64]	; (8004008 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc6:	f003 fe95 	bl	8007cf4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003fca:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003fce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fd8:	2208      	movs	r2, #8
 8003fda:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a07      	ldr	r2, [pc, #28]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fe6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fec:	4905      	ldr	r1, [pc, #20]	; (8004004 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fee:	4806      	ldr	r0, [pc, #24]	; (8004008 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ff0:	f003 fe80 	bl	8007cf4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4804      	ldr	r0, [pc, #16]	; (8004008 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ff8:	f003 fea7 	bl	8007d4a <HAL_SDRAM_ProgramRefreshRate>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000210 	.word	0x20000210
 8004008:	200001c0 	.word	0x200001c0

0800400c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b090      	sub	sp, #64	; 0x40
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80ec 	beq.w	80041f6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	4b77      	ldr	r3, [pc, #476]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	4a76      	ldr	r2, [pc, #472]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6393      	str	r3, [r2, #56]	; 0x38
 800402e:	4b74      	ldr	r3, [pc, #464]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	4b70      	ldr	r3, [pc, #448]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a6f      	ldr	r2, [pc, #444]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b6d      	ldr	r3, [pc, #436]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	4b69      	ldr	r3, [pc, #420]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a68      	ldr	r2, [pc, #416]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	4b62      	ldr	r3, [pc, #392]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a61      	ldr	r2, [pc, #388]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a5a      	ldr	r2, [pc, #360]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 8004098:	f043 0308 	orr.w	r3, r3, #8
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b58      	ldr	r3, [pc, #352]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a53      	ldr	r2, [pc, #332]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040b4:	f043 0310 	orr.w	r3, r3, #16
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b51      	ldr	r3, [pc, #324]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	4b4d      	ldr	r3, [pc, #308]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	4a4c      	ldr	r2, [pc, #304]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	6313      	str	r3, [r2, #48]	; 0x30
 80040d6:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a45      	ldr	r2, [pc, #276]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b43      	ldr	r3, [pc, #268]	; (8004200 <BSP_SDRAM_MspInit+0x1f4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004102:	2302      	movs	r3, #2
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800410a:	230c      	movs	r3, #12
 800410c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800410e:	2360      	movs	r3, #96	; 0x60
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004116:	4619      	mov	r1, r3
 8004118:	483a      	ldr	r0, [pc, #232]	; (8004204 <BSP_SDRAM_MspInit+0x1f8>)
 800411a:	f001 f90f 	bl	800533c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800411e:	2301      	movs	r3, #1
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004126:	4619      	mov	r1, r3
 8004128:	4837      	ldr	r0, [pc, #220]	; (8004208 <BSP_SDRAM_MspInit+0x1fc>)
 800412a:	f001 f907 	bl	800533c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800412e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	4834      	ldr	r0, [pc, #208]	; (800420c <BSP_SDRAM_MspInit+0x200>)
 800413c:	f001 f8fe 	bl	800533c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004140:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414a:	4619      	mov	r1, r3
 800414c:	4830      	ldr	r0, [pc, #192]	; (8004210 <BSP_SDRAM_MspInit+0x204>)
 800414e:	f001 f8f5 	bl	800533c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004152:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800415c:	4619      	mov	r1, r3
 800415e:	482d      	ldr	r0, [pc, #180]	; (8004214 <BSP_SDRAM_MspInit+0x208>)
 8004160:	f001 f8ec 	bl	800533c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004164:	f248 1333 	movw	r3, #33075	; 0x8133
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800416e:	4619      	mov	r1, r3
 8004170:	4829      	ldr	r0, [pc, #164]	; (8004218 <BSP_SDRAM_MspInit+0x20c>)
 8004172:	f001 f8e3 	bl	800533c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004182:	4b26      	ldr	r3, [pc, #152]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 8004184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004188:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 800418c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004190:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 8004194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004198:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 800419c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041a0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ae:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041b8:	2203      	movs	r2, #3
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041be:	2200      	movs	r2, #0
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041ca:	4a15      	ldr	r2, [pc, #84]	; (8004220 <BSP_SDRAM_MspInit+0x214>)
 80041cc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a12      	ldr	r2, [pc, #72]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	4a11      	ldr	r2, [pc, #68]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80041da:	4810      	ldr	r0, [pc, #64]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041dc:	f000 fb02 	bl	80047e4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80041e0:	480e      	ldr	r0, [pc, #56]	; (800421c <BSP_SDRAM_MspInit+0x210>)
 80041e2:	f000 fa51 	bl	8004688 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	210f      	movs	r1, #15
 80041ea:	2038      	movs	r0, #56	; 0x38
 80041ec:	f000 fa22 	bl	8004634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80041f0:	2038      	movs	r0, #56	; 0x38
 80041f2:	f000 fa3b 	bl	800466c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80041f6:	bf00      	nop
 80041f8:	3740      	adds	r7, #64	; 0x40
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40020400 	.word	0x40020400
 8004208:	40020800 	.word	0x40020800
 800420c:	40020c00 	.word	0x40020c00
 8004210:	40021000 	.word	0x40021000
 8004214:	40021400 	.word	0x40021400
 8004218:	40021800 	.word	0x40021800
 800421c:	20000220 	.word	0x20000220
 8004220:	40026410 	.word	0x40026410

08004224 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	460a      	mov	r2, r1
 800422e:	80fb      	strh	r3, [r7, #6]
 8004230:	4613      	mov	r3, r2
 8004232:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <BSP_TS_Init+0x64>)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <BSP_TS_Init+0x68>)
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <BSP_TS_Init+0x6c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2082      	movs	r0, #130	; 0x82
 800424a:	4798      	blx	r3
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	f640 0311 	movw	r3, #2065	; 0x811
 8004254:	429a      	cmp	r2, r3
 8004256:	d104      	bne.n	8004262 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <BSP_TS_Init+0x70>)
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <BSP_TS_Init+0x6c>)
 800425c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <BSP_TS_Init+0x70>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2082      	movs	r0, #130	; 0x82
 8004270:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <BSP_TS_Init+0x70>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2082      	movs	r0, #130	; 0x82
 800427a:	4798      	blx	r3
  }

  return ret;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000284 	.word	0x20000284
 800428c:	20000286 	.word	0x20000286
 8004290:	20000050 	.word	0x20000050
 8004294:	20000280 	.word	0x20000280

08004298 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80042a0:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <BSP_TS_GetState+0x148>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2082      	movs	r0, #130	; 0x82
 80042a8:	4798      	blx	r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 808d 	beq.w	80043d6 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <BSP_TS_GetState+0x148>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f107 020c 	add.w	r2, r7, #12
 80042c6:	f107 010e 	add.w	r1, r7, #14
 80042ca:	2082      	movs	r0, #130	; 0x82
 80042cc:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80042ce:	89bb      	ldrh	r3, [r7, #12]
 80042d0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80042d8:	89bb      	ldrh	r3, [r7, #12]
 80042da:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <BSP_TS_GetState+0x14c>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80042e4:	8abb      	ldrh	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	82bb      	strh	r3, [r7, #20]
 80042ee:	e008      	b.n	8004302 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80042f0:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <BSP_TS_GetState+0x150>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	8aba      	ldrh	r2, [r7, #20]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d903      	bls.n	8004302 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <BSP_TS_GetState+0x150>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004302:	8abb      	ldrh	r3, [r7, #20]
 8004304:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800430c:	4293      	cmp	r3, r2
 800430e:	d806      	bhi.n	800431e <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004316:	330e      	adds	r3, #14
 8004318:	b29b      	uxth	r3, r3
 800431a:	81fb      	strh	r3, [r7, #14]
 800431c:	e005      	b.n	800432a <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800431e:	89fb      	ldrh	r3, [r7, #14]
 8004320:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004324:	3308      	adds	r3, #8
 8004326:	b29b      	uxth	r3, r3
 8004328:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <BSP_TS_GetState+0x154>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	82fb      	strh	r3, [r7, #22]
 8004340:	e008      	b.n	8004354 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004342:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <BSP_TS_GetState+0x158>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	8afa      	ldrh	r2, [r7, #22]
 8004348:	429a      	cmp	r2, r3
 800434a:	d903      	bls.n	8004354 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <BSP_TS_GetState+0x158>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	3b01      	subs	r3, #1
 8004352:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004354:	8afb      	ldrh	r3, [r7, #22]
 8004356:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004358:	89fb      	ldrh	r3, [r7, #14]
 800435a:	461a      	mov	r2, r3
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <BSP_TS_GetState+0x15c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d906      	bls.n	8004372 <BSP_TS_GetState+0xda>
 8004364:	89fa      	ldrh	r2, [r7, #14]
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <BSP_TS_GetState+0x15c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	e005      	b.n	800437e <BSP_TS_GetState+0xe6>
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <BSP_TS_GetState+0x15c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b29a      	uxth	r2, r3
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004380:	89bb      	ldrh	r3, [r7, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <BSP_TS_GetState+0x160>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d906      	bls.n	800439a <BSP_TS_GetState+0x102>
 800438c:	89ba      	ldrh	r2, [r7, #12]
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <BSP_TS_GetState+0x160>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	e005      	b.n	80043a6 <BSP_TS_GetState+0x10e>
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <BSP_TS_GetState+0x160>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	89bb      	ldrh	r3, [r7, #12]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80043a8:	8a7a      	ldrh	r2, [r7, #18]
 80043aa:	8a3b      	ldrh	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	dd07      	ble.n	80043c2 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <BSP_TS_GetState+0x15c>)
 80043b8:	601a      	str	r2, [r3, #0]
      _y = y; 
 80043ba:	89bb      	ldrh	r3, [r7, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <BSP_TS_GetState+0x160>)
 80043c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <BSP_TS_GetState+0x15c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <BSP_TS_GetState+0x160>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	809a      	strh	r2, [r3, #4]
  }
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000280 	.word	0x20000280
 80043e4:	ba2e8ba3 	.word	0xba2e8ba3
 80043e8:	20000286 	.word	0x20000286
 80043ec:	88888889 	.word	0x88888889
 80043f0:	20000284 	.word	0x20000284
 80043f4:	20000288 	.word	0x20000288
 80043f8:	2000028c 	.word	0x2000028c

080043fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_Init+0x40>)
 8004406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_Init+0x40>)
 8004412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_Init+0x40>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a07      	ldr	r2, [pc, #28]	; (800443c <HAL_Init+0x40>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004424:	2003      	movs	r0, #3
 8004426:	f000 f8fa 	bl	800461e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800442a:	2000      	movs	r0, #0
 800442c:	f7fd fcbc 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004430:	f7fd fc8e 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00

08004440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_IncTick+0x20>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_IncTick+0x24>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4413      	add	r3, r2
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_IncTick+0x24>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	200000a0 	.word	0x200000a0
 8004464:	20020c04 	.word	0x20020c04

08004468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return uwTick;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_GetTick+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20020c04 	.word	0x20020c04

08004480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7ff ffee 	bl	8004468 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d005      	beq.n	80044a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_Delay+0x40>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044a6:	bf00      	nop
 80044a8:	f7ff ffde 	bl	8004468 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d8f7      	bhi.n	80044a8 <HAL_Delay+0x28>
  {
  }
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200000a0 	.word	0x200000a0

080044c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <__NVIC_GetPriorityGrouping+0x18>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0307 	and.w	r3, r3, #7
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db0b      	blt.n	8004552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4907      	ldr	r1, [pc, #28]	; (8004560 <__NVIC_EnableIRQ+0x38>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2001      	movs	r0, #1
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db0a      	blt.n	800458e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	; (80045b0 <__NVIC_SetPriority+0x4c>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	440b      	add	r3, r1
 8004588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800458c:	e00a      	b.n	80045a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4908      	ldr	r1, [pc, #32]	; (80045b4 <__NVIC_SetPriority+0x50>)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3b04      	subs	r3, #4
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	440b      	add	r3, r1
 80045a2:	761a      	strb	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f1c3 0307 	rsb	r3, r3, #7
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	bf28      	it	cs
 80045d6:	2304      	movcs	r3, #4
 80045d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3304      	adds	r3, #4
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d902      	bls.n	80045e8 <NVIC_EncodePriority+0x30>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3b03      	subs	r3, #3
 80045e6:	e000      	b.n	80045ea <NVIC_EncodePriority+0x32>
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	401a      	ands	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	43d9      	mvns	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	4313      	orrs	r3, r2
         );
}
 8004612:	4618      	mov	r0, r3
 8004614:	3724      	adds	r7, #36	; 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ff4c 	bl	80044c4 <__NVIC_SetPriorityGrouping>
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004646:	f7ff ff61 	bl	800450c <__NVIC_GetPriorityGrouping>
 800464a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f7ff ffb1 	bl	80045b8 <NVIC_EncodePriority>
 8004656:	4602      	mov	r2, r0
 8004658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ff80 	bl	8004564 <__NVIC_SetPriority>
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ff54 	bl	8004528 <__NVIC_EnableIRQ>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff fee8 	bl	8004468 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e099      	b.n	80047d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c4:	e00f      	b.n	80046e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046c6:	f7ff fecf 	bl	8004468 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d908      	bls.n	80046e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e078      	b.n	80047d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e8      	bne.n	80046c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4b38      	ldr	r3, [pc, #224]	; (80047e0 <HAL_DMA_Init+0x158>)
 8004700:	4013      	ands	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b04      	cmp	r3, #4
 800473e:	d107      	bne.n	8004750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4313      	orrs	r3, r2
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0307 	bic.w	r3, r3, #7
 8004766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b04      	cmp	r3, #4
 8004778:	d117      	bne.n	80047aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8bd 	bl	800490c <DMA_CheckFifoParam>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047a6:	2301      	movs	r3, #1
 80047a8:	e016      	b.n	80047d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f874 	bl	80048a0 <DMA_CalcBaseAndBitshift>
 80047b8:	4603      	mov	r3, r0
 80047ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	223f      	movs	r2, #63	; 0x3f
 80047c2:	409a      	lsls	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	f010803f 	.word	0xf010803f

080047e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e050      	b.n	8004898 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d101      	bne.n	8004806 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	e048      	b.n	8004898 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2221      	movs	r2, #33	; 0x21
 8004844:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f82a 	bl	80048a0 <DMA_CalcBaseAndBitshift>
 800484c:	4603      	mov	r3, r0
 800484e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	223f      	movs	r2, #63	; 0x3f
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3b10      	subs	r3, #16
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <DMA_CalcBaseAndBitshift+0x64>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <DMA_CalcBaseAndBitshift+0x68>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d909      	bls.n	80048e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	659a      	str	r2, [r3, #88]	; 0x58
 80048e0:	e007      	b.n	80048f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	aaaaaaab 	.word	0xaaaaaaab
 8004908:	0800eeac 	.word	0x0800eeac

0800490c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11f      	bne.n	8004966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d855      	bhi.n	80049d8 <DMA_CheckFifoParam+0xcc>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <DMA_CheckFifoParam+0x28>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004945 	.word	0x08004945
 8004938:	08004957 	.word	0x08004957
 800493c:	08004945 	.word	0x08004945
 8004940:	080049d9 	.word	0x080049d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d045      	beq.n	80049dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004954:	e042      	b.n	80049dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800495e:	d13f      	bne.n	80049e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e03c      	b.n	80049e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496e:	d121      	bne.n	80049b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d836      	bhi.n	80049e4 <DMA_CheckFifoParam+0xd8>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <DMA_CheckFifoParam+0x70>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	0800498d 	.word	0x0800498d
 8004980:	08004993 	.word	0x08004993
 8004984:	0800498d 	.word	0x0800498d
 8004988:	080049a5 	.word	0x080049a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      break;
 8004990:	e02f      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d024      	beq.n	80049e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a2:	e021      	b.n	80049e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ac:	d11e      	bne.n	80049ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049b2:	e01b      	b.n	80049ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d902      	bls.n	80049c0 <DMA_CheckFifoParam+0xb4>
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d003      	beq.n	80049c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049be:	e018      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e015      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00e      	beq.n	80049f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
      break;
 80049d6:	e00b      	b.n	80049f0 <DMA_CheckFifoParam+0xe4>
      break;
 80049d8:	bf00      	nop
 80049da:	e00a      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049dc:	bf00      	nop
 80049de:	e008      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049e0:	bf00      	nop
 80049e2:	e006      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049e4:	bf00      	nop
 80049e6:	e004      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049e8:	bf00      	nop
 80049ea:	e002      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <DMA_CheckFifoParam+0xe6>
      break;
 80049f0:	bf00      	nop
    }
  } 
  
  return status; 
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e03b      	b.n	8004a8a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fb feae 	bl	8000788 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	f023 0107 	bic.w	r1, r3, #7
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68d1      	ldr	r1, [r2, #12]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_DMA2D_Start+0x1c>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e018      	b.n	8004ae0 <HAL_DMA2D_Start+0x4e>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f989 	bl	8004de0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d056      	beq.n	8004bb2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004b04:	f7ff fcb0 	bl	8004468 <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b0a:	e04b      	b.n	8004ba4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d023      	beq.n	8004b66 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	f043 0202 	orr.w	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	f043 0201 	orr.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2221      	movs	r2, #33	; 0x21
 8004b50:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0a5      	b.n	8004cb2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d01a      	beq.n	8004ba4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b6e:	f7ff fc7b 	bl	8004468 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <HAL_DMA2D_PollForTransfer+0x9c>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e086      	b.n	8004cb2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ac      	beq.n	8004b0c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d061      	beq.n	8004c98 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd4:	f7ff fc48 	bl	8004468 <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004bda:	e056      	b.n	8004c8a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02e      	beq.n	8004c4c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2229      	movs	r2, #41	; 0x29
 8004c36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e032      	b.n	8004cb2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d01a      	beq.n	8004c8a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004c54:	f7ff fc08 	bl	8004468 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <HAL_DMA2D_PollForTransfer+0x182>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e013      	b.n	8004cb2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0a1      	beq.n	8004bdc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2212      	movs	r2, #18
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA2D_ConfigLayer+0x20>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e079      	b.n	8004dd0 <HAL_DMA2D_ConfigLayer+0x114>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	3318      	adds	r3, #24
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d06:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <HAL_DMA2D_ConfigLayer+0x120>)
 8004d08:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b0a      	cmp	r3, #10
 8004d10:	d003      	beq.n	8004d1a <HAL_DMA2D_ConfigLayer+0x5e>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b09      	cmp	r3, #9
 8004d18:	d107      	bne.n	8004d2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e005      	b.n	8004d36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d120      	bne.n	8004d7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	ea02 0103 	and.w	r1, r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b0a      	cmp	r3, #10
 8004d64:	d003      	beq.n	8004d6e <HAL_DMA2D_ConfigLayer+0xb2>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d127      	bne.n	8004dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d7c:	e01f      	b.n	8004dbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	ea02 0103 	and.w	r1, r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b0a      	cmp	r3, #10
 8004da6:	d003      	beq.n	8004db0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d106      	bne.n	8004dbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004dbc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	ff03000f 	.word	0xff03000f

08004de0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b08b      	sub	sp, #44	; 0x2c
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	041a      	lsls	r2, r3, #16
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e18:	d174      	bne.n	8004f04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d108      	bne.n	8004e52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	e053      	b.n	8004efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d106      	bne.n	8004e68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	e048      	b.n	8004efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d111      	bne.n	8004e94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	0cdb      	lsrs	r3, r3, #19
 8004e74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	0a9b      	lsrs	r3, r3, #10
 8004e7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	02db      	lsls	r3, r3, #11
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	e032      	b.n	8004efa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d117      	bne.n	8004ecc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	0fdb      	lsrs	r3, r3, #31
 8004ea0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	0cdb      	lsrs	r3, r3, #19
 8004ea6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	0adb      	lsrs	r3, r3, #11
 8004eac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	08db      	lsrs	r3, r3, #3
 8004eb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	029b      	lsls	r3, r3, #10
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	03db      	lsls	r3, r3, #15
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	e016      	b.n	8004efa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	0f1b      	lsrs	r3, r3, #28
 8004ed0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	0d1b      	lsrs	r3, r3, #20
 8004ed6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	0b1b      	lsrs	r3, r3, #12
 8004edc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	011a      	lsls	r2, r3, #4
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	431a      	orrs	r2, r3
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	031b      	lsls	r3, r3, #12
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004f02:	e003      	b.n	8004f0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	60da      	str	r2, [r3, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	372c      	adds	r7, #44	; 0x2c
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_FLASH_Program+0xa0>)
 8004f2c:	7e1b      	ldrb	r3, [r3, #24]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_FLASH_Program+0x1e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e03b      	b.n	8004fae <HAL_FLASH_Program+0x96>
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_FLASH_Program+0xa0>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f40:	f000 f870 	bl	8005024 <FLASH_WaitForLastOperation>
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d12b      	bne.n	8004fa6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004f54:	783b      	ldrb	r3, [r7, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f000 f919 	bl	8005190 <FLASH_Program_Byte>
 8004f5e:	e016      	b.n	8004f8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d105      	bne.n	8004f72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004f66:	883b      	ldrh	r3, [r7, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	f000 f8ec 	bl	8005148 <FLASH_Program_HalfWord>
 8004f70:	e00d      	b.n	8004f8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d105      	bne.n	8004f84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	68b8      	ldr	r0, [r7, #8]
 8004f7e:	f000 f8c1 	bl	8005104 <FLASH_Program_Word>
 8004f82:	e004      	b.n	8004f8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f88:	68b8      	ldr	r0, [r7, #8]
 8004f8a:	f000 f88b 	bl	80050a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f92:	f000 f847 	bl	8005024 <FLASH_WaitForLastOperation>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004f9a:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <HAL_FLASH_Program+0xa4>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	4a07      	ldr	r2, [pc, #28]	; (8004fbc <HAL_FLASH_Program+0xa4>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <HAL_FLASH_Program+0xa0>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20020c08 	.word	0x20020c08
 8004fbc:	40023c00 	.word	0x40023c00

08004fc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <HAL_FLASH_Unlock+0x38>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	da0b      	bge.n	8004fea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_FLASH_Unlock+0x38>)
 8004fd4:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <HAL_FLASH_Unlock+0x3c>)
 8004fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_FLASH_Unlock+0x38>)
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_FLASH_Unlock+0x38>)
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da01      	bge.n	8004fea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004fea:	79fb      	ldrb	r3, [r7, #7]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40023c00 	.word	0x40023c00
 8004ffc:	45670123 	.word	0x45670123
 8005000:	cdef89ab 	.word	0xcdef89ab

08005004 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_FLASH_Lock+0x1c>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <HAL_FLASH_Lock+0x1c>)
 800500e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005012:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40023c00 	.word	0x40023c00

08005024 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <FLASH_WaitForLastOperation+0x78>)
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005036:	f7ff fa17 	bl	8004468 <HAL_GetTick>
 800503a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800503c:	e010      	b.n	8005060 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d00c      	beq.n	8005060 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <FLASH_WaitForLastOperation+0x38>
 800504c:	f7ff fa0c 	bl	8004468 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d201      	bcs.n	8005060 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e019      	b.n	8005094 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <FLASH_WaitForLastOperation+0x7c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e8      	bne.n	800503e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <FLASH_WaitForLastOperation+0x7c>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <FLASH_WaitForLastOperation+0x7c>)
 800507a:	2201      	movs	r2, #1
 800507c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800507e:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <FLASH_WaitForLastOperation+0x7c>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800508a:	f000 f8a3 	bl	80051d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
  
}  
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20020c08 	.word	0x20020c08
 80050a0:	40023c00 	.word	0x40023c00

080050a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80050a4:	b490      	push	{r4, r7}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	4a12      	ldr	r2, [pc, #72]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <FLASH_Program_DoubleWord+0x5c>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80050da:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80050de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	0013      	movs	r3, r2
 80050ec:	2400      	movs	r4, #0
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	3204      	adds	r2, #4
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc90      	pop	{r4, r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023c00 	.word	0x40023c00

08005104 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <FLASH_Program_Word+0x40>)
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <FLASH_Program_Word+0x40>)
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <FLASH_Program_Word+0x40>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <FLASH_Program_Word+0x40>)
 8005120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <FLASH_Program_Word+0x40>)
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	4a06      	ldr	r2, [pc, #24]	; (8005144 <FLASH_Program_Word+0x40>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40023c00 	.word	0x40023c00

08005148 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005154:	4b0d      	ldr	r3, [pc, #52]	; (800518c <FLASH_Program_HalfWord+0x44>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	4a0c      	ldr	r2, [pc, #48]	; (800518c <FLASH_Program_HalfWord+0x44>)
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <FLASH_Program_HalfWord+0x44>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <FLASH_Program_HalfWord+0x44>)
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <FLASH_Program_HalfWord+0x44>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	4a06      	ldr	r2, [pc, #24]	; (800518c <FLASH_Program_HalfWord+0x44>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	801a      	strh	r2, [r3, #0]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00

08005190 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <FLASH_Program_Byte+0x40>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4a0b      	ldr	r2, [pc, #44]	; (80051d0 <FLASH_Program_Byte+0x40>)
 80051a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <FLASH_Program_Byte+0x40>)
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <FLASH_Program_Byte+0x40>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <FLASH_Program_Byte+0x40>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <FLASH_Program_Byte+0x40>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	701a      	strb	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40023c00 	.word	0x40023c00

080051d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80051e4:	4b2d      	ldr	r3, [pc, #180]	; (800529c <FLASH_SetErrorCode+0xc8>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f043 0310 	orr.w	r3, r3, #16
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <FLASH_SetErrorCode+0xc8>)
 80051ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80051f0:	4b29      	ldr	r3, [pc, #164]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 80051f2:	2210      	movs	r2, #16
 80051f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <FLASH_SetErrorCode+0xc8>)
 800520c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 8005210:	2220      	movs	r2, #32
 8005212:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005214:	4b20      	ldr	r3, [pc, #128]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005220:	4b1e      	ldr	r3, [pc, #120]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <FLASH_SetErrorCode+0xc8>)
 800522a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005232:	4b19      	ldr	r3, [pc, #100]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005248:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <FLASH_SetErrorCode+0xc8>)
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005266:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 800526a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800526e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <FLASH_SetErrorCode+0xc8>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	4a05      	ldr	r2, [pc, #20]	; (800529c <FLASH_SetErrorCode+0xc8>)
 8005286:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <FLASH_SetErrorCode+0xc4>)
 800528a:	2202      	movs	r2, #2
 800528c:	60da      	str	r2, [r3, #12]
  }
}
 800528e:	bf00      	nop
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40023c00 	.word	0x40023c00
 800529c:	20020c08 	.word	0x20020c08

080052a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e010      	b.n	80052de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d103      	bne.n	80052ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80052c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e009      	b.n	80052de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d103      	bne.n	80052d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80052d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e002      	b.n	80052de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80052d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b0b      	cmp	r3, #11
 80052e2:	d902      	bls.n	80052ea <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <FLASH_Erase_Sector+0x98>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <FLASH_Erase_Sector+0x98>)
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <FLASH_Erase_Sector+0x98>)
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	490f      	ldr	r1, [pc, #60]	; (8005338 <FLASH_Erase_Sector+0x98>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <FLASH_Erase_Sector+0x98>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	4a0c      	ldr	r2, [pc, #48]	; (8005338 <FLASH_Erase_Sector+0x98>)
 8005308:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800530c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <FLASH_Erase_Sector+0x98>)
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4313      	orrs	r3, r2
 8005318:	4a07      	ldr	r2, [pc, #28]	; (8005338 <FLASH_Erase_Sector+0x98>)
 800531a:	f043 0302 	orr.w	r3, r3, #2
 800531e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <FLASH_Erase_Sector+0x98>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <FLASH_Erase_Sector+0x98>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6113      	str	r3, [r2, #16]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40023c00 	.word	0x40023c00

0800533c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800533c:	b480      	push	{r7}
 800533e:	b089      	sub	sp, #36	; 0x24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800534e:	2300      	movs	r3, #0
 8005350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e177      	b.n	8005648 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005358:	2201      	movs	r2, #1
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4013      	ands	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	429a      	cmp	r2, r3
 8005372:	f040 8166 	bne.w	8005642 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d00b      	beq.n	8005396 <HAL_GPIO_Init+0x5a>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d007      	beq.n	8005396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800538a:	2b11      	cmp	r3, #17
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b12      	cmp	r3, #18
 8005394:	d130      	bne.n	80053f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	2203      	movs	r2, #3
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053cc:	2201      	movs	r2, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 0201 	and.w	r2, r3, #1
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	2203      	movs	r2, #3
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d003      	beq.n	8005438 <HAL_GPIO_Init+0xfc>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b12      	cmp	r3, #18
 8005436:	d123      	bne.n	8005480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	08da      	lsrs	r2, r3, #3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3208      	adds	r2, #8
 8005440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	220f      	movs	r2, #15
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	08da      	lsrs	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3208      	adds	r2, #8
 800547a:	69b9      	ldr	r1, [r7, #24]
 800547c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	2203      	movs	r2, #3
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0203 	and.w	r2, r3, #3
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 80c0 	beq.w	8005642 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	4b65      	ldr	r3, [pc, #404]	; (800565c <HAL_GPIO_Init+0x320>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	4a64      	ldr	r2, [pc, #400]	; (800565c <HAL_GPIO_Init+0x320>)
 80054cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d0:	6453      	str	r3, [r2, #68]	; 0x44
 80054d2:	4b62      	ldr	r3, [pc, #392]	; (800565c <HAL_GPIO_Init+0x320>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054de:	4a60      	ldr	r2, [pc, #384]	; (8005660 <HAL_GPIO_Init+0x324>)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	3302      	adds	r3, #2
 80054e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	220f      	movs	r2, #15
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4013      	ands	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a57      	ldr	r2, [pc, #348]	; (8005664 <HAL_GPIO_Init+0x328>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d037      	beq.n	800557a <HAL_GPIO_Init+0x23e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a56      	ldr	r2, [pc, #344]	; (8005668 <HAL_GPIO_Init+0x32c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_GPIO_Init+0x23a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a55      	ldr	r2, [pc, #340]	; (800566c <HAL_GPIO_Init+0x330>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02b      	beq.n	8005572 <HAL_GPIO_Init+0x236>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a54      	ldr	r2, [pc, #336]	; (8005670 <HAL_GPIO_Init+0x334>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d025      	beq.n	800556e <HAL_GPIO_Init+0x232>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a53      	ldr	r2, [pc, #332]	; (8005674 <HAL_GPIO_Init+0x338>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <HAL_GPIO_Init+0x22e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a52      	ldr	r2, [pc, #328]	; (8005678 <HAL_GPIO_Init+0x33c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d019      	beq.n	8005566 <HAL_GPIO_Init+0x22a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a51      	ldr	r2, [pc, #324]	; (800567c <HAL_GPIO_Init+0x340>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_GPIO_Init+0x226>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a50      	ldr	r2, [pc, #320]	; (8005680 <HAL_GPIO_Init+0x344>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00d      	beq.n	800555e <HAL_GPIO_Init+0x222>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a4f      	ldr	r2, [pc, #316]	; (8005684 <HAL_GPIO_Init+0x348>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <HAL_GPIO_Init+0x21e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a4e      	ldr	r2, [pc, #312]	; (8005688 <HAL_GPIO_Init+0x34c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_GPIO_Init+0x21a>
 8005552:	2309      	movs	r3, #9
 8005554:	e012      	b.n	800557c <HAL_GPIO_Init+0x240>
 8005556:	230a      	movs	r3, #10
 8005558:	e010      	b.n	800557c <HAL_GPIO_Init+0x240>
 800555a:	2308      	movs	r3, #8
 800555c:	e00e      	b.n	800557c <HAL_GPIO_Init+0x240>
 800555e:	2307      	movs	r3, #7
 8005560:	e00c      	b.n	800557c <HAL_GPIO_Init+0x240>
 8005562:	2306      	movs	r3, #6
 8005564:	e00a      	b.n	800557c <HAL_GPIO_Init+0x240>
 8005566:	2305      	movs	r3, #5
 8005568:	e008      	b.n	800557c <HAL_GPIO_Init+0x240>
 800556a:	2304      	movs	r3, #4
 800556c:	e006      	b.n	800557c <HAL_GPIO_Init+0x240>
 800556e:	2303      	movs	r3, #3
 8005570:	e004      	b.n	800557c <HAL_GPIO_Init+0x240>
 8005572:	2302      	movs	r3, #2
 8005574:	e002      	b.n	800557c <HAL_GPIO_Init+0x240>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_GPIO_Init+0x240>
 800557a:	2300      	movs	r3, #0
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	f002 0203 	and.w	r2, r2, #3
 8005582:	0092      	lsls	r2, r2, #2
 8005584:	4093      	lsls	r3, r2
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800558c:	4934      	ldr	r1, [pc, #208]	; (8005660 <HAL_GPIO_Init+0x324>)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	3302      	adds	r3, #2
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800559a:	4b3c      	ldr	r3, [pc, #240]	; (800568c <HAL_GPIO_Init+0x350>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055be:	4a33      	ldr	r2, [pc, #204]	; (800568c <HAL_GPIO_Init+0x350>)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <HAL_GPIO_Init+0x350>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055e8:	4a28      	ldr	r2, [pc, #160]	; (800568c <HAL_GPIO_Init+0x350>)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055ee:	4b27      	ldr	r3, [pc, #156]	; (800568c <HAL_GPIO_Init+0x350>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	43db      	mvns	r3, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4013      	ands	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005612:	4a1e      	ldr	r2, [pc, #120]	; (800568c <HAL_GPIO_Init+0x350>)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <HAL_GPIO_Init+0x350>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <HAL_GPIO_Init+0x350>)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3301      	adds	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b0f      	cmp	r3, #15
 800564c:	f67f ae84 	bls.w	8005358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005650:	bf00      	nop
 8005652:	3724      	adds	r7, #36	; 0x24
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40023800 	.word	0x40023800
 8005660:	40013800 	.word	0x40013800
 8005664:	40020000 	.word	0x40020000
 8005668:	40020400 	.word	0x40020400
 800566c:	40020800 	.word	0x40020800
 8005670:	40020c00 	.word	0x40020c00
 8005674:	40021000 	.word	0x40021000
 8005678:	40021400 	.word	0x40021400
 800567c:	40021800 	.word	0x40021800
 8005680:	40021c00 	.word	0x40021c00
 8005684:	40022000 	.word	0x40022000
 8005688:	40022400 	.word	0x40022400
 800568c:	40013c00 	.word	0x40013c00

08005690 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e0d9      	b.n	8005860 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056ac:	2201      	movs	r2, #1
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	f040 80c9 	bne.w	800585a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056c8:	4a6a      	ldr	r2, [pc, #424]	; (8005874 <HAL_GPIO_DeInit+0x1e4>)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	3302      	adds	r3, #2
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	220f      	movs	r2, #15
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a62      	ldr	r2, [pc, #392]	; (8005878 <HAL_GPIO_DeInit+0x1e8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d037      	beq.n	8005762 <HAL_GPIO_DeInit+0xd2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a61      	ldr	r2, [pc, #388]	; (800587c <HAL_GPIO_DeInit+0x1ec>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d031      	beq.n	800575e <HAL_GPIO_DeInit+0xce>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a60      	ldr	r2, [pc, #384]	; (8005880 <HAL_GPIO_DeInit+0x1f0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02b      	beq.n	800575a <HAL_GPIO_DeInit+0xca>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a5f      	ldr	r2, [pc, #380]	; (8005884 <HAL_GPIO_DeInit+0x1f4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d025      	beq.n	8005756 <HAL_GPIO_DeInit+0xc6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a5e      	ldr	r2, [pc, #376]	; (8005888 <HAL_GPIO_DeInit+0x1f8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01f      	beq.n	8005752 <HAL_GPIO_DeInit+0xc2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a5d      	ldr	r2, [pc, #372]	; (800588c <HAL_GPIO_DeInit+0x1fc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d019      	beq.n	800574e <HAL_GPIO_DeInit+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a5c      	ldr	r2, [pc, #368]	; (8005890 <HAL_GPIO_DeInit+0x200>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_GPIO_DeInit+0xba>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a5b      	ldr	r2, [pc, #364]	; (8005894 <HAL_GPIO_DeInit+0x204>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00d      	beq.n	8005746 <HAL_GPIO_DeInit+0xb6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <HAL_GPIO_DeInit+0x208>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <HAL_GPIO_DeInit+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a59      	ldr	r2, [pc, #356]	; (800589c <HAL_GPIO_DeInit+0x20c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d101      	bne.n	800573e <HAL_GPIO_DeInit+0xae>
 800573a:	2309      	movs	r3, #9
 800573c:	e012      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 800573e:	230a      	movs	r3, #10
 8005740:	e010      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 8005742:	2308      	movs	r3, #8
 8005744:	e00e      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 8005746:	2307      	movs	r3, #7
 8005748:	e00c      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 800574a:	2306      	movs	r3, #6
 800574c:	e00a      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 800574e:	2305      	movs	r3, #5
 8005750:	e008      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 8005752:	2304      	movs	r3, #4
 8005754:	e006      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 8005756:	2303      	movs	r3, #3
 8005758:	e004      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 800575a:	2302      	movs	r3, #2
 800575c:	e002      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_GPIO_DeInit+0xd4>
 8005762:	2300      	movs	r3, #0
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	f002 0203 	and.w	r2, r2, #3
 800576a:	0092      	lsls	r2, r2, #2
 800576c:	4093      	lsls	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	d132      	bne.n	80057da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	43db      	mvns	r3, r3
 800577c:	4948      	ldr	r1, [pc, #288]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 800577e:	4013      	ands	r3, r2
 8005780:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43db      	mvns	r3, r3
 800578a:	4945      	ldr	r1, [pc, #276]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 800578c:	4013      	ands	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005790:	4b43      	ldr	r3, [pc, #268]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	43db      	mvns	r3, r3
 8005798:	4941      	ldr	r1, [pc, #260]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 800579a:	4013      	ands	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800579e:	4b40      	ldr	r3, [pc, #256]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	493e      	ldr	r1, [pc, #248]	; (80058a0 <HAL_GPIO_DeInit+0x210>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	220f      	movs	r2, #15
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <HAL_GPIO_DeInit+0x1e4>)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	3302      	adds	r3, #2
 80057c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	4829      	ldr	r0, [pc, #164]	; (8005874 <HAL_GPIO_DeInit+0x1e4>)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	400a      	ands	r2, r1
 80057d4:	3302      	adds	r3, #2
 80057d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	2103      	movs	r1, #3
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	401a      	ands	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	08da      	lsrs	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3208      	adds	r2, #8
 80057f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	220f      	movs	r2, #15
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	08d2      	lsrs	r2, r2, #3
 8005810:	4019      	ands	r1, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3208      	adds	r2, #8
 8005816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2103      	movs	r1, #3
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	2101      	movs	r1, #1
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	fa01 f303 	lsl.w	r3, r1, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	2103      	movs	r1, #3
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	43db      	mvns	r3, r3
 8005854:	401a      	ands	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	3301      	adds	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	f67f af22 	bls.w	80056ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40013800 	.word	0x40013800
 8005878:	40020000 	.word	0x40020000
 800587c:	40020400 	.word	0x40020400
 8005880:	40020800 	.word	0x40020800
 8005884:	40020c00 	.word	0x40020c00
 8005888:	40021000 	.word	0x40021000
 800588c:	40021400 	.word	0x40021400
 8005890:	40021800 	.word	0x40021800
 8005894:	40021c00 	.word	0x40021c00
 8005898:	40022000 	.word	0x40022000
 800589c:	40022400 	.word	0x40022400
 80058a0:	40013c00 	.word	0x40013c00

080058a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b4:	787b      	ldrb	r3, [r7, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058c0:	e003      	b.n	80058ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	619a      	str	r2, [r3, #24]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e11f      	b.n	8005b2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fb f9d0 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	; 0x24
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800592a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800593a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800593c:	f001 ff8e 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 8005940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4a7b      	ldr	r2, [pc, #492]	; (8005b34 <HAL_I2C_Init+0x25c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d807      	bhi.n	800595c <HAL_I2C_Init+0x84>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a7a      	ldr	r2, [pc, #488]	; (8005b38 <HAL_I2C_Init+0x260>)
 8005950:	4293      	cmp	r3, r2
 8005952:	bf94      	ite	ls
 8005954:	2301      	movls	r3, #1
 8005956:	2300      	movhi	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e006      	b.n	800596a <HAL_I2C_Init+0x92>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a77      	ldr	r2, [pc, #476]	; (8005b3c <HAL_I2C_Init+0x264>)
 8005960:	4293      	cmp	r3, r2
 8005962:	bf94      	ite	ls
 8005964:	2301      	movls	r3, #1
 8005966:	2300      	movhi	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0db      	b.n	8005b2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a72      	ldr	r2, [pc, #456]	; (8005b40 <HAL_I2C_Init+0x268>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0c9b      	lsrs	r3, r3, #18
 800597c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4a64      	ldr	r2, [pc, #400]	; (8005b34 <HAL_I2C_Init+0x25c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d802      	bhi.n	80059ac <HAL_I2C_Init+0xd4>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	3301      	adds	r3, #1
 80059aa:	e009      	b.n	80059c0 <HAL_I2C_Init+0xe8>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	4a63      	ldr	r2, [pc, #396]	; (8005b44 <HAL_I2C_Init+0x26c>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	3301      	adds	r3, #1
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4956      	ldr	r1, [pc, #344]	; (8005b34 <HAL_I2C_Init+0x25c>)
 80059dc:	428b      	cmp	r3, r1
 80059de:	d80d      	bhi.n	80059fc <HAL_I2C_Init+0x124>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e59      	subs	r1, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	bf38      	it	cc
 80059f8:	2304      	movcc	r3, #4
 80059fa:	e04f      	b.n	8005a9c <HAL_I2C_Init+0x1c4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d111      	bne.n	8005a28 <HAL_I2C_Init+0x150>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	1e58      	subs	r0, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6859      	ldr	r1, [r3, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	440b      	add	r3, r1
 8005a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e012      	b.n	8005a4e <HAL_I2C_Init+0x176>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1e58      	subs	r0, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	0099      	lsls	r1, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_I2C_Init+0x17e>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e022      	b.n	8005a9c <HAL_I2C_Init+0x1c4>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <HAL_I2C_Init+0x1a4>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1e58      	subs	r0, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	440b      	add	r3, r1
 8005a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a70:	3301      	adds	r3, #1
 8005a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7a:	e00f      	b.n	8005a9c <HAL_I2C_Init+0x1c4>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1e58      	subs	r0, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6859      	ldr	r1, [r3, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	0099      	lsls	r1, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a92:	3301      	adds	r3, #1
 8005a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	6809      	ldr	r1, [r1, #0]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6911      	ldr	r1, [r2, #16]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68d2      	ldr	r2, [r2, #12]
 8005ad6:	4311      	orrs	r1, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	000186a0 	.word	0x000186a0
 8005b38:	001e847f 	.word	0x001e847f
 8005b3c:	003d08ff 	.word	0x003d08ff
 8005b40:	431bde83 	.word	0x431bde83
 8005b44:	10624dd3 	.word	0x10624dd3

08005b48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e021      	b.n	8005b9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2224      	movs	r2, #36	; 0x24
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb f900 	bl	8000d78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fe fc51 	bl	8004468 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	f040 80d9 	bne.w	8005d88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2319      	movs	r3, #25
 8005bdc:	2201      	movs	r2, #1
 8005bde:	496d      	ldr	r1, [pc, #436]	; (8005d94 <HAL_I2C_Mem_Write+0x1ec>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc89 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0cc      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Mem_Write+0x56>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0c5      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d007      	beq.n	8005c24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_I2C_Mem_Write+0x1f0>)
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c66:	88f8      	ldrh	r0, [r7, #6]
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	8979      	ldrh	r1, [r7, #10]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fac4 	bl	8006204 <I2C_RequestMemoryWrite>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d052      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e081      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fd0a 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06b      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x180>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d017      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1aa      	bne.n	8005c86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fcf6 	bl	8006726 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d107      	bne.n	8005d58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	00100002 	.word	0x00100002
 8005d98:	ffff0000 	.word	0xffff0000

08005d9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	; 0x30
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005db6:	f7fe fb57 	bl	8004468 <HAL_GetTick>
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	f040 8208 	bne.w	80061da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	2319      	movs	r3, #25
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	497b      	ldr	r1, [pc, #492]	; (8005fc0 <HAL_I2C_Mem_Read+0x224>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fb8f 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
 8005de2:	e1fb      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Mem_Read+0x56>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e1f4      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d007      	beq.n	8005e18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2222      	movs	r2, #34	; 0x22
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a5b      	ldr	r2, [pc, #364]	; (8005fc4 <HAL_I2C_Mem_Read+0x228>)
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5a:	88f8      	ldrh	r0, [r7, #6]
 8005e5c:	893a      	ldrh	r2, [r7, #8]
 8005e5e:	8979      	ldrh	r1, [r7, #10]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4603      	mov	r3, r0
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa5e 	bl	800632c <I2C_RequestMemoryRead>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e1b0      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e82:	2300      	movs	r3, #0
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e184      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d11b      	bne.n	8005eea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e164      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d11b      	bne.n	8005f2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	e144      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f40:	e138      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f200 80f1 	bhi.w	800612e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d123      	bne.n	8005f9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fc25 	bl	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e139      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f9a:	e10b      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d14e      	bne.n	8006042 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2200      	movs	r2, #0
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <HAL_I2C_Mem_Read+0x22c>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 faa2 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e10e      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
 8005fbe:	bf00      	nop
 8005fc0:	00100002 	.word	0x00100002
 8005fc4:	ffff0000 	.word	0xffff0000
 8005fc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006040:	e0b8      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	2200      	movs	r2, #0
 800604a:	4966      	ldr	r1, [pc, #408]	; (80061e4 <HAL_I2C_Mem_Read+0x448>)
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa53 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0bf      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2200      	movs	r2, #0
 80060a6:	494f      	ldr	r1, [pc, #316]	; (80061e4 <HAL_I2C_Mem_Read+0x448>)
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fa25 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e091      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800612c:	e042      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fb38 	bl	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e04c      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b04      	cmp	r3, #4
 8006180:	d118      	bne.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f47f aec2 	bne.w	8005f42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	; 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	00010004 	.word	0x00010004

080061e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	b2db      	uxtb	r3, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2200      	movs	r2, #0
 8006236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f95c 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e05f      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006260:	897b      	ldrh	r3, [r7, #10]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800626e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	492c      	ldr	r1, [pc, #176]	; (8006328 <I2C_RequestMemoryWrite+0x124>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f995 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e04c      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629e:	6a39      	ldr	r1, [r7, #32]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f9ff 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d107      	bne.n	80062c4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02b      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	e021      	b.n	800631e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	6a39      	ldr	r1, [r7, #32]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f9d9 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00d      	beq.n	8006314 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d107      	bne.n	8006310 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e005      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	00010002 	.word	0x00010002

0800632c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	461a      	mov	r2, r3
 800633a:	4603      	mov	r3, r0
 800633c:	817b      	strh	r3, [r7, #10]
 800633e:	460b      	mov	r3, r1
 8006340:	813b      	strh	r3, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006354:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2200      	movs	r2, #0
 800636e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f8c0 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0a9      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006398:	897b      	ldrh	r3, [r7, #10]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	4951      	ldr	r1, [pc, #324]	; (80064f4 <I2C_RequestMemoryRead+0x1c8>)
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f8f9 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e096      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	6a39      	ldr	r1, [r7, #32]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f963 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d107      	bne.n	80063fc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e075      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]
 8006410:	e021      	b.n	8006456 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	b29b      	uxth	r3, r3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	6a39      	ldr	r1, [r7, #32]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f93d 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b04      	cmp	r3, #4
 8006436:	d107      	bne.n	8006448 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04f      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800644c:	893b      	ldrh	r3, [r7, #8]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006458:	6a39      	ldr	r1, [r7, #32]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f922 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	2b04      	cmp	r3, #4
 800646c:	d107      	bne.n	800647e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e034      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2200      	movs	r2, #0
 800649a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f82a 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e013      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064c4:	897b      	ldrh	r3, [r7, #10]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	6a3a      	ldr	r2, [r7, #32]
 80064d8:	4906      	ldr	r1, [pc, #24]	; (80064f4 <I2C_RequestMemoryRead+0x1c8>)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f863 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	00010002 	.word	0x00010002

080064f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006508:	e025      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d021      	beq.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fd ffa9 	bl	8004468 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d116      	bne.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e023      	b.n	800659e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10d      	bne.n	800657c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	43da      	mvns	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	e00c      	b.n	8006596 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	43da      	mvns	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	429a      	cmp	r2, r3
 800659a:	d0b6      	beq.n	800650a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b4:	e051      	b.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c4:	d123      	bne.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0204 	orr.w	r2, r3, #4
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e046      	b.n	800669c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d021      	beq.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fd ff27 	bl	8004468 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e020      	b.n	800669c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	0c1b      	lsrs	r3, r3, #16
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10c      	bne.n	800667e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	43da      	mvns	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf14      	ite	ne
 8006676:	2301      	movne	r3, #1
 8006678:	2300      	moveq	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e00b      	b.n	8006696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	43da      	mvns	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d18d      	bne.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b0:	e02d      	b.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f8ce 	bl	8006854 <I2C_IsAcknowledgeFailed>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e02d      	b.n	800671e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d021      	beq.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ca:	f7fd fecd 	bl	8004468 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d116      	bne.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e007      	b.n	800671e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d1ca      	bne.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006732:	e02d      	b.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f88d 	bl	8006854 <I2C_IsAcknowledgeFailed>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e02d      	b.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d021      	beq.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674c:	f7fd fe8c 	bl	8004468 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d116      	bne.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e007      	b.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d1ca      	bne.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067b4:	e042      	b.n	800683c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d119      	bne.n	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0210 	mvn.w	r2, #16
 80067cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e029      	b.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f8:	f7fd fe36 	bl	8004468 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d116      	bne.n	800683c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	f043 0220 	orr.w	r2, r3, #32
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e007      	b.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d1b5      	bne.n	80067b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d11b      	bne.n	80068a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f043 0204 	orr.w	r2, r3, #4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d129      	bne.n	800691c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2224      	movs	r2, #36	; 0x24
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0210 	bic.w	r2, r2, #16
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	e000      	b.n	800691e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
  }
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b20      	cmp	r3, #32
 8006942:	d12a      	bne.n	800699a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2224      	movs	r2, #36	; 0x24
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006964:	89fb      	ldrh	r3, [r7, #14]
 8006966:	f023 030f 	bic.w	r3, r3, #15
 800696a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	b29a      	uxth	r2, r3
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	4313      	orrs	r3, r2
 8006974:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	89fa      	ldrh	r2, [r7, #14]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0201 	orr.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0bf      	b.n	8006b3a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa faaa 	bl	8000f28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80069ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6999      	ldr	r1, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6899      	ldr	r1, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68d9      	ldr	r1, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b3e      	ldr	r3, [pc, #248]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6919      	ldr	r1, [r3, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b33      	ldr	r3, [pc, #204]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6919      	ldr	r1, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6959      	ldr	r1, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <HAL_LTDC_Init+0x19c>)
 8006aa6:	400b      	ands	r3, r1
 8006aa8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6959      	ldr	r1, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0206 	orr.w	r2, r2, #6
 8006b16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	f000f800 	.word	0xf000f800

08006b48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b48:	b5b0      	push	{r4, r5, r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_LTDC_ConfigLayer+0x1a>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e02c      	b.n	8006bbc <HAL_LTDC_ConfigLayer+0x74>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2134      	movs	r1, #52	; 0x34
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4614      	mov	r4, r2
 8006b86:	461d      	mov	r5, r3
 8006b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f83b 	bl	8006c18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bdb0      	pop	{r4, r5, r7, pc}

08006bc4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_LTDC_EnableDither+0x16>
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	e016      	b.n	8006c08 <HAL_LTDC_EnableDither+0x44>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_LTDC_EnableDither+0x50>)
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <HAL_LTDC_EnableDither+0x50>)
 8006bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	40016800 	.word	0x40016800

08006c18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c34:	4413      	add	r3, r2
 8006c36:	041b      	lsls	r3, r3, #16
 8006c38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	01db      	lsls	r3, r3, #7
 8006c44:	4413      	add	r3, r2
 8006c46:	3384      	adds	r3, #132	; 0x84
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	01d2      	lsls	r2, r2, #7
 8006c54:	440a      	add	r2, r1
 8006c56:	3284      	adds	r2, #132	; 0x84
 8006c58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c6e:	4413      	add	r3, r2
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	01db      	lsls	r3, r3, #7
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3384      	adds	r3, #132	; 0x84
 8006c80:	4619      	mov	r1, r3
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c96:	4413      	add	r3, r2
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	01db      	lsls	r3, r3, #7
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3384      	adds	r3, #132	; 0x84
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	01d2      	lsls	r2, r2, #7
 8006cb6:	440a      	add	r2, r1
 8006cb8:	3284      	adds	r2, #132	; 0x84
 8006cba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cce:	4413      	add	r3, r2
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	01db      	lsls	r3, r3, #7
 8006cdc:	440b      	add	r3, r1
 8006cde:	3384      	adds	r3, #132	; 0x84
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	01db      	lsls	r3, r3, #7
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3384      	adds	r3, #132	; 0x84
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	01d2      	lsls	r2, r2, #7
 8006d02:	440a      	add	r2, r1
 8006d04:	3284      	adds	r2, #132	; 0x84
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	01db      	lsls	r3, r3, #7
 8006d16:	4413      	add	r3, r2
 8006d18:	3384      	adds	r3, #132	; 0x84
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	4413      	add	r3, r2
 8006d4a:	3384      	adds	r3, #132	; 0x84
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	4413      	add	r3, r2
 8006d5a:	3384      	adds	r3, #132	; 0x84
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d68:	461a      	mov	r2, r3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	01db      	lsls	r3, r3, #7
 8006d7c:	440b      	add	r3, r1
 8006d7e:	3384      	adds	r3, #132	; 0x84
 8006d80:	4619      	mov	r1, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	01db      	lsls	r3, r3, #7
 8006d92:	4413      	add	r3, r2
 8006d94:	3384      	adds	r3, #132	; 0x84
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	01d2      	lsls	r2, r2, #7
 8006da2:	440a      	add	r2, r1
 8006da4:	3284      	adds	r2, #132	; 0x84
 8006da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006daa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	01db      	lsls	r3, r3, #7
 8006db6:	4413      	add	r3, r2
 8006db8:	3384      	adds	r3, #132	; 0x84
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	4413      	add	r3, r2
 8006dce:	3384      	adds	r3, #132	; 0x84
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	01d2      	lsls	r2, r2, #7
 8006ddc:	440a      	add	r2, r1
 8006dde:	3284      	adds	r2, #132	; 0x84
 8006de0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006de4:	f023 0307 	bic.w	r3, r3, #7
 8006de8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	6809      	ldr	r1, [r1, #0]
 8006df6:	4608      	mov	r0, r1
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	01c9      	lsls	r1, r1, #7
 8006dfc:	4401      	add	r1, r0
 8006dfe:	3184      	adds	r1, #132	; 0x84
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	4413      	add	r3, r2
 8006e10:	3384      	adds	r3, #132	; 0x84
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	01db      	lsls	r3, r3, #7
 8006e1e:	4413      	add	r3, r2
 8006e20:	3384      	adds	r3, #132	; 0x84
 8006e22:	461a      	mov	r2, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	01db      	lsls	r3, r3, #7
 8006e32:	4413      	add	r3, r2
 8006e34:	3384      	adds	r3, #132	; 0x84
 8006e36:	461a      	mov	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d102      	bne.n	8006e4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006e46:	2304      	movs	r3, #4
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	e01b      	b.n	8006e84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d102      	bne.n	8006e5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006e54:	2303      	movs	r3, #3
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e014      	b.n	8006e84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d00b      	beq.n	8006e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d007      	beq.n	8006e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d003      	beq.n	8006e7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e76:	2b07      	cmp	r3, #7
 8006e78:	d102      	bne.n	8006e80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e001      	b.n	8006e84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006e80:	2301      	movs	r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	01db      	lsls	r3, r3, #7
 8006e8e:	4413      	add	r3, r2
 8006e90:	3384      	adds	r3, #132	; 0x84
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	4611      	mov	r1, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	01d2      	lsls	r2, r2, #7
 8006e9e:	440a      	add	r2, r1
 8006ea0:	3284      	adds	r2, #132	; 0x84
 8006ea2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	fb02 f303 	mul.w	r3, r2, r3
 8006eb2:	041a      	lsls	r2, r3, #16
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1acb      	subs	r3, r1, r3
 8006ebe:	69f9      	ldr	r1, [r7, #28]
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	68f9      	ldr	r1, [r7, #12]
 8006ec8:	6809      	ldr	r1, [r1, #0]
 8006eca:	4608      	mov	r0, r1
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	01c9      	lsls	r1, r1, #7
 8006ed0:	4401      	add	r1, r0
 8006ed2:	3184      	adds	r1, #132	; 0x84
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	01db      	lsls	r3, r3, #7
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3384      	adds	r3, #132	; 0x84
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	6812      	ldr	r2, [r2, #0]
 8006eec:	4611      	mov	r1, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	01d2      	lsls	r2, r2, #7
 8006ef2:	440a      	add	r2, r1
 8006ef4:	3284      	adds	r2, #132	; 0x84
 8006ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	01db      	lsls	r3, r3, #7
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3384      	adds	r3, #132	; 0x84
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	01db      	lsls	r3, r3, #7
 8006f20:	4413      	add	r3, r2
 8006f22:	3384      	adds	r3, #132	; 0x84
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	01d2      	lsls	r2, r2, #7
 8006f30:	440a      	add	r2, r1
 8006f32:	3284      	adds	r2, #132	; 0x84
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6013      	str	r3, [r2, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3724      	adds	r7, #36	; 0x24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	4b20      	ldr	r3, [pc, #128]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f60:	6413      	str	r3, [r2, #64]	; 0x40
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <HAL_PWREx_EnableOverDrive+0x94>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f74:	f7fd fa78 	bl	8004468 <HAL_GetTick>
 8006f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f7a:	e009      	b.n	8006f90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f7c:	f7fd fa74 	bl	8004468 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f8a:	d901      	bls.n	8006f90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e01f      	b.n	8006fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f90:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9c:	d1ee      	bne.n	8006f7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f9e:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa4:	f7fd fa60 	bl	8004468 <HAL_GetTick>
 8006fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006faa:	e009      	b.n	8006fc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fac:	f7fd fa5c 	bl	8004468 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fba:	d901      	bls.n	8006fc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e007      	b.n	8006fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fcc:	d1ee      	bne.n	8006fac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	420e0040 	.word	0x420e0040
 8006fe0:	40007000 	.word	0x40007000
 8006fe4:	420e0044 	.word	0x420e0044

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e25b      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d075      	beq.n	80070f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007006:	4ba3      	ldr	r3, [pc, #652]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b04      	cmp	r3, #4
 8007010:	d00c      	beq.n	800702c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007012:	4ba0      	ldr	r3, [pc, #640]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800701a:	2b08      	cmp	r3, #8
 800701c:	d112      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800701e:	4b9d      	ldr	r3, [pc, #628]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702a:	d10b      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b99      	ldr	r3, [pc, #612]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05b      	beq.n	80070f0 <HAL_RCC_OscConfig+0x108>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d157      	bne.n	80070f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e236      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x74>
 800704e:	4b91      	ldr	r3, [pc, #580]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a90      	ldr	r2, [pc, #576]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b8b      	ldr	r3, [pc, #556]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a8a      	ldr	r2, [pc, #552]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b88      	ldr	r3, [pc, #544]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a87      	ldr	r2, [pc, #540]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 8007080:	4b84      	ldr	r3, [pc, #528]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b81      	ldr	r3, [pc, #516]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a80      	ldr	r2, [pc, #512]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fd f9e2 	bl	8004468 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fd f9de 	bl	8004468 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1fb      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ba:	4b76      	ldr	r3, [pc, #472]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xc0>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7fd f9ce 	bl	8004468 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fd f9ca 	bl	8004468 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e1e7      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e2:	4b6c      	ldr	r3, [pc, #432]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0xe8>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d063      	beq.n	80071c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070fe:	4b65      	ldr	r3, [pc, #404]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710a:	4b62      	ldr	r3, [pc, #392]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007112:	2b08      	cmp	r3, #8
 8007114:	d11c      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007116:	4b5f      	ldr	r3, [pc, #380]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	4b5c      	ldr	r3, [pc, #368]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e1bb      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713a:	4b56      	ldr	r3, [pc, #344]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4952      	ldr	r1, [pc, #328]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800714a:	4313      	orrs	r3, r2
 800714c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714e:	e03a      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d020      	beq.n	800719a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007158:	4b4f      	ldr	r3, [pc, #316]	; (8007298 <HAL_RCC_OscConfig+0x2b0>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715e:	f7fd f983 	bl	8004468 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007166:	f7fd f97f 	bl	8004468 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e19c      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007178:	4b46      	ldr	r3, [pc, #280]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007184:	4b43      	ldr	r3, [pc, #268]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4940      	ldr	r1, [pc, #256]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]
 8007198:	e015      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800719a:	4b3f      	ldr	r3, [pc, #252]	; (8007298 <HAL_RCC_OscConfig+0x2b0>)
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fd f962 	bl	8004468 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071a8:	f7fd f95e 	bl	8004468 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e17b      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ba:	4b36      	ldr	r3, [pc, #216]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d030      	beq.n	8007234 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071da:	4b30      	ldr	r3, [pc, #192]	; (800729c <HAL_RCC_OscConfig+0x2b4>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fd f942 	bl	8004468 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071e8:	f7fd f93e 	bl	8004468 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e15b      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fa:	4b26      	ldr	r3, [pc, #152]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
 8007206:	e015      	b.n	8007234 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007208:	4b24      	ldr	r3, [pc, #144]	; (800729c <HAL_RCC_OscConfig+0x2b4>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800720e:	f7fd f92b 	bl	8004468 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007216:	f7fd f927 	bl	8004468 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e144      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800722a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f0      	bne.n	8007216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a0 	beq.w	8007382 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 800725c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007260:	6413      	str	r3, [r2, #64]	; 0x40
 8007262:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <HAL_RCC_OscConfig+0x2b8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727a:	2b00      	cmp	r3, #0
 800727c:	d121      	bne.n	80072c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <HAL_RCC_OscConfig+0x2b8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a07      	ldr	r2, [pc, #28]	; (80072a0 <HAL_RCC_OscConfig+0x2b8>)
 8007284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800728a:	f7fd f8ed 	bl	8004468 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007290:	e011      	b.n	80072b6 <HAL_RCC_OscConfig+0x2ce>
 8007292:	bf00      	nop
 8007294:	40023800 	.word	0x40023800
 8007298:	42470000 	.word	0x42470000
 800729c:	42470e80 	.word	0x42470e80
 80072a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a4:	f7fd f8e0 	bl	8004468 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e0fd      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b6:	4b81      	ldr	r3, [pc, #516]	; (80074bc <HAL_RCC_OscConfig+0x4d4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d106      	bne.n	80072d8 <HAL_RCC_OscConfig+0x2f0>
 80072ca:	4b7d      	ldr	r3, [pc, #500]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a7c      	ldr	r2, [pc, #496]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
 80072d6:	e01c      	b.n	8007312 <HAL_RCC_OscConfig+0x32a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b05      	cmp	r3, #5
 80072de:	d10c      	bne.n	80072fa <HAL_RCC_OscConfig+0x312>
 80072e0:	4b77      	ldr	r3, [pc, #476]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a76      	ldr	r2, [pc, #472]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072e6:	f043 0304 	orr.w	r3, r3, #4
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
 80072ec:	4b74      	ldr	r3, [pc, #464]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a73      	ldr	r2, [pc, #460]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	e00b      	b.n	8007312 <HAL_RCC_OscConfig+0x32a>
 80072fa:	4b71      	ldr	r3, [pc, #452]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	4a70      	ldr	r2, [pc, #448]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	6713      	str	r3, [r2, #112]	; 0x70
 8007306:	4b6e      	ldr	r3, [pc, #440]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	4a6d      	ldr	r2, [pc, #436]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 800730c:	f023 0304 	bic.w	r3, r3, #4
 8007310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d015      	beq.n	8007346 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731a:	f7fd f8a5 	bl	8004468 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007320:	e00a      	b.n	8007338 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007322:	f7fd f8a1 	bl	8004468 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e0bc      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007338:	4b61      	ldr	r3, [pc, #388]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ee      	beq.n	8007322 <HAL_RCC_OscConfig+0x33a>
 8007344:	e014      	b.n	8007370 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007346:	f7fd f88f 	bl	8004468 <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734c:	e00a      	b.n	8007364 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800734e:	f7fd f88b 	bl	8004468 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f241 3288 	movw	r2, #5000	; 0x1388
 800735c:	4293      	cmp	r3, r2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e0a6      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007364:	4b56      	ldr	r3, [pc, #344]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1ee      	bne.n	800734e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d105      	bne.n	8007382 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007376:	4b52      	ldr	r3, [pc, #328]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	4a51      	ldr	r2, [pc, #324]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 800737c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8092 	beq.w	80074b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800738c:	4b4c      	ldr	r3, [pc, #304]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 030c 	and.w	r3, r3, #12
 8007394:	2b08      	cmp	r3, #8
 8007396:	d05c      	beq.n	8007452 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d141      	bne.n	8007424 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a0:	4b48      	ldr	r3, [pc, #288]	; (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a6:	f7fd f85f 	bl	8004468 <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ac:	e008      	b.n	80073c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ae:	f7fd f85b 	bl	8004468 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e078      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c0:	4b3f      	ldr	r3, [pc, #252]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f0      	bne.n	80073ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	019b      	lsls	r3, r3, #6
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	3b01      	subs	r3, #1
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	061b      	lsls	r3, r3, #24
 80073f0:	4933      	ldr	r1, [pc, #204]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f6:	4b33      	ldr	r3, [pc, #204]	; (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fc:	f7fd f834 	bl	8004468 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007404:	f7fd f830 	bl	8004468 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e04d      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007416:	4b2a      	ldr	r3, [pc, #168]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCC_OscConfig+0x41c>
 8007422:	e045      	b.n	80074b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007424:	4b27      	ldr	r3, [pc, #156]	; (80074c4 <HAL_RCC_OscConfig+0x4dc>)
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742a:	f7fd f81d 	bl	8004468 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007432:	f7fd f819 	bl	8004468 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e036      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007444:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f0      	bne.n	8007432 <HAL_RCC_OscConfig+0x44a>
 8007450:	e02e      	b.n	80074b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e029      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <HAL_RCC_OscConfig+0x4d8>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	429a      	cmp	r2, r3
 8007470:	d11c      	bne.n	80074ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747c:	429a      	cmp	r2, r3
 800747e:	d115      	bne.n	80074ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800748c:	4293      	cmp	r3, r2
 800748e:	d10d      	bne.n	80074ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d106      	bne.n	80074ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40007000 	.word	0x40007000
 80074c0:	40023800 	.word	0x40023800
 80074c4:	42470060 	.word	0x42470060

080074c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0cc      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074dc:	4b68      	ldr	r3, [pc, #416]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d90c      	bls.n	8007504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ea:	4b65      	ldr	r3, [pc, #404]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	4b63      	ldr	r3, [pc, #396]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0b8      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d020      	beq.n	8007552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800751c:	4b59      	ldr	r3, [pc, #356]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a58      	ldr	r2, [pc, #352]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007534:	4b53      	ldr	r3, [pc, #332]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	4a52      	ldr	r2, [pc, #328]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800753a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800753e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007540:	4b50      	ldr	r3, [pc, #320]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	494d      	ldr	r1, [pc, #308]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	4313      	orrs	r3, r2
 8007550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d044      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d107      	bne.n	8007576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007566:	4b47      	ldr	r3, [pc, #284]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d119      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e07f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d003      	beq.n	8007586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007582:	2b03      	cmp	r3, #3
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007586:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e06f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007596:	4b3b      	ldr	r3, [pc, #236]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e067      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075a6:	4b37      	ldr	r3, [pc, #220]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4934      	ldr	r1, [pc, #208]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b8:	f7fc ff56 	bl	8004468 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	e00a      	b.n	80075d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c0:	f7fc ff52 	bl	8004468 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e04f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d6:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 020c 	and.w	r2, r3, #12
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d1eb      	bne.n	80075c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d20c      	bcs.n	8007610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b22      	ldr	r3, [pc, #136]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fe:	4b20      	ldr	r3, [pc, #128]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e032      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4916      	ldr	r1, [pc, #88]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	490e      	ldr	r1, [pc, #56]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800764e:	f000 f821 	bl	8007694 <HAL_RCC_GetSysClockFreq>
 8007652:	4601      	mov	r1, r0
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <HAL_RCC_ClockConfig+0x1c0>)
 8007660:	5cd3      	ldrb	r3, [r2, r3]
 8007662:	fa21 f303 	lsr.w	r3, r1, r3
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <HAL_RCC_ClockConfig+0x1c8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f7fa fb9a 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40023c00 	.word	0x40023c00
 8007684:	40023800 	.word	0x40023800
 8007688:	0800c388 	.word	0x0800c388
 800768c:	20000014 	.word	0x20000014
 8007690:	2000009c 	.word	0x2000009c

08007694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	2300      	movs	r3, #0
 80076a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076aa:	4b63      	ldr	r3, [pc, #396]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 030c 	and.w	r3, r3, #12
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d007      	beq.n	80076c6 <HAL_RCC_GetSysClockFreq+0x32>
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d008      	beq.n	80076cc <HAL_RCC_GetSysClockFreq+0x38>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 80b4 	bne.w	8007828 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076c0:	4b5e      	ldr	r3, [pc, #376]	; (800783c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80076c2:	60bb      	str	r3, [r7, #8]
       break;
 80076c4:	e0b3      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076c6:	4b5e      	ldr	r3, [pc, #376]	; (8007840 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80076c8:	60bb      	str	r3, [r7, #8]
      break;
 80076ca:	e0b0      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076cc:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076d6:	4b58      	ldr	r3, [pc, #352]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d04a      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076e2:	4b55      	ldr	r3, [pc, #340]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	ea03 0501 	and.w	r5, r3, r1
 80076f8:	ea04 0602 	and.w	r6, r4, r2
 80076fc:	4629      	mov	r1, r5
 80076fe:	4632      	mov	r2, r6
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	f04f 0400 	mov.w	r4, #0
 8007708:	0154      	lsls	r4, r2, #5
 800770a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800770e:	014b      	lsls	r3, r1, #5
 8007710:	4619      	mov	r1, r3
 8007712:	4622      	mov	r2, r4
 8007714:	1b49      	subs	r1, r1, r5
 8007716:	eb62 0206 	sbc.w	r2, r2, r6
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	0194      	lsls	r4, r2, #6
 8007724:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007728:	018b      	lsls	r3, r1, #6
 800772a:	1a5b      	subs	r3, r3, r1
 800772c:	eb64 0402 	sbc.w	r4, r4, r2
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	00e2      	lsls	r2, r4, #3
 800773a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800773e:	00d9      	lsls	r1, r3, #3
 8007740:	460b      	mov	r3, r1
 8007742:	4614      	mov	r4, r2
 8007744:	195b      	adds	r3, r3, r5
 8007746:	eb44 0406 	adc.w	r4, r4, r6
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	0262      	lsls	r2, r4, #9
 8007754:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007758:	0259      	lsls	r1, r3, #9
 800775a:	460b      	mov	r3, r1
 800775c:	4614      	mov	r4, r2
 800775e:	4618      	mov	r0, r3
 8007760:	4621      	mov	r1, r4
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f04f 0400 	mov.w	r4, #0
 8007768:	461a      	mov	r2, r3
 800776a:	4623      	mov	r3, r4
 800776c:	f7f8 fd40 	bl	80001f0 <__aeabi_uldivmod>
 8007770:	4603      	mov	r3, r0
 8007772:	460c      	mov	r4, r1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	e049      	b.n	800780c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007778:	4b2f      	ldr	r3, [pc, #188]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	099b      	lsrs	r3, r3, #6
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	ea03 0501 	and.w	r5, r3, r1
 800778e:	ea04 0602 	and.w	r6, r4, r2
 8007792:	4629      	mov	r1, r5
 8007794:	4632      	mov	r2, r6
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	f04f 0400 	mov.w	r4, #0
 800779e:	0154      	lsls	r4, r2, #5
 80077a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077a4:	014b      	lsls	r3, r1, #5
 80077a6:	4619      	mov	r1, r3
 80077a8:	4622      	mov	r2, r4
 80077aa:	1b49      	subs	r1, r1, r5
 80077ac:	eb62 0206 	sbc.w	r2, r2, r6
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	f04f 0400 	mov.w	r4, #0
 80077b8:	0194      	lsls	r4, r2, #6
 80077ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077be:	018b      	lsls	r3, r1, #6
 80077c0:	1a5b      	subs	r3, r3, r1
 80077c2:	eb64 0402 	sbc.w	r4, r4, r2
 80077c6:	f04f 0100 	mov.w	r1, #0
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	00e2      	lsls	r2, r4, #3
 80077d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077d4:	00d9      	lsls	r1, r3, #3
 80077d6:	460b      	mov	r3, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	195b      	adds	r3, r3, r5
 80077dc:	eb44 0406 	adc.w	r4, r4, r6
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	02a2      	lsls	r2, r4, #10
 80077ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80077ee:	0299      	lsls	r1, r3, #10
 80077f0:	460b      	mov	r3, r1
 80077f2:	4614      	mov	r4, r2
 80077f4:	4618      	mov	r0, r3
 80077f6:	4621      	mov	r1, r4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	461a      	mov	r2, r3
 8007800:	4623      	mov	r3, r4
 8007802:	f7f8 fcf5 	bl	80001f0 <__aeabi_uldivmod>
 8007806:	4603      	mov	r3, r0
 8007808:	460c      	mov	r4, r1
 800780a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	3301      	adds	r3, #1
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	60bb      	str	r3, [r7, #8]
      break;
 8007826:	e002      	b.n	800782e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800782a:	60bb      	str	r3, [r7, #8]
      break;
 800782c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800782e:	68bb      	ldr	r3, [r7, #8]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007838:	40023800 	.word	0x40023800
 800783c:	00f42400 	.word	0x00f42400
 8007840:	007a1200 	.word	0x007a1200

08007844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007848:	4b03      	ldr	r3, [pc, #12]	; (8007858 <HAL_RCC_GetHCLKFreq+0x14>)
 800784a:	681b      	ldr	r3, [r3, #0]
}
 800784c:	4618      	mov	r0, r3
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20000014 	.word	0x20000014

0800785c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007860:	f7ff fff0 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 8007864:	4601      	mov	r1, r0
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	0a9b      	lsrs	r3, r3, #10
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	4a03      	ldr	r2, [pc, #12]	; (8007880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007872:	5cd3      	ldrb	r3, [r2, r3]
 8007874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40023800 	.word	0x40023800
 8007880:	0800c398 	.word	0x0800c398

08007884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007888:	f7ff ffdc 	bl	8007844 <HAL_RCC_GetHCLKFreq>
 800788c:	4601      	mov	r1, r0
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	0b5b      	lsrs	r3, r3, #13
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4a03      	ldr	r2, [pc, #12]	; (80078a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800789a:	5cd3      	ldrb	r3, [r2, r3]
 800789c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40023800 	.word	0x40023800
 80078a8:	0800c398 	.word	0x0800c398

080078ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220f      	movs	r2, #15
 80078ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078bc:	4b12      	ldr	r3, [pc, #72]	; (8007908 <HAL_RCC_GetClockConfig+0x5c>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 0203 	and.w	r2, r3, #3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <HAL_RCC_GetClockConfig+0x5c>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <HAL_RCC_GetClockConfig+0x5c>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_RCC_GetClockConfig+0x5c>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <HAL_RCC_GetClockConfig+0x60>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40023800 	.word	0x40023800
 800790c:	40023c00 	.word	0x40023c00

08007910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007940:	2b00      	cmp	r3, #0
 8007942:	d075      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007944:	4bad      	ldr	r3, [pc, #692]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800794a:	f7fc fd8d 	bl	8004468 <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007950:	e008      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007952:	f7fc fd89 	bl	8004468 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e18b      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007964:	4ba6      	ldr	r3, [pc, #664]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f0      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	019a      	lsls	r2, r3, #6
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	071b      	lsls	r3, r3, #28
 8007988:	499d      	ldr	r1, [pc, #628]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01f      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800799c:	4b98      	ldr	r3, [pc, #608]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800799e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a2:	0f1b      	lsrs	r3, r3, #28
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	019a      	lsls	r2, r3, #6
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	061b      	lsls	r3, r3, #24
 80079b6:	431a      	orrs	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	071b      	lsls	r3, r3, #28
 80079bc:	4990      	ldr	r1, [pc, #576]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079c4:	4b8e      	ldr	r3, [pc, #568]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ca:	f023 021f 	bic.w	r2, r3, #31
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	498a      	ldr	r1, [pc, #552]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00d      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	019a      	lsls	r2, r3, #6
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	071b      	lsls	r3, r3, #28
 80079fc:	4980      	ldr	r1, [pc, #512]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a04:	4b7d      	ldr	r3, [pc, #500]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a0a:	f7fc fd2d 	bl	8004468 <HAL_GetTick>
 8007a0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a10:	e008      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a12:	f7fc fd29 	bl	8004468 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e12b      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a24:	4b76      	ldr	r3, [pc, #472]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f0      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d105      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d079      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a48:	4b6e      	ldr	r3, [pc, #440]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a4e:	f7fc fd0b 	bl	8004468 <HAL_GetTick>
 8007a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a54:	e008      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a56:	f7fc fd07 	bl	8004468 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e109      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a68:	4b65      	ldr	r3, [pc, #404]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a74:	d0ef      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d020      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a82:	4b5f      	ldr	r3, [pc, #380]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	0f1b      	lsrs	r3, r3, #28
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	019a      	lsls	r2, r3, #6
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	061b      	lsls	r3, r3, #24
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	071b      	lsls	r3, r3, #28
 8007aa2:	4957      	ldr	r1, [pc, #348]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007aaa:	4b55      	ldr	r3, [pc, #340]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	4950      	ldr	r1, [pc, #320]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01e      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad6:	0e1b      	lsrs	r3, r3, #24
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	019a      	lsls	r2, r3, #6
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	061b      	lsls	r3, r3, #24
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	071b      	lsls	r3, r3, #28
 8007af0:	4943      	ldr	r1, [pc, #268]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	493e      	ldr	r1, [pc, #248]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b0e:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b14:	f7fc fca8 	bl	8004468 <HAL_GetTick>
 8007b18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b1c:	f7fc fca4 	bl	8004468 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e0a6      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b2e:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3a:	d1ef      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 808d 	beq.w	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b58:	6413      	str	r3, [r2, #64]	; 0x40
 8007b5a:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b66:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b72:	f7fc fc79 	bl	8004468 <HAL_GetTick>
 8007b76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b7a:	f7fc fc75 	bl	8004468 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e077      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b8c:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f0      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d039      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d032      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bc6:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007bcc:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d11e      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bde:	f7fc fc43 	bl	8004468 <HAL_GetTick>
 8007be2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be4:	e014      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007be6:	f7fc fc3f 	bl	8004468 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d90b      	bls.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e03f      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007bfc:	42470068 	.word	0x42470068
 8007c00:	40023800 	.word	0x40023800
 8007c04:	42470070 	.word	0x42470070
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c10:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0e4      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c28:	d10d      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007c2a:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3e:	4911      	ldr	r1, [pc, #68]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	608b      	str	r3, [r1, #8]
 8007c44:	e005      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	4a0e      	ldr	r2, [pc, #56]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c50:	6093      	str	r3, [r2, #8]
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c5e:	4909      	ldr	r1, [pc, #36]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007c76:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007c78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40023800 	.word	0x40023800
 8007c88:	424711e0 	.word	0x424711e0

08007c8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e025      	b.n	8007cec <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7f8 fe6b 	bl	8000990 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f001 fbef 	bl	80094b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	f001 fc5a 	bl	8009596 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d101      	bne.n	8007d10 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e018      	b.n	8007d42 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fcb7 	bl	8009694 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d104      	bne.n	8007d38 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2205      	movs	r2, #5
 8007d32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007d36:	e003      	b.n	8007d40 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d101      	bne.n	8007d64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007d60:	2302      	movs	r3, #2
 8007d62:	e00e      	b.n	8007d82 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fcca 	bl	800970c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e056      	b.n	8007e4a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f9 ff64 	bl	8001c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	ea42 0103 	orr.w	r1, r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	0c1b      	lsrs	r3, r3, #16
 8007e1a:	f003 0104 	and.w	r1, r3, #4
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e01a      	b.n	8007e9a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7f9 ff49 	bl	8001d14 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_SPI_Transmit+0x22>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e11e      	b.n	8008102 <HAL_SPI_Transmit+0x260>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ecc:	f7fc facc 	bl	8004468 <HAL_GetTick>
 8007ed0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d002      	beq.n	8007ee8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ee6:	e103      	b.n	80080f0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_SPI_Transmit+0x52>
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ef8:	e0fa      	b.n	80080f0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	d107      	bne.n	8007f52 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d007      	beq.n	8007f70 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f78:	d14b      	bne.n	8008012 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_Transmit+0xe6>
 8007f82:	8afb      	ldrh	r3, [r7, #22]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d13e      	bne.n	8008006 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fac:	e02b      	b.n	8008006 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d112      	bne.n	8007fe2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	1c9a      	adds	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	86da      	strh	r2, [r3, #54]	; 0x36
 8007fe0:	e011      	b.n	8008006 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe2:	f7fc fa41 	bl	8004468 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d803      	bhi.n	8007ffa <HAL_SPI_Transmit+0x158>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d102      	bne.n	8008000 <HAL_SPI_Transmit+0x15e>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008004:	e074      	b.n	80080f0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1ce      	bne.n	8007fae <HAL_SPI_Transmit+0x10c>
 8008010:	e04c      	b.n	80080ac <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_SPI_Transmit+0x17e>
 800801a:	8afb      	ldrh	r3, [r7, #22]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d140      	bne.n	80080a2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008046:	e02c      	b.n	80080a2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b02      	cmp	r3, #2
 8008054:	d113      	bne.n	800807e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	86da      	strh	r2, [r3, #54]	; 0x36
 800807c:	e011      	b.n	80080a2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800807e:	f7fc f9f3 	bl	8004468 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d803      	bhi.n	8008096 <HAL_SPI_Transmit+0x1f4>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d102      	bne.n	800809c <HAL_SPI_Transmit+0x1fa>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080a0:	e026      	b.n	80080f0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1cd      	bne.n	8008048 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fbb3 	bl	800881c <SPI_EndRxTxTransaction>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e000      	b.n	80080f0 <HAL_SPI_Transmit+0x24e>
  }

error:
 80080ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008100:	7ffb      	ldrb	r3, [r7, #31]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b088      	sub	sp, #32
 800810e:	af02      	add	r7, sp, #8
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	603b      	str	r3, [r7, #0]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008126:	d112      	bne.n	800814e <HAL_SPI_Receive+0x44>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10e      	bne.n	800814e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2204      	movs	r2, #4
 8008134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4613      	mov	r3, r2
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f8e9 	bl	800831c <HAL_SPI_TransmitReceive>
 800814a:	4603      	mov	r3, r0
 800814c:	e0e2      	b.n	8008314 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_SPI_Receive+0x52>
 8008158:	2302      	movs	r3, #2
 800815a:	e0db      	b.n	8008314 <HAL_SPI_Receive+0x20a>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008164:	f7fc f980 	bl	8004468 <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	d002      	beq.n	800817c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008176:	2302      	movs	r3, #2
 8008178:	75fb      	strb	r3, [r7, #23]
    goto error;
 800817a:	e0c2      	b.n	8008302 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <HAL_SPI_Receive+0x7e>
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800818c:	e0b9      	b.n	8008302 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2204      	movs	r2, #4
 8008192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	88fa      	ldrh	r2, [r7, #6]
 80081a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	88fa      	ldrh	r2, [r7, #6]
 80081ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d4:	d107      	bne.n	80081e6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d007      	beq.n	8008204 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d162      	bne.n	80082d2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800820c:	e02e      	b.n	800826c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d115      	bne.n	8008248 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f103 020c 	add.w	r2, r3, #12
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	7812      	ldrb	r2, [r2, #0]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008246:	e011      	b.n	800826c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008248:	f7fc f90e 	bl	8004468 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d803      	bhi.n	8008260 <HAL_SPI_Receive+0x156>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	d102      	bne.n	8008266 <HAL_SPI_Receive+0x15c>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	75fb      	strb	r3, [r7, #23]
          goto error;
 800826a:	e04a      	b.n	8008302 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1cb      	bne.n	800820e <HAL_SPI_Receive+0x104>
 8008276:	e031      	b.n	80082dc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b01      	cmp	r3, #1
 8008284:	d113      	bne.n	80082ae <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	b292      	uxth	r2, r2
 8008292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082ac:	e011      	b.n	80082d2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ae:	f7fc f8db 	bl	8004468 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d803      	bhi.n	80082c6 <HAL_SPI_Receive+0x1bc>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d102      	bne.n	80082cc <HAL_SPI_Receive+0x1c2>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082d0:	e017      	b.n	8008302 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1cd      	bne.n	8008278 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fa35 	bl	8008750 <SPI_EndRxTransaction>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2220      	movs	r2, #32
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
 80082fe:	e000      	b.n	8008302 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08c      	sub	sp, #48	; 0x30
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800832a:	2301      	movs	r3, #1
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_SPI_TransmitReceive+0x26>
 800833e:	2302      	movs	r3, #2
 8008340:	e18a      	b.n	8008658 <HAL_SPI_TransmitReceive+0x33c>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800834a:	f7fc f88d 	bl	8004468 <HAL_GetTick>
 800834e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008360:	887b      	ldrh	r3, [r7, #2]
 8008362:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008368:	2b01      	cmp	r3, #1
 800836a:	d00f      	beq.n	800838c <HAL_SPI_TransmitReceive+0x70>
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008372:	d107      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <HAL_SPI_TransmitReceive+0x68>
 800837c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008380:	2b04      	cmp	r3, #4
 8008382:	d003      	beq.n	800838c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008384:	2302      	movs	r3, #2
 8008386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800838a:	e15b      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_SPI_TransmitReceive+0x82>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <HAL_SPI_TransmitReceive+0x82>
 8008398:	887b      	ldrh	r3, [r7, #2]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083a4:	e14e      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d003      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2205      	movs	r2, #5
 80083b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	887a      	ldrh	r2, [r7, #2]
 80083ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	887a      	ldrh	r2, [r7, #2]
 80083d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	887a      	ldrh	r2, [r7, #2]
 80083dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	887a      	ldrh	r2, [r7, #2]
 80083e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fa:	2b40      	cmp	r3, #64	; 0x40
 80083fc:	d007      	beq.n	800840e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008416:	d178      	bne.n	800850a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <HAL_SPI_TransmitReceive+0x10a>
 8008420:	8b7b      	ldrh	r3, [r7, #26]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d166      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	881a      	ldrh	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	1c9a      	adds	r2, r3, #2
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800844a:	e053      	b.n	80084f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d11b      	bne.n	8008492 <HAL_SPI_TransmitReceive+0x176>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d016      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x176>
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	2b01      	cmp	r3, #1
 8008468:	d113      	bne.n	8008492 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	881a      	ldrh	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b01      	cmp	r3, #1
 800849e:	d119      	bne.n	80084d4 <HAL_SPI_TransmitReceive+0x1b8>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d014      	beq.n	80084d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	b292      	uxth	r2, r2
 80084b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	1c9a      	adds	r2, r3, #2
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084d0:	2301      	movs	r3, #1
 80084d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084d4:	f7fb ffc8 	bl	8004468 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d807      	bhi.n	80084f4 <HAL_SPI_TransmitReceive+0x1d8>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d003      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084f2:	e0a7      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1a6      	bne.n	800844c <HAL_SPI_TransmitReceive+0x130>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1a1      	bne.n	800844c <HAL_SPI_TransmitReceive+0x130>
 8008508:	e07c      	b.n	8008604 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x1fc>
 8008512:	8b7b      	ldrh	r3, [r7, #26]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d16b      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	7812      	ldrb	r2, [r2, #0]
 8008524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800853e:	e057      	b.n	80085f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d11c      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x26c>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d017      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x26c>
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	2b01      	cmp	r3, #1
 800855c:	d114      	bne.n	8008588 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	330c      	adds	r3, #12
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b01      	cmp	r3, #1
 8008594:	d119      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x2ae>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d014      	beq.n	80085ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085c6:	2301      	movs	r3, #1
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085ca:	f7fb ff4d 	bl	8004468 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d803      	bhi.n	80085e2 <HAL_SPI_TransmitReceive+0x2c6>
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d102      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x2cc>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085ee:	e029      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1a2      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x224>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d19d      	bne.n	8008540 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f907 	bl	800881c <SPI_EndRxTxTransaction>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008620:	e010      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	e000      	b.n	8008644 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008658:	4618      	mov	r0, r3
 800865a:	3730      	adds	r7, #48	; 0x30
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800866e:	b2db      	uxtb	r3, r3
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800868c:	e04c      	b.n	8008728 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d048      	beq.n	8008728 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008696:	f7fb fee7 	bl	8004468 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d902      	bls.n	80086ac <SPI_WaitFlagStateUntilTimeout+0x30>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d13d      	bne.n	8008728 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086c4:	d111      	bne.n	80086ea <SPI_WaitFlagStateUntilTimeout+0x6e>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ce:	d004      	beq.n	80086da <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d8:	d107      	bne.n	80086ea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f2:	d10f      	bne.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008712:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e00f      	b.n	8008748 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	4013      	ands	r3, r2
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	bf0c      	ite	eq
 8008738:	2301      	moveq	r3, #1
 800873a:	2300      	movne	r3, #0
 800873c:	b2db      	uxtb	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	429a      	cmp	r2, r3
 8008744:	d1a3      	bne.n	800868e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008764:	d111      	bne.n	800878a <SPI_EndRxTransaction+0x3a>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876e:	d004      	beq.n	800877a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008778:	d107      	bne.n	800878a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008788:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008792:	d12a      	bne.n	80087ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879c:	d012      	beq.n	80087c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff ff67 	bl	800867c <SPI_WaitFlagStateUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d02d      	beq.n	8008810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b8:	f043 0220 	orr.w	r2, r3, #32
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e026      	b.n	8008812 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	2101      	movs	r1, #1
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f7ff ff54 	bl	800867c <SPI_WaitFlagStateUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d01a      	beq.n	8008810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	f043 0220 	orr.w	r2, r3, #32
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e013      	b.n	8008812 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	2101      	movs	r1, #1
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff ff41 	bl	800867c <SPI_WaitFlagStateUntilTimeout>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008804:	f043 0220 	orr.w	r2, r3, #32
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e000      	b.n	8008812 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008828:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <SPI_EndRxTxTransaction+0x7c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <SPI_EndRxTxTransaction+0x80>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	0d5b      	lsrs	r3, r3, #21
 8008834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008846:	d112      	bne.n	800886e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	2180      	movs	r1, #128	; 0x80
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff ff12 	bl	800867c <SPI_WaitFlagStateUntilTimeout>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d016      	beq.n	800888c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	f043 0220 	orr.w	r2, r3, #32
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e00f      	b.n	800888e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3b01      	subs	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d0f2      	beq.n	800886e <SPI_EndRxTxTransaction+0x52>
 8008888:	e000      	b.n	800888c <SPI_EndRxTxTransaction+0x70>
        break;
 800888a:	bf00      	nop
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000014 	.word	0x20000014
 800889c:	165e9f81 	.word	0x165e9f81

080088a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e01d      	b.n	80088ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f815 	bl	80088f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f000 f968 	bl	8008bb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0201 	orr.w	r2, r2, #1
 8008920:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b06      	cmp	r3, #6
 8008932:	d007      	beq.n	8008944 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0201 	orr.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b02      	cmp	r3, #2
 8008966:	d122      	bne.n	80089ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b02      	cmp	r3, #2
 8008974:	d11b      	bne.n	80089ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f06f 0202 	mvn.w	r2, #2
 800897e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8ee 	bl	8008b76 <HAL_TIM_IC_CaptureCallback>
 800899a:	e005      	b.n	80089a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f8e0 	bl	8008b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f8f1 	bl	8008b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d122      	bne.n	8008a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d11b      	bne.n	8008a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f06f 0204 	mvn.w	r2, #4
 80089d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f8c4 	bl	8008b76 <HAL_TIM_IC_CaptureCallback>
 80089ee:	e005      	b.n	80089fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8b6 	bl	8008b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8c7 	bl	8008b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d122      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f003 0308 	and.w	r3, r3, #8
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d11b      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f06f 0208 	mvn.w	r2, #8
 8008a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f89a 	bl	8008b76 <HAL_TIM_IC_CaptureCallback>
 8008a42:	e005      	b.n	8008a50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f88c 	bl	8008b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f89d 	bl	8008b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d122      	bne.n	8008aaa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0310 	and.w	r3, r3, #16
 8008a6e:	2b10      	cmp	r3, #16
 8008a70:	d11b      	bne.n	8008aaa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f06f 0210 	mvn.w	r2, #16
 8008a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2208      	movs	r2, #8
 8008a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f870 	bl	8008b76 <HAL_TIM_IC_CaptureCallback>
 8008a96:	e005      	b.n	8008aa4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f862 	bl	8008b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f873 	bl	8008b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d10e      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d107      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f06f 0201 	mvn.w	r2, #1
 8008ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f8 fbe5 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae0:	2b80      	cmp	r3, #128	; 0x80
 8008ae2:	d10e      	bne.n	8008b02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b80      	cmp	r3, #128	; 0x80
 8008af0:	d107      	bne.n	8008b02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f903 	bl	8008d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b40      	cmp	r3, #64	; 0x40
 8008b0e:	d10e      	bne.n	8008b2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d107      	bne.n	8008b2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f838 	bl	8008b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d10e      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d107      	bne.n	8008b5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f06f 0220 	mvn.w	r2, #32
 8008b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8cd 	bl	8008cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a40      	ldr	r2, [pc, #256]	; (8008cc8 <TIM_Base_SetConfig+0x114>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d013      	beq.n	8008bf4 <TIM_Base_SetConfig+0x40>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd2:	d00f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x40>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a3d      	ldr	r2, [pc, #244]	; (8008ccc <TIM_Base_SetConfig+0x118>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x40>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a3c      	ldr	r2, [pc, #240]	; (8008cd0 <TIM_Base_SetConfig+0x11c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d007      	beq.n	8008bf4 <TIM_Base_SetConfig+0x40>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a3b      	ldr	r2, [pc, #236]	; (8008cd4 <TIM_Base_SetConfig+0x120>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3a      	ldr	r2, [pc, #232]	; (8008cd8 <TIM_Base_SetConfig+0x124>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d108      	bne.n	8008c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a2f      	ldr	r2, [pc, #188]	; (8008cc8 <TIM_Base_SetConfig+0x114>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d02b      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c14:	d027      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a2c      	ldr	r2, [pc, #176]	; (8008ccc <TIM_Base_SetConfig+0x118>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d023      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a2b      	ldr	r2, [pc, #172]	; (8008cd0 <TIM_Base_SetConfig+0x11c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d01f      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2a      	ldr	r2, [pc, #168]	; (8008cd4 <TIM_Base_SetConfig+0x120>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01b      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a29      	ldr	r2, [pc, #164]	; (8008cd8 <TIM_Base_SetConfig+0x124>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d017      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a28      	ldr	r2, [pc, #160]	; (8008cdc <TIM_Base_SetConfig+0x128>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a27      	ldr	r2, [pc, #156]	; (8008ce0 <TIM_Base_SetConfig+0x12c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00f      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a26      	ldr	r2, [pc, #152]	; (8008ce4 <TIM_Base_SetConfig+0x130>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00b      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a25      	ldr	r2, [pc, #148]	; (8008ce8 <TIM_Base_SetConfig+0x134>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d007      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a24      	ldr	r2, [pc, #144]	; (8008cec <TIM_Base_SetConfig+0x138>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a23      	ldr	r2, [pc, #140]	; (8008cf0 <TIM_Base_SetConfig+0x13c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d108      	bne.n	8008c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a0a      	ldr	r2, [pc, #40]	; (8008cc8 <TIM_Base_SetConfig+0x114>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d003      	beq.n	8008cac <TIM_Base_SetConfig+0xf8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <TIM_Base_SetConfig+0x124>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d103      	bne.n	8008cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	615a      	str	r2, [r3, #20]
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40010000 	.word	0x40010000
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40010400 	.word	0x40010400
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40014400 	.word	0x40014400
 8008ce4:	40014800 	.word	0x40014800
 8008ce8:	40001800 	.word	0x40001800
 8008cec:	40001c00 	.word	0x40001c00
 8008cf0:	40002000 	.word	0x40002000

08008cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e03f      	b.n	8008dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7f9 f8ee 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2224      	movs	r2, #36	; 0x24
 8008d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f829 	bl	8008db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008dfa:	f023 030c 	bic.w	r3, r3, #12
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6812      	ldr	r2, [r2, #0]
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	430b      	orrs	r3, r1
 8008e06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e26:	f040 818b 	bne.w	8009140 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4ac1      	ldr	r2, [pc, #772]	; (8009134 <UART_SetConfig+0x37c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d005      	beq.n	8008e40 <UART_SetConfig+0x88>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4abf      	ldr	r2, [pc, #764]	; (8009138 <UART_SetConfig+0x380>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	f040 80bd 	bne.w	8008fba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e40:	f7fe fd20 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 8008e44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	461d      	mov	r5, r3
 8008e4a:	f04f 0600 	mov.w	r6, #0
 8008e4e:	46a8      	mov	r8, r5
 8008e50:	46b1      	mov	r9, r6
 8008e52:	eb18 0308 	adds.w	r3, r8, r8
 8008e56:	eb49 0409 	adc.w	r4, r9, r9
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	46a1      	mov	r9, r4
 8008e5e:	eb18 0805 	adds.w	r8, r8, r5
 8008e62:	eb49 0906 	adc.w	r9, r9, r6
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e7a:	4688      	mov	r8, r1
 8008e7c:	4691      	mov	r9, r2
 8008e7e:	eb18 0005 	adds.w	r0, r8, r5
 8008e82:	eb49 0106 	adc.w	r1, r9, r6
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	461d      	mov	r5, r3
 8008e8c:	f04f 0600 	mov.w	r6, #0
 8008e90:	196b      	adds	r3, r5, r5
 8008e92:	eb46 0406 	adc.w	r4, r6, r6
 8008e96:	461a      	mov	r2, r3
 8008e98:	4623      	mov	r3, r4
 8008e9a:	f7f7 f9a9 	bl	80001f0 <__aeabi_uldivmod>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4ba5      	ldr	r3, [pc, #660]	; (800913c <UART_SetConfig+0x384>)
 8008ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8008eaa:	095b      	lsrs	r3, r3, #5
 8008eac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	461d      	mov	r5, r3
 8008eb4:	f04f 0600 	mov.w	r6, #0
 8008eb8:	46a9      	mov	r9, r5
 8008eba:	46b2      	mov	sl, r6
 8008ebc:	eb19 0309 	adds.w	r3, r9, r9
 8008ec0:	eb4a 040a 	adc.w	r4, sl, sl
 8008ec4:	4699      	mov	r9, r3
 8008ec6:	46a2      	mov	sl, r4
 8008ec8:	eb19 0905 	adds.w	r9, r9, r5
 8008ecc:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ed0:	f04f 0100 	mov.w	r1, #0
 8008ed4:	f04f 0200 	mov.w	r2, #0
 8008ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008edc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ee4:	4689      	mov	r9, r1
 8008ee6:	4692      	mov	sl, r2
 8008ee8:	eb19 0005 	adds.w	r0, r9, r5
 8008eec:	eb4a 0106 	adc.w	r1, sl, r6
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	f04f 0600 	mov.w	r6, #0
 8008efa:	196b      	adds	r3, r5, r5
 8008efc:	eb46 0406 	adc.w	r4, r6, r6
 8008f00:	461a      	mov	r2, r3
 8008f02:	4623      	mov	r3, r4
 8008f04:	f7f7 f974 	bl	80001f0 <__aeabi_uldivmod>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b8b      	ldr	r3, [pc, #556]	; (800913c <UART_SetConfig+0x384>)
 8008f10:	fba3 1302 	umull	r1, r3, r3, r2
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	2164      	movs	r1, #100	; 0x64
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	3332      	adds	r3, #50	; 0x32
 8008f22:	4a86      	ldr	r2, [pc, #536]	; (800913c <UART_SetConfig+0x384>)
 8008f24:	fba2 2303 	umull	r2, r3, r2, r3
 8008f28:	095b      	lsrs	r3, r3, #5
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f30:	4498      	add	r8, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	461d      	mov	r5, r3
 8008f36:	f04f 0600 	mov.w	r6, #0
 8008f3a:	46a9      	mov	r9, r5
 8008f3c:	46b2      	mov	sl, r6
 8008f3e:	eb19 0309 	adds.w	r3, r9, r9
 8008f42:	eb4a 040a 	adc.w	r4, sl, sl
 8008f46:	4699      	mov	r9, r3
 8008f48:	46a2      	mov	sl, r4
 8008f4a:	eb19 0905 	adds.w	r9, r9, r5
 8008f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f52:	f04f 0100 	mov.w	r1, #0
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f66:	4689      	mov	r9, r1
 8008f68:	4692      	mov	sl, r2
 8008f6a:	eb19 0005 	adds.w	r0, r9, r5
 8008f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	461d      	mov	r5, r3
 8008f78:	f04f 0600 	mov.w	r6, #0
 8008f7c:	196b      	adds	r3, r5, r5
 8008f7e:	eb46 0406 	adc.w	r4, r6, r6
 8008f82:	461a      	mov	r2, r3
 8008f84:	4623      	mov	r3, r4
 8008f86:	f7f7 f933 	bl	80001f0 <__aeabi_uldivmod>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4b6a      	ldr	r3, [pc, #424]	; (800913c <UART_SetConfig+0x384>)
 8008f92:	fba3 1302 	umull	r1, r3, r3, r2
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	2164      	movs	r1, #100	; 0x64
 8008f9a:	fb01 f303 	mul.w	r3, r1, r3
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	3332      	adds	r3, #50	; 0x32
 8008fa4:	4a65      	ldr	r2, [pc, #404]	; (800913c <UART_SetConfig+0x384>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	f003 0207 	and.w	r2, r3, #7
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4442      	add	r2, r8
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	e26f      	b.n	800949a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fba:	f7fe fc4f 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 8008fbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	461d      	mov	r5, r3
 8008fc4:	f04f 0600 	mov.w	r6, #0
 8008fc8:	46a8      	mov	r8, r5
 8008fca:	46b1      	mov	r9, r6
 8008fcc:	eb18 0308 	adds.w	r3, r8, r8
 8008fd0:	eb49 0409 	adc.w	r4, r9, r9
 8008fd4:	4698      	mov	r8, r3
 8008fd6:	46a1      	mov	r9, r4
 8008fd8:	eb18 0805 	adds.w	r8, r8, r5
 8008fdc:	eb49 0906 	adc.w	r9, r9, r6
 8008fe0:	f04f 0100 	mov.w	r1, #0
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ff0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ff4:	4688      	mov	r8, r1
 8008ff6:	4691      	mov	r9, r2
 8008ff8:	eb18 0005 	adds.w	r0, r8, r5
 8008ffc:	eb49 0106 	adc.w	r1, r9, r6
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	461d      	mov	r5, r3
 8009006:	f04f 0600 	mov.w	r6, #0
 800900a:	196b      	adds	r3, r5, r5
 800900c:	eb46 0406 	adc.w	r4, r6, r6
 8009010:	461a      	mov	r2, r3
 8009012:	4623      	mov	r3, r4
 8009014:	f7f7 f8ec 	bl	80001f0 <__aeabi_uldivmod>
 8009018:	4603      	mov	r3, r0
 800901a:	460c      	mov	r4, r1
 800901c:	461a      	mov	r2, r3
 800901e:	4b47      	ldr	r3, [pc, #284]	; (800913c <UART_SetConfig+0x384>)
 8009020:	fba3 2302 	umull	r2, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	461d      	mov	r5, r3
 800902e:	f04f 0600 	mov.w	r6, #0
 8009032:	46a9      	mov	r9, r5
 8009034:	46b2      	mov	sl, r6
 8009036:	eb19 0309 	adds.w	r3, r9, r9
 800903a:	eb4a 040a 	adc.w	r4, sl, sl
 800903e:	4699      	mov	r9, r3
 8009040:	46a2      	mov	sl, r4
 8009042:	eb19 0905 	adds.w	r9, r9, r5
 8009046:	eb4a 0a06 	adc.w	sl, sl, r6
 800904a:	f04f 0100 	mov.w	r1, #0
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800905a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800905e:	4689      	mov	r9, r1
 8009060:	4692      	mov	sl, r2
 8009062:	eb19 0005 	adds.w	r0, r9, r5
 8009066:	eb4a 0106 	adc.w	r1, sl, r6
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	461d      	mov	r5, r3
 8009070:	f04f 0600 	mov.w	r6, #0
 8009074:	196b      	adds	r3, r5, r5
 8009076:	eb46 0406 	adc.w	r4, r6, r6
 800907a:	461a      	mov	r2, r3
 800907c:	4623      	mov	r3, r4
 800907e:	f7f7 f8b7 	bl	80001f0 <__aeabi_uldivmod>
 8009082:	4603      	mov	r3, r0
 8009084:	460c      	mov	r4, r1
 8009086:	461a      	mov	r2, r3
 8009088:	4b2c      	ldr	r3, [pc, #176]	; (800913c <UART_SetConfig+0x384>)
 800908a:	fba3 1302 	umull	r1, r3, r3, r2
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	2164      	movs	r1, #100	; 0x64
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	3332      	adds	r3, #50	; 0x32
 800909c:	4a27      	ldr	r2, [pc, #156]	; (800913c <UART_SetConfig+0x384>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090aa:	4498      	add	r8, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	461d      	mov	r5, r3
 80090b0:	f04f 0600 	mov.w	r6, #0
 80090b4:	46a9      	mov	r9, r5
 80090b6:	46b2      	mov	sl, r6
 80090b8:	eb19 0309 	adds.w	r3, r9, r9
 80090bc:	eb4a 040a 	adc.w	r4, sl, sl
 80090c0:	4699      	mov	r9, r3
 80090c2:	46a2      	mov	sl, r4
 80090c4:	eb19 0905 	adds.w	r9, r9, r5
 80090c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80090cc:	f04f 0100 	mov.w	r1, #0
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090e0:	4689      	mov	r9, r1
 80090e2:	4692      	mov	sl, r2
 80090e4:	eb19 0005 	adds.w	r0, r9, r5
 80090e8:	eb4a 0106 	adc.w	r1, sl, r6
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	461d      	mov	r5, r3
 80090f2:	f04f 0600 	mov.w	r6, #0
 80090f6:	196b      	adds	r3, r5, r5
 80090f8:	eb46 0406 	adc.w	r4, r6, r6
 80090fc:	461a      	mov	r2, r3
 80090fe:	4623      	mov	r3, r4
 8009100:	f7f7 f876 	bl	80001f0 <__aeabi_uldivmod>
 8009104:	4603      	mov	r3, r0
 8009106:	460c      	mov	r4, r1
 8009108:	461a      	mov	r2, r3
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <UART_SetConfig+0x384>)
 800910c:	fba3 1302 	umull	r1, r3, r3, r2
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	2164      	movs	r1, #100	; 0x64
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	3332      	adds	r3, #50	; 0x32
 800911e:	4a07      	ldr	r2, [pc, #28]	; (800913c <UART_SetConfig+0x384>)
 8009120:	fba2 2303 	umull	r2, r3, r2, r3
 8009124:	095b      	lsrs	r3, r3, #5
 8009126:	f003 0207 	and.w	r2, r3, #7
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4442      	add	r2, r8
 8009130:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009132:	e1b2      	b.n	800949a <UART_SetConfig+0x6e2>
 8009134:	40011000 	.word	0x40011000
 8009138:	40011400 	.word	0x40011400
 800913c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4ad7      	ldr	r2, [pc, #860]	; (80094a4 <UART_SetConfig+0x6ec>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d005      	beq.n	8009156 <UART_SetConfig+0x39e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4ad6      	ldr	r2, [pc, #856]	; (80094a8 <UART_SetConfig+0x6f0>)
 8009150:	4293      	cmp	r3, r2
 8009152:	f040 80d1 	bne.w	80092f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009156:	f7fe fb95 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 800915a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	469a      	mov	sl, r3
 8009160:	f04f 0b00 	mov.w	fp, #0
 8009164:	46d0      	mov	r8, sl
 8009166:	46d9      	mov	r9, fp
 8009168:	eb18 0308 	adds.w	r3, r8, r8
 800916c:	eb49 0409 	adc.w	r4, r9, r9
 8009170:	4698      	mov	r8, r3
 8009172:	46a1      	mov	r9, r4
 8009174:	eb18 080a 	adds.w	r8, r8, sl
 8009178:	eb49 090b 	adc.w	r9, r9, fp
 800917c:	f04f 0100 	mov.w	r1, #0
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009188:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800918c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009190:	4688      	mov	r8, r1
 8009192:	4691      	mov	r9, r2
 8009194:	eb1a 0508 	adds.w	r5, sl, r8
 8009198:	eb4b 0609 	adc.w	r6, fp, r9
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	f04f 0300 	mov.w	r3, #0
 80091aa:	f04f 0400 	mov.w	r4, #0
 80091ae:	0094      	lsls	r4, r2, #2
 80091b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091b4:	008b      	lsls	r3, r1, #2
 80091b6:	461a      	mov	r2, r3
 80091b8:	4623      	mov	r3, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	4631      	mov	r1, r6
 80091be:	f7f7 f817 	bl	80001f0 <__aeabi_uldivmod>
 80091c2:	4603      	mov	r3, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	461a      	mov	r2, r3
 80091c8:	4bb8      	ldr	r3, [pc, #736]	; (80094ac <UART_SetConfig+0x6f4>)
 80091ca:	fba3 2302 	umull	r2, r3, r3, r2
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	469b      	mov	fp, r3
 80091d8:	f04f 0c00 	mov.w	ip, #0
 80091dc:	46d9      	mov	r9, fp
 80091de:	46e2      	mov	sl, ip
 80091e0:	eb19 0309 	adds.w	r3, r9, r9
 80091e4:	eb4a 040a 	adc.w	r4, sl, sl
 80091e8:	4699      	mov	r9, r3
 80091ea:	46a2      	mov	sl, r4
 80091ec:	eb19 090b 	adds.w	r9, r9, fp
 80091f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80091f4:	f04f 0100 	mov.w	r1, #0
 80091f8:	f04f 0200 	mov.w	r2, #0
 80091fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009208:	4689      	mov	r9, r1
 800920a:	4692      	mov	sl, r2
 800920c:	eb1b 0509 	adds.w	r5, fp, r9
 8009210:	eb4c 060a 	adc.w	r6, ip, sl
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4619      	mov	r1, r3
 800921a:	f04f 0200 	mov.w	r2, #0
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	f04f 0400 	mov.w	r4, #0
 8009226:	0094      	lsls	r4, r2, #2
 8009228:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800922c:	008b      	lsls	r3, r1, #2
 800922e:	461a      	mov	r2, r3
 8009230:	4623      	mov	r3, r4
 8009232:	4628      	mov	r0, r5
 8009234:	4631      	mov	r1, r6
 8009236:	f7f6 ffdb 	bl	80001f0 <__aeabi_uldivmod>
 800923a:	4603      	mov	r3, r0
 800923c:	460c      	mov	r4, r1
 800923e:	461a      	mov	r2, r3
 8009240:	4b9a      	ldr	r3, [pc, #616]	; (80094ac <UART_SetConfig+0x6f4>)
 8009242:	fba3 1302 	umull	r1, r3, r3, r2
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	2164      	movs	r1, #100	; 0x64
 800924a:	fb01 f303 	mul.w	r3, r1, r3
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	3332      	adds	r3, #50	; 0x32
 8009254:	4a95      	ldr	r2, [pc, #596]	; (80094ac <UART_SetConfig+0x6f4>)
 8009256:	fba2 2303 	umull	r2, r3, r2, r3
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009260:	4498      	add	r8, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	469b      	mov	fp, r3
 8009266:	f04f 0c00 	mov.w	ip, #0
 800926a:	46d9      	mov	r9, fp
 800926c:	46e2      	mov	sl, ip
 800926e:	eb19 0309 	adds.w	r3, r9, r9
 8009272:	eb4a 040a 	adc.w	r4, sl, sl
 8009276:	4699      	mov	r9, r3
 8009278:	46a2      	mov	sl, r4
 800927a:	eb19 090b 	adds.w	r9, r9, fp
 800927e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009282:	f04f 0100 	mov.w	r1, #0
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800928e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009296:	4689      	mov	r9, r1
 8009298:	4692      	mov	sl, r2
 800929a:	eb1b 0509 	adds.w	r5, fp, r9
 800929e:	eb4c 060a 	adc.w	r6, ip, sl
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	4619      	mov	r1, r3
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	f04f 0400 	mov.w	r4, #0
 80092b4:	0094      	lsls	r4, r2, #2
 80092b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092ba:	008b      	lsls	r3, r1, #2
 80092bc:	461a      	mov	r2, r3
 80092be:	4623      	mov	r3, r4
 80092c0:	4628      	mov	r0, r5
 80092c2:	4631      	mov	r1, r6
 80092c4:	f7f6 ff94 	bl	80001f0 <__aeabi_uldivmod>
 80092c8:	4603      	mov	r3, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b77      	ldr	r3, [pc, #476]	; (80094ac <UART_SetConfig+0x6f4>)
 80092d0:	fba3 1302 	umull	r1, r3, r3, r2
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	2164      	movs	r1, #100	; 0x64
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	3332      	adds	r3, #50	; 0x32
 80092e2:	4a72      	ldr	r2, [pc, #456]	; (80094ac <UART_SetConfig+0x6f4>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4442      	add	r2, r8
 80092f4:	609a      	str	r2, [r3, #8]
 80092f6:	e0d0      	b.n	800949a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fe fab0 	bl	800785c <HAL_RCC_GetPCLK1Freq>
 80092fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	469a      	mov	sl, r3
 8009302:	f04f 0b00 	mov.w	fp, #0
 8009306:	46d0      	mov	r8, sl
 8009308:	46d9      	mov	r9, fp
 800930a:	eb18 0308 	adds.w	r3, r8, r8
 800930e:	eb49 0409 	adc.w	r4, r9, r9
 8009312:	4698      	mov	r8, r3
 8009314:	46a1      	mov	r9, r4
 8009316:	eb18 080a 	adds.w	r8, r8, sl
 800931a:	eb49 090b 	adc.w	r9, r9, fp
 800931e:	f04f 0100 	mov.w	r1, #0
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800932a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800932e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009332:	4688      	mov	r8, r1
 8009334:	4691      	mov	r9, r2
 8009336:	eb1a 0508 	adds.w	r5, sl, r8
 800933a:	eb4b 0609 	adc.w	r6, fp, r9
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	4619      	mov	r1, r3
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	f04f 0400 	mov.w	r4, #0
 8009350:	0094      	lsls	r4, r2, #2
 8009352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009356:	008b      	lsls	r3, r1, #2
 8009358:	461a      	mov	r2, r3
 800935a:	4623      	mov	r3, r4
 800935c:	4628      	mov	r0, r5
 800935e:	4631      	mov	r1, r6
 8009360:	f7f6 ff46 	bl	80001f0 <__aeabi_uldivmod>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	461a      	mov	r2, r3
 800936a:	4b50      	ldr	r3, [pc, #320]	; (80094ac <UART_SetConfig+0x6f4>)
 800936c:	fba3 2302 	umull	r2, r3, r3, r2
 8009370:	095b      	lsrs	r3, r3, #5
 8009372:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	469b      	mov	fp, r3
 800937a:	f04f 0c00 	mov.w	ip, #0
 800937e:	46d9      	mov	r9, fp
 8009380:	46e2      	mov	sl, ip
 8009382:	eb19 0309 	adds.w	r3, r9, r9
 8009386:	eb4a 040a 	adc.w	r4, sl, sl
 800938a:	4699      	mov	r9, r3
 800938c:	46a2      	mov	sl, r4
 800938e:	eb19 090b 	adds.w	r9, r9, fp
 8009392:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009396:	f04f 0100 	mov.w	r1, #0
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093aa:	4689      	mov	r9, r1
 80093ac:	4692      	mov	sl, r2
 80093ae:	eb1b 0509 	adds.w	r5, fp, r9
 80093b2:	eb4c 060a 	adc.w	r6, ip, sl
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	4619      	mov	r1, r3
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	f04f 0400 	mov.w	r4, #0
 80093c8:	0094      	lsls	r4, r2, #2
 80093ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093ce:	008b      	lsls	r3, r1, #2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4623      	mov	r3, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	4631      	mov	r1, r6
 80093d8:	f7f6 ff0a 	bl	80001f0 <__aeabi_uldivmod>
 80093dc:	4603      	mov	r3, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	461a      	mov	r2, r3
 80093e2:	4b32      	ldr	r3, [pc, #200]	; (80094ac <UART_SetConfig+0x6f4>)
 80093e4:	fba3 1302 	umull	r1, r3, r3, r2
 80093e8:	095b      	lsrs	r3, r3, #5
 80093ea:	2164      	movs	r1, #100	; 0x64
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	3332      	adds	r3, #50	; 0x32
 80093f6:	4a2d      	ldr	r2, [pc, #180]	; (80094ac <UART_SetConfig+0x6f4>)
 80093f8:	fba2 2303 	umull	r2, r3, r2, r3
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009402:	4498      	add	r8, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	469b      	mov	fp, r3
 8009408:	f04f 0c00 	mov.w	ip, #0
 800940c:	46d9      	mov	r9, fp
 800940e:	46e2      	mov	sl, ip
 8009410:	eb19 0309 	adds.w	r3, r9, r9
 8009414:	eb4a 040a 	adc.w	r4, sl, sl
 8009418:	4699      	mov	r9, r3
 800941a:	46a2      	mov	sl, r4
 800941c:	eb19 090b 	adds.w	r9, r9, fp
 8009420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009424:	f04f 0100 	mov.w	r1, #0
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009438:	4689      	mov	r9, r1
 800943a:	4692      	mov	sl, r2
 800943c:	eb1b 0509 	adds.w	r5, fp, r9
 8009440:	eb4c 060a 	adc.w	r6, ip, sl
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4619      	mov	r1, r3
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	f04f 0400 	mov.w	r4, #0
 8009456:	0094      	lsls	r4, r2, #2
 8009458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800945c:	008b      	lsls	r3, r1, #2
 800945e:	461a      	mov	r2, r3
 8009460:	4623      	mov	r3, r4
 8009462:	4628      	mov	r0, r5
 8009464:	4631      	mov	r1, r6
 8009466:	f7f6 fec3 	bl	80001f0 <__aeabi_uldivmod>
 800946a:	4603      	mov	r3, r0
 800946c:	460c      	mov	r4, r1
 800946e:	461a      	mov	r2, r3
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <UART_SetConfig+0x6f4>)
 8009472:	fba3 1302 	umull	r1, r3, r3, r2
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	2164      	movs	r1, #100	; 0x64
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	3332      	adds	r3, #50	; 0x32
 8009484:	4a09      	ldr	r2, [pc, #36]	; (80094ac <UART_SetConfig+0x6f4>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4442      	add	r2, r8
 8009496:	609a      	str	r2, [r3, #8]
}
 8009498:	e7ff      	b.n	800949a <UART_SetConfig+0x6e2>
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	40011000 	.word	0x40011000
 80094a8:	40011400 	.word	0x40011400
 80094ac:	51eb851f 	.word	0x51eb851f

080094b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d029      	beq.n	800951e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80094e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80094ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80094f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80094f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80094fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009502:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009508:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800950e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e034      	b.n	8009588 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800952a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009534:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800953a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800954e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009552:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800955c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009562:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009568:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800956e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009574:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	4313      	orrs	r3, r2
 800957a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009596:	b480      	push	{r7}
 8009598:	b087      	sub	sp, #28
 800959a:	af00      	add	r7, sp, #0
 800959c:	60f8      	str	r0, [r7, #12]
 800959e:	60b9      	str	r1, [r7, #8]
 80095a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d02e      	beq.n	800960e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095bc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80095cc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80095d6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	3b01      	subs	r3, #1
 80095de:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80095e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80095ea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80095f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80095fe:	4313      	orrs	r3, r2
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	609a      	str	r2, [r3, #8]
 800960c:	e03b      	b.n	8009686 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800961a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800961e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	3b01      	subs	r3, #1
 8009626:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	3b01      	subs	r3, #1
 800962e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009630:	4313      	orrs	r3, r2
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	4313      	orrs	r3, r2
 8009636:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009644:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009654:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800965e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	3b01      	subs	r3, #1
 8009666:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009668:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	3b01      	subs	r3, #1
 8009670:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009672:	4313      	orrs	r3, r2
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80096b0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80096ba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80096cc:	f7fa fecc 	bl	8004468 <HAL_GetTick>
 80096d0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80096d2:	e010      	b.n	80096f6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d00c      	beq.n	80096f6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <FMC_SDRAM_SendCommand+0x5e>
 80096e2:	f7fa fec1 	bl	8004468 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d201      	bcs.n	80096f6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e006      	b.n	8009704 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f003 0320 	and.w	r3, r3, #32
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d0e8      	beq.n	80096d4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695a      	ldr	r2, [r3, #20]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009732:	b480      	push	{r7}
 8009734:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009736:	bf00      	nop
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009746:	f3ef 8305 	mrs	r3, IPSR
 800974a:	60bb      	str	r3, [r7, #8]
  return(result);
 800974c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10f      	bne.n	8009772 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009752:	f3ef 8310 	mrs	r3, PRIMASK
 8009756:	607b      	str	r3, [r7, #4]
  return(result);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d105      	bne.n	800976a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800975e:	f3ef 8311 	mrs	r3, BASEPRI
 8009762:	603b      	str	r3, [r7, #0]
  return(result);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <osKernelInitialize+0x3a>
 800976a:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <osKernelInitialize+0x64>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d103      	bne.n	800977a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009772:	f06f 0305 	mvn.w	r3, #5
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	e00c      	b.n	8009794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800977a:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <osKernelInitialize+0x64>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009782:	4b08      	ldr	r3, [pc, #32]	; (80097a4 <osKernelInitialize+0x64>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	e002      	b.n	8009794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800978e:	f04f 33ff 	mov.w	r3, #4294967295
 8009792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009794:	68fb      	ldr	r3, [r7, #12]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000290 	.word	0x20000290

080097a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ae:	f3ef 8305 	mrs	r3, IPSR
 80097b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80097b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ba:	f3ef 8310 	mrs	r3, PRIMASK
 80097be:	607b      	str	r3, [r7, #4]
  return(result);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d105      	bne.n	80097d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097c6:	f3ef 8311 	mrs	r3, BASEPRI
 80097ca:	603b      	str	r3, [r7, #0]
  return(result);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <osKernelStart+0x3a>
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <osKernelStart+0x68>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d103      	bne.n	80097e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80097da:	f06f 0305 	mvn.w	r3, #5
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e010      	b.n	8009804 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097e2:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <osKernelStart+0x68>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d109      	bne.n	80097fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097ea:	f7ff ffa2 	bl	8009732 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097ee:	4b08      	ldr	r3, [pc, #32]	; (8009810 <osKernelStart+0x68>)
 80097f0:	2202      	movs	r2, #2
 80097f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097f4:	f001 f870 	bl	800a8d8 <vTaskStartScheduler>
      stat = osOK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e002      	b.n	8009804 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80097fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009804:	68fb      	ldr	r3, [r7, #12]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000290 	.word	0x20000290

08009814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b090      	sub	sp, #64	; 0x40
 8009818:	af04      	add	r7, sp, #16
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009824:	f3ef 8305 	mrs	r3, IPSR
 8009828:	61fb      	str	r3, [r7, #28]
  return(result);
 800982a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 808f 	bne.w	8009950 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009832:	f3ef 8310 	mrs	r3, PRIMASK
 8009836:	61bb      	str	r3, [r7, #24]
  return(result);
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d105      	bne.n	800984a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800983e:	f3ef 8311 	mrs	r3, BASEPRI
 8009842:	617b      	str	r3, [r7, #20]
  return(result);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <osThreadNew+0x3e>
 800984a:	4b44      	ldr	r3, [pc, #272]	; (800995c <osThreadNew+0x148>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d07e      	beq.n	8009950 <osThreadNew+0x13c>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d07b      	beq.n	8009950 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800985c:	2318      	movs	r3, #24
 800985e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009864:	f04f 33ff 	mov.w	r3, #4294967295
 8009868:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d045      	beq.n	80098fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <osThreadNew+0x6a>
        name = attr->name;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	2b00      	cmp	r3, #0
 8009890:	d008      	beq.n	80098a4 <osThreadNew+0x90>
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	2b38      	cmp	r3, #56	; 0x38
 8009896:	d805      	bhi.n	80098a4 <osThreadNew+0x90>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <osThreadNew+0x94>
        return (NULL);
 80098a4:	2300      	movs	r3, #0
 80098a6:	e054      	b.n	8009952 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00e      	beq.n	80098de <osThreadNew+0xca>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b5b      	cmp	r3, #91	; 0x5b
 80098c6:	d90a      	bls.n	80098de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d006      	beq.n	80098de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <osThreadNew+0xca>
        mem = 1;
 80098d8:	2301      	movs	r3, #1
 80098da:	623b      	str	r3, [r7, #32]
 80098dc:	e010      	b.n	8009900 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10c      	bne.n	8009900 <osThreadNew+0xec>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d108      	bne.n	8009900 <osThreadNew+0xec>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <osThreadNew+0xec>
          mem = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	e001      	b.n	8009900 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d110      	bne.n	8009928 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800990e:	9202      	str	r2, [sp, #8]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fe09 	bl	800a534 <xTaskCreateStatic>
 8009922:	4603      	mov	r3, r0
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	e013      	b.n	8009950 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d110      	bne.n	8009950 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	b29a      	uxth	r2, r3
 8009932:	f107 0310 	add.w	r3, r7, #16
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fe51 	bl	800a5e8 <xTaskCreate>
 8009946:	4603      	mov	r3, r0
 8009948:	2b01      	cmp	r3, #1
 800994a:	d001      	beq.n	8009950 <osThreadNew+0x13c>
          hTask = NULL;
 800994c:	2300      	movs	r3, #0
 800994e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009950:	693b      	ldr	r3, [r7, #16]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3730      	adds	r7, #48	; 0x30
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000290 	.word	0x20000290

08009960 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009968:	f3ef 8305 	mrs	r3, IPSR
 800996c:	613b      	str	r3, [r7, #16]
  return(result);
 800996e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10f      	bne.n	8009994 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009974:	f3ef 8310 	mrs	r3, PRIMASK
 8009978:	60fb      	str	r3, [r7, #12]
  return(result);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d105      	bne.n	800998c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009980:	f3ef 8311 	mrs	r3, BASEPRI
 8009984:	60bb      	str	r3, [r7, #8]
  return(result);
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <osDelay+0x3c>
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <osDelay+0x58>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d103      	bne.n	800999c <osDelay+0x3c>
    stat = osErrorISR;
 8009994:	f06f 0305 	mvn.w	r3, #5
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e007      	b.n	80099ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 ff62 	bl	800a870 <vTaskDelay>
    }
  }

  return (stat);
 80099ac:	697b      	ldr	r3, [r7, #20]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000290 	.word	0x20000290

080099bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80099cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a06      	ldr	r2, [pc, #24]	; (80099ec <vApplicationGetIdleTaskMemory+0x30>)
 80099d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2280      	movs	r2, #128	; 0x80
 80099d8:	601a      	str	r2, [r3, #0]
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20000294 	.word	0x20000294
 80099ec:	200002f0 	.word	0x200002f0

080099f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4a07      	ldr	r2, [pc, #28]	; (8009a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8009a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4a06      	ldr	r2, [pc, #24]	; (8009a20 <vApplicationGetTimerTaskMemory+0x30>)
 8009a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a0e:	601a      	str	r2, [r3, #0]
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	200004f0 	.word	0x200004f0
 8009a20:	2000054c 	.word	0x2000054c

08009a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f103 0208 	add.w	r2, r3, #8
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f103 0208 	add.w	r2, r3, #8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f103 0208 	add.w	r2, r3, #8
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d103      	bne.n	8009ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e00c      	b.n	8009b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e002      	b.n	8009af4 <vListInsert+0x2e>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d2f6      	bcs.n	8009aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6892      	ldr	r2, [r2, #8]
 8009b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6852      	ldr	r2, [r2, #4]
 8009b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d103      	bne.n	8009b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	1e5a      	subs	r2, r3, #1
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d109      	bne.n	8009bb4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	60bb      	str	r3, [r7, #8]
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009bb4:	f002 f812 	bl	800bbdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc0:	68f9      	ldr	r1, [r7, #12]
 8009bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bc4:	fb01 f303 	mul.w	r3, r1, r3
 8009bc8:	441a      	add	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be4:	3b01      	subs	r3, #1
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	441a      	add	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	22ff      	movs	r2, #255	; 0xff
 8009bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	22ff      	movs	r2, #255	; 0xff
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d114      	bne.n	8009c34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d01a      	beq.n	8009c48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3310      	adds	r3, #16
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 f8de 	bl	800add8 <xTaskRemoveFromEventList>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d012      	beq.n	8009c48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c22:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <xQueueGenericReset+0xcc>)
 8009c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	e009      	b.n	8009c48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3310      	adds	r3, #16
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff fef3 	bl	8009a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3324      	adds	r3, #36	; 0x24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff feee 	bl	8009a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c48:	f001 fff6 	bl	800bc38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c4c:	2301      	movs	r3, #1
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08e      	sub	sp, #56	; 0x38
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d109      	bne.n	8009c84 <xQueueGenericCreateStatic+0x28>
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c82:	e7fe      	b.n	8009c82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <xQueueGenericCreateStatic+0x42>
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <xQueueGenericCreateStatic+0x4e>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <xQueueGenericCreateStatic+0x52>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericCreateStatic+0x54>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <xQueueGenericCreateStatic+0x6c>
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <xQueueGenericCreateStatic+0x78>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <xQueueGenericCreateStatic+0x7c>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <xQueueGenericCreateStatic+0x7e>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d109      	bne.n	8009cf2 <xQueueGenericCreateStatic+0x96>
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cf2:	2350      	movs	r3, #80	; 0x50
 8009cf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b50      	cmp	r3, #80	; 0x50
 8009cfa:	d009      	beq.n	8009d10 <xQueueGenericCreateStatic+0xb4>
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	e7fe      	b.n	8009d0e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00d      	beq.n	8009d38 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d24:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 f805 	bl	8009d42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3730      	adds	r7, #48	; 0x30
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	e002      	b.n	8009d64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d70:	2101      	movs	r1, #1
 8009d72:	69b8      	ldr	r0, [r7, #24]
 8009d74:	f7ff ff0a 	bl	8009b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08e      	sub	sp, #56	; 0x38
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d96:	2300      	movs	r3, #0
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d109      	bne.n	8009db8 <xQueueGenericSend+0x30>
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009db6:	e7fe      	b.n	8009db6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <xQueueGenericSend+0x3e>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <xQueueGenericSend+0x42>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <xQueueGenericSend+0x44>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <xQueueGenericSend+0x5c>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
 8009de2:	e7fe      	b.n	8009de2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d103      	bne.n	8009df2 <xQueueGenericSend+0x6a>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <xQueueGenericSend+0x6e>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <xQueueGenericSend+0x70>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <xQueueGenericSend+0x88>
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	623b      	str	r3, [r7, #32]
 8009e0e:	e7fe      	b.n	8009e0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e10:	f001 f998 	bl	800b144 <xTaskGetSchedulerState>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d102      	bne.n	8009e20 <xQueueGenericSend+0x98>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d101      	bne.n	8009e24 <xQueueGenericSend+0x9c>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <xQueueGenericSend+0x9e>
 8009e24:	2300      	movs	r3, #0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d109      	bne.n	8009e3e <xQueueGenericSend+0xb6>
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	e7fe      	b.n	8009e3c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e3e:	f001 fecd 	bl	800bbdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d302      	bcc.n	8009e54 <xQueueGenericSend+0xcc>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d129      	bne.n	8009ea8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e5a:	f000 f9ff 	bl	800a25c <prvCopyDataToQueue>
 8009e5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d010      	beq.n	8009e8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	3324      	adds	r3, #36	; 0x24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 ffb3 	bl	800add8 <xTaskRemoveFromEventList>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d013      	beq.n	8009ea0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e78:	4b3f      	ldr	r3, [pc, #252]	; (8009f78 <xQueueGenericSend+0x1f0>)
 8009e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	e00a      	b.n	8009ea0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e90:	4b39      	ldr	r3, [pc, #228]	; (8009f78 <xQueueGenericSend+0x1f0>)
 8009e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ea0:	f001 feca 	bl	800bc38 <vPortExitCritical>
				return pdPASS;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e063      	b.n	8009f70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eae:	f001 fec3 	bl	800bc38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e05c      	b.n	8009f70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d106      	bne.n	8009eca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ebc:	f107 0314 	add.w	r3, r7, #20
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 ffeb 	bl	800ae9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eca:	f001 feb5 	bl	800bc38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ece:	f000 fd67 	bl	800a9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ed2:	f001 fe83 	bl	800bbdc <vPortEnterCritical>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee2:	d103      	bne.n	8009eec <xQueueGenericSend+0x164>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ef2:	b25b      	sxtb	r3, r3
 8009ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef8:	d103      	bne.n	8009f02 <xQueueGenericSend+0x17a>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f02:	f001 fe99 	bl	800bc38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f06:	1d3a      	adds	r2, r7, #4
 8009f08:	f107 0314 	add.w	r3, r7, #20
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 ffda 	bl	800aec8 <xTaskCheckForTimeOut>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d124      	bne.n	8009f64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1c:	f000 fa96 	bl	800a44c <prvIsQueueFull>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d018      	beq.n	8009f58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	3310      	adds	r3, #16
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 ff04 	bl	800ad3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f36:	f000 fa21 	bl	800a37c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f3a:	f000 fd3f 	bl	800a9bc <xTaskResumeAll>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f47f af7c 	bne.w	8009e3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <xQueueGenericSend+0x1f0>)
 8009f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	e772      	b.n	8009e3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5a:	f000 fa0f 	bl	800a37c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f5e:	f000 fd2d 	bl	800a9bc <xTaskResumeAll>
 8009f62:	e76c      	b.n	8009e3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f66:	f000 fa09 	bl	800a37c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f6a:	f000 fd27 	bl	800a9bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3738      	adds	r7, #56	; 0x38
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08e      	sub	sp, #56	; 0x38
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <xQueueGenericSendFromISR+0x2c>
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009fa6:	e7fe      	b.n	8009fa6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <xQueueGenericSendFromISR+0x3a>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <xQueueGenericSendFromISR+0x3e>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <xQueueGenericSendFromISR+0x40>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <xQueueGenericSendFromISR+0x58>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	623b      	str	r3, [r7, #32]
 8009fd2:	e7fe      	b.n	8009fd2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d103      	bne.n	8009fe2 <xQueueGenericSendFromISR+0x66>
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d101      	bne.n	8009fe6 <xQueueGenericSendFromISR+0x6a>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueGenericSendFromISR+0x6c>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d109      	bne.n	800a000 <xQueueGenericSendFromISR+0x84>
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	e7fe      	b.n	8009ffe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a000:	f001 fec8 	bl	800bd94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a004:	f3ef 8211 	mrs	r2, BASEPRI
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	61ba      	str	r2, [r7, #24]
 800a01a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a01c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a01e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	429a      	cmp	r2, r3
 800a02a:	d302      	bcc.n	800a032 <xQueueGenericSendFromISR+0xb6>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d12c      	bne.n	800a08c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a042:	f000 f90b 	bl	800a25c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a046:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d112      	bne.n	800a076 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d016      	beq.n	800a086 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	3324      	adds	r3, #36	; 0x24
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 febb 	bl	800add8 <xTaskRemoveFromEventList>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00e      	beq.n	800a086 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	e007      	b.n	800a086 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a076:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a07a:	3301      	adds	r3, #1
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	b25a      	sxtb	r2, r3
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a086:	2301      	movs	r3, #1
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a08a:	e001      	b.n	800a090 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a08c:	2300      	movs	r3, #0
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3738      	adds	r7, #56	; 0x38
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	; 0x30
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <xQueueReceive+0x2e>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	623b      	str	r3, [r7, #32]
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <xQueueReceive+0x3c>
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <xQueueReceive+0x40>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e000      	b.n	800a0e6 <xQueueReceive+0x42>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d109      	bne.n	800a0fe <xQueueReceive+0x5a>
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e7fe      	b.n	800a0fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fe:	f001 f821 	bl	800b144 <xTaskGetSchedulerState>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <xQueueReceive+0x6a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <xQueueReceive+0x6e>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueReceive+0x70>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d109      	bne.n	800a12c <xQueueReceive+0x88>
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e7fe      	b.n	800a12a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a12c:	f001 fd56 	bl	800bbdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a134:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01f      	beq.n	800a17c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a140:	f000 f8f6 	bl	800a330 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	1e5a      	subs	r2, r3, #1
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00f      	beq.n	800a174 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	3310      	adds	r3, #16
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fe3d 	bl	800add8 <xTaskRemoveFromEventList>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a164:	4b3c      	ldr	r3, [pc, #240]	; (800a258 <xQueueReceive+0x1b4>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a174:	f001 fd60 	bl	800bc38 <vPortExitCritical>
				return pdPASS;
 800a178:	2301      	movs	r3, #1
 800a17a:	e069      	b.n	800a250 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a182:	f001 fd59 	bl	800bc38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a186:	2300      	movs	r3, #0
 800a188:	e062      	b.n	800a250 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a190:	f107 0310 	add.w	r3, r7, #16
 800a194:	4618      	mov	r0, r3
 800a196:	f000 fe81 	bl	800ae9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a19a:	2301      	movs	r3, #1
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a19e:	f001 fd4b 	bl	800bc38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1a2:	f000 fbfd 	bl	800a9a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1a6:	f001 fd19 	bl	800bbdc <vPortEnterCritical>
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d103      	bne.n	800a1c0 <xQueueReceive+0x11c>
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d103      	bne.n	800a1d6 <xQueueReceive+0x132>
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d6:	f001 fd2f 	bl	800bc38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1da:	1d3a      	adds	r2, r7, #4
 800a1dc:	f107 0310 	add.w	r3, r7, #16
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fe70 	bl	800aec8 <xTaskCheckForTimeOut>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d123      	bne.n	800a236 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f0:	f000 f916 	bl	800a420 <prvIsQueueEmpty>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	3324      	adds	r3, #36	; 0x24
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fd9a 	bl	800ad3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20a:	f000 f8b7 	bl	800a37c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a20e:	f000 fbd5 	bl	800a9bc <xTaskResumeAll>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d189      	bne.n	800a12c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <xQueueReceive+0x1b4>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	e780      	b.n	800a12c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22c:	f000 f8a6 	bl	800a37c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a230:	f000 fbc4 	bl	800a9bc <xTaskResumeAll>
 800a234:	e77a      	b.n	800a12c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a238:	f000 f8a0 	bl	800a37c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a23c:	f000 fbbe 	bl	800a9bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a242:	f000 f8ed 	bl	800a420 <prvIsQueueEmpty>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f43f af6f 	beq.w	800a12c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a24e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a250:	4618      	mov	r0, r3
 800a252:	3730      	adds	r7, #48	; 0x30
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10d      	bne.n	800a296 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d14d      	bne.n	800a31e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 ff7a 	bl	800b180 <xTaskPriorityDisinherit>
 800a28c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	609a      	str	r2, [r3, #8]
 800a294:	e043      	b.n	800a31e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d119      	bne.n	800a2d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6858      	ldr	r0, [r3, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	f001 ffac 	bl	800c204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b4:	441a      	add	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d32b      	bcc.n	800a31e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	e026      	b.n	800a31e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68d8      	ldr	r0, [r3, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d8:	461a      	mov	r2, r3
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	f001 ff92 	bl	800c204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	441a      	add	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	68da      	ldr	r2, [r3, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d207      	bcs.n	800a30c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	425b      	negs	r3, r3
 800a306:	441a      	add	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d105      	bne.n	800a31e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a326:	697b      	ldr	r3, [r7, #20]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d018      	beq.n	800a374 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	441a      	add	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d303      	bcc.n	800a364 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68d9      	ldr	r1, [r3, #12]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	461a      	mov	r2, r3
 800a36e:	6838      	ldr	r0, [r7, #0]
 800a370:	f001 ff48 	bl	800c204 <memcpy>
	}
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a384:	f001 fc2a 	bl	800bbdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a390:	e011      	b.n	800a3b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	d012      	beq.n	800a3c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3324      	adds	r3, #36	; 0x24
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fd1a 	bl	800add8 <xTaskRemoveFromEventList>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3aa:	f000 fded 	bl	800af88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dce9      	bgt.n	800a392 <prvUnlockQueue+0x16>
 800a3be:	e000      	b.n	800a3c2 <prvUnlockQueue+0x46>
					break;
 800a3c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3ca:	f001 fc35 	bl	800bc38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3ce:	f001 fc05 	bl	800bbdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3da:	e011      	b.n	800a400 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d012      	beq.n	800a40a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3310      	adds	r3, #16
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fcf5 	bl	800add8 <xTaskRemoveFromEventList>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3f4:	f000 fdc8 	bl	800af88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a404:	2b00      	cmp	r3, #0
 800a406:	dce9      	bgt.n	800a3dc <prvUnlockQueue+0x60>
 800a408:	e000      	b.n	800a40c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a40a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	22ff      	movs	r2, #255	; 0xff
 800a410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a414:	f001 fc10 	bl	800bc38 <vPortExitCritical>
}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a428:	f001 fbd8 	bl	800bbdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a434:	2301      	movs	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e001      	b.n	800a43e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a43e:	f001 fbfb 	bl	800bc38 <vPortExitCritical>

	return xReturn;
 800a442:	68fb      	ldr	r3, [r7, #12]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a454:	f001 fbc2 	bl	800bbdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a460:	429a      	cmp	r2, r3
 800a462:	d102      	bne.n	800a46a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a464:	2301      	movs	r3, #1
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e001      	b.n	800a46e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a46e:	f001 fbe3 	bl	800bc38 <vPortExitCritical>

	return xReturn;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	e014      	b.n	800a4b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a48c:	4a0e      	ldr	r2, [pc, #56]	; (800a4c8 <vQueueAddToRegistry+0x4c>)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10b      	bne.n	800a4b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a498:	490b      	ldr	r1, [pc, #44]	; (800a4c8 <vQueueAddToRegistry+0x4c>)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4a2:	4a09      	ldr	r2, [pc, #36]	; (800a4c8 <vQueueAddToRegistry+0x4c>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4ae:	e005      	b.n	800a4bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b07      	cmp	r3, #7
 800a4ba:	d9e7      	bls.n	800a48c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4bc:	bf00      	nop
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	20020c28 	.word	0x20020c28

0800a4cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4dc:	f001 fb7e 	bl	800bbdc <vPortEnterCritical>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ec:	d103      	bne.n	800a4f6 <vQueueWaitForMessageRestricted+0x2a>
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4fc:	b25b      	sxtb	r3, r3
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a502:	d103      	bne.n	800a50c <vQueueWaitForMessageRestricted+0x40>
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a50c:	f001 fb94 	bl	800bc38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	3324      	adds	r3, #36	; 0x24
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 fc2f 	bl	800ad84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a526:	6978      	ldr	r0, [r7, #20]
 800a528:	f7ff ff28 	bl	800a37c <prvUnlockQueue>
	}
 800a52c:	bf00      	nop
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08e      	sub	sp, #56	; 0x38
 800a538:	af04      	add	r7, sp, #16
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	2b00      	cmp	r3, #0
 800a546:	d109      	bne.n	800a55c <xTaskCreateStatic+0x28>
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	623b      	str	r3, [r7, #32]
 800a55a:	e7fe      	b.n	800a55a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d109      	bne.n	800a576 <xTaskCreateStatic+0x42>
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e7fe      	b.n	800a574 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a576:	235c      	movs	r3, #92	; 0x5c
 800a578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b5c      	cmp	r3, #92	; 0x5c
 800a57e:	d009      	beq.n	800a594 <xTaskCreateStatic+0x60>
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	e7fe      	b.n	800a592 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01e      	beq.n	800a5da <xTaskCreateStatic+0xa6>
 800a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01b      	beq.n	800a5da <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f850 	bl	800a672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5d4:	f000 f8dc 	bl	800a790 <prvAddNewTaskToReadyList>
 800a5d8:	e001      	b.n	800a5de <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5de:	697b      	ldr	r3, [r7, #20]
	}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3728      	adds	r7, #40	; 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	; 0x30
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fc07 	bl	800be10 <pvPortMalloc>
 800a602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00e      	beq.n	800a628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a60a:	205c      	movs	r0, #92	; 0x5c
 800a60c:	f001 fc00 	bl	800be10 <pvPortMalloc>
 800a610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	631a      	str	r2, [r3, #48]	; 0x30
 800a61e:	e005      	b.n	800a62c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	f001 fcb7 	bl	800bf94 <vPortFree>
 800a626:	e001      	b.n	800a62c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d017      	beq.n	800a662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a63a:	88fa      	ldrh	r2, [r7, #6]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f80e 	bl	800a672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a656:	69f8      	ldr	r0, [r7, #28]
 800a658:	f000 f89a 	bl	800a790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	e002      	b.n	800a668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a668:	69bb      	ldr	r3, [r7, #24]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b088      	sub	sp, #32
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	461a      	mov	r2, r3
 800a68a:	21a5      	movs	r1, #165	; 0xa5
 800a68c:	f001 fdc5 	bl	800c21a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a69a:	3b01      	subs	r3, #1
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f023 0307 	bic.w	r3, r3, #7
 800a6a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <prvInitialiseNewTask+0x56>
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	617b      	str	r3, [r7, #20]
 800a6c6:	e7fe      	b.n	800a6c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d01f      	beq.n	800a70e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	e012      	b.n	800a6fa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	4413      	add	r3, r2
 800a6da:	7819      	ldrb	r1, [r3, #0]
 800a6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3334      	adds	r3, #52	; 0x34
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d006      	beq.n	800a702 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	61fb      	str	r3, [r7, #28]
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	2b0f      	cmp	r3, #15
 800a6fe:	d9e9      	bls.n	800a6d4 <prvInitialiseNewTask+0x62>
 800a700:	e000      	b.n	800a704 <prvInitialiseNewTask+0x92>
			{
				break;
 800a702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	2200      	movs	r2, #0
 800a708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a70c:	e003      	b.n	800a716 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	2b37      	cmp	r3, #55	; 0x37
 800a71a:	d901      	bls.n	800a720 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a71c:	2337      	movs	r3, #55	; 0x37
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a72a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	2200      	movs	r2, #0
 800a730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	3304      	adds	r3, #4
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff f994 	bl	8009a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	3318      	adds	r3, #24
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff f98f 	bl	8009a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	2200      	movs	r2, #0
 800a760:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	68f9      	ldr	r1, [r7, #12]
 800a76e:	69b8      	ldr	r0, [r7, #24]
 800a770:	f001 f90c 	bl	800b98c <pxPortInitialiseStack>
 800a774:	4602      	mov	r2, r0
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a786:	bf00      	nop
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a798:	f001 fa20 	bl	800bbdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a79c:	4b2d      	ldr	r3, [pc, #180]	; (800a854 <prvAddNewTaskToReadyList+0xc4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	4a2c      	ldr	r2, [pc, #176]	; (800a854 <prvAddNewTaskToReadyList+0xc4>)
 800a7a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7a6:	4b2c      	ldr	r3, [pc, #176]	; (800a858 <prvAddNewTaskToReadyList+0xc8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d109      	bne.n	800a7c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7ae:	4a2a      	ldr	r2, [pc, #168]	; (800a858 <prvAddNewTaskToReadyList+0xc8>)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7b4:	4b27      	ldr	r3, [pc, #156]	; (800a854 <prvAddNewTaskToReadyList+0xc4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d110      	bne.n	800a7de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7bc:	f000 fc08 	bl	800afd0 <prvInitialiseTaskLists>
 800a7c0:	e00d      	b.n	800a7de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7c2:	4b26      	ldr	r3, [pc, #152]	; (800a85c <prvAddNewTaskToReadyList+0xcc>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d109      	bne.n	800a7de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7ca:	4b23      	ldr	r3, [pc, #140]	; (800a858 <prvAddNewTaskToReadyList+0xc8>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d802      	bhi.n	800a7de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7d8:	4a1f      	ldr	r2, [pc, #124]	; (800a858 <prvAddNewTaskToReadyList+0xc8>)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7de:	4b20      	ldr	r3, [pc, #128]	; (800a860 <prvAddNewTaskToReadyList+0xd0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	4a1e      	ldr	r2, [pc, #120]	; (800a860 <prvAddNewTaskToReadyList+0xd0>)
 800a7e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <prvAddNewTaskToReadyList+0xd0>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f4:	4b1b      	ldr	r3, [pc, #108]	; (800a864 <prvAddNewTaskToReadyList+0xd4>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d903      	bls.n	800a804 <prvAddNewTaskToReadyList+0x74>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a18      	ldr	r2, [pc, #96]	; (800a864 <prvAddNewTaskToReadyList+0xd4>)
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4a15      	ldr	r2, [pc, #84]	; (800a868 <prvAddNewTaskToReadyList+0xd8>)
 800a812:	441a      	add	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3304      	adds	r3, #4
 800a818:	4619      	mov	r1, r3
 800a81a:	4610      	mov	r0, r2
 800a81c:	f7ff f92f 	bl	8009a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a820:	f001 fa0a 	bl	800bc38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <prvAddNewTaskToReadyList+0xcc>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00e      	beq.n	800a84a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <prvAddNewTaskToReadyList+0xc8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a836:	429a      	cmp	r2, r3
 800a838:	d207      	bcs.n	800a84a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a83a:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <prvAddNewTaskToReadyList+0xdc>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20000e20 	.word	0x20000e20
 800a858:	2000094c 	.word	0x2000094c
 800a85c:	20000e2c 	.word	0x20000e2c
 800a860:	20000e3c 	.word	0x20000e3c
 800a864:	20000e28 	.word	0x20000e28
 800a868:	20000950 	.word	0x20000950
 800a86c:	e000ed04 	.word	0xe000ed04

0800a870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a878:	2300      	movs	r3, #0
 800a87a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d016      	beq.n	800a8b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <vTaskDelay+0x60>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d009      	beq.n	800a89e <vTaskDelay+0x2e>
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	60bb      	str	r3, [r7, #8]
 800a89c:	e7fe      	b.n	800a89c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a89e:	f000 f87f 	bl	800a9a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fcd7 	bl	800b258 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8aa:	f000 f887 	bl	800a9bc <xTaskResumeAll>
 800a8ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d107      	bne.n	800a8c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a8b6:	4b07      	ldr	r3, [pc, #28]	; (800a8d4 <vTaskDelay+0x64>)
 800a8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000e48 	.word	0x20000e48
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	; 0x28
 800a8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	1d39      	adds	r1, r7, #4
 800a8ea:	f107 0308 	add.w	r3, r7, #8
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff f864 	bl	80099bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	9202      	str	r2, [sp, #8]
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	2300      	movs	r3, #0
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	460a      	mov	r2, r1
 800a906:	4920      	ldr	r1, [pc, #128]	; (800a988 <vTaskStartScheduler+0xb0>)
 800a908:	4820      	ldr	r0, [pc, #128]	; (800a98c <vTaskStartScheduler+0xb4>)
 800a90a:	f7ff fe13 	bl	800a534 <xTaskCreateStatic>
 800a90e:	4602      	mov	r2, r0
 800a910:	4b1f      	ldr	r3, [pc, #124]	; (800a990 <vTaskStartScheduler+0xb8>)
 800a912:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a914:	4b1e      	ldr	r3, [pc, #120]	; (800a990 <vTaskStartScheduler+0xb8>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e001      	b.n	800a926 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d102      	bne.n	800a932 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a92c:	f000 fce8 	bl	800b300 <xTimerCreateTimerTask>
 800a930:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d115      	bne.n	800a964 <vTaskStartScheduler+0x8c>
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a94a:	4b12      	ldr	r3, [pc, #72]	; (800a994 <vTaskStartScheduler+0xbc>)
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295
 800a950:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a952:	4b11      	ldr	r3, [pc, #68]	; (800a998 <vTaskStartScheduler+0xc0>)
 800a954:	2201      	movs	r2, #1
 800a956:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a958:	4b10      	ldr	r3, [pc, #64]	; (800a99c <vTaskStartScheduler+0xc4>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a95e:	f001 f89f 	bl	800baa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a962:	e00d      	b.n	800a980 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d109      	bne.n	800a980 <vTaskStartScheduler+0xa8>
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	e7fe      	b.n	800a97e <vTaskStartScheduler+0xa6>
}
 800a980:	bf00      	nop
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	0800c328 	.word	0x0800c328
 800a98c:	0800afa1 	.word	0x0800afa1
 800a990:	20000e44 	.word	0x20000e44
 800a994:	20000e40 	.word	0x20000e40
 800a998:	20000e2c 	.word	0x20000e2c
 800a99c:	20000e24 	.word	0x20000e24

0800a9a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <vTaskSuspendAll+0x18>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	4a03      	ldr	r2, [pc, #12]	; (800a9b8 <vTaskSuspendAll+0x18>)
 800a9ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a9ae:	bf00      	nop
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	20000e48 	.word	0x20000e48

0800a9bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9ca:	4b41      	ldr	r3, [pc, #260]	; (800aad0 <xTaskResumeAll+0x114>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <xTaskResumeAll+0x2a>
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	e7fe      	b.n	800a9e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9e6:	f001 f8f9 	bl	800bbdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9ea:	4b39      	ldr	r3, [pc, #228]	; (800aad0 <xTaskResumeAll+0x114>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	4a37      	ldr	r2, [pc, #220]	; (800aad0 <xTaskResumeAll+0x114>)
 800a9f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f4:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <xTaskResumeAll+0x114>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d162      	bne.n	800aac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9fc:	4b35      	ldr	r3, [pc, #212]	; (800aad4 <xTaskResumeAll+0x118>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d05e      	beq.n	800aac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa04:	e02f      	b.n	800aa66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa06:	4b34      	ldr	r3, [pc, #208]	; (800aad8 <xTaskResumeAll+0x11c>)
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3318      	adds	r3, #24
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff f890 	bl	8009b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff f88b 	bl	8009b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa26:	4b2d      	ldr	r3, [pc, #180]	; (800aadc <xTaskResumeAll+0x120>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d903      	bls.n	800aa36 <xTaskResumeAll+0x7a>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	4a2a      	ldr	r2, [pc, #168]	; (800aadc <xTaskResumeAll+0x120>)
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4a27      	ldr	r2, [pc, #156]	; (800aae0 <xTaskResumeAll+0x124>)
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f7ff f816 	bl	8009a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <xTaskResumeAll+0x128>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d302      	bcc.n	800aa66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aa60:	4b21      	ldr	r3, [pc, #132]	; (800aae8 <xTaskResumeAll+0x12c>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <xTaskResumeAll+0x11c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1cb      	bne.n	800aa06 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa74:	f000 fb46 	bl	800b104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa78:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <xTaskResumeAll+0x130>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d010      	beq.n	800aaa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa84:	f000 f846 	bl	800ab14 <xTaskIncrementTick>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800aa8e:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <xTaskResumeAll+0x12c>)
 800aa90:	2201      	movs	r2, #1
 800aa92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1f1      	bne.n	800aa84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800aaa0:	4b12      	ldr	r3, [pc, #72]	; (800aaec <xTaskResumeAll+0x130>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaa6:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <xTaskResumeAll+0x12c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aaae:	2301      	movs	r3, #1
 800aab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aab2:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <xTaskResumeAll+0x134>)
 800aab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aac2:	f001 f8b9 	bl	800bc38 <vPortExitCritical>

	return xAlreadyYielded;
 800aac6:	68bb      	ldr	r3, [r7, #8]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000e48 	.word	0x20000e48
 800aad4:	20000e20 	.word	0x20000e20
 800aad8:	20000de0 	.word	0x20000de0
 800aadc:	20000e28 	.word	0x20000e28
 800aae0:	20000950 	.word	0x20000950
 800aae4:	2000094c 	.word	0x2000094c
 800aae8:	20000e34 	.word	0x20000e34
 800aaec:	20000e30 	.word	0x20000e30
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <xTaskGetTickCount+0x1c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab00:	687b      	ldr	r3, [r7, #4]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	20000e24 	.word	0x20000e24

0800ab14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab1e:	4b4e      	ldr	r3, [pc, #312]	; (800ac58 <xTaskIncrementTick+0x144>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f040 8088 	bne.w	800ac38 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab28:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <xTaskIncrementTick+0x148>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab30:	4a4a      	ldr	r2, [pc, #296]	; (800ac5c <xTaskIncrementTick+0x148>)
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d11f      	bne.n	800ab7c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab3c:	4b48      	ldr	r3, [pc, #288]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <xTaskIncrementTick+0x46>
 800ab46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	e7fe      	b.n	800ab58 <xTaskIncrementTick+0x44>
 800ab5a:	4b41      	ldr	r3, [pc, #260]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	4b40      	ldr	r3, [pc, #256]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a3e      	ldr	r2, [pc, #248]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	4a3e      	ldr	r2, [pc, #248]	; (800ac64 <xTaskIncrementTick+0x150>)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	4b3e      	ldr	r3, [pc, #248]	; (800ac68 <xTaskIncrementTick+0x154>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3301      	adds	r3, #1
 800ab74:	4a3c      	ldr	r2, [pc, #240]	; (800ac68 <xTaskIncrementTick+0x154>)
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	f000 fac4 	bl	800b104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab7c:	4b3b      	ldr	r3, [pc, #236]	; (800ac6c <xTaskIncrementTick+0x158>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d349      	bcc.n	800ac1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab86:	4b36      	ldr	r3, [pc, #216]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d104      	bne.n	800ab9a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab90:	4b36      	ldr	r3, [pc, #216]	; (800ac6c <xTaskIncrementTick+0x158>)
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295
 800ab96:	601a      	str	r2, [r3, #0]
					break;
 800ab98:	e03f      	b.n	800ac1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9a:	4b31      	ldr	r3, [pc, #196]	; (800ac60 <xTaskIncrementTick+0x14c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d203      	bcs.n	800abba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abb2:	4a2e      	ldr	r2, [pc, #184]	; (800ac6c <xTaskIncrementTick+0x158>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abb8:	e02f      	b.n	800ac1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	3304      	adds	r3, #4
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe ffba 	bl	8009b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	3318      	adds	r3, #24
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe ffb1 	bl	8009b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abda:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <xTaskIncrementTick+0x15c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d903      	bls.n	800abea <xTaskIncrementTick+0xd6>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	4a22      	ldr	r2, [pc, #136]	; (800ac70 <xTaskIncrementTick+0x15c>)
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4a1f      	ldr	r2, [pc, #124]	; (800ac74 <xTaskIncrementTick+0x160>)
 800abf8:	441a      	add	r2, r3
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fe ff3c 	bl	8009a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <xTaskIncrementTick+0x164>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d3b8      	bcc.n	800ab86 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ac14:	2301      	movs	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac18:	e7b5      	b.n	800ab86 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac1a:	4b17      	ldr	r3, [pc, #92]	; (800ac78 <xTaskIncrementTick+0x164>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac20:	4914      	ldr	r1, [pc, #80]	; (800ac74 <xTaskIncrementTick+0x160>)
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d907      	bls.n	800ac42 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ac32:	2301      	movs	r3, #1
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e004      	b.n	800ac42 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac38:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <xTaskIncrementTick+0x168>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4a0f      	ldr	r2, [pc, #60]	; (800ac7c <xTaskIncrementTick+0x168>)
 800ac40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac42:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <xTaskIncrementTick+0x16c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac4e:	697b      	ldr	r3, [r7, #20]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000e48 	.word	0x20000e48
 800ac5c:	20000e24 	.word	0x20000e24
 800ac60:	20000dd8 	.word	0x20000dd8
 800ac64:	20000ddc 	.word	0x20000ddc
 800ac68:	20000e38 	.word	0x20000e38
 800ac6c:	20000e40 	.word	0x20000e40
 800ac70:	20000e28 	.word	0x20000e28
 800ac74:	20000950 	.word	0x20000950
 800ac78:	2000094c 	.word	0x2000094c
 800ac7c:	20000e30 	.word	0x20000e30
 800ac80:	20000e34 	.word	0x20000e34

0800ac84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac8a:	4b27      	ldr	r3, [pc, #156]	; (800ad28 <vTaskSwitchContext+0xa4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac92:	4b26      	ldr	r3, [pc, #152]	; (800ad2c <vTaskSwitchContext+0xa8>)
 800ac94:	2201      	movs	r2, #1
 800ac96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac98:	e040      	b.n	800ad1c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <vTaskSwitchContext+0xa8>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca0:	4b23      	ldr	r3, [pc, #140]	; (800ad30 <vTaskSwitchContext+0xac>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e00f      	b.n	800acc8 <vTaskSwitchContext+0x44>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <vTaskSwitchContext+0x3e>
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	607b      	str	r3, [r7, #4]
 800acc0:	e7fe      	b.n	800acc0 <vTaskSwitchContext+0x3c>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	491a      	ldr	r1, [pc, #104]	; (800ad34 <vTaskSwitchContext+0xb0>)
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0e5      	beq.n	800aca8 <vTaskSwitchContext+0x24>
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <vTaskSwitchContext+0xb0>)
 800ace8:	4413      	add	r3, r2
 800acea:	60bb      	str	r3, [r7, #8]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	605a      	str	r2, [r3, #4]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	685a      	ldr	r2, [r3, #4]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3308      	adds	r3, #8
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d104      	bne.n	800ad0c <vTaskSwitchContext+0x88>
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	605a      	str	r2, [r3, #4]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	4a09      	ldr	r2, [pc, #36]	; (800ad38 <vTaskSwitchContext+0xb4>)
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	4a06      	ldr	r2, [pc, #24]	; (800ad30 <vTaskSwitchContext+0xac>)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6013      	str	r3, [r2, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000e48 	.word	0x20000e48
 800ad2c:	20000e34 	.word	0x20000e34
 800ad30:	20000e28 	.word	0x20000e28
 800ad34:	20000950 	.word	0x20000950
 800ad38:	2000094c 	.word	0x2000094c

0800ad3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <vTaskPlaceOnEventList+0x24>
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	e7fe      	b.n	800ad5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <vTaskPlaceOnEventList+0x44>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3318      	adds	r3, #24
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7fe feac 	bl	8009ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad6e:	2101      	movs	r1, #1
 800ad70:	6838      	ldr	r0, [r7, #0]
 800ad72:	f000 fa71 	bl	800b258 <prvAddCurrentTaskToDelayedList>
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	2000094c 	.word	0x2000094c

0800ad84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d109      	bne.n	800adaa <vTaskPlaceOnEventListRestricted+0x26>
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	e7fe      	b.n	800ada8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adaa:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vTaskPlaceOnEventListRestricted+0x50>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3318      	adds	r3, #24
 800adb0:	4619      	mov	r1, r3
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7fe fe63 	bl	8009a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800adbe:	f04f 33ff 	mov.w	r3, #4294967295
 800adc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800adc4:	6879      	ldr	r1, [r7, #4]
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f000 fa46 	bl	800b258 <prvAddCurrentTaskToDelayedList>
	}
 800adcc:	bf00      	nop
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	2000094c 	.word	0x2000094c

0800add8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <xTaskRemoveFromEventList+0x2a>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e7fe      	b.n	800ae00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe fe96 	bl	8009b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae0c:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <xTaskRemoveFromEventList+0xac>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d11d      	bne.n	800ae50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	3304      	adds	r3, #4
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fe8d 	bl	8009b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <xTaskRemoveFromEventList+0xb0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d903      	bls.n	800ae32 <xTaskRemoveFromEventList+0x5a>
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	4a16      	ldr	r2, [pc, #88]	; (800ae88 <xTaskRemoveFromEventList+0xb0>)
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4a13      	ldr	r2, [pc, #76]	; (800ae8c <xTaskRemoveFromEventList+0xb4>)
 800ae40:	441a      	add	r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fe fe18 	bl	8009a7e <vListInsertEnd>
 800ae4e:	e005      	b.n	800ae5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	3318      	adds	r3, #24
 800ae54:	4619      	mov	r1, r3
 800ae56:	480e      	ldr	r0, [pc, #56]	; (800ae90 <xTaskRemoveFromEventList+0xb8>)
 800ae58:	f7fe fe11 	bl	8009a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae60:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <xTaskRemoveFromEventList+0xbc>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d905      	bls.n	800ae76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <xTaskRemoveFromEventList+0xc0>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	e001      	b.n	800ae7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae7a:	697b      	ldr	r3, [r7, #20]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000e48 	.word	0x20000e48
 800ae88:	20000e28 	.word	0x20000e28
 800ae8c:	20000950 	.word	0x20000950
 800ae90:	20000de0 	.word	0x20000de0
 800ae94:	2000094c 	.word	0x2000094c
 800ae98:	20000e34 	.word	0x20000e34

0800ae9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aea4:	4b06      	ldr	r3, [pc, #24]	; (800aec0 <vTaskInternalSetTimeOutState+0x24>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <vTaskInternalSetTimeOutState+0x28>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	605a      	str	r2, [r3, #4]
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	20000e38 	.word	0x20000e38
 800aec4:	20000e24 	.word	0x20000e24

0800aec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d109      	bne.n	800aeec <xTaskCheckForTimeOut+0x24>
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	e7fe      	b.n	800aeea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d109      	bne.n	800af06 <xTaskCheckForTimeOut+0x3e>
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e7fe      	b.n	800af04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800af06:	f000 fe69 	bl	800bbdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <xTaskCheckForTimeOut+0xb8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af22:	d102      	bne.n	800af2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e023      	b.n	800af72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b15      	ldr	r3, [pc, #84]	; (800af84 <xTaskCheckForTimeOut+0xbc>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d007      	beq.n	800af46 <xTaskCheckForTimeOut+0x7e>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d302      	bcc.n	800af46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af40:	2301      	movs	r3, #1
 800af42:	61fb      	str	r3, [r7, #28]
 800af44:	e015      	b.n	800af72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d20b      	bcs.n	800af68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ff9d 	bl	800ae9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af62:	2300      	movs	r3, #0
 800af64:	61fb      	str	r3, [r7, #28]
 800af66:	e004      	b.n	800af72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af6e:	2301      	movs	r3, #1
 800af70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af72:	f000 fe61 	bl	800bc38 <vPortExitCritical>

	return xReturn;
 800af76:	69fb      	ldr	r3, [r7, #28]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20000e24 	.word	0x20000e24
 800af84:	20000e38 	.word	0x20000e38

0800af88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af8c:	4b03      	ldr	r3, [pc, #12]	; (800af9c <vTaskMissedYield+0x14>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20000e34 	.word	0x20000e34

0800afa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afa8:	f000 f852 	bl	800b050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <prvIdleTask+0x28>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d9f9      	bls.n	800afa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afb4:	4b05      	ldr	r3, [pc, #20]	; (800afcc <prvIdleTask+0x2c>)
 800afb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afc4:	e7f0      	b.n	800afa8 <prvIdleTask+0x8>
 800afc6:	bf00      	nop
 800afc8:	20000950 	.word	0x20000950
 800afcc:	e000ed04 	.word	0xe000ed04

0800afd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd6:	2300      	movs	r3, #0
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	e00c      	b.n	800aff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4a12      	ldr	r2, [pc, #72]	; (800b030 <prvInitialiseTaskLists+0x60>)
 800afe8:	4413      	add	r3, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe fd1a 	bl	8009a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	607b      	str	r3, [r7, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b37      	cmp	r3, #55	; 0x37
 800affa:	d9ef      	bls.n	800afdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800affc:	480d      	ldr	r0, [pc, #52]	; (800b034 <prvInitialiseTaskLists+0x64>)
 800affe:	f7fe fd11 	bl	8009a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b002:	480d      	ldr	r0, [pc, #52]	; (800b038 <prvInitialiseTaskLists+0x68>)
 800b004:	f7fe fd0e 	bl	8009a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b008:	480c      	ldr	r0, [pc, #48]	; (800b03c <prvInitialiseTaskLists+0x6c>)
 800b00a:	f7fe fd0b 	bl	8009a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b00e:	480c      	ldr	r0, [pc, #48]	; (800b040 <prvInitialiseTaskLists+0x70>)
 800b010:	f7fe fd08 	bl	8009a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b014:	480b      	ldr	r0, [pc, #44]	; (800b044 <prvInitialiseTaskLists+0x74>)
 800b016:	f7fe fd05 	bl	8009a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b01a:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvInitialiseTaskLists+0x78>)
 800b01c:	4a05      	ldr	r2, [pc, #20]	; (800b034 <prvInitialiseTaskLists+0x64>)
 800b01e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <prvInitialiseTaskLists+0x7c>)
 800b022:	4a05      	ldr	r2, [pc, #20]	; (800b038 <prvInitialiseTaskLists+0x68>)
 800b024:	601a      	str	r2, [r3, #0]
}
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20000950 	.word	0x20000950
 800b034:	20000db0 	.word	0x20000db0
 800b038:	20000dc4 	.word	0x20000dc4
 800b03c:	20000de0 	.word	0x20000de0
 800b040:	20000df4 	.word	0x20000df4
 800b044:	20000e0c 	.word	0x20000e0c
 800b048:	20000dd8 	.word	0x20000dd8
 800b04c:	20000ddc 	.word	0x20000ddc

0800b050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b056:	e019      	b.n	800b08c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b058:	f000 fdc0 	bl	800bbdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05c:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <prvCheckTasksWaitingTermination+0x4c>)
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fd65 	bl	8009b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <prvCheckTasksWaitingTermination+0x50>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3b01      	subs	r3, #1
 800b074:	4a0a      	ldr	r2, [pc, #40]	; (800b0a0 <prvCheckTasksWaitingTermination+0x50>)
 800b076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <prvCheckTasksWaitingTermination+0x54>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	4a09      	ldr	r2, [pc, #36]	; (800b0a4 <prvCheckTasksWaitingTermination+0x54>)
 800b080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b082:	f000 fdd9 	bl	800bc38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f80e 	bl	800b0a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <prvCheckTasksWaitingTermination+0x54>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e1      	bne.n	800b058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20000df4 	.word	0x20000df4
 800b0a0:	20000e20 	.word	0x20000e20
 800b0a4:	20000e08 	.word	0x20000e08

0800b0a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d108      	bne.n	800b0cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 ff68 	bl	800bf94 <vPortFree>
				vPortFree( pxTCB );
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 ff65 	bl	800bf94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0ca:	e017      	b.n	800b0fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d103      	bne.n	800b0de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 ff5c 	bl	800bf94 <vPortFree>
	}
 800b0dc:	e00e      	b.n	800b0fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d009      	beq.n	800b0fc <prvDeleteTCB+0x54>
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e7fe      	b.n	800b0fa <prvDeleteTCB+0x52>
	}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b10a:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <prvResetNextTaskUnblockTime+0x38>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d104      	bne.n	800b11e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b114:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <prvResetNextTaskUnblockTime+0x3c>)
 800b116:	f04f 32ff 	mov.w	r2, #4294967295
 800b11a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b11c:	e008      	b.n	800b130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <prvResetNextTaskUnblockTime+0x38>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	4a04      	ldr	r2, [pc, #16]	; (800b140 <prvResetNextTaskUnblockTime+0x3c>)
 800b12e:	6013      	str	r3, [r2, #0]
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20000dd8 	.word	0x20000dd8
 800b140:	20000e40 	.word	0x20000e40

0800b144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b14a:	4b0b      	ldr	r3, [pc, #44]	; (800b178 <xTaskGetSchedulerState+0x34>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b152:	2301      	movs	r3, #1
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	e008      	b.n	800b16a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b158:	4b08      	ldr	r3, [pc, #32]	; (800b17c <xTaskGetSchedulerState+0x38>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b160:	2302      	movs	r3, #2
 800b162:	607b      	str	r3, [r7, #4]
 800b164:	e001      	b.n	800b16a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b166:	2300      	movs	r3, #0
 800b168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b16a:	687b      	ldr	r3, [r7, #4]
	}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	20000e2c 	.word	0x20000e2c
 800b17c:	20000e48 	.word	0x20000e48

0800b180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d054      	beq.n	800b240 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b196:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <xTaskPriorityDisinherit+0xcc>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d009      	beq.n	800b1b4 <xTaskPriorityDisinherit+0x34>
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	e7fe      	b.n	800b1b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <xTaskPriorityDisinherit+0x50>
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60bb      	str	r3, [r7, #8]
 800b1ce:	e7fe      	b.n	800b1ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d4:	1e5a      	subs	r2, r3, #1
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d02c      	beq.n	800b240 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d128      	bne.n	800b240 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fca0 	bl	8009b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	4b0f      	ldr	r3, [pc, #60]	; (800b250 <xTaskPriorityDisinherit+0xd0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d903      	bls.n	800b220 <xTaskPriorityDisinherit+0xa0>
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a0c      	ldr	r2, [pc, #48]	; (800b250 <xTaskPriorityDisinherit+0xd0>)
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4a09      	ldr	r2, [pc, #36]	; (800b254 <xTaskPriorityDisinherit+0xd4>)
 800b22e:	441a      	add	r2, r3
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fc21 	bl	8009a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b23c:	2301      	movs	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b240:	697b      	ldr	r3, [r7, #20]
	}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	2000094c 	.word	0x2000094c
 800b250:	20000e28 	.word	0x20000e28
 800b254:	20000950 	.word	0x20000950

0800b258 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b262:	4b21      	ldr	r3, [pc, #132]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b268:	4b20      	ldr	r3, [pc, #128]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fc62 	bl	8009b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d10a      	bne.n	800b292 <prvAddCurrentTaskToDelayedList+0x3a>
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b282:	4b1a      	ldr	r3, [pc, #104]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4819      	ldr	r0, [pc, #100]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b28c:	f7fe fbf7 	bl	8009a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b290:	e026      	b.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4413      	add	r3, r2
 800b298:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d209      	bcs.n	800b2be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2aa:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f7fe fc05 	bl	8009ac6 <vListInsert>
}
 800b2bc:	e010      	b.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2be:	4b0e      	ldr	r3, [pc, #56]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fe fbfb 	bl	8009ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2d0:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d202      	bcs.n	800b2e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2da:	4a08      	ldr	r2, [pc, #32]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	6013      	str	r3, [r2, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20000e24 	.word	0x20000e24
 800b2ec:	2000094c 	.word	0x2000094c
 800b2f0:	20000e0c 	.word	0x20000e0c
 800b2f4:	20000ddc 	.word	0x20000ddc
 800b2f8:	20000dd8 	.word	0x20000dd8
 800b2fc:	20000e40 	.word	0x20000e40

0800b300 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b30a:	f000 faff 	bl	800b90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b30e:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <xTimerCreateTimerTask+0x80>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d021      	beq.n	800b35a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b31e:	1d3a      	adds	r2, r7, #4
 800b320:	f107 0108 	add.w	r1, r7, #8
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fb61 	bl	80099f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	9202      	str	r2, [sp, #8]
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	2302      	movs	r3, #2
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	2300      	movs	r3, #0
 800b33e:	460a      	mov	r2, r1
 800b340:	4910      	ldr	r1, [pc, #64]	; (800b384 <xTimerCreateTimerTask+0x84>)
 800b342:	4811      	ldr	r0, [pc, #68]	; (800b388 <xTimerCreateTimerTask+0x88>)
 800b344:	f7ff f8f6 	bl	800a534 <xTaskCreateStatic>
 800b348:	4602      	mov	r2, r0
 800b34a:	4b10      	ldr	r3, [pc, #64]	; (800b38c <xTimerCreateTimerTask+0x8c>)
 800b34c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <xTimerCreateTimerTask+0x8c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b356:	2301      	movs	r3, #1
 800b358:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d109      	bne.n	800b374 <xTimerCreateTimerTask+0x74>
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	613b      	str	r3, [r7, #16]
 800b372:	e7fe      	b.n	800b372 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b374:	697b      	ldr	r3, [r7, #20]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20000e7c 	.word	0x20000e7c
 800b384:	0800c330 	.word	0x0800c330
 800b388:	0800b4c1 	.word	0x0800b4c1
 800b38c:	20000e80 	.word	0x20000e80

0800b390 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d109      	bne.n	800b3bc <xTimerGenericCommand+0x2c>
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	623b      	str	r3, [r7, #32]
 800b3ba:	e7fe      	b.n	800b3ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3bc:	4b19      	ldr	r3, [pc, #100]	; (800b424 <xTimerGenericCommand+0x94>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d02a      	beq.n	800b41a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	dc18      	bgt.n	800b408 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3d6:	f7ff feb5 	bl	800b144 <xTaskGetSchedulerState>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d109      	bne.n	800b3f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3e0:	4b10      	ldr	r3, [pc, #64]	; (800b424 <xTimerGenericCommand+0x94>)
 800b3e2:	6818      	ldr	r0, [r3, #0]
 800b3e4:	f107 0110 	add.w	r1, r7, #16
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ec:	f7fe fccc 	bl	8009d88 <xQueueGenericSend>
 800b3f0:	6278      	str	r0, [r7, #36]	; 0x24
 800b3f2:	e012      	b.n	800b41a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <xTimerGenericCommand+0x94>)
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	f107 0110 	add.w	r1, r7, #16
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7fe fcc2 	bl	8009d88 <xQueueGenericSend>
 800b404:	6278      	str	r0, [r7, #36]	; 0x24
 800b406:	e008      	b.n	800b41a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b408:	4b06      	ldr	r3, [pc, #24]	; (800b424 <xTimerGenericCommand+0x94>)
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	f107 0110 	add.w	r1, r7, #16
 800b410:	2300      	movs	r3, #0
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	f7fe fdb2 	bl	8009f7c <xQueueGenericSendFromISR>
 800b418:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3728      	adds	r7, #40	; 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20000e7c 	.word	0x20000e7c

0800b428 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b432:	4b22      	ldr	r3, [pc, #136]	; (800b4bc <prvProcessExpiredTimer+0x94>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3304      	adds	r3, #4
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe fb79 	bl	8009b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d021      	beq.n	800b498 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	699a      	ldr	r2, [r3, #24]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	18d1      	adds	r1, r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	6978      	ldr	r0, [r7, #20]
 800b462:	f000 f8d1 	bl	800b608 <prvInsertTimerInActiveList>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01e      	beq.n	800b4aa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	2100      	movs	r1, #0
 800b476:	6978      	ldr	r0, [r7, #20]
 800b478:	f7ff ff8a 	bl	800b390 <xTimerGenericCommand>
 800b47c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d112      	bne.n	800b4aa <prvProcessExpiredTimer+0x82>
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e7fe      	b.n	800b496 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b49e:	f023 0301 	bic.w	r3, r3, #1
 800b4a2:	b2da      	uxtb	r2, r3
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	6978      	ldr	r0, [r7, #20]
 800b4b0:	4798      	blx	r3
}
 800b4b2:	bf00      	nop
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000e74 	.word	0x20000e74

0800b4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 f857 	bl	800b580 <prvGetNextExpireTime>
 800b4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 f803 	bl	800b4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4de:	f000 f8d5 	bl	800b68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4e2:	e7f1      	b.n	800b4c8 <prvTimerTask+0x8>

0800b4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4ee:	f7ff fa57 	bl	800a9a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4f2:	f107 0308 	add.w	r3, r7, #8
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f866 	bl	800b5c8 <prvSampleTimeNow>
 800b4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d130      	bne.n	800b566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <prvProcessTimerOrBlockTask+0x3c>
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d806      	bhi.n	800b520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b512:	f7ff fa53 	bl	800a9bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b516:	68f9      	ldr	r1, [r7, #12]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff ff85 	bl	800b428 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b51e:	e024      	b.n	800b56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d008      	beq.n	800b538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <prvProcessTimerOrBlockTask+0x90>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d101      	bne.n	800b534 <prvProcessTimerOrBlockTask+0x50>
 800b530:	2301      	movs	r3, #1
 800b532:	e000      	b.n	800b536 <prvProcessTimerOrBlockTask+0x52>
 800b534:	2300      	movs	r3, #0
 800b536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b538:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <prvProcessTimerOrBlockTask+0x94>)
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	4619      	mov	r1, r3
 800b546:	f7fe ffc1 	bl	800a4cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b54a:	f7ff fa37 	bl	800a9bc <xTaskResumeAll>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b554:	4b09      	ldr	r3, [pc, #36]	; (800b57c <prvProcessTimerOrBlockTask+0x98>)
 800b556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	f3bf 8f6f 	isb	sy
}
 800b564:	e001      	b.n	800b56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b566:	f7ff fa29 	bl	800a9bc <xTaskResumeAll>
}
 800b56a:	bf00      	nop
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20000e78 	.word	0x20000e78
 800b578:	20000e7c 	.word	0x20000e7c
 800b57c:	e000ed04 	.word	0xe000ed04

0800b580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b588:	4b0e      	ldr	r3, [pc, #56]	; (800b5c4 <prvGetNextExpireTime+0x44>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <prvGetNextExpireTime+0x16>
 800b592:	2201      	movs	r2, #1
 800b594:	e000      	b.n	800b598 <prvGetNextExpireTime+0x18>
 800b596:	2200      	movs	r2, #0
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d105      	bne.n	800b5b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <prvGetNextExpireTime+0x44>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	e001      	b.n	800b5b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	20000e74 	.word	0x20000e74

0800b5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5d0:	f7ff fa90 	bl	800aaf4 <xTaskGetTickCount>
 800b5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <prvSampleTimeNow+0x3c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d205      	bcs.n	800b5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5e0:	f000 f930 	bl	800b844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	e002      	b.n	800b5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5f2:	4a04      	ldr	r2, [pc, #16]	; (800b604 <prvSampleTimeNow+0x3c>)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20000e84 	.word	0x20000e84

0800b608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b616:	2300      	movs	r3, #0
 800b618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d812      	bhi.n	800b654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d302      	bcc.n	800b642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e01b      	b.n	800b67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b642:	4b10      	ldr	r3, [pc, #64]	; (800b684 <prvInsertTimerInActiveList+0x7c>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3304      	adds	r3, #4
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7fe fa3a 	bl	8009ac6 <vListInsert>
 800b652:	e012      	b.n	800b67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d206      	bcs.n	800b66a <prvInsertTimerInActiveList+0x62>
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d302      	bcc.n	800b66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b664:	2301      	movs	r3, #1
 800b666:	617b      	str	r3, [r7, #20]
 800b668:	e007      	b.n	800b67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <prvInsertTimerInActiveList+0x80>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fe fa26 	bl	8009ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b67a:	697b      	ldr	r3, [r7, #20]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20000e78 	.word	0x20000e78
 800b688:	20000e74 	.word	0x20000e74

0800b68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08e      	sub	sp, #56	; 0x38
 800b690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b692:	e0c6      	b.n	800b822 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	da17      	bge.n	800b6ca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b69a:	1d3b      	adds	r3, r7, #4
 800b69c:	3304      	adds	r3, #4
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <prvProcessReceivedCommands+0x2e>
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	61fb      	str	r3, [r7, #28]
 800b6b8:	e7fe      	b.n	800b6b8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c0:	6850      	ldr	r0, [r2, #4]
 800b6c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c4:	6892      	ldr	r2, [r2, #8]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f2c0 80a7 	blt.w	800b820 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d004      	beq.n	800b6e8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe fa28 	bl	8009b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6e8:	463b      	mov	r3, r7
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff ff6c 	bl	800b5c8 <prvSampleTimeNow>
 800b6f0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	f200 8094 	bhi.w	800b822 <prvProcessReceivedCommands+0x196>
 800b6fa:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <prvProcessReceivedCommands+0x74>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b729 	.word	0x0800b729
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b729 	.word	0x0800b729
 800b70c:	0800b79b 	.word	0x0800b79b
 800b710:	0800b7af 	.word	0x0800b7af
 800b714:	0800b7f7 	.word	0x0800b7f7
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b729 	.word	0x0800b729
 800b720:	0800b79b 	.word	0x0800b79b
 800b724:	0800b7af 	.word	0x0800b7af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	b2da      	uxtb	r2, r3
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	18d1      	adds	r1, r2, r3
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b748:	f7ff ff5e 	bl	800b608 <prvInsertTimerInActiveList>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d067      	beq.n	800b822 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b758:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d05c      	beq.n	800b822 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	441a      	add	r2, r3
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	2100      	movs	r1, #0
 800b778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77a:	f7ff fe09 	bl	800b390 <xTimerGenericCommand>
 800b77e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d14d      	bne.n	800b822 <prvProcessReceivedCommands+0x196>
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	61bb      	str	r3, [r7, #24]
 800b798:	e7fe      	b.n	800b798 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7a0:	f023 0301 	bic.w	r3, r3, #1
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7ac:	e039      	b.n	800b822 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7b4:	f043 0301 	orr.w	r3, r3, #1
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <prvProcessReceivedCommands+0x156>
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	e7fe      	b.n	800b7e0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	699a      	ldr	r2, [r3, #24]
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	18d1      	adds	r1, r2, r3
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7f0:	f7ff ff0a 	bl	800b608 <prvInsertTimerInActiveList>
					break;
 800b7f4:	e015      	b.n	800b822 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7fc:	f003 0302 	and.w	r3, r3, #2
 800b800:	2b00      	cmp	r3, #0
 800b802:	d103      	bne.n	800b80c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b806:	f000 fbc5 	bl	800bf94 <vPortFree>
 800b80a:	e00a      	b.n	800b822 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	b2da      	uxtb	r2, r3
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b81e:	e000      	b.n	800b822 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b820:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b822:	4b07      	ldr	r3, [pc, #28]	; (800b840 <prvProcessReceivedCommands+0x1b4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	1d39      	adds	r1, r7, #4
 800b828:	2200      	movs	r2, #0
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fc3a 	bl	800a0a4 <xQueueReceive>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	f47f af2e 	bne.w	800b694 <prvProcessReceivedCommands+0x8>
	}
}
 800b838:	bf00      	nop
 800b83a:	3730      	adds	r7, #48	; 0x30
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	20000e7c 	.word	0x20000e7c

0800b844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b84a:	e047      	b.n	800b8dc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b84c:	4b2d      	ldr	r3, [pc, #180]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b856:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3304      	adds	r3, #4
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe f967 	bl	8009b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d02d      	beq.n	800b8dc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	4413      	add	r3, r2
 800b888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d90e      	bls.n	800b8b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	f7fe f90c 	bl	8009ac6 <vListInsert>
 800b8ae:	e015      	b.n	800b8dc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fd68 	bl	800b390 <xTimerGenericCommand>
 800b8c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <prvSwitchTimerLists+0x98>
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	603b      	str	r3, [r7, #0]
 800b8da:	e7fe      	b.n	800b8da <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1b2      	bne.n	800b84c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8ec:	4b06      	ldr	r3, [pc, #24]	; (800b908 <prvSwitchTimerLists+0xc4>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a04      	ldr	r2, [pc, #16]	; (800b904 <prvSwitchTimerLists+0xc0>)
 800b8f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8f4:	4a04      	ldr	r2, [pc, #16]	; (800b908 <prvSwitchTimerLists+0xc4>)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	6013      	str	r3, [r2, #0]
}
 800b8fa:	bf00      	nop
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000e74 	.word	0x20000e74
 800b908:	20000e78 	.word	0x20000e78

0800b90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b912:	f000 f963 	bl	800bbdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b916:	4b15      	ldr	r3, [pc, #84]	; (800b96c <prvCheckForValidListAndQueue+0x60>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d120      	bne.n	800b960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b91e:	4814      	ldr	r0, [pc, #80]	; (800b970 <prvCheckForValidListAndQueue+0x64>)
 800b920:	f7fe f880 	bl	8009a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b924:	4813      	ldr	r0, [pc, #76]	; (800b974 <prvCheckForValidListAndQueue+0x68>)
 800b926:	f7fe f87d 	bl	8009a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <prvCheckForValidListAndQueue+0x6c>)
 800b92c:	4a10      	ldr	r2, [pc, #64]	; (800b970 <prvCheckForValidListAndQueue+0x64>)
 800b92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b930:	4b12      	ldr	r3, [pc, #72]	; (800b97c <prvCheckForValidListAndQueue+0x70>)
 800b932:	4a10      	ldr	r2, [pc, #64]	; (800b974 <prvCheckForValidListAndQueue+0x68>)
 800b934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b936:	2300      	movs	r3, #0
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	4b11      	ldr	r3, [pc, #68]	; (800b980 <prvCheckForValidListAndQueue+0x74>)
 800b93c:	4a11      	ldr	r2, [pc, #68]	; (800b984 <prvCheckForValidListAndQueue+0x78>)
 800b93e:	2110      	movs	r1, #16
 800b940:	200a      	movs	r0, #10
 800b942:	f7fe f98b 	bl	8009c5c <xQueueGenericCreateStatic>
 800b946:	4602      	mov	r2, r0
 800b948:	4b08      	ldr	r3, [pc, #32]	; (800b96c <prvCheckForValidListAndQueue+0x60>)
 800b94a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b94c:	4b07      	ldr	r3, [pc, #28]	; (800b96c <prvCheckForValidListAndQueue+0x60>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <prvCheckForValidListAndQueue+0x60>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	490b      	ldr	r1, [pc, #44]	; (800b988 <prvCheckForValidListAndQueue+0x7c>)
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe fd8e 	bl	800a47c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b960:	f000 f96a 	bl	800bc38 <vPortExitCritical>
}
 800b964:	bf00      	nop
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	20000e7c 	.word	0x20000e7c
 800b970:	20000e4c 	.word	0x20000e4c
 800b974:	20000e60 	.word	0x20000e60
 800b978:	20000e74 	.word	0x20000e74
 800b97c:	20000e78 	.word	0x20000e78
 800b980:	20000f28 	.word	0x20000f28
 800b984:	20000e88 	.word	0x20000e88
 800b988:	0800c338 	.word	0x0800c338

0800b98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3b04      	subs	r3, #4
 800b99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b04      	subs	r3, #4
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f023 0201 	bic.w	r2, r3, #1
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9bc:	4a0c      	ldr	r2, [pc, #48]	; (800b9f0 <pxPortInitialiseStack+0x64>)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3b14      	subs	r3, #20
 800b9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f06f 0202 	mvn.w	r2, #2
 800b9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	3b20      	subs	r3, #32
 800b9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	0800b9f5 	.word	0x0800b9f5

0800b9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9fe:	4b11      	ldr	r3, [pc, #68]	; (800ba44 <prvTaskExitError+0x50>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba06:	d009      	beq.n	800ba1c <prvTaskExitError+0x28>
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e7fe      	b.n	800ba1a <prvTaskExitError+0x26>
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba2e:	bf00      	nop
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0fc      	beq.n	800ba30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	200000a4 	.word	0x200000a4
	...

0800ba50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <pxCurrentTCBConst2>)
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	6808      	ldr	r0, [r1, #0]
 800ba56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	f380 8809 	msr	PSP, r0
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8811 	msr	BASEPRI, r0
 800ba6a:	4770      	bx	lr
 800ba6c:	f3af 8000 	nop.w

0800ba70 <pxCurrentTCBConst2>:
 800ba70:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop

0800ba78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba78:	4808      	ldr	r0, [pc, #32]	; (800ba9c <prvPortStartFirstTask+0x24>)
 800ba7a:	6800      	ldr	r0, [r0, #0]
 800ba7c:	6800      	ldr	r0, [r0, #0]
 800ba7e:	f380 8808 	msr	MSP, r0
 800ba82:	f04f 0000 	mov.w	r0, #0
 800ba86:	f380 8814 	msr	CONTROL, r0
 800ba8a:	b662      	cpsie	i
 800ba8c:	b661      	cpsie	f
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	df00      	svc	0
 800ba98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba9a:	bf00      	nop
 800ba9c:	e000ed08 	.word	0xe000ed08

0800baa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800baa6:	4b44      	ldr	r3, [pc, #272]	; (800bbb8 <xPortStartScheduler+0x118>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a44      	ldr	r2, [pc, #272]	; (800bbbc <xPortStartScheduler+0x11c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d109      	bne.n	800bac4 <xPortStartScheduler+0x24>
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	613b      	str	r3, [r7, #16]
 800bac2:	e7fe      	b.n	800bac2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bac4:	4b3c      	ldr	r3, [pc, #240]	; (800bbb8 <xPortStartScheduler+0x118>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a3d      	ldr	r2, [pc, #244]	; (800bbc0 <xPortStartScheduler+0x120>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d109      	bne.n	800bae2 <xPortStartScheduler+0x42>
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	e7fe      	b.n	800bae0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bae2:	4b38      	ldr	r3, [pc, #224]	; (800bbc4 <xPortStartScheduler+0x124>)
 800bae4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	22ff      	movs	r2, #255	; 0xff
 800baf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	4b30      	ldr	r3, [pc, #192]	; (800bbc8 <xPortStartScheduler+0x128>)
 800bb08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb0a:	4b30      	ldr	r3, [pc, #192]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb0c:	2207      	movs	r2, #7
 800bb0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb10:	e009      	b.n	800bb26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bb12:	4b2e      	ldr	r3, [pc, #184]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	4a2c      	ldr	r2, [pc, #176]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2e:	2b80      	cmp	r3, #128	; 0x80
 800bb30:	d0ef      	beq.n	800bb12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb32:	4b26      	ldr	r3, [pc, #152]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f1c3 0307 	rsb	r3, r3, #7
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d009      	beq.n	800bb52 <xPortStartScheduler+0xb2>
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	60bb      	str	r3, [r7, #8]
 800bb50:	e7fe      	b.n	800bb50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb52:	4b1e      	ldr	r3, [pc, #120]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	021b      	lsls	r3, r3, #8
 800bb58:	4a1c      	ldr	r2, [pc, #112]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb64:	4a19      	ldr	r2, [pc, #100]	; (800bbcc <xPortStartScheduler+0x12c>)
 800bb66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb70:	4b17      	ldr	r3, [pc, #92]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a16      	ldr	r2, [pc, #88]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb7c:	4b14      	ldr	r3, [pc, #80]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a13      	ldr	r2, [pc, #76]	; (800bbd0 <xPortStartScheduler+0x130>)
 800bb82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb88:	f000 f8d6 	bl	800bd38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb8c:	4b11      	ldr	r3, [pc, #68]	; (800bbd4 <xPortStartScheduler+0x134>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb92:	f000 f8f5 	bl	800bd80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb96:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a0f      	ldr	r2, [pc, #60]	; (800bbd8 <xPortStartScheduler+0x138>)
 800bb9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bba0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bba2:	f7ff ff69 	bl	800ba78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bba6:	f7ff f86d 	bl	800ac84 <vTaskSwitchContext>
	prvTaskExitError();
 800bbaa:	f7ff ff23 	bl	800b9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed00 	.word	0xe000ed00
 800bbbc:	410fc271 	.word	0x410fc271
 800bbc0:	410fc270 	.word	0x410fc270
 800bbc4:	e000e400 	.word	0xe000e400
 800bbc8:	20000f78 	.word	0x20000f78
 800bbcc:	20000f7c 	.word	0x20000f7c
 800bbd0:	e000ed20 	.word	0xe000ed20
 800bbd4:	200000a4 	.word	0x200000a4
 800bbd8:	e000ef34 	.word	0xe000ef34

0800bbdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <vPortEnterCritical+0x54>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	4a0d      	ldr	r2, [pc, #52]	; (800bc30 <vPortEnterCritical+0x54>)
 800bbfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <vPortEnterCritical+0x54>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d10e      	bne.n	800bc24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <vPortEnterCritical+0x58>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d009      	beq.n	800bc24 <vPortEnterCritical+0x48>
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	603b      	str	r3, [r7, #0]
 800bc22:	e7fe      	b.n	800bc22 <vPortEnterCritical+0x46>
	}
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	200000a4 	.word	0x200000a4
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <vPortExitCritical+0x4c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d109      	bne.n	800bc5a <vPortExitCritical+0x22>
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e7fe      	b.n	800bc58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bc5a:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <vPortExitCritical+0x4c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	4a08      	ldr	r2, [pc, #32]	; (800bc84 <vPortExitCritical+0x4c>)
 800bc62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <vPortExitCritical+0x4c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d104      	bne.n	800bc76 <vPortExitCritical+0x3e>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	200000a4 	.word	0x200000a4
	...

0800bc90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc90:	f3ef 8009 	mrs	r0, PSP
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <pxCurrentTCBConst>)
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	f01e 0f10 	tst.w	lr, #16
 800bca0:	bf08      	it	eq
 800bca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcaa:	6010      	str	r0, [r2, #0]
 800bcac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcb4:	f380 8811 	msr	BASEPRI, r0
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f7fe ffe0 	bl	800ac84 <vTaskSwitchContext>
 800bcc4:	f04f 0000 	mov.w	r0, #0
 800bcc8:	f380 8811 	msr	BASEPRI, r0
 800bccc:	bc09      	pop	{r0, r3}
 800bcce:	6819      	ldr	r1, [r3, #0]
 800bcd0:	6808      	ldr	r0, [r1, #0]
 800bcd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd6:	f01e 0f10 	tst.w	lr, #16
 800bcda:	bf08      	it	eq
 800bcdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bce0:	f380 8809 	msr	PSP, r0
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	f3af 8000 	nop.w

0800bcf0 <pxCurrentTCBConst>:
 800bcf0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop

0800bcf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd10:	f7fe ff00 	bl	800ab14 <xTaskIncrementTick>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd1a:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <SysTick_Handler+0x3c>)
 800bd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <vPortSetupTimerInterrupt+0x34>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <vPortSetupTimerInterrupt+0x38>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd48:	4b0a      	ldr	r3, [pc, #40]	; (800bd74 <vPortSetupTimerInterrupt+0x3c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a0a      	ldr	r2, [pc, #40]	; (800bd78 <vPortSetupTimerInterrupt+0x40>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	099b      	lsrs	r3, r3, #6
 800bd54:	4a09      	ldr	r2, [pc, #36]	; (800bd7c <vPortSetupTimerInterrupt+0x44>)
 800bd56:	3b01      	subs	r3, #1
 800bd58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd5a:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <vPortSetupTimerInterrupt+0x34>)
 800bd5c:	2207      	movs	r2, #7
 800bd5e:	601a      	str	r2, [r3, #0]
}
 800bd60:	bf00      	nop
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	e000e010 	.word	0xe000e010
 800bd70:	e000e018 	.word	0xe000e018
 800bd74:	20000014 	.word	0x20000014
 800bd78:	10624dd3 	.word	0x10624dd3
 800bd7c:	e000e014 	.word	0xe000e014

0800bd80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd90 <vPortEnableVFP+0x10>
 800bd84:	6801      	ldr	r1, [r0, #0]
 800bd86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd8a:	6001      	str	r1, [r0, #0]
 800bd8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd8e:	bf00      	nop
 800bd90:	e000ed88 	.word	0xe000ed88

0800bd94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd9a:	f3ef 8305 	mrs	r3, IPSR
 800bd9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b0f      	cmp	r3, #15
 800bda4:	d913      	bls.n	800bdce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bda6:	4a16      	ldr	r2, [pc, #88]	; (800be00 <vPortValidateInterruptPriority+0x6c>)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4413      	add	r3, r2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdb0:	4b14      	ldr	r3, [pc, #80]	; (800be04 <vPortValidateInterruptPriority+0x70>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	7afa      	ldrb	r2, [r7, #11]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d209      	bcs.n	800bdce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	607b      	str	r3, [r7, #4]
 800bdcc:	e7fe      	b.n	800bdcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdce:	4b0e      	ldr	r3, [pc, #56]	; (800be08 <vPortValidateInterruptPriority+0x74>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdd6:	4b0d      	ldr	r3, [pc, #52]	; (800be0c <vPortValidateInterruptPriority+0x78>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d909      	bls.n	800bdf2 <vPortValidateInterruptPriority+0x5e>
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	e7fe      	b.n	800bdf0 <vPortValidateInterruptPriority+0x5c>
	}
 800bdf2:	bf00      	nop
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	e000e3f0 	.word	0xe000e3f0
 800be04:	20000f78 	.word	0x20000f78
 800be08:	e000ed0c 	.word	0xe000ed0c
 800be0c:	20000f7c 	.word	0x20000f7c

0800be10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08a      	sub	sp, #40	; 0x28
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be1c:	f7fe fdc0 	bl	800a9a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be20:	4b57      	ldr	r3, [pc, #348]	; (800bf80 <pvPortMalloc+0x170>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be28:	f000 f90c 	bl	800c044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be2c:	4b55      	ldr	r3, [pc, #340]	; (800bf84 <pvPortMalloc+0x174>)
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 808c 	bne.w	800bf52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d01c      	beq.n	800be7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800be40:	2208      	movs	r2, #8
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4413      	add	r3, r2
 800be46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d013      	beq.n	800be7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f023 0307 	bic.w	r3, r3, #7
 800be58:	3308      	adds	r3, #8
 800be5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f003 0307 	and.w	r3, r3, #7
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <pvPortMalloc+0x6a>
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e7fe      	b.n	800be78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d068      	beq.n	800bf52 <pvPortMalloc+0x142>
 800be80:	4b41      	ldr	r3, [pc, #260]	; (800bf88 <pvPortMalloc+0x178>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	429a      	cmp	r2, r3
 800be88:	d863      	bhi.n	800bf52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be8a:	4b40      	ldr	r3, [pc, #256]	; (800bf8c <pvPortMalloc+0x17c>)
 800be8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be8e:	4b3f      	ldr	r3, [pc, #252]	; (800bf8c <pvPortMalloc+0x17c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be94:	e004      	b.n	800bea0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d903      	bls.n	800beb2 <pvPortMalloc+0xa2>
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f1      	bne.n	800be96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800beb2:	4b33      	ldr	r3, [pc, #204]	; (800bf80 <pvPortMalloc+0x170>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb8:	429a      	cmp	r2, r3
 800beba:	d04a      	beq.n	800bf52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2208      	movs	r2, #8
 800bec2:	4413      	add	r3, r2
 800bec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	1ad2      	subs	r2, r2, r3
 800bed6:	2308      	movs	r3, #8
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	429a      	cmp	r2, r3
 800bedc:	d91e      	bls.n	800bf1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4413      	add	r3, r2
 800bee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	2b00      	cmp	r3, #0
 800beee:	d009      	beq.n	800bf04 <pvPortMalloc+0xf4>
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	613b      	str	r3, [r7, #16]
 800bf02:	e7fe      	b.n	800bf02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	1ad2      	subs	r2, r2, r3
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf16:	69b8      	ldr	r0, [r7, #24]
 800bf18:	f000 f8f6 	bl	800c108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	; (800bf88 <pvPortMalloc+0x178>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	4a18      	ldr	r2, [pc, #96]	; (800bf88 <pvPortMalloc+0x178>)
 800bf28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf2a:	4b17      	ldr	r3, [pc, #92]	; (800bf88 <pvPortMalloc+0x178>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	4b18      	ldr	r3, [pc, #96]	; (800bf90 <pvPortMalloc+0x180>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d203      	bcs.n	800bf3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf36:	4b14      	ldr	r3, [pc, #80]	; (800bf88 <pvPortMalloc+0x178>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a15      	ldr	r2, [pc, #84]	; (800bf90 <pvPortMalloc+0x180>)
 800bf3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <pvPortMalloc+0x174>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	431a      	orrs	r2, r3
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf52:	f7fe fd33 	bl	800a9bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f003 0307 	and.w	r3, r3, #7
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <pvPortMalloc+0x164>
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e7fe      	b.n	800bf72 <pvPortMalloc+0x162>
	return pvReturn;
 800bf74:	69fb      	ldr	r3, [r7, #28]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3728      	adds	r7, #40	; 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20004b88 	.word	0x20004b88
 800bf84:	20004b94 	.word	0x20004b94
 800bf88:	20004b8c 	.word	0x20004b8c
 800bf8c:	20004b80 	.word	0x20004b80
 800bf90:	20004b90 	.word	0x20004b90

0800bf94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d046      	beq.n	800c034 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfa6:	2308      	movs	r3, #8
 800bfa8:	425b      	negs	r3, r3
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	4413      	add	r3, r2
 800bfae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	4b20      	ldr	r3, [pc, #128]	; (800c03c <vPortFree+0xa8>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d109      	bne.n	800bfd6 <vPortFree+0x42>
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e7fe      	b.n	800bfd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d009      	beq.n	800bff2 <vPortFree+0x5e>
 800bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	60bb      	str	r3, [r7, #8]
 800bff0:	e7fe      	b.n	800bff0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	4b11      	ldr	r3, [pc, #68]	; (800c03c <vPortFree+0xa8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d019      	beq.n	800c034 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d115      	bne.n	800c034 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <vPortFree+0xa8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	43db      	mvns	r3, r3
 800c012:	401a      	ands	r2, r3
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c018:	f7fe fcc2 	bl	800a9a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <vPortFree+0xac>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4413      	add	r3, r2
 800c026:	4a06      	ldr	r2, [pc, #24]	; (800c040 <vPortFree+0xac>)
 800c028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c02a:	6938      	ldr	r0, [r7, #16]
 800c02c:	f000 f86c 	bl	800c108 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c030:	f7fe fcc4 	bl	800a9bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c034:	bf00      	nop
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20004b94 	.word	0x20004b94
 800c040:	20004b8c 	.word	0x20004b8c

0800c044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <prvHeapInit+0xac>)
 800c052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3307      	adds	r3, #7
 800c062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0307 	bic.w	r3, r3, #7
 800c06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	4a1f      	ldr	r2, [pc, #124]	; (800c0f0 <prvHeapInit+0xac>)
 800c074:	4413      	add	r3, r2
 800c076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c07c:	4a1d      	ldr	r2, [pc, #116]	; (800c0f4 <prvHeapInit+0xb0>)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c082:	4b1c      	ldr	r3, [pc, #112]	; (800c0f4 <prvHeapInit+0xb0>)
 800c084:	2200      	movs	r2, #0
 800c086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c090:	2208      	movs	r2, #8
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	1a9b      	subs	r3, r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f023 0307 	bic.w	r3, r3, #7
 800c09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	4a15      	ldr	r2, [pc, #84]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	1ad2      	subs	r2, r2, r3
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <prvHeapInit+0xb4>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <prvHeapInit+0xb8>)
 800c0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <prvHeapInit+0xbc>)
 800c0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0dc:	4b09      	ldr	r3, [pc, #36]	; (800c104 <prvHeapInit+0xc0>)
 800c0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0e2:	601a      	str	r2, [r3, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	20000f80 	.word	0x20000f80
 800c0f4:	20004b80 	.word	0x20004b80
 800c0f8:	20004b88 	.word	0x20004b88
 800c0fc:	20004b90 	.word	0x20004b90
 800c100:	20004b8c 	.word	0x20004b8c
 800c104:	20004b94 	.word	0x20004b94

0800c108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c110:	4b28      	ldr	r3, [pc, #160]	; (800c1b4 <prvInsertBlockIntoFreeList+0xac>)
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e002      	b.n	800c11c <prvInsertBlockIntoFreeList+0x14>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d8f7      	bhi.n	800c116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	4413      	add	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	429a      	cmp	r2, r3
 800c136:	d108      	bne.n	800c14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	441a      	add	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d118      	bne.n	800c190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d00d      	beq.n	800c186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	441a      	add	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	e008      	b.n	800c198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c186:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	e003      	b.n	800c198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d002      	beq.n	800c1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1a6:	bf00      	nop
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20004b80 	.word	0x20004b80
 800c1b8:	20004b88 	.word	0x20004b88

0800c1bc <__libc_init_array>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4e0d      	ldr	r6, [pc, #52]	; (800c1f4 <__libc_init_array+0x38>)
 800c1c0:	4c0d      	ldr	r4, [pc, #52]	; (800c1f8 <__libc_init_array+0x3c>)
 800c1c2:	1ba4      	subs	r4, r4, r6
 800c1c4:	10a4      	asrs	r4, r4, #2
 800c1c6:	2500      	movs	r5, #0
 800c1c8:	42a5      	cmp	r5, r4
 800c1ca:	d109      	bne.n	800c1e0 <__libc_init_array+0x24>
 800c1cc:	4e0b      	ldr	r6, [pc, #44]	; (800c1fc <__libc_init_array+0x40>)
 800c1ce:	4c0c      	ldr	r4, [pc, #48]	; (800c200 <__libc_init_array+0x44>)
 800c1d0:	f000 f82c 	bl	800c22c <_init>
 800c1d4:	1ba4      	subs	r4, r4, r6
 800c1d6:	10a4      	asrs	r4, r4, #2
 800c1d8:	2500      	movs	r5, #0
 800c1da:	42a5      	cmp	r5, r4
 800c1dc:	d105      	bne.n	800c1ea <__libc_init_array+0x2e>
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1e4:	4798      	blx	r3
 800c1e6:	3501      	adds	r5, #1
 800c1e8:	e7ee      	b.n	800c1c8 <__libc_init_array+0xc>
 800c1ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1ee:	4798      	blx	r3
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	e7f2      	b.n	800c1da <__libc_init_array+0x1e>
 800c1f4:	0800eebc 	.word	0x0800eebc
 800c1f8:	0800eebc 	.word	0x0800eebc
 800c1fc:	0800eebc 	.word	0x0800eebc
 800c200:	0800eec0 	.word	0x0800eec0

0800c204 <memcpy>:
 800c204:	b510      	push	{r4, lr}
 800c206:	1e43      	subs	r3, r0, #1
 800c208:	440a      	add	r2, r1
 800c20a:	4291      	cmp	r1, r2
 800c20c:	d100      	bne.n	800c210 <memcpy+0xc>
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c214:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c218:	e7f7      	b.n	800c20a <memcpy+0x6>

0800c21a <memset>:
 800c21a:	4402      	add	r2, r0
 800c21c:	4603      	mov	r3, r0
 800c21e:	4293      	cmp	r3, r2
 800c220:	d100      	bne.n	800c224 <memset+0xa>
 800c222:	4770      	bx	lr
 800c224:	f803 1b01 	strb.w	r1, [r3], #1
 800c228:	e7f9      	b.n	800c21e <memset+0x4>
	...

0800c22c <_init>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <_fini>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr
