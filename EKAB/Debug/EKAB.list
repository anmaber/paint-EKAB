
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026d0  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1bc  0800b1bc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1c4  0800b1c4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000098  0800b264  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800b264  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb25  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000442b  00000000  00000000  0003ebed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bf0  00000000  00000000  00043018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a8  00000000  00000000  00044c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028000  00000000  00000000  000465b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019b9c  00000000  00000000  0006e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3dc4  00000000  00000000  0008814c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016bf10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007308  00000000  00000000  0016bf8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000098 	.word	0x20000098
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008ad4 	.word	0x08008ad4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000009c 	.word	0x2000009c
 80001e8:	08008ad4 	.word	0x08008ad4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <MX_DMA2D_Init+0x38>)
 80004f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004fc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_DMA2D_Init+0x34>)
 800050c:	f003 fe2e 	bl	800416c <HAL_DMA2D_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000516:	f000 fcdd 	bl	8000ed4 <Error_Handler>
  }

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000274 	.word	0x20000274
 8000524:	4002b000 	.word	0x4002b000

08000528 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_DMA2D_MspInit+0x3c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10d      	bne.n	8000556 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	4002b000 	.word	0x4002b000
 8000568:	40023800 	.word	0x40023800

0800056c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_FMC_Init+0x98>)
 8000586:	4a20      	ldr	r2, [pc, #128]	; (8000608 <MX_FMC_Init+0x9c>)
 8000588:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_FMC_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_FMC_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_FMC_Init+0x98>)
 8000598:	2204      	movs	r2, #4
 800059a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_FMC_Init+0x98>)
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_FMC_Init+0x98>)
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_FMC_Init+0x98>)
 80005aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_FMC_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_FMC_Init+0x98>)
 80005b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_FMC_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_FMC_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80005da:	2303      	movs	r3, #3
 80005dc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_FMC_Init+0x98>)
 80005ec:	f006 fcf2 	bl	8006fd4 <HAL_SDRAM_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 80005f6:	f000 fc6d 	bl	8000ed4 <Error_Handler>
  }

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200002b4 	.word	0x200002b4
 8000608:	a0000140 	.word	0xa0000140

0800060c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_FMC_MspInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d16f      	bne.n	8000708 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <HAL_FMC_MspInit+0x104>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6393      	str	r3, [r2, #56]	; 0x38
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800064a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800064e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800065c:	230c      	movs	r3, #12
 800065e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <HAL_FMC_MspInit+0x10c>)
 8000666:	f004 f80d 	bl	8004684 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067a:	230c      	movs	r3, #12
 800067c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <HAL_FMC_MspInit+0x110>)
 8000684:	f003 fffe 	bl	8004684 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8000688:	f248 1333 	movw	r3, #33075	; 0x8133
 800068c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069a:	230c      	movs	r3, #12
 800069c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <HAL_FMC_MspInit+0x114>)
 80006a4:	f003 ffee 	bl	8004684 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80006a8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80006ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ba:	230c      	movs	r3, #12
 80006bc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <HAL_FMC_MspInit+0x118>)
 80006c4:	f003 ffde 	bl	8004684 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80006c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80006cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006da:	230c      	movs	r3, #12
 80006dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <HAL_FMC_MspInit+0x11c>)
 80006e4:	f003 ffce 	bl	8004684 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f8:	230c      	movs	r3, #12
 80006fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <HAL_FMC_MspInit+0x120>)
 8000702:	f003 ffbf 	bl	8004684 <HAL_GPIO_Init>
 8000706:	e000      	b.n	800070a <HAL_FMC_MspInit+0xfe>
    return;
 8000708:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000b4 	.word	0x200000b4
 8000714:	40023800 	.word	0x40023800
 8000718:	40021400 	.word	0x40021400
 800071c:	40020800 	.word	0x40020800
 8000720:	40021800 	.word	0x40021800
 8000724:	40021000 	.word	0x40021000
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40020400 	.word	0x40020400

08000730 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000738:	f7ff ff68 	bl	800060c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <MX_GPIO_Init+0xf4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0xf4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a32      	ldr	r2, [pc, #200]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <MX_GPIO_Init+0xf4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

}
 800082a:	bf00      	nop
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C3_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C3_Init+0x74>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_I2C3_Init+0x74>)
 800087a:	f004 f9d1 	bl	8004c20 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 fb26 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C3_Init+0x74>)
 800088c:	f005 f9b5 	bl	8005bfa <HAL_I2CEx_ConfigAnalogFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 fb1d 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C3_Init+0x74>)
 800089e:	f005 f9e8 	bl	8005c72 <HAL_I2CEx_ConfigDigitalFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fb14 	bl	8000ed4 <Error_Handler>
  }

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002e8 	.word	0x200002e8
 80008b4:	40005c00 	.word	0x40005c00
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_I2C_MspInit+0xc4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d14b      	bne.n	8000976 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091c:	2312      	movs	r3, #18
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000928:	2304      	movs	r3, #4
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <HAL_I2C_MspInit+0xcc>)
 8000934:	f003 fea6 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800094a:	2304      	movs	r3, #4
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <HAL_I2C_MspInit+0xd0>)
 8000956:	f003 fe95 	bl	8004684 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005c00 	.word	0x40005c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <HAL_I2C_MspDeInit+0x3c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10f      	bne.n	80009c2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_I2C_MspDeInit+0x40>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_I2C_MspDeInit+0x40>)
 80009a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80009ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <HAL_I2C_MspDeInit+0x44>)
 80009b4:	f004 f810 	bl	80049d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80009b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <HAL_I2C_MspDeInit+0x48>)
 80009be:	f004 f80b 	bl	80049d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40005c00 	.word	0x40005c00
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000

080009dc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09a      	sub	sp, #104	; 0x68
 80009e0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e6:	2234      	movs	r2, #52	; 0x34
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 f86a 	bl	8008ac4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009f0:	463b      	mov	r3, r7
 80009f2:	2234      	movs	r2, #52	; 0x34
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f008 f864 	bl	8008ac4 <memset>

  hltdc.Instance = LTDC;
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <MX_LTDC_Init+0x15c>)
 80009fe:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <MX_LTDC_Init+0x160>)
 8000a00:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a02:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a08:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a1a:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a28:	220e      	movs	r2, #14
 8000a2a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a2e:	2205      	movs	r2, #5
 8000a30:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a34:	22fe      	movs	r2, #254	; 0xfe
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000a38:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a3a:	f240 1245 	movw	r2, #325	; 0x145
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8000a40:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a48:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a4a:	f240 1247 	movw	r2, #327	; 0x147
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a60:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a68:	4833      	ldr	r0, [pc, #204]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000a6a:	f005 f941 	bl	8005cf0 <HAL_LTDC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8000a74:	f000 fa2e 	bl	8000ed4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000ac6:	f005 f9e3 	bl	8005e90 <HAL_LTDC_ConfigLayer>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000ad0:	f000 fa00 	bl	8000ed4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000af6:	2305      	movs	r3, #5
 8000af8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_LTDC_Init+0x15c>)
 8000b20:	f005 f9b6 	bl	8005e90 <HAL_LTDC_ConfigLayer>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8000b2a:	f000 f9d3 	bl	8000ed4 <Error_Handler>
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3768      	adds	r7, #104	; 0x68
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000033c 	.word	0x2000033c
 8000b3c:	40016800 	.word	0x40016800

08000b40 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a77      	ldr	r2, [pc, #476]	; (8000d3c <HAL_LTDC_MspInit+0x1fc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	f040 80e8 	bne.w	8000d34 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	4b75      	ldr	r3, [pc, #468]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a74      	ldr	r2, [pc, #464]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44
 8000b74:	4b72      	ldr	r3, [pc, #456]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	4b6e      	ldr	r3, [pc, #440]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a6d      	ldr	r2, [pc, #436]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b6b      	ldr	r3, [pc, #428]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0320 	and.w	r3, r3, #32
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a66      	ldr	r2, [pc, #408]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a5f      	ldr	r2, [pc, #380]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a58      	ldr	r2, [pc, #352]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <HAL_LTDC_MspInit+0x200>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c3a:	230e      	movs	r3, #14
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	483f      	ldr	r0, [pc, #252]	; (8000d44 <HAL_LTDC_MspInit+0x204>)
 8000c46:	f003 fd1d 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000c4a:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c5c:	230e      	movs	r3, #14
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4838      	ldr	r0, [pc, #224]	; (8000d48 <HAL_LTDC_MspInit+0x208>)
 8000c68:	f003 fd0c 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c7c:	2309      	movs	r3, #9
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4831      	ldr	r0, [pc, #196]	; (8000d4c <HAL_LTDC_MspInit+0x20c>)
 8000c88:	f003 fcfc 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000c8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c9e:	230e      	movs	r3, #14
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4828      	ldr	r0, [pc, #160]	; (8000d4c <HAL_LTDC_MspInit+0x20c>)
 8000caa:	f003 fceb 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000cae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cc0:	230e      	movs	r3, #14
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4821      	ldr	r0, [pc, #132]	; (8000d50 <HAL_LTDC_MspInit+0x210>)
 8000ccc:	f003 fcda 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000cd0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ce2:	230e      	movs	r3, #14
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <HAL_LTDC_MspInit+0x214>)
 8000cee:	f003 fcc9 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000cf2:	2348      	movs	r3, #72	; 0x48
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d02:	230e      	movs	r3, #14
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <HAL_LTDC_MspInit+0x218>)
 8000d0e:	f003 fcb9 	bl	8004684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d24:	2309      	movs	r3, #9
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <HAL_LTDC_MspInit+0x210>)
 8000d30:	f003 fca8 	bl	8004684 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40016800 	.word	0x40016800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40021400 	.word	0x40021400
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40021800 	.word	0x40021800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f002 ff02 	bl	8003b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f81a 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f7ff fcec 	bl	8000744 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000d6c:	f7ff fbbe 	bl	80004ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d70:	f7ff fbfc 	bl	800056c <MX_FMC_Init>
  MX_I2C3_Init();
 8000d74:	f7ff fd62 	bl	800083c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000d78:	f7ff fe30 	bl	80009dc <MX_LTDC_Init>
  MX_SPI5_Init();
 8000d7c:	f000 fbb8 	bl	80014f0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000d80:	f000 fd1c 	bl	80017bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initLCD();
 8000d84:	f000 fb30 	bl	80013e8 <initLCD>
	printHelloScreen();
 8000d88:	f000 fb3e 	bl	8001408 <printHelloScreen>
	configTS();
 8000d8c:	f000 f8a9 	bl	8000ee2 <configTS>
	showPaintInterface();
 8000d90:	f000 f8c0 	bl	8000f14 <showPaintInterface>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		paintService();
 8000d94:	f000 f962 	bl	800105c <paintService>
 8000d98:	e7fc      	b.n	8000d94 <main+0x38>
	...

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0a0      	sub	sp, #128	; 0x80
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000da6:	2230      	movs	r2, #48	; 0x30
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 fe8a 	bl	8008ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2230      	movs	r2, #48	; 0x30
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 fe7b 	bl	8008ac4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <SystemClock_Config+0x10c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a34      	ldr	r2, [pc, #208]	; (8000ea8 <SystemClock_Config+0x10c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <SystemClock_Config+0x10c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <SystemClock_Config+0x110>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <SystemClock_Config+0x110>)
 8000df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <SystemClock_Config+0x110>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e1e:	23b4      	movs	r3, #180	; 0xb4
 8000e20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f005 fa7e 	bl	8006330 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e3a:	f000 f84b 	bl	8000ed4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e3e:	f005 fa27 	bl	8006290 <HAL_PWREx_EnableOverDrive>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e48:	f000 f844 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 fcd0 	bl	8006810 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e76:	f000 f82d 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000e82:	2304      	movs	r3, #4
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 fee1 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000e9c:	f000 f81a 	bl	8000ed4 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3780      	adds	r7, #128	; 0x80
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec2:	f002 fe73 	bl	8003bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40001000 	.word	0x40001000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <configTS>:

#include "paint.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void configTS(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eea:	f001 fdc7 	bl	8002a7c <BSP_LCD_Clear>

	if(BSP_TS_Init(1000, 1000) == TS_OK)
 8000eee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f002 fd4b 	bl	8003990 <BSP_TS_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <configTS+0x2e>
	{
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f001 fdba 	bl	8002a7c <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f0c:	f001 fd84 	bl	8002a18 <BSP_LCD_SetTextColor>
	}
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <showPaintInterface>:
uint16_t LastColorMArkdownY = 96;
uint16_t LastThicknessMarkdownX = 53;
uint16_t LastThicknessMArkdownY = 3;

void showPaintInterface()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f001 fdae 	bl	8002a7c <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f24:	f001 fd78 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(55, 5, 30, 30);
 8000f28:	231e      	movs	r3, #30
 8000f2a:	221e      	movs	r2, #30
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2037      	movs	r0, #55	; 0x37
 8000f30:	f001 ff4a 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(93, 5, 30, 30);
 8000f34:	231e      	movs	r3, #30
 8000f36:	221e      	movs	r2, #30
 8000f38:	2105      	movs	r1, #5
 8000f3a:	205d      	movs	r0, #93	; 0x5d
 8000f3c:	f001 ff44 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(131, 5, 30, 30);
 8000f40:	231e      	movs	r3, #30
 8000f42:	221e      	movs	r2, #30
 8000f44:	2105      	movs	r1, #5
 8000f46:	2083      	movs	r0, #131	; 0x83
 8000f48:	f001 ff3e 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_FillCircle(70, 20, 5);
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	2114      	movs	r1, #20
 8000f50:	2046      	movs	r0, #70	; 0x46
 8000f52:	f002 f8b5 	bl	80030c0 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(108, 20, 10);
 8000f56:	220a      	movs	r2, #10
 8000f58:	2114      	movs	r1, #20
 8000f5a:	206c      	movs	r0, #108	; 0x6c
 8000f5c:	f002 f8b0 	bl	80030c0 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(146, 20, 15);
 8000f60:	220f      	movs	r2, #15
 8000f62:	2114      	movs	r1, #20
 8000f64:	2092      	movs	r0, #146	; 0x92
 8000f66:	f002 f8ab 	bl	80030c0 <BSP_LCD_FillCircle>

	BSP_LCD_DrawRect(164, 5, 74, 30);
 8000f6a:	231e      	movs	r3, #30
 8000f6c:	224a      	movs	r2, #74	; 0x4a
 8000f6e:	2105      	movs	r1, #5
 8000f70:	20a4      	movs	r0, #164	; 0xa4
 8000f72:	f001 ff29 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font16);
 8000f76:	4831      	ldr	r0, [pc, #196]	; (800103c <showPaintInterface+0x128>)
 8000f78:	f001 fd66 	bl	8002a48 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(180, 15, (uint8_t *)"EXIT",LEFT_MODE);
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	4a30      	ldr	r2, [pc, #192]	; (8001040 <showPaintInterface+0x12c>)
 8000f80:	210f      	movs	r1, #15
 8000f82:	20b4      	movs	r0, #180	; 0xb4
 8000f84:	f001 fde6 	bl	8002b54 <BSP_LCD_DisplayStringAt>


	BSP_LCD_DrawRect(5, 22, 30, 30);
 8000f88:	231e      	movs	r3, #30
 8000f8a:	221e      	movs	r2, #30
 8000f8c:	2116      	movs	r1, #22
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f001 ff1a 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayChar(15, 30, 'C');
 8000f94:	2243      	movs	r2, #67	; 0x43
 8000f96:	211e      	movs	r1, #30
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f001 fd97 	bl	8002acc <BSP_LCD_DisplayChar>

	BSP_LCD_DrawRect(5, 60, 30, 30);
 8000f9e:	231e      	movs	r3, #30
 8000fa0:	221e      	movs	r2, #30
 8000fa2:	213c      	movs	r1, #60	; 0x3c
 8000fa4:	2005      	movs	r0, #5
 8000fa6:	f001 ff0f 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(5, 98, 30, 30);
 8000faa:	231e      	movs	r3, #30
 8000fac:	221e      	movs	r2, #30
 8000fae:	2162      	movs	r1, #98	; 0x62
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f002 f82b 	bl	800300c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000fb6:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000fba:	f001 fd2d 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 136, 30, 30);
 8000fbe:	231e      	movs	r3, #30
 8000fc0:	221e      	movs	r2, #30
 8000fc2:	2188      	movs	r1, #136	; 0x88
 8000fc4:	2005      	movs	r0, #5
 8000fc6:	f002 f821 	bl	800300c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <showPaintInterface+0x130>)
 8000fcc:	f001 fd24 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 174, 30, 30);
 8000fd0:	231e      	movs	r3, #30
 8000fd2:	221e      	movs	r2, #30
 8000fd4:	21ae      	movs	r1, #174	; 0xae
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f002 f818 	bl	800300c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000fdc:	481a      	ldr	r0, [pc, #104]	; (8001048 <showPaintInterface+0x134>)
 8000fde:	f001 fd1b 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5,212 , 30, 30);
 8000fe2:	231e      	movs	r3, #30
 8000fe4:	221e      	movs	r2, #30
 8000fe6:	21d4      	movs	r1, #212	; 0xd4
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f002 f80f 	bl	800300c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000fee:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000ff2:	f001 fd11 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 250, 30, 30);
 8000ff6:	231e      	movs	r3, #30
 8000ff8:	221e      	movs	r2, #30
 8000ffa:	21fa      	movs	r1, #250	; 0xfa
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f002 f805 	bl	800300c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001002:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001006:	f001 fd07 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 288, 30, 30);
 800100a:	231e      	movs	r3, #30
 800100c:	221e      	movs	r2, #30
 800100e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001012:	2005      	movs	r0, #5
 8001014:	f001 fffa 	bl	800300c <BSP_LCD_FillRect>

	markdown(LastColorMarkdownX, LastColorMArkdownY, COLOR);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <showPaintInterface+0x138>)
 800101a:	8818      	ldrh	r0, [r3, #0]
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <showPaintInterface+0x13c>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	f000 f99a 	bl	800135c <markdown>
	markdown(LastThicknessMarkdownX, LastThicknessMArkdownY, THICKNESS);
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <showPaintInterface+0x140>)
 800102a:	8818      	ldrh	r0, [r3, #0]
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <showPaintInterface+0x144>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	f000 f992 	bl	800135c <markdown>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000084 	.word	0x20000084
 8001040:	08008aec 	.word	0x08008aec
 8001044:	ffff0000 	.word	0xffff0000
 8001048:	ff0000ff 	.word	0xff0000ff
 800104c:	20000006 	.word	0x20000006
 8001050:	20000008 	.word	0x20000008
 8001054:	2000000a 	.word	0x2000000a
 8001058:	2000000c 	.word	0x2000000c

0800105c <paintService>:

void paintService()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	BSP_TS_GetState(&ts_struct);
 8001060:	4892      	ldr	r0, [pc, #584]	; (80012ac <paintService+0x250>)
 8001062:	f002 fccf 	bl	8003a04 <BSP_TS_GetState>
	if(ts_struct.TouchDetected && ts_struct.X < 240-LastRadius){
 8001066:	4b91      	ldr	r3, [pc, #580]	; (80012ac <paintService+0x250>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 811b 	beq.w	80012a6 <paintService+0x24a>
 8001070:	4b8e      	ldr	r3, [pc, #568]	; (80012ac <paintService+0x250>)
 8001072:	885b      	ldrh	r3, [r3, #2]
 8001074:	461a      	mov	r2, r3
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <paintService+0x254>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800107e:	429a      	cmp	r2, r3
 8001080:	f280 8111 	bge.w	80012a6 <paintService+0x24a>
		if(ts_struct.TouchDetected && ts_struct.X > 37 + LastRadius && ts_struct.Y > 37+LastRadius)
 8001084:	4b89      	ldr	r3, [pc, #548]	; (80012ac <paintService+0x250>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01e      	beq.n	80010ca <paintService+0x6e>
 800108c:	4b87      	ldr	r3, [pc, #540]	; (80012ac <paintService+0x250>)
 800108e:	885b      	ldrh	r3, [r3, #2]
 8001090:	461a      	mov	r2, r3
 8001092:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <paintService+0x254>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3325      	adds	r3, #37	; 0x25
 8001098:	429a      	cmp	r2, r3
 800109a:	dd16      	ble.n	80010ca <paintService+0x6e>
 800109c:	4b83      	ldr	r3, [pc, #524]	; (80012ac <paintService+0x250>)
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b83      	ldr	r3, [pc, #524]	; (80012b0 <paintService+0x254>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	3325      	adds	r3, #37	; 0x25
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dd0e      	ble.n	80010ca <paintService+0x6e>
		{
			BSP_LCD_SetTextColor(LastColor);
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <paintService+0x258>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fcb1 	bl	8002a18 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(ts_struct.X, ts_struct.Y, LastRadius);
 80010b6:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <paintService+0x250>)
 80010b8:	8858      	ldrh	r0, [r3, #2]
 80010ba:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <paintService+0x250>)
 80010bc:	8899      	ldrh	r1, [r3, #4]
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <paintService+0x254>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	f001 fffc 	bl	80030c0 <BSP_LCD_FillCircle>
 80010c8:	e0ed      	b.n	80012a6 <paintService+0x24a>
		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 22) && (ts_struct.Y < 52) && (ts_struct.X <35))
 80010ca:	4b78      	ldr	r3, [pc, #480]	; (80012ac <paintService+0x250>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00e      	beq.n	80010f0 <paintService+0x94>
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <paintService+0x250>)
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	2b16      	cmp	r3, #22
 80010d8:	d90a      	bls.n	80010f0 <paintService+0x94>
 80010da:	4b74      	ldr	r3, [pc, #464]	; (80012ac <paintService+0x250>)
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	2b33      	cmp	r3, #51	; 0x33
 80010e0:	d806      	bhi.n	80010f0 <paintService+0x94>
 80010e2:	4b72      	ldr	r3, [pc, #456]	; (80012ac <paintService+0x250>)
 80010e4:	885b      	ldrh	r3, [r3, #2]
 80010e6:	2b22      	cmp	r3, #34	; 0x22
 80010e8:	d802      	bhi.n	80010f0 <paintService+0x94>
		{
			clearWorkspace();
 80010ea:	f000 f96b 	bl	80013c4 <clearWorkspace>
 80010ee:	e0da      	b.n	80012a6 <paintService+0x24a>
		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 60) && (ts_struct.Y < 90))
 80010f0:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <paintService+0x250>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d011      	beq.n	800111c <paintService+0xc0>
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <paintService+0x250>)
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	2b3c      	cmp	r3, #60	; 0x3c
 80010fe:	d90d      	bls.n	800111c <paintService+0xc0>
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <paintService+0x250>)
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2b59      	cmp	r3, #89	; 0x59
 8001106:	d809      	bhi.n	800111c <paintService+0xc0>
		{
			markdown(3, 58, COLOR);
 8001108:	2200      	movs	r2, #0
 800110a:	213a      	movs	r1, #58	; 0x3a
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f925 	bl	800135c <markdown>
			LastColor = LCD_COLOR_WHITE;
 8001112:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <paintService+0x258>)
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e0c4      	b.n	80012a6 <paintService+0x24a>
		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 98) && (ts_struct.Y < 128))
 800111c:	4b63      	ldr	r3, [pc, #396]	; (80012ac <paintService+0x250>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d011      	beq.n	8001148 <paintService+0xec>
 8001124:	4b61      	ldr	r3, [pc, #388]	; (80012ac <paintService+0x250>)
 8001126:	889b      	ldrh	r3, [r3, #4]
 8001128:	2b62      	cmp	r3, #98	; 0x62
 800112a:	d90d      	bls.n	8001148 <paintService+0xec>
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <paintService+0x250>)
 800112e:	889b      	ldrh	r3, [r3, #4]
 8001130:	2b7f      	cmp	r3, #127	; 0x7f
 8001132:	d809      	bhi.n	8001148 <paintService+0xec>
		{
			markdown(3, 96, COLOR);
 8001134:	2200      	movs	r2, #0
 8001136:	2160      	movs	r1, #96	; 0x60
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f90f 	bl	800135c <markdown>
			LastColor = LCD_COLOR_BLACK;
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <paintService+0x258>)
 8001140:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e0ae      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 136) && (ts_struct.Y < 166))
 8001148:	4b58      	ldr	r3, [pc, #352]	; (80012ac <paintService+0x250>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d011      	beq.n	8001174 <paintService+0x118>
 8001150:	4b56      	ldr	r3, [pc, #344]	; (80012ac <paintService+0x250>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	2b88      	cmp	r3, #136	; 0x88
 8001156:	d90d      	bls.n	8001174 <paintService+0x118>
 8001158:	4b54      	ldr	r3, [pc, #336]	; (80012ac <paintService+0x250>)
 800115a:	889b      	ldrh	r3, [r3, #4]
 800115c:	2ba5      	cmp	r3, #165	; 0xa5
 800115e:	d809      	bhi.n	8001174 <paintService+0x118>
		{
			markdown(3, 134, COLOR);
 8001160:	2200      	movs	r2, #0
 8001162:	2186      	movs	r1, #134	; 0x86
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f8f9 	bl	800135c <markdown>
			LastColor = LCD_COLOR_YELLOW;
 800116a:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <paintService+0x258>)
 800116c:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e098      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 174) && (ts_struct.Y < 204))
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <paintService+0x250>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d010      	beq.n	800119e <paintService+0x142>
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <paintService+0x250>)
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	2bae      	cmp	r3, #174	; 0xae
 8001182:	d90c      	bls.n	800119e <paintService+0x142>
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <paintService+0x250>)
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	2bcb      	cmp	r3, #203	; 0xcb
 800118a:	d808      	bhi.n	800119e <paintService+0x142>
		{
			markdown(3, 172, COLOR);
 800118c:	2200      	movs	r2, #0
 800118e:	21ac      	movs	r1, #172	; 0xac
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f8e3 	bl	800135c <markdown>
			LastColor = LCD_COLOR_RED;
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <paintService+0x258>)
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <paintService+0x25c>)
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e083      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 212) && (ts_struct.Y < 242))
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <paintService+0x250>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d010      	beq.n	80011c8 <paintService+0x16c>
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <paintService+0x250>)
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	2bd4      	cmp	r3, #212	; 0xd4
 80011ac:	d90c      	bls.n	80011c8 <paintService+0x16c>
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <paintService+0x250>)
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	2bf1      	cmp	r3, #241	; 0xf1
 80011b4:	d808      	bhi.n	80011c8 <paintService+0x16c>
		{
			markdown(3, 210, COLOR);
 80011b6:	2200      	movs	r2, #0
 80011b8:	21d2      	movs	r1, #210	; 0xd2
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f8ce 	bl	800135c <markdown>
			LastColor = LCD_COLOR_BLUE;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <paintService+0x258>)
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <paintService+0x260>)
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e06e      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 250) && (ts_struct.Y < 280))
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <paintService+0x250>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <paintService+0x19a>
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <paintService+0x250>)
 80011d2:	889b      	ldrh	r3, [r3, #4]
 80011d4:	2bfa      	cmp	r3, #250	; 0xfa
 80011d6:	d90e      	bls.n	80011f6 <paintService+0x19a>
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <paintService+0x250>)
 80011da:	889b      	ldrh	r3, [r3, #4]
 80011dc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80011e0:	d209      	bcs.n	80011f6 <paintService+0x19a>
		{
			markdown(3, 248, COLOR);
 80011e2:	2200      	movs	r2, #0
 80011e4:	21f8      	movs	r1, #248	; 0xf8
 80011e6:	2003      	movs	r0, #3
 80011e8:	f000 f8b8 	bl	800135c <markdown>
			LastColor = LCD_COLOR_GREEN;
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <paintService+0x258>)
 80011ee:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e057      	b.n	80012a6 <paintService+0x24a>
		}
		else if(ts_struct.TouchDetected && (ts_struct.Y > 288) && (ts_struct.Y < 318))
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <paintService+0x250>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d014      	beq.n	8001228 <paintService+0x1cc>
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <paintService+0x250>)
 8001200:	889b      	ldrh	r3, [r3, #4]
 8001202:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001206:	d90f      	bls.n	8001228 <paintService+0x1cc>
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <paintService+0x250>)
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8001210:	d20a      	bcs.n	8001228 <paintService+0x1cc>
		{
			markdown(3, 286, COLOR);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f89f 	bl	800135c <markdown>
			LastColor = LCD_COLOR_MAGENTA;
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <paintService+0x258>)
 8001220:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e03e      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.X > 55) && (ts_struct.X < 85))
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <paintService+0x250>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d010      	beq.n	8001252 <paintService+0x1f6>
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <paintService+0x250>)
 8001232:	885b      	ldrh	r3, [r3, #2]
 8001234:	2b37      	cmp	r3, #55	; 0x37
 8001236:	d90c      	bls.n	8001252 <paintService+0x1f6>
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <paintService+0x250>)
 800123a:	885b      	ldrh	r3, [r3, #2]
 800123c:	2b54      	cmp	r3, #84	; 0x54
 800123e:	d808      	bhi.n	8001252 <paintService+0x1f6>
		{
			LastRadius = 5;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <paintService+0x254>)
 8001242:	2205      	movs	r2, #5
 8001244:	801a      	strh	r2, [r3, #0]
			markdown(53, 3, THICKNESS);
 8001246:	2201      	movs	r2, #1
 8001248:	2103      	movs	r1, #3
 800124a:	2035      	movs	r0, #53	; 0x35
 800124c:	f000 f886 	bl	800135c <markdown>
 8001250:	e029      	b.n	80012a6 <paintService+0x24a>

		}
		else if(ts_struct.TouchDetected && (ts_struct.X > 93) && (ts_struct.X < 123))
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <paintService+0x250>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d010      	beq.n	800127c <paintService+0x220>
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <paintService+0x250>)
 800125c:	885b      	ldrh	r3, [r3, #2]
 800125e:	2b5d      	cmp	r3, #93	; 0x5d
 8001260:	d90c      	bls.n	800127c <paintService+0x220>
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <paintService+0x250>)
 8001264:	885b      	ldrh	r3, [r3, #2]
 8001266:	2b7a      	cmp	r3, #122	; 0x7a
 8001268:	d808      	bhi.n	800127c <paintService+0x220>
		{
			LastRadius = 10;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <paintService+0x254>)
 800126c:	220a      	movs	r2, #10
 800126e:	801a      	strh	r2, [r3, #0]
			markdown(91, 3, THICKNESS);
 8001270:	2201      	movs	r2, #1
 8001272:	2103      	movs	r1, #3
 8001274:	205b      	movs	r0, #91	; 0x5b
 8001276:	f000 f871 	bl	800135c <markdown>
 800127a:	e014      	b.n	80012a6 <paintService+0x24a>
		}
		else if(ts_struct.TouchDetected && (ts_struct.X > 131) && (ts_struct.X < 161))
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <paintService+0x250>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d010      	beq.n	80012a6 <paintService+0x24a>
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <paintService+0x250>)
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	2b83      	cmp	r3, #131	; 0x83
 800128a:	d90c      	bls.n	80012a6 <paintService+0x24a>
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <paintService+0x250>)
 800128e:	885b      	ldrh	r3, [r3, #2]
 8001290:	2ba0      	cmp	r3, #160	; 0xa0
 8001292:	d808      	bhi.n	80012a6 <paintService+0x24a>
		{
			LastRadius = 15;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <paintService+0x254>)
 8001296:	220f      	movs	r2, #15
 8001298:	801a      	strh	r2, [r3, #0]
			markdown(129, 3, THICKNESS);
 800129a:	2201      	movs	r2, #1
 800129c:	2103      	movs	r1, #3
 800129e:	2081      	movs	r0, #129	; 0x81
 80012a0:	f000 f85c 	bl	800135c <markdown>
		}
	}

}
 80012a4:	e7ff      	b.n	80012a6 <paintService+0x24a>
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200003e4 	.word	0x200003e4
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000000 	.word	0x20000000
 80012b8:	ffff0000 	.word	0xffff0000
 80012bc:	ff0000ff 	.word	0xff0000ff

080012c0 <resetColorMarkdown>:

void resetColorMarkdown(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f001 fba6 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(3, 58, 34, 34);
 80012cc:	2322      	movs	r3, #34	; 0x22
 80012ce:	2222      	movs	r2, #34	; 0x22
 80012d0:	213a      	movs	r1, #58	; 0x3a
 80012d2:	2003      	movs	r0, #3
 80012d4:	f001 fd78 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 96, 34, 34);
 80012d8:	2322      	movs	r3, #34	; 0x22
 80012da:	2222      	movs	r2, #34	; 0x22
 80012dc:	2160      	movs	r1, #96	; 0x60
 80012de:	2003      	movs	r0, #3
 80012e0:	f001 fd72 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 134, 34, 34);
 80012e4:	2322      	movs	r3, #34	; 0x22
 80012e6:	2222      	movs	r2, #34	; 0x22
 80012e8:	2186      	movs	r1, #134	; 0x86
 80012ea:	2003      	movs	r0, #3
 80012ec:	f001 fd6c 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 172, 34, 34);
 80012f0:	2322      	movs	r3, #34	; 0x22
 80012f2:	2222      	movs	r2, #34	; 0x22
 80012f4:	21ac      	movs	r1, #172	; 0xac
 80012f6:	2003      	movs	r0, #3
 80012f8:	f001 fd66 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 210, 34, 34);
 80012fc:	2322      	movs	r3, #34	; 0x22
 80012fe:	2222      	movs	r2, #34	; 0x22
 8001300:	21d2      	movs	r1, #210	; 0xd2
 8001302:	2003      	movs	r0, #3
 8001304:	f001 fd60 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 248, 34, 34);
 8001308:	2322      	movs	r3, #34	; 0x22
 800130a:	2222      	movs	r2, #34	; 0x22
 800130c:	21f8      	movs	r1, #248	; 0xf8
 800130e:	2003      	movs	r0, #3
 8001310:	f001 fd5a 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 286, 34, 34);
 8001314:	2322      	movs	r3, #34	; 0x22
 8001316:	2222      	movs	r2, #34	; 0x22
 8001318:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800131c:	2003      	movs	r0, #3
 800131e:	f001 fd53 	bl	8002dc8 <BSP_LCD_DrawRect>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <resetThicknessMarkdown>:

void resetThicknessMarkdown(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
 800132e:	f001 fb73 	bl	8002a18 <BSP_LCD_SetTextColor>

	BSP_LCD_DrawRect(53, 3, 34, 34);
 8001332:	2322      	movs	r3, #34	; 0x22
 8001334:	2222      	movs	r2, #34	; 0x22
 8001336:	2103      	movs	r1, #3
 8001338:	2035      	movs	r0, #53	; 0x35
 800133a:	f001 fd45 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(91, 3, 34, 34);
 800133e:	2322      	movs	r3, #34	; 0x22
 8001340:	2222      	movs	r2, #34	; 0x22
 8001342:	2103      	movs	r1, #3
 8001344:	205b      	movs	r0, #91	; 0x5b
 8001346:	f001 fd3f 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(129, 3, 34, 34);
 800134a:	2322      	movs	r3, #34	; 0x22
 800134c:	2222      	movs	r2, #34	; 0x22
 800134e:	2103      	movs	r1, #3
 8001350:	2081      	movs	r0, #129	; 0x81
 8001352:	f001 fd39 	bl	8002dc8 <BSP_LCD_DrawRect>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <markdown>:

void markdown(uint16_t x,uint16_t y,Markdown_type type)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	460b      	mov	r3, r1
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	70fb      	strb	r3, [r7, #3]
	if(type == COLOR)
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d108      	bne.n	8001386 <markdown+0x2a>
	{
		resetColorMarkdown();
 8001374:	f7ff ffa4 	bl	80012c0 <resetColorMarkdown>
		LastColorMarkdownX = x;
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <markdown+0x54>)
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	8013      	strh	r3, [r2, #0]
		LastColorMArkdownY = y;
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <markdown+0x58>)
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	8013      	strh	r3, [r2, #0]
 8001384:	e007      	b.n	8001396 <markdown+0x3a>
	}
	else
	{
		resetThicknessMarkdown();
 8001386:	f7ff ffce 	bl	8001326 <resetThicknessMarkdown>
		LastThicknessMarkdownX = x;
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <markdown+0x5c>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	8013      	strh	r3, [r2, #0]
		LastThicknessMArkdownY = y;
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <markdown+0x60>)
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	8013      	strh	r3, [r2, #0]
	}
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <markdown+0x64>)
 8001398:	f001 fb3e 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, 34, 34);
 800139c:	88b9      	ldrh	r1, [r7, #4]
 800139e:	88f8      	ldrh	r0, [r7, #6]
 80013a0:	2322      	movs	r3, #34	; 0x22
 80013a2:	2222      	movs	r2, #34	; 0x22
 80013a4:	f001 fd10 	bl	8002dc8 <BSP_LCD_DrawRect>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000006 	.word	0x20000006
 80013b4:	20000008 	.word	0x20000008
 80013b8:	2000000a 	.word	0x2000000a
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	ffff0000 	.word	0xffff0000

080013c4 <clearWorkspace>:

void clearWorkspace(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f001 fb56 	bl	8002a7c <BSP_LCD_Clear>
	showPaintInterface();
 80013d0:	f7ff fda0 	bl	8000f14 <showPaintInterface>
	BSP_LCD_SetTextColor(LastColor);
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <clearWorkspace+0x20>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fb1d 	bl	8002a18 <BSP_LCD_SetTextColor>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <initLCD>:

#include "paintIntro.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void initLCD(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 80013ec:	f001 fa1e 	bl	800282c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 80013f0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 fa9b 	bl	8002930 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f001 fafc 	bl	80029f8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001400:	f001 fefe 	bl	8003200 <BSP_LCD_DisplayOn>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <printHelloScreen>:

void printHelloScreen(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f001 fb33 	bl	8002a7c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001416:	4831      	ldr	r0, [pc, #196]	; (80014dc <printHelloScreen+0xd4>)
 8001418:	f001 fafe 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 125, 220, 70);
 800141c:	2346      	movs	r3, #70	; 0x46
 800141e:	22dc      	movs	r2, #220	; 0xdc
 8001420:	217d      	movs	r1, #125	; 0x7d
 8001422:	200a      	movs	r0, #10
 8001424:	f001 fcd0 	bl	8002dc8 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font24);
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <printHelloScreen+0xd8>)
 800142a:	f001 fb0d 	bl	8002a48 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 135, (uint8_t*)"EKAB", CENTER_MODE);
 800142e:	2301      	movs	r3, #1
 8001430:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <printHelloScreen+0xdc>)
 8001432:	2187      	movs	r1, #135	; 0x87
 8001434:	2000      	movs	r0, #0
 8001436:	f001 fb8d 	bl	8002b54 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800143a:	482b      	ldr	r0, [pc, #172]	; (80014e8 <printHelloScreen+0xe0>)
 800143c:	f001 fb04 	bl	8002a48 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 155, (uint8_t*)"DRAW", CENTER_MODE);
 8001440:	2301      	movs	r3, #1
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <printHelloScreen+0xe4>)
 8001444:	219b      	movs	r1, #155	; 0x9b
 8001446:	2000      	movs	r0, #0
 8001448:	f001 fb84 	bl	8002b54 <BSP_LCD_DisplayStringAt>
	HAL_Delay(750);
 800144c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001450:	f002 fbcc 	bl	8003bec <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8001454:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8001458:	f001 fade 	bl	8002a18 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(100, 176, 5);
 800145c:	2205      	movs	r2, #5
 800145e:	21b0      	movs	r1, #176	; 0xb0
 8001460:	2064      	movs	r0, #100	; 0x64
 8001462:	f001 fe2d 	bl	80030c0 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(115, 176, 5);
 8001466:	2205      	movs	r2, #5
 8001468:	21b0      	movs	r1, #176	; 0xb0
 800146a:	2073      	movs	r0, #115	; 0x73
 800146c:	f001 fe28 	bl	80030c0 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(130, 176, 5);
 8001470:	2205      	movs	r2, #5
 8001472:	21b0      	movs	r1, #176	; 0xb0
 8001474:	2082      	movs	r0, #130	; 0x82
 8001476:	f001 fe23 	bl	80030c0 <BSP_LCD_FillCircle>
	HAL_Delay(1000);
 800147a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147e:	f002 fbb5 	bl	8003bec <HAL_Delay>
	int i =0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]

	for(i = 100; i <=130; i+=15)
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e01f      	b.n	80014cc <printHelloScreen+0xc4>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 800148c:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001490:	f001 fac2 	bl	8002a18 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	b29b      	uxth	r3, r3
 8001498:	2205      	movs	r2, #5
 800149a:	21b0      	movs	r1, #176	; 0xb0
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fe0f 	bl	80030c0 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 80014a2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80014a6:	f002 fba1 	bl	8003bec <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <printHelloScreen+0xd4>)
 80014ac:	f001 fab4 	bl	8002a18 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2205      	movs	r2, #5
 80014b6:	21b0      	movs	r1, #176	; 0xb0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fe01 	bl	80030c0 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 80014be:	f240 20ee 	movw	r0, #750	; 0x2ee
 80014c2:	f002 fb93 	bl	8003bec <HAL_Delay>
	for(i = 100; i <=130; i+=15)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	330f      	adds	r3, #15
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b82      	cmp	r3, #130	; 0x82
 80014d0:	dddc      	ble.n	800148c <printHelloScreen+0x84>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	ff800080 	.word	0xff800080
 80014e0:	2000007c 	.word	0x2000007c
 80014e4:	08008af4 	.word	0x08008af4
 80014e8:	20000084 	.word	0x20000084
 80014ec:	08008afc 	.word	0x08008afc

080014f0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <MX_SPI5_Init+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <MX_SPI5_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_SPI5_Init+0x64>)
 80014fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_SPI5_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_SPI5_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_SPI5_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_SPI5_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_SPI5_Init+0x64>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_SPI5_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_SPI5_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_SPI5_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_SPI5_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_SPI5_Init+0x64>)
 800153c:	220a      	movs	r2, #10
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_SPI5_Init+0x64>)
 8001542:	f005 fdc6 	bl	80070d2 <HAL_SPI_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800154c:	f7ff fcc2 	bl	8000ed4 <Error_Handler>
  }

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200003ec 	.word	0x200003ec
 8001558:	40015000 	.word	0x40015000

0800155c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_SPI_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_SPI_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0320 	and.w	r3, r3, #32
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015b6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015c8:	2305      	movs	r3, #5
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_SPI_MspInit+0x8c>)
 80015d4:	f003 f856 	bl	8004684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40015000 	.word	0x40015000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021400 	.word	0x40021400

080015ec <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_SPI_MspDeInit+0x30>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10a      	bne.n	8001614 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_SPI_MspDeInit+0x34>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_SPI_MspDeInit+0x34>)
 8001604:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800160a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_SPI_MspDeInit+0x38>)
 8001610:	f003 f9e2 	bl	80049d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40015000 	.word	0x40015000
 8001620:	40023800 	.word	0x40023800
 8001624:	40021400 	.word	0x40021400

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x4c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	2036      	movs	r0, #54	; 0x36
 800168e:	f002 fb87 	bl	8003da0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001692:	2036      	movs	r0, #54	; 0x36
 8001694:	f002 fba0 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_InitTick+0xa4>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_InitTick+0xa4>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_InitTick+0xa4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b4:	f107 0210 	add.w	r2, r7, #16
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fa98 	bl	8006bf4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016c4:	f005 fa6e 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 80016c8:	4603      	mov	r3, r0
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	4a13      	ldr	r2, [pc, #76]	; (8001720 <HAL_InitTick+0xa8>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	3b01      	subs	r3, #1
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_InitTick+0xac>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_InitTick+0xb0>)
 80016e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_InitTick+0xac>)
 80016e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_InitTick+0xac>)
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_InitTick+0xac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_InitTick+0xac>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <HAL_InitTick+0xac>)
 80016fe:	f006 fa73 	bl	8007be8 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d104      	bne.n	8001712 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <HAL_InitTick+0xac>)
 800170a:	f006 faa2 	bl	8007c52 <HAL_TIM_Base_Start_IT>
 800170e:	4603      	mov	r3, r0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	431bde83 	.word	0x431bde83
 8001724:	20000444 	.word	0x20000444
 8001728:	40001000 	.word	0x40001000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM6_DAC_IRQHandler+0x10>)
 8001782:	f006 fa8a 	bl	8007c9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000444 	.word	0x20000444

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <SystemInit+0x28>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <SystemInit+0x28>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SystemInit+0x28>)
 80017a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017aa:	609a      	str	r2, [r3, #8]
#endif
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART1_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART1_UART_Init+0x4c>)
 80017f4:	f006 fc36 	bl	8008064 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f7ff fb69 	bl	8000ed4 <Error_Handler>
  }

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000484 	.word	0x20000484
 800180c:	40011000 	.word	0x40011000

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_UART_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12c      	bne.n	800188c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_UART_MspInit+0x88>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800187c:	2307      	movs	r3, #7
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_MspInit+0x8c>)
 8001888:	f002 fefc 	bl	8004684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40011000 	.word	0x40011000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ff61 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f007 f8d5 	bl	8008a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fa43 	bl	8000d5c <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018dc:	0800b1cc 	.word	0x0800b1cc
  ldr  r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e4:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80018e8:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80018ec:	200005c8 	.word	0x200005c8

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>

080018f2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018f6:	f000 fe4b 	bl	8002590 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018fa:	20ca      	movs	r0, #202	; 0xca
 80018fc:	f000 f95d 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001900:	20c3      	movs	r0, #195	; 0xc3
 8001902:	f000 f967 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001906:	2008      	movs	r0, #8
 8001908:	f000 f964 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800190c:	2050      	movs	r0, #80	; 0x50
 800190e:	f000 f961 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001912:	20cf      	movs	r0, #207	; 0xcf
 8001914:	f000 f951 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001918:	2000      	movs	r0, #0
 800191a:	f000 f95b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800191e:	20c1      	movs	r0, #193	; 0xc1
 8001920:	f000 f958 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001924:	2030      	movs	r0, #48	; 0x30
 8001926:	f000 f955 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800192a:	20ed      	movs	r0, #237	; 0xed
 800192c:	f000 f945 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001930:	2064      	movs	r0, #100	; 0x64
 8001932:	f000 f94f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001936:	2003      	movs	r0, #3
 8001938:	f000 f94c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800193c:	2012      	movs	r0, #18
 800193e:	f000 f949 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001942:	2081      	movs	r0, #129	; 0x81
 8001944:	f000 f946 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001948:	20e8      	movs	r0, #232	; 0xe8
 800194a:	f000 f936 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800194e:	2085      	movs	r0, #133	; 0x85
 8001950:	f000 f940 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f93d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 f93a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001960:	20cb      	movs	r0, #203	; 0xcb
 8001962:	f000 f92a 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001966:	2039      	movs	r0, #57	; 0x39
 8001968:	f000 f934 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800196c:	202c      	movs	r0, #44	; 0x2c
 800196e:	f000 f931 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f92e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001978:	2034      	movs	r0, #52	; 0x34
 800197a:	f000 f92b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800197e:	2002      	movs	r0, #2
 8001980:	f000 f928 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001984:	20f7      	movs	r0, #247	; 0xf7
 8001986:	f000 f918 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800198a:	2020      	movs	r0, #32
 800198c:	f000 f922 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001990:	20ea      	movs	r0, #234	; 0xea
 8001992:	f000 f912 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f91c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 f919 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80019a2:	20b1      	movs	r0, #177	; 0xb1
 80019a4:	f000 f909 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f913 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019ae:	201b      	movs	r0, #27
 80019b0:	f000 f910 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019b4:	20b6      	movs	r0, #182	; 0xb6
 80019b6:	f000 f900 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019ba:	200a      	movs	r0, #10
 80019bc:	f000 f90a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80019c0:	20a2      	movs	r0, #162	; 0xa2
 80019c2:	f000 f907 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80019c6:	20c0      	movs	r0, #192	; 0xc0
 80019c8:	f000 f8f7 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019cc:	2010      	movs	r0, #16
 80019ce:	f000 f901 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019d2:	20c1      	movs	r0, #193	; 0xc1
 80019d4:	f000 f8f1 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019d8:	2010      	movs	r0, #16
 80019da:	f000 f8fb 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019de:	20c5      	movs	r0, #197	; 0xc5
 80019e0:	f000 f8eb 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019e4:	2045      	movs	r0, #69	; 0x45
 80019e6:	f000 f8f5 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019ea:	2015      	movs	r0, #21
 80019ec:	f000 f8f2 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019f0:	20c7      	movs	r0, #199	; 0xc7
 80019f2:	f000 f8e2 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019f6:	2090      	movs	r0, #144	; 0x90
 80019f8:	f000 f8ec 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019fc:	2036      	movs	r0, #54	; 0x36
 80019fe:	f000 f8dc 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f000 f8e6 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001a08:	20f2      	movs	r0, #242	; 0xf2
 8001a0a:	f000 f8d6 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f8e0 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a14:	20b0      	movs	r0, #176	; 0xb0
 8001a16:	f000 f8d0 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a1a:	20c2      	movs	r0, #194	; 0xc2
 8001a1c:	f000 f8da 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a20:	20b6      	movs	r0, #182	; 0xb6
 8001a22:	f000 f8ca 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f000 f8d4 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a2c:	20a7      	movs	r0, #167	; 0xa7
 8001a2e:	f000 f8d1 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a32:	2027      	movs	r0, #39	; 0x27
 8001a34:	f000 f8ce 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a38:	2004      	movs	r0, #4
 8001a3a:	f000 f8cb 	bl	8001bd4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a3e:	202a      	movs	r0, #42	; 0x2a
 8001a40:	f000 f8bb 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 f8c5 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f8c2 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f8bf 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a56:	20ef      	movs	r0, #239	; 0xef
 8001a58:	f000 f8bc 	bl	8001bd4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a5c:	202b      	movs	r0, #43	; 0x2b
 8001a5e:	f000 f8ac 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f8b6 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f8b3 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 f8b0 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a74:	203f      	movs	r0, #63	; 0x3f
 8001a76:	f000 f8ad 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a7a:	20f6      	movs	r0, #246	; 0xf6
 8001a7c:	f000 f89d 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f000 f8a7 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f8a4 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f000 f8a1 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a92:	202c      	movs	r0, #44	; 0x2c
 8001a94:	f000 f891 	bl	8001bba <ili9341_WriteReg>
  LCD_Delay(200);
 8001a98:	20c8      	movs	r0, #200	; 0xc8
 8001a9a:	f000 fe67 	bl	800276c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	f000 f88b 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f000 f895 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001aaa:	20e0      	movs	r0, #224	; 0xe0
 8001aac:	f000 f885 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ab0:	200f      	movs	r0, #15
 8001ab2:	f000 f88f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001ab6:	2029      	movs	r0, #41	; 0x29
 8001ab8:	f000 f88c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001abc:	2024      	movs	r0, #36	; 0x24
 8001abe:	f000 f889 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ac2:	200c      	movs	r0, #12
 8001ac4:	f000 f886 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ac8:	200e      	movs	r0, #14
 8001aca:	f000 f883 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ace:	2009      	movs	r0, #9
 8001ad0:	f000 f880 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ad4:	204e      	movs	r0, #78	; 0x4e
 8001ad6:	f000 f87d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ada:	2078      	movs	r0, #120	; 0x78
 8001adc:	f000 f87a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ae0:	203c      	movs	r0, #60	; 0x3c
 8001ae2:	f000 f877 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	f000 f874 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001aec:	2013      	movs	r0, #19
 8001aee:	f000 f871 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001af2:	2005      	movs	r0, #5
 8001af4:	f000 f86e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001af8:	2017      	movs	r0, #23
 8001afa:	f000 f86b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001afe:	2011      	movs	r0, #17
 8001b00:	f000 f868 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f865 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001b0a:	20e1      	movs	r0, #225	; 0xe1
 8001b0c:	f000 f855 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 f85f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b16:	2016      	movs	r0, #22
 8001b18:	f000 f85c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b1c:	201b      	movs	r0, #27
 8001b1e:	f000 f859 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b22:	2004      	movs	r0, #4
 8001b24:	f000 f856 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b28:	2011      	movs	r0, #17
 8001b2a:	f000 f853 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f000 f850 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b34:	2031      	movs	r0, #49	; 0x31
 8001b36:	f000 f84d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b3a:	2033      	movs	r0, #51	; 0x33
 8001b3c:	f000 f84a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b40:	2042      	movs	r0, #66	; 0x42
 8001b42:	f000 f847 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b46:	2005      	movs	r0, #5
 8001b48:	f000 f844 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b4c:	200c      	movs	r0, #12
 8001b4e:	f000 f841 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f000 f83e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b58:	2028      	movs	r0, #40	; 0x28
 8001b5a:	f000 f83b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b5e:	202f      	movs	r0, #47	; 0x2f
 8001b60:	f000 f838 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f000 f835 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b6a:	2011      	movs	r0, #17
 8001b6c:	f000 f825 	bl	8001bba <ili9341_WriteReg>
  LCD_Delay(200);
 8001b70:	20c8      	movs	r0, #200	; 0xc8
 8001b72:	f000 fdfb 	bl	800276c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b76:	2029      	movs	r0, #41	; 0x29
 8001b78:	f000 f81f 	bl	8001bba <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b7c:	202c      	movs	r0, #44	; 0x2c
 8001b7e:	f000 f81c 	bl	8001bba <ili9341_WriteReg>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b8a:	f000 fd01 	bl	8002590 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b8e:	2103      	movs	r1, #3
 8001b90:	20d3      	movs	r0, #211	; 0xd3
 8001b92:	f000 f82c 	bl	8001bee <ili9341_ReadData>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001ba2:	2029      	movs	r0, #41	; 0x29
 8001ba4:	f000 f809 	bl	8001bba <ili9341_WriteReg>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001bb0:	2028      	movs	r0, #40	; 0x28
 8001bb2:	f000 f802 	bl	8001bba <ili9341_WriteReg>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd7c 	bl	80026c4 <LCD_IO_WriteReg>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fd4d 	bl	8002680 <LCD_IO_WriteData>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460a      	mov	r2, r1
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bfe:	797a      	ldrb	r2, [r7, #5]
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd7f 	bl	8002708 <LCD_IO_ReadData>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001c18:	23f0      	movs	r3, #240	; 0xf0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c28:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fa59 	bl	80020fc <stmpe811_GetInstance>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d112      	bne.n	8001c7a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f000 fa51 	bl	80020fc <stmpe811_GetInstance>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d80a      	bhi.n	8001c7a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	b2d1      	uxtb	r1, r2
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <stmpe811_Init+0x4c>)
 8001c6c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001c6e:	f000 fd88 	bl	8002782 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f807 	bl	8001c88 <stmpe811_Reset>
    }
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000b8 	.word	0x200000b8

08001c88 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2202      	movs	r2, #2
 8001c98:	2103      	movs	r1, #3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd7d 	bl	800279a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f000 fdb7 	bl	8002814 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	2103      	movs	r1, #3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fd73 	bl	800279a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f000 fdad 	bl	8002814 <IOE_Delay>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001ccc:	f000 fd59 	bl	8002782 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fd72 	bl	80027c0 <IOE_Read>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fd69 	bl	80027c0 <IOE_Read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	b29b      	uxth	r3, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2109      	movs	r1, #9
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fd53 	bl	80027c0 <IOE_Read>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	2109      	movs	r1, #9
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fd33 	bl	800279a <IOE_Write>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2109      	movs	r1, #9
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fd35 	bl	80027c0 <IOE_Read>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	2109      	movs	r1, #9
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fd15 	bl	800279a <IOE_Write>
    
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	80fb      	strh	r3, [r7, #6]
 8001d84:	4613      	mov	r3, r2
 8001d86:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	210a      	movs	r1, #10
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fd14 	bl	80027c0 <IOE_Read>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	210a      	movs	r1, #10
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fcf4 	bl	800279a <IOE_Write>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	80fb      	strh	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	210a      	movs	r1, #10
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fcf3 	bl	80027c0 <IOE_Read>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001dde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4013      	ands	r3, r2
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	210a      	movs	r1, #10
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fcce 	bl	800279a <IOE_Write>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460a      	mov	r2, r1
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	210b      	movs	r1, #11
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fccf 	bl	80027c0 <IOE_Read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	797b      	ldrb	r3, [r7, #5]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	797a      	ldrb	r2, [r7, #5]
 8001e4a:	210b      	movs	r1, #11
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fca4 	bl	800279a <IOE_Write>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	6039      	str	r1, [r7, #0]
 8001e64:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2117      	movs	r1, #23
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fca5 	bl	80027c0 <IOE_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	b25a      	sxtb	r2, r3
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4013      	ands	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	2117      	movs	r1, #23
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fc80 	bl	800279a <IOE_Write>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fc84 	bl	80027c0 <IOE_Read>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fc64 	bl	800279a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	21f0      	movs	r1, #240	; 0xf0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffbf 	bl	8001e5a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	2104      	movs	r1, #4
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fc54 	bl	800279a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2249      	movs	r2, #73	; 0x49
 8001ef8:	2120      	movs	r1, #32
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc4d 	bl	800279a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001f00:	2002      	movs	r0, #2
 8001f02:	f000 fc87 	bl	8002814 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2121      	movs	r1, #33	; 0x21
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fc43 	bl	800279a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	229a      	movs	r2, #154	; 0x9a
 8001f1a:	2141      	movs	r1, #65	; 0x41
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fc3c 	bl	800279a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2201      	movs	r2, #1
 8001f28:	214a      	movs	r1, #74	; 0x4a
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fc35 	bl	800279a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2201      	movs	r2, #1
 8001f36:	214b      	movs	r1, #75	; 0x4b
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fc2e 	bl	800279a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	214b      	movs	r1, #75	; 0x4b
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc27 	bl	800279a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2201      	movs	r2, #1
 8001f52:	2156      	movs	r1, #86	; 0x56
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fc20 	bl	800279a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2158      	movs	r1, #88	; 0x58
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fc19 	bl	800279a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fc12 	bl	800279a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	210b      	movs	r1, #11
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fc0b 	bl	800279a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001f84:	2002      	movs	r0, #2
 8001f86:	f000 fc45 	bl	8002814 <IOE_Delay>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fc0a 	bl	80027c0 <IOE_Read>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00b      	beq.n	8001fdc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	214c      	movs	r1, #76	; 0x4c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbf8 	bl	80027c0 <IOE_Read>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e00d      	b.n	8001ff8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	214b      	movs	r1, #75	; 0x4b
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fbd8 	bl	800279a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	214b      	movs	r1, #75	; 0x4b
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fbd1 	bl	800279a <IOE_Write>
  }
  
  return ret;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	b2d8      	uxtb	r0, r3
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	2304      	movs	r3, #4
 800201a:	21d7      	movs	r1, #215	; 0xd7
 800201c:	f000 fbe3 	bl	80027e6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002020:	7c3b      	ldrb	r3, [r7, #16]
 8002022:	061a      	lsls	r2, r3, #24
 8002024:	7c7b      	ldrb	r3, [r7, #17]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	7cbb      	ldrb	r3, [r7, #18]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	4313      	orrs	r3, r2
 8002030:	7cfa      	ldrb	r2, [r7, #19]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0d1b      	lsrs	r3, r3, #20
 800203a:	b29a      	uxth	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2201      	movs	r2, #1
 8002056:	214b      	movs	r1, #75	; 0x4b
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fb9e 	bl	800279a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2200      	movs	r2, #0
 8002064:	214b      	movs	r1, #75	; 0x4b
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fb97 	bl	800279a <IOE_Write>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800207e:	f000 fb86 	bl	800278e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	211f      	movs	r1, #31
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe76 	bl	8001d78 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fe36 	bl	8001d00 <stmpe811_EnableGlobalIT>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe47 	bl	8001d3c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	211f      	movs	r1, #31
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fe81 	bl	8001dba <stmpe811_DisableITSource>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	211f      	movs	r1, #31
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fe99 	bl	8001e06 <stmpe811_ReadGITStatus>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	211f      	movs	r1, #31
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fea1 	bl	8001e34 <stmpe811_ClearGlobalIT>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e00b      	b.n	8002128 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <stmpe811_GetInstance+0x40>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	b29b      	uxth	r3, r3
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	429a      	cmp	r2, r3
 800211c:	d101      	bne.n	8002122 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e006      	b.n	8002130 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	3301      	adds	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d9f0      	bls.n	8002110 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800212e:	23ff      	movs	r3, #255	; 0xff
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	200000b8 	.word	0x200000b8

08002140 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <I2Cx_MspInit+0xdc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d15f      	bne.n	8002212 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <I2Cx_MspInit+0xe0>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800219c:	2304      	movs	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <I2Cx_MspInit+0xe4>)
 80021a8:	f002 fa6c 	bl	8004684 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80021ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	481b      	ldr	r0, [pc, #108]	; (8002228 <I2Cx_MspInit+0xe8>)
 80021ba:	f002 fa63 	bl	8004684 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021f0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	210f      	movs	r1, #15
 80021f6:	2048      	movs	r0, #72	; 0x48
 80021f8:	f001 fdd2 	bl	8003da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80021fc:	2048      	movs	r0, #72	; 0x48
 80021fe:	f001 fdeb 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	210f      	movs	r1, #15
 8002206:	2049      	movs	r0, #73	; 0x49
 8002208:	f001 fdca 	bl	8003da0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800220c:	2049      	movs	r0, #73	; 0x49
 800220e:	f001 fde3 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40005c00 	.word	0x40005c00
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020800 	.word	0x40020800

0800222c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002230:	4814      	ldr	r0, [pc, #80]	; (8002284 <I2Cx_Init+0x58>)
 8002232:	f003 f97d 	bl	8005530 <HAL_I2C_GetState>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d121      	bne.n	8002280 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <I2Cx_Init+0x58>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <I2Cx_Init+0x5c>)
 8002240:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <I2Cx_Init+0x58>)
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <I2Cx_Init+0x60>)
 8002246:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <I2Cx_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <I2Cx_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <I2Cx_Init+0x58>)
 8002256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800225a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <I2Cx_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <I2Cx_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <I2Cx_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <I2Cx_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <I2Cx_Init+0x58>)
 8002276:	f7ff ff63 	bl	8002140 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800227a:	4802      	ldr	r0, [pc, #8]	; (8002284 <I2Cx_Init+0x58>)
 800227c:	f002 fcd0 	bl	8004c20 <HAL_I2C_Init>
  }
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200004c4 	.word	0x200004c4
 8002288:	40005c00 	.word	0x40005c00
 800228c:	000186a0 	.word	0x000186a0

08002290 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <I2Cx_ITConfig+0x58>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <I2Cx_ITConfig+0x58>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <I2Cx_ITConfig+0x58>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80022b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <I2Cx_ITConfig+0x5c>)
 80022c2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <I2Cx_ITConfig+0x60>)
 80022ca:	f002 f9db 	bl	8004684 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80022ce:	2200      	movs	r2, #0
 80022d0:	210f      	movs	r1, #15
 80022d2:	2028      	movs	r0, #40	; 0x28
 80022d4:	f001 fd64 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80022d8:	2028      	movs	r0, #40	; 0x28
 80022da:	f001 fd7d 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	10210000 	.word	0x10210000
 80022f0:	40020000 	.word	0x40020000

080022f4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	460b      	mov	r3, r1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	4613      	mov	r3, r2
 8002304:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	b299      	uxth	r1, r3
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <I2Cx_WriteData+0x4c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d7b      	adds	r3, r7, #5
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <I2Cx_WriteData+0x50>)
 8002324:	f002 fde4 	bl	8004ef0 <HAL_I2C_Mem_Write>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002332:	f000 f863 	bl	80023fc <I2Cx_Error>
  }        
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000074 	.word	0x20000074
 8002344:	200004c4 	.word	0x200004c4

08002348 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af04      	add	r7, sp, #16
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	b299      	uxth	r1, r3
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <I2Cx_ReadData+0x50>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030e 	add.w	r3, r7, #14
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	4808      	ldr	r0, [pc, #32]	; (800239c <I2Cx_ReadData+0x54>)
 800237c:	f002 feb2 	bl	80050e4 <HAL_I2C_Mem_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800238a:	f000 f837 	bl	80023fc <I2Cx_Error>
  
  }
  return value;
 800238e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000074 	.word	0x20000074
 800239c:	200004c4 	.word	0x200004c4

080023a0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	603a      	str	r2, [r7, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
 80023ae:	460b      	mov	r3, r1
 80023b0:	71bb      	strb	r3, [r7, #6]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	b299      	uxth	r1, r3
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <I2Cx_ReadBuffer+0x54>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	4809      	ldr	r0, [pc, #36]	; (80023f8 <I2Cx_ReadBuffer+0x58>)
 80023d4:	f002 fe86 	bl	80050e4 <HAL_I2C_Mem_Read>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e002      	b.n	80023ec <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80023e6:	f000 f809 	bl	80023fc <I2Cx_Error>

    return 1;
 80023ea:	2301      	movs	r3, #1
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000074 	.word	0x20000074
 80023f8:	200004c4 	.word	0x200004c4

080023fc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <I2Cx_Error+0x14>)
 8002402:	f002 fd45 	bl	8004e90 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002406:	f7ff ff11 	bl	800222c <I2Cx_Init>
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200004c4 	.word	0x200004c4

08002414 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <SPIx_Init+0x6c>)
 800241a:	f005 fac5 	bl	80079a8 <HAL_SPI_GetState>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12b      	bne.n	800247c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002424:	4b16      	ldr	r3, [pc, #88]	; (8002480 <SPIx_Init+0x6c>)
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <SPIx_Init+0x70>)
 8002428:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <SPIx_Init+0x6c>)
 800242c:	2218      	movs	r2, #24
 800242e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <SPIx_Init+0x6c>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <SPIx_Init+0x6c>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <SPIx_Init+0x6c>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <SPIx_Init+0x6c>)
 8002444:	2200      	movs	r2, #0
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <SPIx_Init+0x6c>)
 800244a:	2207      	movs	r2, #7
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <SPIx_Init+0x6c>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <SPIx_Init+0x6c>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <SPIx_Init+0x6c>)
 800245c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002460:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <SPIx_Init+0x6c>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SPIx_Init+0x6c>)
 800246a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <SPIx_Init+0x6c>)
 8002472:	f000 f853 	bl	800251c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002476:	4802      	ldr	r0, [pc, #8]	; (8002480 <SPIx_Init+0x6c>)
 8002478:	f004 fe2b 	bl	80070d2 <HAL_SPI_Init>
  } 
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200000bc 	.word	0x200000bc
 8002484:	40015000 	.word	0x40015000

08002488 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <SPIx_Read+0x38>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f107 0108 	add.w	r1, r7, #8
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <SPIx_Read+0x3c>)
 80024a4:	f004 ffd5 	bl	8007452 <HAL_SPI_Receive>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024b2:	f000 f827 	bl	8002504 <SPIx_Error>
  }
  
  return readvalue;
 80024b6:	68bb      	ldr	r3, [r7, #8]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000078 	.word	0x20000078
 80024c4:	200000bc 	.word	0x200000bc

080024c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <SPIx_Write+0x34>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1db9      	adds	r1, r7, #6
 80024dc:	2201      	movs	r2, #1
 80024de:	4808      	ldr	r0, [pc, #32]	; (8002500 <SPIx_Write+0x38>)
 80024e0:	f004 fe83 	bl	80071ea <HAL_SPI_Transmit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024ee:	f000 f809 	bl	8002504 <SPIx_Error>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000078 	.word	0x20000078
 8002500:	200000bc 	.word	0x200000bc

08002504 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <SPIx_Error+0x14>)
 800250a:	f004 fe46 	bl	800719a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800250e:	f7ff ff81 	bl	8002414 <SPIx_Init>
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200000bc 	.word	0x200000bc

0800251c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <SPIx_MspInit+0x6c>)
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4a16      	ldr	r2, [pc, #88]	; (8002588 <SPIx_MspInit+0x6c>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	6453      	str	r3, [r2, #68]	; 0x44
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <SPIx_MspInit+0x6c>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <SPIx_MspInit+0x6c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <SPIx_MspInit+0x6c>)
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	6313      	str	r3, [r2, #48]	; 0x30
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <SPIx_MspInit+0x6c>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800255c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800256a:	2301      	movs	r3, #1
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800256e:	2305      	movs	r3, #5
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <SPIx_MspInit+0x70>)
 800257a:	f002 f883 	bl	8004684 <HAL_GPIO_Init>
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40021400 	.word	0x40021400

08002590 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <LCD_IO_Init+0xe0>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d164      	bne.n	8002668 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <LCD_IO_Init+0xe0>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <LCD_IO_Init+0xe4>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <LCD_IO_Init+0xe4>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6313      	str	r3, [r2, #48]	; 0x30
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <LCD_IO_Init+0xe4>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	4827      	ldr	r0, [pc, #156]	; (8002678 <LCD_IO_Init+0xe8>)
 80025da:	f002 f853 	bl	8004684 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <LCD_IO_Init+0xe4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <LCD_IO_Init+0xe4>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <LCD_IO_Init+0xe4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002600:	2301      	movs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4619      	mov	r1, r3
 8002612:	4819      	ldr	r0, [pc, #100]	; (8002678 <LCD_IO_Init+0xe8>)
 8002614:	f002 f836 	bl	8004684 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <LCD_IO_Init+0xe4>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <LCD_IO_Init+0xe4>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <LCD_IO_Init+0xe4>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002634:	2304      	movs	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <LCD_IO_Init+0xec>)
 800264c:	f002 f81a 	bl	8004684 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002650:	2200      	movs	r2, #0
 8002652:	2104      	movs	r1, #4
 8002654:	4809      	ldr	r0, [pc, #36]	; (800267c <LCD_IO_Init+0xec>)
 8002656:	f002 fac9 	bl	8004bec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800265a:	2201      	movs	r2, #1
 800265c:	2104      	movs	r1, #4
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <LCD_IO_Init+0xec>)
 8002660:	f002 fac4 	bl	8004bec <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002664:	f7ff fed6 	bl	8002414 <SPIx_Init>
  }
}
 8002668:	bf00      	nop
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000114 	.word	0x20000114
 8002674:	40023800 	.word	0x40023800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40020800 	.word	0x40020800

08002680 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <LCD_IO_WriteData+0x3c>)
 8002692:	f002 faab 	bl	8004bec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <LCD_IO_WriteData+0x40>)
 800269c:	f002 faa6 	bl	8004bec <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff10 	bl	80024c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026a8:	2201      	movs	r2, #1
 80026aa:	2104      	movs	r1, #4
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <LCD_IO_WriteData+0x40>)
 80026ae:	f002 fa9d 	bl	8004bec <HAL_GPIO_WritePin>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40020800 	.word	0x40020800

080026c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <LCD_IO_WriteReg+0x3c>)
 80026d6:	f002 fa89 	bl	8004bec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80026da:	2200      	movs	r2, #0
 80026dc:	2104      	movs	r1, #4
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <LCD_IO_WriteReg+0x40>)
 80026e0:	f002 fa84 	bl	8004bec <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff feed 	bl	80024c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026ee:	2201      	movs	r2, #1
 80026f0:	2104      	movs	r1, #4
 80026f2:	4804      	ldr	r0, [pc, #16]	; (8002704 <LCD_IO_WriteReg+0x40>)
 80026f4:	f002 fa7a 	bl	8004bec <HAL_GPIO_WritePin>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40020800 	.word	0x40020800

08002708 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	4613      	mov	r3, r2
 8002716:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800271c:	2200      	movs	r2, #0
 800271e:	2104      	movs	r1, #4
 8002720:	4810      	ldr	r0, [pc, #64]	; (8002764 <LCD_IO_ReadData+0x5c>)
 8002722:	f002 fa63 	bl	8004bec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <LCD_IO_ReadData+0x60>)
 800272e:	f002 fa5d 	bl	8004bec <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fec7 	bl	80024c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800273a:	797b      	ldrb	r3, [r7, #5]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fea3 	bl	8002488 <SPIx_Read>
 8002742:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002744:	2201      	movs	r2, #1
 8002746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <LCD_IO_ReadData+0x60>)
 800274c:	f002 fa4e 	bl	8004bec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002750:	2201      	movs	r2, #1
 8002752:	2104      	movs	r1, #4
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <LCD_IO_ReadData+0x5c>)
 8002756:	f002 fa49 	bl	8004bec <HAL_GPIO_WritePin>
  
  return readvalue;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00

0800276c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f001 fa39 	bl	8003bec <HAL_Delay>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002786:	f7ff fd51 	bl	800222c <I2Cx_Init>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}

0800278e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002792:	f7ff fd7d 	bl	8002290 <I2Cx_ITConfig>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	460b      	mov	r3, r1
 80027a6:	71bb      	strb	r3, [r7, #6]
 80027a8:	4613      	mov	r3, r2
 80027aa:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80027ac:	797a      	ldrb	r2, [r7, #5]
 80027ae:	79b9      	ldrb	r1, [r7, #6]
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fd9e 	bl	80022f4 <I2Cx_WriteData>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80027d0:	79ba      	ldrb	r2, [r7, #6]
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fdb6 	bl	8002348 <I2Cx_ReadData>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	603a      	str	r2, [r7, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	460b      	mov	r3, r1
 80027f6:	71bb      	strb	r3, [r7, #6]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	79b9      	ldrb	r1, [r7, #6]
 8002800:	79f8      	ldrb	r0, [r7, #7]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	f7ff fdcc 	bl	80023a0 <I2Cx_ReadBuffer>
 8002808:	4603      	mov	r3, r0
 800280a:	b29b      	uxth	r3, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f9e5 	bl	8003bec <HAL_Delay>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <BSP_LCD_Init+0xc0>)
 8002834:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002838:	2209      	movs	r2, #9
 800283a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <BSP_LCD_Init+0xbc>)
 800283e:	2201      	movs	r2, #1
 8002840:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002844:	221d      	movs	r2, #29
 8002846:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <BSP_LCD_Init+0xbc>)
 800284a:	2203      	movs	r2, #3
 800284c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800284e:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002850:	f240 120d 	movw	r2, #269	; 0x10d
 8002854:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002858:	f240 1243 	movw	r2, #323	; 0x143
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002860:	f240 1217 	movw	r2, #279	; 0x117
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002868:	f240 1247 	movw	r2, #327	; 0x147
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <BSP_LCD_Init+0xbc>)
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <BSP_LCD_Init+0xc4>)
 8002888:	2208      	movs	r2, #8
 800288a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <BSP_LCD_Init+0xc4>)
 800288e:	22c0      	movs	r2, #192	; 0xc0
 8002890:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <BSP_LCD_Init+0xc4>)
 8002894:	2204      	movs	r2, #4
 8002896:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <BSP_LCD_Init+0xc4>)
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <BSP_LCD_Init+0xc4>)
 80028a2:	f004 f9d9 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <BSP_LCD_Init+0xbc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <BSP_LCD_Init+0xbc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <BSP_LCD_Init+0xbc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <BSP_LCD_Init+0xbc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80028be:	f000 fcaf 	bl	8003220 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80028c2:	4809      	ldr	r0, [pc, #36]	; (80028e8 <BSP_LCD_Init+0xbc>)
 80028c4:	f003 fa14 	bl	8005cf0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <BSP_LCD_Init+0xc8>)
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <BSP_LCD_Init+0xcc>)
 80028cc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <BSP_LCD_Init+0xc8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80028d6:	f000 fe91 	bl	80035fc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028da:	4808      	ldr	r0, [pc, #32]	; (80028fc <BSP_LCD_Init+0xd0>)
 80028dc:	f000 f8b4 	bl	8002a48 <BSP_LCD_SetFont>

  return LCD_OK;
 80028e0:	2300      	movs	r3, #0
}  
 80028e2:	4618      	mov	r0, r3
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000518 	.word	0x20000518
 80028ec:	40016800 	.word	0x40016800
 80028f0:	20000158 	.word	0x20000158
 80028f4:	200005c0 	.word	0x200005c0
 80028f8:	20000014 	.word	0x20000014
 80028fc:	2000007c 	.word	0x2000007c

08002900 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <BSP_LCD_GetXSize+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	4798      	blx	r3
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200005c0 	.word	0x200005c0

08002918 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <BSP_LCD_GetYSize+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	4798      	blx	r3
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200005c0 	.word	0x200005c0

08002930 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002930:	b580      	push	{r7, lr}
 8002932:	b090      	sub	sp, #64	; 0x40
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002940:	f7ff ffde 	bl	8002900 <BSP_LCD_GetXSize>
 8002944:	4603      	mov	r3, r0
 8002946:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800294c:	f7ff ffe4 	bl	8002918 <BSP_LCD_GetYSize>
 8002950:	4603      	mov	r3, r0
 8002952:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800295c:	23ff      	movs	r3, #255	; 0xff
 800295e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800297c:	2307      	movs	r3, #7
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002980:	f7ff ffbe 	bl	8002900 <BSP_LCD_GetXSize>
 8002984:	4603      	mov	r3, r0
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002988:	f7ff ffc6 	bl	8002918 <BSP_LCD_GetYSize>
 800298c:	4603      	mov	r3, r0
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4619      	mov	r1, r3
 8002998:	4814      	ldr	r0, [pc, #80]	; (80029ec <BSP_LCD_LayerDefaultInit+0xbc>)
 800299a:	f003 fa79 	bl	8005e90 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	4913      	ldr	r1, [pc, #76]	; (80029f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3304      	adds	r3, #4
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3308      	adds	r3, #8
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <BSP_LCD_LayerDefaultInit+0xc4>)
 80029c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	4909      	ldr	r1, [pc, #36]	; (80029f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80029da:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80029dc:	4803      	ldr	r0, [pc, #12]	; (80029ec <BSP_LCD_LayerDefaultInit+0xbc>)
 80029de:	f003 fa95 	bl	8005f0c <HAL_LTDC_EnableDither>
}
 80029e2:	bf00      	nop
 80029e4:	3740      	adds	r7, #64	; 0x40
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000518 	.word	0x20000518
 80029f0:	2000018c 	.word	0x2000018c
 80029f4:	2000007c 	.word	0x2000007c

080029f8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <BSP_LCD_SelectLayer+0x1c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000188 	.word	0x20000188

08002a18 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <BSP_LCD_SetTextColor+0x28>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4907      	ldr	r1, [pc, #28]	; (8002a44 <BSP_LCD_SetTextColor+0x2c>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	20000188 	.word	0x20000188
 8002a44:	2000018c 	.word	0x2000018c

08002a48 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <BSP_LCD_SetFont+0x2c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4908      	ldr	r1, [pc, #32]	; (8002a78 <BSP_LCD_SetFont+0x30>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3308      	adds	r3, #8
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	601a      	str	r2, [r3, #0]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000188 	.word	0x20000188
 8002a78:	2000018c 	.word	0x2000018c

08002a7c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <BSP_LCD_Clear+0x48>)
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <BSP_LCD_Clear+0x48>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <BSP_LCD_Clear+0x4c>)
 8002a8e:	2134      	movs	r1, #52	; 0x34
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	f7ff ff30 	bl	8002900 <BSP_LCD_GetXSize>
 8002aa0:	4606      	mov	r6, r0
 8002aa2:	f7ff ff39 	bl	8002918 <BSP_LCD_GetYSize>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2300      	movs	r3, #0
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	4632      	mov	r2, r6
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f000 fd68 	bl	800358c <FillBuffer>
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac4:	20000188 	.word	0x20000188
 8002ac8:	20000518 	.word	0x20000518

08002acc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	80bb      	strh	r3, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <BSP_LCD_DisplayChar+0x80>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	491b      	ldr	r1, [pc, #108]	; (8002b50 <BSP_LCD_DisplayChar+0x84>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3308      	adds	r3, #8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <BSP_LCD_DisplayChar+0x80>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4c14      	ldr	r4, [pc, #80]	; (8002b50 <BSP_LCD_DisplayChar+0x84>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4423      	add	r3, r4
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b10:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <BSP_LCD_DisplayChar+0x80>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4c0d      	ldr	r4, [pc, #52]	; (8002b50 <BSP_LCD_DisplayChar+0x84>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4423      	add	r3, r4
 8002b24:	3308      	adds	r3, #8
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	889b      	ldrh	r3, [r3, #4]
 8002b2a:	3307      	adds	r3, #7
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da00      	bge.n	8002b32 <BSP_LCD_DisplayChar+0x66>
 8002b30:	3307      	adds	r3, #7
 8002b32:	10db      	asrs	r3, r3, #3
 8002b34:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b38:	18ca      	adds	r2, r1, r3
 8002b3a:	88b9      	ldrh	r1, [r7, #4]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fc6a 	bl	8003418 <DrawChar>
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}
 8002b4c:	20000188 	.word	0x20000188
 8002b50:	2000018c 	.word	0x2000018c

08002b54 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	81fb      	strh	r3, [r7, #14]
 8002b62:	460b      	mov	r3, r1
 8002b64:	81bb      	strh	r3, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	83fb      	strh	r3, [r7, #30]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b7e:	e002      	b.n	8002b86 <BSP_LCD_DisplayStringAt+0x32>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	617a      	str	r2, [r7, #20]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f6      	bne.n	8002b80 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002b92:	f7ff feb5 	bl	8002900 <BSP_LCD_GetXSize>
 8002b96:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	494a      	ldr	r1, [pc, #296]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	889b      	ldrh	r3, [r3, #4]
 8002bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d01c      	beq.n	8002bf2 <BSP_LCD_DisplayStringAt+0x9e>
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <BSP_LCD_DisplayStringAt+0x98>
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d12e      	bne.n	8002c1e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad1      	subs	r1, r2, r3
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	483e      	ldr	r0, [pc, #248]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	889b      	ldrh	r3, [r3, #4]
 8002bdc:	fb03 f301 	mul.w	r3, r3, r1
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	83fb      	strh	r3, [r7, #30]
      break;
 8002bea:	e01b      	b.n	8002c24 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002bec:	89fb      	ldrh	r3, [r7, #14]
 8002bee:	83fb      	strh	r3, [r7, #30]
      break;
 8002bf0:	e018      	b.n	8002c24 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4831      	ldr	r0, [pc, #196]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4403      	add	r3, r0
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	889b      	ldrh	r3, [r3, #4]
 8002c10:	fb11 f303 	smulbb	r3, r1, r3
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	4413      	add	r3, r2
 8002c1a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c1c:	e002      	b.n	8002c24 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	83fb      	strh	r3, [r7, #30]
      break;
 8002c22:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c24:	e01a      	b.n	8002c5c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	89b9      	ldrh	r1, [r7, #12]
 8002c2c:	8bfb      	ldrh	r3, [r7, #30]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff4c 	bl	8002acc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002c34:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4922      	ldr	r1, [pc, #136]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3308      	adds	r3, #8
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	889a      	ldrh	r2, [r3, #4]
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60bb      	str	r3, [r7, #8]
    i++;
 8002c56:	8bbb      	ldrh	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2dc      	uxtb	r4, r3
 8002c6a:	f7ff fe49 	bl	8002900 <BSP_LCD_GetXSize>
 8002c6e:	4605      	mov	r5, r0
 8002c70:	8bb9      	ldrh	r1, [r7, #28]
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4813      	ldr	r0, [pc, #76]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4403      	add	r3, r0
 8002c82:	3308      	adds	r3, #8
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	889b      	ldrh	r3, [r3, #4]
 8002c88:	fb03 f301 	mul.w	r3, r3, r1
 8002c8c:	1aeb      	subs	r3, r5, r3
 8002c8e:	b299      	uxth	r1, r3
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <BSP_LCD_DisplayStringAt+0x16c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <BSP_LCD_DisplayStringAt+0x170>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4403      	add	r3, r0
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	889b      	ldrh	r3, [r3, #4]
 8002ca6:	4299      	cmp	r1, r3
 8002ca8:	bf2c      	ite	cs
 8002caa:	2301      	movcs	r3, #1
 8002cac:	2300      	movcc	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4023      	ands	r3, r4
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1b6      	bne.n	8002c26 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8002cb8:	bf00      	nop
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc0:	20000188 	.word	0x20000188
 8002cc4:	2000018c 	.word	0x2000018c

08002cc8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	80bb      	strh	r3, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <BSP_LCD_DrawHLine+0x70>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <BSP_LCD_DrawHLine+0x74>)
 8002ce4:	2134      	movs	r1, #52	; 0x34
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	f7ff fe06 	bl	8002900 <BSP_LCD_GetXSize>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	88bb      	ldrh	r3, [r7, #4]
 8002cf8:	fb03 f202 	mul.w	r2, r3, r2
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4423      	add	r3, r4
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <BSP_LCD_DrawHLine+0x70>)
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	68fc      	ldr	r4, [r7, #12]
 8002d0c:	887d      	ldrh	r5, [r7, #2]
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <BSP_LCD_DrawHLine+0x70>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	490b      	ldr	r1, [pc, #44]	; (8002d40 <BSP_LCD_DrawHLine+0x78>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2301      	movs	r3, #1
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	f000 fc2e 	bl	800358c <FillBuffer>
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdb0      	pop	{r4, r5, r7, pc}
 8002d38:	20000188 	.word	0x20000188
 8002d3c:	20000518 	.word	0x20000518
 8002d40:	2000018c 	.word	0x2000018c

08002d44 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	80bb      	strh	r3, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <BSP_LCD_DrawVLine+0x78>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <BSP_LCD_DrawVLine+0x7c>)
 8002d60:	2134      	movs	r1, #52	; 0x34
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	335c      	adds	r3, #92	; 0x5c
 8002d6a:	681c      	ldr	r4, [r3, #0]
 8002d6c:	f7ff fdc8 	bl	8002900 <BSP_LCD_GetXSize>
 8002d70:	4602      	mov	r2, r0
 8002d72:	88bb      	ldrh	r3, [r7, #4]
 8002d74:	fb03 f202 	mul.w	r2, r3, r2
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4423      	add	r3, r4
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <BSP_LCD_DrawVLine+0x78>)
 8002d84:	681c      	ldr	r4, [r3, #0]
 8002d86:	68fd      	ldr	r5, [r7, #12]
 8002d88:	887e      	ldrh	r6, [r7, #2]
 8002d8a:	f7ff fdb9 	bl	8002900 <BSP_LCD_GetXSize>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	1e59      	subs	r1, r3, #1
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <BSP_LCD_DrawVLine+0x78>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	480b      	ldr	r0, [pc, #44]	; (8002dc4 <BSP_LCD_DrawVLine+0x80>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4403      	add	r3, r0
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	9100      	str	r1, [sp, #0]
 8002da8:	4633      	mov	r3, r6
 8002daa:	2201      	movs	r2, #1
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 fbec 	bl	800358c <FillBuffer>
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dbc:	20000188 	.word	0x20000188
 8002dc0:	20000518 	.word	0x20000518
 8002dc4:	2000018c 	.word	0x2000018c

08002dc8 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	80fb      	strh	r3, [r7, #6]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80bb      	strh	r3, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	807b      	strh	r3, [r7, #2]
 8002de2:	4613      	mov	r3, r2
 8002de4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	88b9      	ldrh	r1, [r7, #4]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff6b 	bl	8002cc8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002df2:	88ba      	ldrh	r2, [r7, #4]
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff62 	bl	8002cc8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002e04:	883a      	ldrh	r2, [r7, #0]
 8002e06:	88b9      	ldrh	r1, [r7, #4]
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff9a 	bl	8002d44 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	4413      	add	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	883a      	ldrh	r2, [r7, #0]
 8002e1a:	88b9      	ldrh	r1, [r7, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff91 	bl	8002d44 <BSP_LCD_DrawVLine>
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
	...

08002e2c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
 8002e36:	460b      	mov	r3, r1
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	f1c3 0303 	rsb	r3, r3, #3
 8002e46:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002e50:	e0cf      	b.n	8002ff2 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b298      	uxth	r0, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	88ba      	ldrh	r2, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	b29c      	uxth	r4, r3
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4967      	ldr	r1, [pc, #412]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	f000 faa6 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	b298      	uxth	r0, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	88ba      	ldrh	r2, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	b29c      	uxth	r4, r3
 8002e94:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	495b      	ldr	r1, [pc, #364]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	f000 fa8f 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b298      	uxth	r0, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	88ba      	ldrh	r2, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	4b50      	ldr	r3, [pc, #320]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4950      	ldr	r1, [pc, #320]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	f000 fa78 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	b298      	uxth	r0, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	88ba      	ldrh	r2, [r7, #4]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	b29c      	uxth	r4, r3
 8002ef0:	4b44      	ldr	r3, [pc, #272]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4944      	ldr	r1, [pc, #272]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	4621      	mov	r1, r4
 8002f06:	f000 fa61 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4413      	add	r3, r2
 8002f12:	b298      	uxth	r0, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	88bb      	ldrh	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b29c      	uxth	r4, r3
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4939      	ldr	r1, [pc, #228]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4621      	mov	r1, r4
 8002f34:	f000 fa4a 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b298      	uxth	r0, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	88bb      	ldrh	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	b29c      	uxth	r4, r3
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4621      	mov	r1, r4
 8002f62:	f000 fa33 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b298      	uxth	r0, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	88bb      	ldrh	r3, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	b29c      	uxth	r4, r3
 8002f7a:	4b22      	ldr	r3, [pc, #136]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4621      	mov	r1, r4
 8002f90:	f000 fa1c 	bl	80033cc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	b298      	uxth	r0, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	88bb      	ldrh	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <BSP_LCD_DrawCircle+0x1d8>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4916      	ldr	r1, [pc, #88]	; (8003008 <BSP_LCD_DrawCircle+0x1dc>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	f000 fa05 	bl	80033cc <BSP_LCD_DrawPixel>

    if (d < 0)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da06      	bge.n	8002fd6 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	009a      	lsls	r2, r3, #2
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3306      	adds	r3, #6
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e00a      	b.n	8002fec <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	009a      	lsls	r2, r3, #2
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	330a      	adds	r3, #10
 8002fe4:	617b      	str	r3, [r7, #20]
      cury--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f67f af2b 	bls.w	8002e52 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	20000188 	.word	0x20000188
 8003008:	2000018c 	.word	0x2000018c

0800300c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af02      	add	r7, sp, #8
 8003014:	4604      	mov	r4, r0
 8003016:	4608      	mov	r0, r1
 8003018:	4611      	mov	r1, r2
 800301a:	461a      	mov	r2, r3
 800301c:	4623      	mov	r3, r4
 800301e:	80fb      	strh	r3, [r7, #6]
 8003020:	4603      	mov	r3, r0
 8003022:	80bb      	strh	r3, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
 8003028:	4613      	mov	r3, r2
 800302a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <BSP_LCD_FillRect+0xa8>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4920      	ldr	r1, [pc, #128]	; (80030b8 <BSP_LCD_FillRect+0xac>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fce8 	bl	8002a18 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <BSP_LCD_FillRect+0xa8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <BSP_LCD_FillRect+0xb0>)
 800304e:	2134      	movs	r1, #52	; 0x34
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	335c      	adds	r3, #92	; 0x5c
 8003058:	681c      	ldr	r4, [r3, #0]
 800305a:	f7ff fc51 	bl	8002900 <BSP_LCD_GetXSize>
 800305e:	4602      	mov	r2, r0
 8003060:	88bb      	ldrh	r3, [r7, #4]
 8003062:	fb03 f202 	mul.w	r2, r3, r2
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4423      	add	r3, r4
 800306e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <BSP_LCD_FillRect+0xa8>)
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	68fd      	ldr	r5, [r7, #12]
 8003076:	887e      	ldrh	r6, [r7, #2]
 8003078:	f8b7 8000 	ldrh.w	r8, [r7]
 800307c:	f7ff fc40 	bl	8002900 <BSP_LCD_GetXSize>
 8003080:	4602      	mov	r2, r0
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	1ad1      	subs	r1, r2, r3
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <BSP_LCD_FillRect+0xa8>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <BSP_LCD_FillRect+0xac>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4403      	add	r3, r0
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	9100      	str	r1, [sp, #0]
 800309c:	4643      	mov	r3, r8
 800309e:	4632      	mov	r2, r6
 80030a0:	4629      	mov	r1, r5
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 fa72 	bl	800358c <FillBuffer>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b2:	bf00      	nop
 80030b4:	20000188 	.word	0x20000188
 80030b8:	2000018c 	.word	0x2000018c
 80030bc:	20000518 	.word	0x20000518

080030c0 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
 80030ca:	460b      	mov	r3, r1
 80030cc:	80bb      	strh	r3, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	f1c3 0303 	rsb	r3, r3, #3
 80030da:	617b      	str	r3, [r7, #20]

  curx = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030e4:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <BSP_LCD_FillCircle+0x138>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4944      	ldr	r1, [pc, #272]	; (80031fc <BSP_LCD_FillCircle+0x13c>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fc8e 	bl	8002a18 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80030fc:	e061      	b.n	80031c2 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	b29b      	uxth	r3, r3
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b298      	uxth	r0, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	b29a      	uxth	r2, r3
 8003112:	88bb      	ldrh	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	b299      	uxth	r1, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	b29b      	uxth	r3, r3
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	f7ff fdd1 	bl	8002cc8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	b29b      	uxth	r3, r3
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b298      	uxth	r0, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	b29b      	uxth	r3, r3
 8003134:	88ba      	ldrh	r2, [r7, #4]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b299      	uxth	r1, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b29b      	uxth	r3, r3
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	f7ff fdc0 	bl	8002cc8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d021      	beq.n	8003192 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	b29b      	uxth	r3, r3
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b298      	uxth	r0, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	b29b      	uxth	r3, r3
 800315c:	88ba      	ldrh	r2, [r7, #4]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	b299      	uxth	r1, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	b29b      	uxth	r3, r3
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	f7ff fdac 	bl	8002cc8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	b29b      	uxth	r3, r3
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b298      	uxth	r0, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	b29a      	uxth	r2, r3
 800317e:	88bb      	ldrh	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	b299      	uxth	r1, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	b29b      	uxth	r3, r3
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	f7ff fd9b 	bl	8002cc8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da06      	bge.n	80031a6 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4413      	add	r3, r2
 80031a0:	3306      	adds	r3, #6
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e00a      	b.n	80031bc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	009a      	lsls	r2, r3, #2
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4413      	add	r3, r2
 80031b2:	330a      	adds	r3, #10
 80031b4:	617b      	str	r3, [r7, #20]
      cury--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	3301      	adds	r3, #1
 80031c0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d999      	bls.n	80030fe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <BSP_LCD_FillCircle+0x138>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	490b      	ldr	r1, [pc, #44]	; (80031fc <BSP_LCD_FillCircle+0x13c>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fc1b 	bl	8002a18 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	88b9      	ldrh	r1, [r7, #4]
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fe1f 	bl	8002e2c <BSP_LCD_DrawCircle>
}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000188 	.word	0x20000188
 80031fc:	2000018c 	.word	0x2000018c

08003200 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <BSP_LCD_DisplayOn+0x1c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <BSP_LCD_DisplayOn+0x1c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4798      	blx	r3
  }
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200005c0 	.word	0x200005c0

08003220 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	; 0x38
 8003224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a60      	ldr	r2, [pc, #384]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a59      	ldr	r2, [pc, #356]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 800324c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a44      	ldr	r2, [pc, #272]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b42      	ldr	r3, [pc, #264]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a3d      	ldr	r2, [pc, #244]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a2f      	ldr	r2, [pc, #188]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <BSP_LCD_MspInit+0x190>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003306:	f641 0358 	movw	r3, #6232	; 0x1858
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003314:	2302      	movs	r3, #2
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003318:	230e      	movs	r3, #14
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	4824      	ldr	r0, [pc, #144]	; (80033b4 <BSP_LCD_MspInit+0x194>)
 8003324:	f001 f9ae 	bl	8004684 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003328:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800332e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003332:	4619      	mov	r1, r3
 8003334:	4820      	ldr	r0, [pc, #128]	; (80033b8 <BSP_LCD_MspInit+0x198>)
 8003336:	f001 f9a5 	bl	8004684 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800333a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003344:	4619      	mov	r1, r3
 8003346:	481d      	ldr	r0, [pc, #116]	; (80033bc <BSP_LCD_MspInit+0x19c>)
 8003348:	f001 f99c 	bl	8004684 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800334c:	2348      	movs	r3, #72	; 0x48
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003354:	4619      	mov	r1, r3
 8003356:	481a      	ldr	r0, [pc, #104]	; (80033c0 <BSP_LCD_MspInit+0x1a0>)
 8003358:	f001 f994 	bl	8004684 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4619      	mov	r1, r3
 8003368:	4816      	ldr	r0, [pc, #88]	; (80033c4 <BSP_LCD_MspInit+0x1a4>)
 800336a:	f001 f98b 	bl	8004684 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800336e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003378:	4619      	mov	r1, r3
 800337a:	4813      	ldr	r0, [pc, #76]	; (80033c8 <BSP_LCD_MspInit+0x1a8>)
 800337c:	f001 f982 	bl	8004684 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003380:	2303      	movs	r3, #3
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003384:	2309      	movs	r3, #9
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	4619      	mov	r1, r3
 800338e:	480a      	ldr	r0, [pc, #40]	; (80033b8 <BSP_LCD_MspInit+0x198>)
 8003390:	f001 f978 	bl	8004684 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003394:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800339a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339e:	4619      	mov	r1, r3
 80033a0:	4809      	ldr	r0, [pc, #36]	; (80033c8 <BSP_LCD_MspInit+0x1a8>)
 80033a2:	f001 f96f 	bl	8004684 <HAL_GPIO_Init>
}
 80033a6:	bf00      	nop
 80033a8:	3738      	adds	r7, #56	; 0x38
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021400 	.word	0x40021400
 80033c8:	40021800 	.word	0x40021800

080033cc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	603a      	str	r2, [r7, #0]
 80033d6:	80fb      	strh	r3, [r7, #6]
 80033d8:	460b      	mov	r3, r1
 80033da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <BSP_LCD_DrawPixel+0x44>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <BSP_LCD_DrawPixel+0x48>)
 80033e2:	2134      	movs	r1, #52	; 0x34
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	681c      	ldr	r4, [r3, #0]
 80033ee:	88bd      	ldrh	r5, [r7, #4]
 80033f0:	f7ff fa86 	bl	8002900 <BSP_LCD_GetXSize>
 80033f4:	4603      	mov	r3, r0
 80033f6:	fb03 f205 	mul.w	r2, r3, r5
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4423      	add	r3, r4
 8003402:	461a      	mov	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	20000188 	.word	0x20000188
 8003414:	20000518 	.word	0x20000518

08003418 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	603a      	str	r2, [r7, #0]
 8003422:	80fb      	strh	r3, [r7, #6]
 8003424:	460b      	mov	r3, r1
 8003426:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <DrawChar+0x16c>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4953      	ldr	r1, [pc, #332]	; (8003588 <DrawChar+0x170>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3308      	adds	r3, #8
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	88db      	ldrh	r3, [r3, #6]
 800344a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <DrawChar+0x16c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <DrawChar+0x170>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3308      	adds	r3, #8
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	889b      	ldrh	r3, [r3, #4]
 8003462:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003464:	8a3b      	ldrh	r3, [r7, #16]
 8003466:	3307      	adds	r3, #7
 8003468:	2b00      	cmp	r3, #0
 800346a:	da00      	bge.n	800346e <DrawChar+0x56>
 800346c:	3307      	adds	r3, #7
 800346e:	10db      	asrs	r3, r3, #3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	b2da      	uxtb	r2, r3
 8003476:	8a3b      	ldrh	r3, [r7, #16]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e076      	b.n	8003572 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003484:	8a3b      	ldrh	r3, [r7, #16]
 8003486:	3307      	adds	r3, #7
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <DrawChar+0x76>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	461a      	mov	r2, r3
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fb03 f302 	mul.w	r3, r3, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4413      	add	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800349e:	8a3b      	ldrh	r3, [r7, #16]
 80034a0:	3307      	adds	r3, #7
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da00      	bge.n	80034a8 <DrawChar+0x90>
 80034a6:	3307      	adds	r3, #7
 80034a8:	10db      	asrs	r3, r3, #3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d002      	beq.n	80034b4 <DrawChar+0x9c>
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d004      	beq.n	80034bc <DrawChar+0xa4>
 80034b2:	e00c      	b.n	80034ce <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e016      	b.n	80034ea <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	3201      	adds	r2, #1
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
      break;
 80034cc:	e00d      	b.n	80034ea <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	041a      	lsls	r2, r3, #16
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3301      	adds	r3, #1
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	4313      	orrs	r3, r2
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	3202      	adds	r2, #2
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
      break;
 80034e8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e036      	b.n	800355e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034f0:	8a3a      	ldrh	r2, [r7, #16]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	4413      	add	r3, r2
 80034fa:	3b01      	subs	r3, #1
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	461a      	mov	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d012      	beq.n	8003532 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	b29a      	uxth	r2, r3
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4413      	add	r3, r2
 8003514:	b298      	uxth	r0, r3
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <DrawChar+0x16c>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <DrawChar+0x170>)
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	88bb      	ldrh	r3, [r7, #4]
 800352a:	4619      	mov	r1, r3
 800352c:	f7ff ff4e 	bl	80033cc <BSP_LCD_DrawPixel>
 8003530:	e012      	b.n	8003558 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	b29a      	uxth	r2, r3
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4413      	add	r3, r2
 800353a:	b298      	uxth	r0, r3
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <DrawChar+0x16c>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4911      	ldr	r1, [pc, #68]	; (8003588 <DrawChar+0x170>)
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3304      	adds	r3, #4
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	4619      	mov	r1, r3
 8003554:	f7ff ff3a 	bl	80033cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3301      	adds	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	8a3b      	ldrh	r3, [r7, #16]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3c4      	bcc.n	80034f0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	3301      	adds	r3, #1
 800356a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	8a7b      	ldrh	r3, [r7, #18]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	429a      	cmp	r2, r3
 8003578:	d384      	bcc.n	8003484 <DrawChar+0x6c>
  }
}
 800357a:	bf00      	nop
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000188 	.word	0x20000188
 8003588:	2000018c 	.word	0x2000018c

0800358c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <FillBuffer+0x68>)
 800359c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035a0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <FillBuffer+0x68>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80035a8:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <FillBuffer+0x68>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <FillBuffer+0x68>)
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <FillBuffer+0x6c>)
 80035b2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80035b4:	480f      	ldr	r0, [pc, #60]	; (80035f4 <FillBuffer+0x68>)
 80035b6:	f000 fdd9 	bl	800416c <HAL_DMA2D_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d115      	bne.n	80035ec <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80035c0:	68f9      	ldr	r1, [r7, #12]
 80035c2:	480c      	ldr	r0, [pc, #48]	; (80035f4 <FillBuffer+0x68>)
 80035c4:	f000 ff30 	bl	8004428 <HAL_DMA2D_ConfigLayer>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10e      	bne.n	80035ec <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <FillBuffer+0x68>)
 80035da:	f000 fe10 	bl	80041fe <HAL_DMA2D_Start>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80035e4:	210a      	movs	r1, #10
 80035e6:	4803      	ldr	r0, [pc, #12]	; (80035f4 <FillBuffer+0x68>)
 80035e8:	f000 fe34 	bl	8004254 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000118 	.word	0x20000118
 80035f8:	4002b000 	.word	0x4002b000

080035fc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <BSP_SDRAM_Init+0xb0>)
 8003604:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 8003608:	2202      	movs	r2, #2
 800360a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 800360e:	2207      	movs	r2, #7
 8003610:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 8003614:	2204      	movs	r2, #4
 8003616:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 800361a:	2207      	movs	r2, #7
 800361c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 8003620:	2202      	movs	r2, #2
 8003622:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 8003626:	2202      	movs	r2, #2
 8003628:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 800362c:	2202      	movs	r2, #2
 800362e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003632:	2201      	movs	r2, #1
 8003634:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800363c:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 800363e:	2204      	movs	r2, #4
 8003640:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003644:	2210      	movs	r2, #16
 8003646:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003650:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003654:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003658:	2200      	movs	r2, #0
 800365a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 800365e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003662:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003666:	2200      	movs	r2, #0
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 800366c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003672:	2100      	movs	r1, #0
 8003674:	480c      	ldr	r0, [pc, #48]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 8003676:	f000 f87f 	bl	8003778 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800367a:	490d      	ldr	r1, [pc, #52]	; (80036b0 <BSP_SDRAM_Init+0xb4>)
 800367c:	480a      	ldr	r0, [pc, #40]	; (80036a8 <BSP_SDRAM_Init+0xac>)
 800367e:	f003 fca9 	bl	8006fd4 <HAL_SDRAM_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <BSP_SDRAM_Init+0xb8>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e002      	b.n	8003696 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <BSP_SDRAM_Init+0xb8>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003696:	f240 506a 	movw	r0, #1386	; 0x56a
 800369a:	f000 f80d 	bl	80036b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <BSP_SDRAM_Init+0xb8>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200001a4 	.word	0x200001a4
 80036ac:	a0000140 	.word	0xa0000140
 80036b0:	200001d8 	.word	0x200001d8
 80036b4:	2000008c 	.word	0x2000008c

080036b8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80036c4:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036cc:	2208      	movs	r2, #8
 80036ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80036dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e0:	4923      	ldr	r1, [pc, #140]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e2:	4824      	ldr	r0, [pc, #144]	; (8003774 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036e4:	f003 fcaa 	bl	800703c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f000 fa7f 	bl	8003bec <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f0:	2202      	movs	r2, #2
 80036f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036f4:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f6:	2208      	movs	r2, #8
 80036f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370c:	4819      	ldr	r0, [pc, #100]	; (8003774 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800370e:	f003 fc95 	bl	800703c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003714:	2203      	movs	r2, #3
 8003716:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371a:	2208      	movs	r2, #8
 800371c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003720:	2204      	movs	r2, #4
 8003722:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800372a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372e:	4910      	ldr	r1, [pc, #64]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003730:	4810      	ldr	r0, [pc, #64]	; (8003774 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003732:	f003 fc83 	bl	800703c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003736:	f44f 730c 	mov.w	r3, #560	; 0x230
 800373a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800373e:	2204      	movs	r2, #4
 8003740:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003744:	2208      	movs	r2, #8
 8003746:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374a:	2201      	movs	r2, #1
 800374c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003752:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003758:	4905      	ldr	r1, [pc, #20]	; (8003770 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800375c:	f003 fc6e 	bl	800703c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4804      	ldr	r0, [pc, #16]	; (8003774 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003764:	f003 fc95 	bl	8007092 <HAL_SDRAM_ProgramRefreshRate>
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200001f4 	.word	0x200001f4
 8003774:	200001a4 	.word	0x200001a4

08003778 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b090      	sub	sp, #64	; 0x40
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80ec 	beq.w	8003962 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4a76      	ldr	r2, [pc, #472]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6393      	str	r3, [r2, #56]	; 0x38
 800379a:	4b74      	ldr	r3, [pc, #464]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	4b70      	ldr	r3, [pc, #448]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a6f      	ldr	r2, [pc, #444]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	4b69      	ldr	r3, [pc, #420]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a68      	ldr	r2, [pc, #416]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b66      	ldr	r3, [pc, #408]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	4b62      	ldr	r3, [pc, #392]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b5f      	ldr	r3, [pc, #380]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	4b5b      	ldr	r3, [pc, #364]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a5a      	ldr	r2, [pc, #360]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b58      	ldr	r3, [pc, #352]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	4b54      	ldr	r3, [pc, #336]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a53      	ldr	r2, [pc, #332]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003820:	f043 0310 	orr.w	r3, r3, #16
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b4d      	ldr	r3, [pc, #308]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a4c      	ldr	r2, [pc, #304]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 800383c:	f043 0320 	orr.w	r3, r3, #32
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b46      	ldr	r3, [pc, #280]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a45      	ldr	r2, [pc, #276]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <BSP_SDRAM_MspInit+0x1f4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800386e:	2302      	movs	r3, #2
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003876:	230c      	movs	r3, #12
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800387a:	2360      	movs	r3, #96	; 0x60
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800387e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003882:	4619      	mov	r1, r3
 8003884:	483a      	ldr	r0, [pc, #232]	; (8003970 <BSP_SDRAM_MspInit+0x1f8>)
 8003886:	f000 fefd 	bl	8004684 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800388a:	2301      	movs	r3, #1
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800388e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003892:	4619      	mov	r1, r3
 8003894:	4837      	ldr	r0, [pc, #220]	; (8003974 <BSP_SDRAM_MspInit+0x1fc>)
 8003896:	f000 fef5 	bl	8004684 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800389a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80038a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a4:	4619      	mov	r1, r3
 80038a6:	4834      	ldr	r0, [pc, #208]	; (8003978 <BSP_SDRAM_MspInit+0x200>)
 80038a8:	f000 feec 	bl	8004684 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80038ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80038b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b6:	4619      	mov	r1, r3
 80038b8:	4830      	ldr	r0, [pc, #192]	; (800397c <BSP_SDRAM_MspInit+0x204>)
 80038ba:	f000 fee3 	bl	8004684 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80038be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80038c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c8:	4619      	mov	r1, r3
 80038ca:	482d      	ldr	r0, [pc, #180]	; (8003980 <BSP_SDRAM_MspInit+0x208>)
 80038cc:	f000 feda 	bl	8004684 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80038d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80038d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038da:	4619      	mov	r1, r3
 80038dc:	4829      	ldr	r0, [pc, #164]	; (8003984 <BSP_SDRAM_MspInit+0x20c>)
 80038de:	f000 fed1 	bl	8004684 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 80038f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003904:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800390c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003910:	2200      	movs	r2, #0
 8003912:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003914:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800391c:	4b1a      	ldr	r3, [pc, #104]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003924:	2203      	movs	r2, #3
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 800392a:	2200      	movs	r2, #0
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <BSP_SDRAM_MspInit+0x214>)
 8003938:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a12      	ldr	r2, [pc, #72]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003946:	4810      	ldr	r0, [pc, #64]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 8003948:	f000 fb02 	bl	8003f50 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800394c:	480e      	ldr	r0, [pc, #56]	; (8003988 <BSP_SDRAM_MspInit+0x210>)
 800394e:	f000 fa51 	bl	8003df4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	210f      	movs	r1, #15
 8003956:	2038      	movs	r0, #56	; 0x38
 8003958:	f000 fa22 	bl	8003da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800395c:	2038      	movs	r0, #56	; 0x38
 800395e:	f000 fa3b 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003962:	bf00      	nop
 8003964:	3740      	adds	r7, #64	; 0x40
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40020400 	.word	0x40020400
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	20000204 	.word	0x20000204
 800398c:	40026410 	.word	0x40026410

08003990 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	460a      	mov	r2, r1
 800399a:	80fb      	strh	r3, [r7, #6]
 800399c:	4613      	mov	r3, r2
 800399e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <BSP_TS_Init+0x64>)
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80039aa:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <BSP_TS_Init+0x68>)
 80039ac:	88bb      	ldrh	r3, [r7, #4]
 80039ae:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <BSP_TS_Init+0x6c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2082      	movs	r0, #130	; 0x82
 80039b6:	4798      	blx	r3
 80039b8:	4603      	mov	r3, r0
 80039ba:	461a      	mov	r2, r3
 80039bc:	f640 0311 	movw	r3, #2065	; 0x811
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d104      	bne.n	80039ce <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <BSP_TS_Init+0x70>)
 80039c6:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <BSP_TS_Init+0x6c>)
 80039c8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <BSP_TS_Init+0x70>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2082      	movs	r0, #130	; 0x82
 80039dc:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <BSP_TS_Init+0x70>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2082      	movs	r0, #130	; 0x82
 80039e6:	4798      	blx	r3
  }

  return ret;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000268 	.word	0x20000268
 80039f8:	2000026a 	.word	0x2000026a
 80039fc:	2000004c 	.word	0x2000004c
 8003a00:	20000264 	.word	0x20000264

08003a04 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <BSP_TS_GetState+0x148>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2082      	movs	r0, #130	; 0x82
 8003a14:	4798      	blx	r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808d 	beq.w	8003b42 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003a28:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <BSP_TS_GetState+0x148>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f107 020c 	add.w	r2, r7, #12
 8003a32:	f107 010e 	add.w	r1, r7, #14
 8003a36:	2082      	movs	r0, #130	; 0x82
 8003a38:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003a3a:	89bb      	ldrh	r3, [r7, #12]
 8003a3c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003a44:	89bb      	ldrh	r3, [r7, #12]
 8003a46:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <BSP_TS_GetState+0x14c>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003a50:	8abb      	ldrh	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	82bb      	strh	r3, [r7, #20]
 8003a5a:	e008      	b.n	8003a6e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003a5c:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <BSP_TS_GetState+0x150>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	8aba      	ldrh	r2, [r7, #20]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d903      	bls.n	8003a6e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <BSP_TS_GetState+0x150>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003a6e:	8abb      	ldrh	r3, [r7, #20]
 8003a70:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003a72:	89fb      	ldrh	r3, [r7, #14]
 8003a74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d806      	bhi.n	8003a8a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003a82:	330e      	adds	r3, #14
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	81fb      	strh	r3, [r7, #14]
 8003a88:	e005      	b.n	8003a96 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003a90:	3308      	adds	r3, #8
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003a96:	89fb      	ldrh	r3, [r7, #14]
 8003a98:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <BSP_TS_GetState+0x154>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	82fb      	strh	r3, [r7, #22]
 8003aac:	e008      	b.n	8003ac0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <BSP_TS_GetState+0x158>)
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	8afa      	ldrh	r2, [r7, #22]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d903      	bls.n	8003ac0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003ab8:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <BSP_TS_GetState+0x158>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003ac4:	89fb      	ldrh	r3, [r7, #14]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <BSP_TS_GetState+0x15c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d906      	bls.n	8003ade <BSP_TS_GetState+0xda>
 8003ad0:	89fa      	ldrh	r2, [r7, #14]
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <BSP_TS_GetState+0x15c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	e005      	b.n	8003aea <BSP_TS_GetState+0xe6>
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <BSP_TS_GetState+0x15c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	89fb      	ldrh	r3, [r7, #14]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <BSP_TS_GetState+0x160>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d906      	bls.n	8003b06 <BSP_TS_GetState+0x102>
 8003af8:	89ba      	ldrh	r2, [r7, #12]
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <BSP_TS_GetState+0x160>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	e005      	b.n	8003b12 <BSP_TS_GetState+0x10e>
 8003b06:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <BSP_TS_GetState+0x160>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	89bb      	ldrh	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003b14:	8a7a      	ldrh	r2, [r7, #18]
 8003b16:	8a3b      	ldrh	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	dd07      	ble.n	8003b2e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <BSP_TS_GetState+0x15c>)
 8003b24:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003b26:	89bb      	ldrh	r3, [r7, #12]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <BSP_TS_GetState+0x160>)
 8003b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <BSP_TS_GetState+0x15c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <BSP_TS_GetState+0x160>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	809a      	strh	r2, [r3, #4]
  }
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000264 	.word	0x20000264
 8003b50:	ba2e8ba3 	.word	0xba2e8ba3
 8003b54:	2000026a 	.word	0x2000026a
 8003b58:	88888889 	.word	0x88888889
 8003b5c:	20000268 	.word	0x20000268
 8003b60:	2000026c 	.word	0x2000026c
 8003b64:	20000270 	.word	0x20000270

08003b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <HAL_Init+0x40>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_Init+0x40>)
 8003b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_Init+0x40>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_Init+0x40>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 f8fa 	bl	8003d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fd fd6e 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b9c:	f7fd fd44 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x20>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000094 	.word	0x20000094
 8003bd0:	200005c4 	.word	0x200005c4

08003bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_GetTick+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	200005c4 	.word	0x200005c4

08003bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff ffee 	bl	8003bd4 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d005      	beq.n	8003c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_Delay+0x40>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c12:	bf00      	nop
 8003c14:	f7ff ffde 	bl	8003bd4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d8f7      	bhi.n	8003c14 <HAL_Delay+0x28>
  {
  }
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000094 	.word	0x20000094

08003c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__NVIC_GetPriorityGrouping+0x18>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0307 	and.w	r3, r3, #7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db0b      	blt.n	8003cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4907      	ldr	r1, [pc, #28]	; (8003ccc <__NVIC_EnableIRQ+0x38>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db0a      	blt.n	8003cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	490c      	ldr	r1, [pc, #48]	; (8003d1c <__NVIC_SetPriority+0x4c>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf8:	e00a      	b.n	8003d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4908      	ldr	r1, [pc, #32]	; (8003d20 <__NVIC_SetPriority+0x50>)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3b04      	subs	r3, #4
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	761a      	strb	r2, [r3, #24]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf28      	it	cs
 8003d42:	2304      	movcs	r3, #4
 8003d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d902      	bls.n	8003d54 <NVIC_EncodePriority+0x30>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3b03      	subs	r3, #3
 8003d52:	e000      	b.n	8003d56 <NVIC_EncodePriority+0x32>
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	401a      	ands	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43d9      	mvns	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	4313      	orrs	r3, r2
         );
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ff4c 	bl	8003c30 <__NVIC_SetPriorityGrouping>
}
 8003d98:	bf00      	nop
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db2:	f7ff ff61 	bl	8003c78 <__NVIC_GetPriorityGrouping>
 8003db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	f7ff ffb1 	bl	8003d24 <NVIC_EncodePriority>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff80 	bl	8003cd0 <__NVIC_SetPriority>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff54 	bl	8003c94 <__NVIC_EnableIRQ>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7ff fee8 	bl	8003bd4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e099      	b.n	8003f44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e30:	e00f      	b.n	8003e52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e32:	f7ff fecf 	bl	8003bd4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d908      	bls.n	8003e52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e078      	b.n	8003f44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e8      	bne.n	8003e32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_DMA_Init+0x158>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d117      	bne.n	8003f16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8bd 	bl	8004078 <DMA_CheckFifoParam>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f12:	2301      	movs	r3, #1
 8003f14:	e016      	b.n	8003f44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f874 	bl	800400c <DMA_CalcBaseAndBitshift>
 8003f24:	4603      	mov	r3, r0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	223f      	movs	r2, #63	; 0x3f
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	f010803f 	.word	0xf010803f

08003f50 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e050      	b.n	8004004 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e048      	b.n	8004004 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2221      	movs	r2, #33	; 0x21
 8003fb0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f82a 	bl	800400c <DMA_CalcBaseAndBitshift>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	223f      	movs	r2, #63	; 0x3f
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	3b10      	subs	r3, #16
 800401c:	4a14      	ldr	r2, [pc, #80]	; (8004070 <DMA_CalcBaseAndBitshift+0x64>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <DMA_CalcBaseAndBitshift+0x68>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d909      	bls.n	800404e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	1d1a      	adds	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	659a      	str	r2, [r3, #88]	; 0x58
 800404c:	e007      	b.n	800405e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	aaaaaaab 	.word	0xaaaaaaab
 8004074:	0800b1b4 	.word	0x0800b1b4

08004078 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11f      	bne.n	80040d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d855      	bhi.n	8004144 <DMA_CheckFifoParam+0xcc>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <DMA_CheckFifoParam+0x28>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040b1 	.word	0x080040b1
 80040a4:	080040c3 	.word	0x080040c3
 80040a8:	080040b1 	.word	0x080040b1
 80040ac:	08004145 	.word	0x08004145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d045      	beq.n	8004148 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c0:	e042      	b.n	8004148 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ca:	d13f      	bne.n	800414c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d0:	e03c      	b.n	800414c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d121      	bne.n	8004120 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d836      	bhi.n	8004150 <DMA_CheckFifoParam+0xd8>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <DMA_CheckFifoParam+0x70>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	080040ff 	.word	0x080040ff
 80040f0:	080040f9 	.word	0x080040f9
 80040f4:	08004111 	.word	0x08004111
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      break;
 80040fc:	e02f      	b.n	800415e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d024      	beq.n	8004154 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410e:	e021      	b.n	8004154 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004118:	d11e      	bne.n	8004158 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800411e:	e01b      	b.n	8004158 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <DMA_CheckFifoParam+0xb4>
 8004126:	2b03      	cmp	r3, #3
 8004128:	d003      	beq.n	8004132 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800412a:	e018      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e015      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      break;
 8004142:	e00b      	b.n	800415c <DMA_CheckFifoParam+0xe4>
      break;
 8004144:	bf00      	nop
 8004146:	e00a      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 8004148:	bf00      	nop
 800414a:	e008      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 800414c:	bf00      	nop
 800414e:	e006      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 8004150:	bf00      	nop
 8004152:	e004      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;   
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <DMA_CheckFifoParam+0xe6>
      break;
 800415c:	bf00      	nop
    }
  } 
  
  return status; 
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e03b      	b.n	80041f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc f9c8 	bl	8000528 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	f023 0107 	bic.w	r1, r3, #7
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68d1      	ldr	r1, [r2, #12]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af02      	add	r7, sp, #8
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_DMA2D_Start+0x1c>
 8004216:	2302      	movs	r3, #2
 8004218:	e018      	b.n	800424c <HAL_DMA2D_Start+0x4e>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f989 	bl	800454c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d056      	beq.n	800431e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004270:	f7ff fcb0 	bl	8003bd4 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004276:	e04b      	b.n	8004310 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004286:	2b00      	cmp	r3, #0
 8004288:	d023      	beq.n	80042d2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	f043 0202 	orr.w	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	f043 0201 	orr.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2204      	movs	r2, #4
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0a5      	b.n	800441e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d01a      	beq.n	8004310 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80042da:	f7ff fc7b 	bl	8003bd4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <HAL_DMA2D_PollForTransfer+0x9c>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10f      	bne.n	8004310 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2203      	movs	r2, #3
 8004300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e086      	b.n	800441e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ac      	beq.n	8004278 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d061      	beq.n	8004404 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004340:	f7ff fc48 	bl	8003bd4 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004346:	e056      	b.n	80043f6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004356:	2b00      	cmp	r3, #0
 8004358:	d02e      	beq.n	80043b8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2229      	movs	r2, #41	; 0x29
 80043a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e032      	b.n	800441e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d01a      	beq.n	80043f6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80043c0:	f7ff fc08 	bl	8003bd4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <HAL_DMA2D_PollForTransfer+0x182>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2203      	movs	r2, #3
 80043e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e013      	b.n	800441e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0a1      	beq.n	8004348 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2212      	movs	r2, #18
 800440a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_DMA2D_ConfigLayer+0x20>
 8004444:	2302      	movs	r3, #2
 8004446:	e079      	b.n	800453c <HAL_DMA2D_ConfigLayer+0x114>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	3318      	adds	r3, #24
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004472:	4b35      	ldr	r3, [pc, #212]	; (8004548 <HAL_DMA2D_ConfigLayer+0x120>)
 8004474:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b0a      	cmp	r3, #10
 800447c:	d003      	beq.n	8004486 <HAL_DMA2D_ConfigLayer+0x5e>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b09      	cmp	r3, #9
 8004484:	d107      	bne.n	8004496 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e005      	b.n	80044a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d120      	bne.n	80044ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	ea02 0103 	and.w	r1, r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	430a      	orrs	r2, r1
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b0a      	cmp	r3, #10
 80044d0:	d003      	beq.n	80044da <HAL_DMA2D_ConfigLayer+0xb2>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	d127      	bne.n	800452a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
 80044e8:	e01f      	b.n	800452a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	ea02 0103 	and.w	r1, r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	430a      	orrs	r2, r1
 8004500:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b0a      	cmp	r3, #10
 8004512:	d003      	beq.n	800451c <HAL_DMA2D_ConfigLayer+0xf4>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b09      	cmp	r3, #9
 800451a:	d106      	bne.n	800452a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004528:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	ff03000f 	.word	0xff03000f

0800454c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800454c:	b480      	push	{r7}
 800454e:	b08b      	sub	sp, #44	; 0x2c
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004560:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	041a      	lsls	r2, r3, #16
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	431a      	orrs	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004584:	d174      	bne.n	8004670 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800458c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004594:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800459c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
 80045bc:	e053      	b.n	8004666 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d106      	bne.n	80045d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	e048      	b.n	8004666 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d111      	bne.n	8004600 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	0cdb      	lsrs	r3, r3, #19
 80045e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	0a9b      	lsrs	r3, r3, #10
 80045e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	02db      	lsls	r3, r3, #11
 80045f6:	4313      	orrs	r3, r2
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	e032      	b.n	8004666 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d117      	bne.n	8004638 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	0fdb      	lsrs	r3, r3, #31
 800460c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	0cdb      	lsrs	r3, r3, #19
 8004612:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	0adb      	lsrs	r3, r3, #11
 8004618:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	029b      	lsls	r3, r3, #10
 8004628:	431a      	orrs	r2, r3
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	03db      	lsls	r3, r3, #15
 800462e:	4313      	orrs	r3, r2
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e016      	b.n	8004666 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	0d1b      	lsrs	r3, r3, #20
 8004642:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	0b1b      	lsrs	r3, r3, #12
 8004648:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	011a      	lsls	r2, r3, #4
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	431a      	orrs	r2, r3
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	4313      	orrs	r3, r2
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800466e:	e003      	b.n	8004678 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	60da      	str	r2, [r3, #12]
}
 8004678:	bf00      	nop
 800467a:	372c      	adds	r7, #44	; 0x2c
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e177      	b.n	8004990 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f040 8166 	bne.w	800498a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d00b      	beq.n	80046de <HAL_GPIO_Init+0x5a>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d007      	beq.n	80046de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046d2:	2b11      	cmp	r3, #17
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b12      	cmp	r3, #18
 80046dc:	d130      	bne.n	8004740 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 0201 	and.w	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	2203      	movs	r2, #3
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0xfc>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b12      	cmp	r3, #18
 800477e:	d123      	bne.n	80047c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	220f      	movs	r2, #15
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	08da      	lsrs	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3208      	adds	r2, #8
 80047c2:	69b9      	ldr	r1, [r7, #24]
 80047c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	2203      	movs	r2, #3
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 0203 	and.w	r2, r3, #3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80c0 	beq.w	800498a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <HAL_GPIO_Init+0x320>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	4a64      	ldr	r2, [pc, #400]	; (80049a4 <HAL_GPIO_Init+0x320>)
 8004814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004818:	6453      	str	r3, [r2, #68]	; 0x44
 800481a:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_GPIO_Init+0x320>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004826:	4a60      	ldr	r2, [pc, #384]	; (80049a8 <HAL_GPIO_Init+0x324>)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	3302      	adds	r3, #2
 800482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	220f      	movs	r2, #15
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a57      	ldr	r2, [pc, #348]	; (80049ac <HAL_GPIO_Init+0x328>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d037      	beq.n	80048c2 <HAL_GPIO_Init+0x23e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a56      	ldr	r2, [pc, #344]	; (80049b0 <HAL_GPIO_Init+0x32c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d031      	beq.n	80048be <HAL_GPIO_Init+0x23a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a55      	ldr	r2, [pc, #340]	; (80049b4 <HAL_GPIO_Init+0x330>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02b      	beq.n	80048ba <HAL_GPIO_Init+0x236>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_GPIO_Init+0x334>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d025      	beq.n	80048b6 <HAL_GPIO_Init+0x232>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a53      	ldr	r2, [pc, #332]	; (80049bc <HAL_GPIO_Init+0x338>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <HAL_GPIO_Init+0x22e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a52      	ldr	r2, [pc, #328]	; (80049c0 <HAL_GPIO_Init+0x33c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_GPIO_Init+0x22a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <HAL_GPIO_Init+0x340>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_GPIO_Init+0x226>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <HAL_GPIO_Init+0x344>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_GPIO_Init+0x222>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <HAL_GPIO_Init+0x348>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_GPIO_Init+0x21e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <HAL_GPIO_Init+0x34c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_GPIO_Init+0x21a>
 800489a:	2309      	movs	r3, #9
 800489c:	e012      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 800489e:	230a      	movs	r3, #10
 80048a0:	e010      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048a2:	2308      	movs	r3, #8
 80048a4:	e00e      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048a6:	2307      	movs	r3, #7
 80048a8:	e00c      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048aa:	2306      	movs	r3, #6
 80048ac:	e00a      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048ae:	2305      	movs	r3, #5
 80048b0:	e008      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048b2:	2304      	movs	r3, #4
 80048b4:	e006      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048b6:	2303      	movs	r3, #3
 80048b8:	e004      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e002      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_GPIO_Init+0x240>
 80048c2:	2300      	movs	r3, #0
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	f002 0203 	and.w	r2, r2, #3
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	4093      	lsls	r3, r2
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d4:	4934      	ldr	r1, [pc, #208]	; (80049a8 <HAL_GPIO_Init+0x324>)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	3302      	adds	r3, #2
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e2:	4b3c      	ldr	r3, [pc, #240]	; (80049d4 <HAL_GPIO_Init+0x350>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_GPIO_Init+0x350>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <HAL_GPIO_Init+0x350>)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	f67f ae84 	bls.w	80046a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004998:	bf00      	nop
 800499a:	3724      	adds	r7, #36	; 0x24
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40020000 	.word	0x40020000
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40021400 	.word	0x40021400
 80049c4:	40021800 	.word	0x40021800
 80049c8:	40021c00 	.word	0x40021c00
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40022400 	.word	0x40022400
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e0d9      	b.n	8004ba8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049f4:	2201      	movs	r2, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f040 80c9 	bne.w	8004ba2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a10:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	3302      	adds	r3, #2
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	220f      	movs	r2, #15
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a62      	ldr	r2, [pc, #392]	; (8004bc0 <HAL_GPIO_DeInit+0x1e8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d037      	beq.n	8004aaa <HAL_GPIO_DeInit+0xd2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a61      	ldr	r2, [pc, #388]	; (8004bc4 <HAL_GPIO_DeInit+0x1ec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_GPIO_DeInit+0xce>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a60      	ldr	r2, [pc, #384]	; (8004bc8 <HAL_GPIO_DeInit+0x1f0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d02b      	beq.n	8004aa2 <HAL_GPIO_DeInit+0xca>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a5f      	ldr	r2, [pc, #380]	; (8004bcc <HAL_GPIO_DeInit+0x1f4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d025      	beq.n	8004a9e <HAL_GPIO_DeInit+0xc6>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_GPIO_DeInit+0x1f8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <HAL_GPIO_DeInit+0xc2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a5d      	ldr	r2, [pc, #372]	; (8004bd4 <HAL_GPIO_DeInit+0x1fc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <HAL_GPIO_DeInit+0xbe>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a5c      	ldr	r2, [pc, #368]	; (8004bd8 <HAL_GPIO_DeInit+0x200>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_GPIO_DeInit+0xba>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a5b      	ldr	r2, [pc, #364]	; (8004bdc <HAL_GPIO_DeInit+0x204>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00d      	beq.n	8004a8e <HAL_GPIO_DeInit+0xb6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a5a      	ldr	r2, [pc, #360]	; (8004be0 <HAL_GPIO_DeInit+0x208>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <HAL_GPIO_DeInit+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a59      	ldr	r2, [pc, #356]	; (8004be4 <HAL_GPIO_DeInit+0x20c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_GPIO_DeInit+0xae>
 8004a82:	2309      	movs	r3, #9
 8004a84:	e012      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a86:	230a      	movs	r3, #10
 8004a88:	e010      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	e00e      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e00c      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a92:	2306      	movs	r3, #6
 8004a94:	e00a      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a96:	2305      	movs	r3, #5
 8004a98:	e008      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	e006      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e004      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_DeInit+0xd4>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	f002 0203 	and.w	r2, r2, #3
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	4093      	lsls	r3, r2
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d132      	bne.n	8004b22 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004abc:	4b4a      	ldr	r3, [pc, #296]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	4948      	ldr	r1, [pc, #288]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	4945      	ldr	r1, [pc, #276]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	4941      	ldr	r1, [pc, #260]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	493e      	ldr	r1, [pc, #248]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	43da      	mvns	r2, r3
 8004b14:	4829      	ldr	r0, [pc, #164]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	2103      	movs	r1, #3
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	401a      	ands	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	08da      	lsrs	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3208      	adds	r2, #8
 8004b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	08d2      	lsrs	r2, r2, #3
 8004b58:	4019      	ands	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3208      	adds	r2, #8
 8004b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	401a      	ands	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	401a      	ands	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2103      	movs	r1, #3
 8004b96:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	f67f af22 	bls.w	80049f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020c00 	.word	0x40020c00
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40021400 	.word	0x40021400
 8004bd8:	40021800 	.word	0x40021800
 8004bdc:	40021c00 	.word	0x40021c00
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40022400 	.word	0x40022400
 8004be8:	40013c00 	.word	0x40013c00

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c08:	e003      	b.n	8004c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	619a      	str	r2, [r3, #24]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e11f      	b.n	8004e72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fb fe38 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c84:	f001 ff8e 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8004c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4a7b      	ldr	r2, [pc, #492]	; (8004e7c <HAL_I2C_Init+0x25c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d807      	bhi.n	8004ca4 <HAL_I2C_Init+0x84>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a7a      	ldr	r2, [pc, #488]	; (8004e80 <HAL_I2C_Init+0x260>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e006      	b.n	8004cb2 <HAL_I2C_Init+0x92>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <HAL_I2C_Init+0x264>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e0db      	b.n	8004e72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a72      	ldr	r2, [pc, #456]	; (8004e88 <HAL_I2C_Init+0x268>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	0c9b      	lsrs	r3, r3, #18
 8004cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a64      	ldr	r2, [pc, #400]	; (8004e7c <HAL_I2C_Init+0x25c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d802      	bhi.n	8004cf4 <HAL_I2C_Init+0xd4>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	e009      	b.n	8004d08 <HAL_I2C_Init+0xe8>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	4a63      	ldr	r2, [pc, #396]	; (8004e8c <HAL_I2C_Init+0x26c>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	3301      	adds	r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4956      	ldr	r1, [pc, #344]	; (8004e7c <HAL_I2C_Init+0x25c>)
 8004d24:	428b      	cmp	r3, r1
 8004d26:	d80d      	bhi.n	8004d44 <HAL_I2C_Init+0x124>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	1e59      	subs	r1, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	bf38      	it	cc
 8004d40:	2304      	movcc	r3, #4
 8004d42:	e04f      	b.n	8004de4 <HAL_I2C_Init+0x1c4>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <HAL_I2C_Init+0x150>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e58      	subs	r0, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	440b      	add	r3, r1
 8004d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e012      	b.n	8004d96 <HAL_I2C_Init+0x176>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e58      	subs	r0, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	0099      	lsls	r1, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Init+0x17e>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e022      	b.n	8004de4 <HAL_I2C_Init+0x1c4>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10e      	bne.n	8004dc4 <HAL_I2C_Init+0x1a4>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e58      	subs	r0, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	440b      	add	r3, r1
 8004db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc2:	e00f      	b.n	8004de4 <HAL_I2C_Init+0x1c4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e58      	subs	r0, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	0099      	lsls	r1, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	6809      	ldr	r1, [r1, #0]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6911      	ldr	r1, [r2, #16]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	000186a0 	.word	0x000186a0
 8004e80:	001e847f 	.word	0x001e847f
 8004e84:	003d08ff 	.word	0x003d08ff
 8004e88:	431bde83 	.word	0x431bde83
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e021      	b.n	8004ee6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2224      	movs	r2, #36	; 0x24
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fd68 	bl	8000990 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	460b      	mov	r3, r1
 8004f04:	813b      	strh	r3, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f0a:	f7fe fe63 	bl	8003bd4 <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	f040 80d9 	bne.w	80050d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2319      	movs	r3, #25
 8004f24:	2201      	movs	r2, #1
 8004f26:	496d      	ldr	r1, [pc, #436]	; (80050dc <HAL_I2C_Mem_Write+0x1ec>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fc89 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0cc      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x56>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0c5      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d007      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	; 0x21
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2240      	movs	r2, #64	; 0x40
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a4d      	ldr	r2, [pc, #308]	; (80050e0 <HAL_I2C_Mem_Write+0x1f0>)
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fae:	88f8      	ldrh	r0, [r7, #6]
 8004fb0:	893a      	ldrh	r2, [r7, #8]
 8004fb2:	8979      	ldrh	r1, [r7, #10]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fac4 	bl	800554c <I2C_RequestMemoryWrite>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d052      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e081      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fd0a 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d107      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e06b      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d11b      	bne.n	8005070 <HAL_I2C_Mem_Write+0x180>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1aa      	bne.n	8004fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fcf6 	bl	8005a6e <I2C_WaitOnBTFFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e016      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	00100002 	.word	0x00100002
 80050e0:	ffff0000 	.word	0xffff0000

080050e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	; 0x30
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050fe:	f7fe fd69 	bl	8003bd4 <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b20      	cmp	r3, #32
 800510e:	f040 8208 	bne.w	8005522 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2319      	movs	r3, #25
 8005118:	2201      	movs	r2, #1
 800511a:	497b      	ldr	r1, [pc, #492]	; (8005308 <HAL_I2C_Mem_Read+0x224>)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fb8f 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	e1fb      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_I2C_Mem_Read+0x56>
 8005136:	2302      	movs	r3, #2
 8005138:	e1f4      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b01      	cmp	r3, #1
 800514e:	d007      	beq.n	8005160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	; 0x22
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a5b      	ldr	r2, [pc, #364]	; (800530c <HAL_I2C_Mem_Read+0x228>)
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051a2:	88f8      	ldrh	r0, [r7, #6]
 80051a4:	893a      	ldrh	r2, [r7, #8]
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4603      	mov	r3, r0
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa5e 	bl	8005674 <I2C_RequestMemoryRead>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e1b0      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d113      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e184      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d11b      	bne.n	8005232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e164      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b02      	cmp	r3, #2
 8005238:	d11b      	bne.n	8005272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	e144      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005288:	e138      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	2b03      	cmp	r3, #3
 8005290:	f200 80f1 	bhi.w	8005476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	2b01      	cmp	r3, #1
 800529a:	d123      	bne.n	80052e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fc25 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e139      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e2:	e10b      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d14e      	bne.n	800538a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	2200      	movs	r2, #0
 80052f4:	4906      	ldr	r1, [pc, #24]	; (8005310 <HAL_I2C_Mem_Read+0x22c>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 faa2 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e10e      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
 8005306:	bf00      	nop
 8005308:	00100002 	.word	0x00100002
 800530c:	ffff0000 	.word	0xffff0000
 8005310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005388:	e0b8      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2200      	movs	r2, #0
 8005392:	4966      	ldr	r1, [pc, #408]	; (800552c <HAL_I2C_Mem_Read+0x448>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fa53 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0bf      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	494f      	ldr	r1, [pc, #316]	; (800552c <HAL_I2C_Mem_Read+0x448>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa25 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e091      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005474:	e042      	b.n	80054fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb38 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e04c      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d118      	bne.n	80054fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f aec2 	bne.w	800528a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	00010004 	.word	0x00010004

08005530 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	b2db      	uxtb	r3, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4603      	mov	r3, r0
 800555c:	817b      	strh	r3, [r7, #10]
 800555e:	460b      	mov	r3, r1
 8005560:	813b      	strh	r3, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	2200      	movs	r2, #0
 800557e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f95c 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e05f      	b.n	8005668 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055a8:	897b      	ldrh	r3, [r7, #10]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	492c      	ldr	r1, [pc, #176]	; (8005670 <I2C_RequestMemoryWrite+0x124>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f995 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e04c      	b.n	8005668 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	6a39      	ldr	r1, [r7, #32]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f9ff 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d107      	bne.n	800560c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e02b      	b.n	8005668 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005616:	893b      	ldrh	r3, [r7, #8]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]
 8005620:	e021      	b.n	8005666 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	b29b      	uxth	r3, r3
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	6a39      	ldr	r1, [r7, #32]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f9d9 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00d      	beq.n	800565c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b04      	cmp	r3, #4
 8005646:	d107      	bne.n	8005658 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e005      	b.n	8005668 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	00010002 	.word	0x00010002

08005674 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8c0 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e0a9      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e0:	897b      	ldrh	r3, [r7, #10]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	6a3a      	ldr	r2, [r7, #32]
 80056f4:	4951      	ldr	r1, [pc, #324]	; (800583c <I2C_RequestMemoryRead+0x1c8>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f8f9 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e096      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	6a39      	ldr	r1, [r7, #32]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f963 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	2b04      	cmp	r3, #4
 8005732:	d107      	bne.n	8005744 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005742:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e075      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d105      	bne.n	800575a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800574e:	893b      	ldrh	r3, [r7, #8]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	611a      	str	r2, [r3, #16]
 8005758:	e021      	b.n	800579e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800575a:	893b      	ldrh	r3, [r7, #8]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	6a39      	ldr	r1, [r7, #32]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f93d 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	2b04      	cmp	r3, #4
 800577e:	d107      	bne.n	8005790 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04f      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	6a39      	ldr	r1, [r7, #32]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f922 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d107      	bne.n	80057c6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e034      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f82a 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e013      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	4906      	ldr	r1, [pc, #24]	; (800583c <I2C_RequestMemoryRead+0x1c8>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f863 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00010002 	.word	0x00010002

08005840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005850:	e025      	b.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d021      	beq.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fe f9bb 	bl	8003bd4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d116      	bne.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e023      	b.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10d      	bne.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	e00c      	b.n	80058de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d0b6      	beq.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058fc:	e051      	b.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d123      	bne.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e046      	b.n	80059e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d021      	beq.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595e:	f7fe f939 	bl	8003bd4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d116      	bne.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e020      	b.n	80059e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10c      	bne.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	43da      	mvns	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e00b      	b.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	43da      	mvns	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d18d      	bne.n	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f8:	e02d      	b.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f8ce 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e02d      	b.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d021      	beq.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fe f8df 	bl	8003bd4 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d116      	bne.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e007      	b.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d1ca      	bne.n	80059fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a7a:	e02d      	b.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f88d 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e02d      	b.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d021      	beq.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a94:	f7fe f89e 	bl	8003bd4 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d116      	bne.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e007      	b.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d1ca      	bne.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005afc:	e042      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d119      	bne.n	8005b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0210 	mvn.w	r2, #16
 8005b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e029      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b40:	f7fe f848 	bl	8003bd4 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e007      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d1b5      	bne.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d11b      	bne.n	8005bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d129      	bne.n	8005c64 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0210 	bic.w	r2, r2, #16
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d12a      	bne.n	8005ce2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cac:	89fb      	ldrh	r3, [r7, #14]
 8005cae:	f023 030f 	bic.w	r3, r3, #15
 8005cb2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	89fa      	ldrh	r2, [r7, #14]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0bf      	b.n	8005e82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fa ff12 	bl	8000b40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6899      	ldr	r1, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005d64:	400b      	ands	r3, r1
 8005d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	041b      	lsls	r3, r3, #16
 8005d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6899      	ldr	r1, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68d9      	ldr	r1, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005d92:	400b      	ands	r3, r1
 8005d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1a      	ldr	r2, [r3, #32]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6919      	ldr	r1, [r3, #16]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b33      	ldr	r3, [pc, #204]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6919      	ldr	r1, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6959      	ldr	r1, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <HAL_LTDC_Init+0x19c>)
 8005dee:	400b      	ands	r3, r1
 8005df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0206 	orr.w	r2, r2, #6
 8005e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	f000f800 	.word	0xf000f800

08005e90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e90:	b5b0      	push	{r4, r5, r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_LTDC_ConfigLayer+0x1a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e02c      	b.n	8005f04 <HAL_LTDC_ConfigLayer+0x74>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2134      	movs	r1, #52	; 0x34
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4614      	mov	r4, r2
 8005ece:	461d      	mov	r5, r3
 8005ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f83b 	bl	8005f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bdb0      	pop	{r4, r5, r7, pc}

08005f0c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_LTDC_EnableDither+0x16>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e016      	b.n	8005f50 <HAL_LTDC_EnableDither+0x44>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_LTDC_EnableDither+0x50>)
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <HAL_LTDC_EnableDither+0x50>)
 8005f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40016800 	.word	0x40016800

08005f60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b089      	sub	sp, #36	; 0x24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	0c1b      	lsrs	r3, r3, #16
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	4413      	add	r3, r2
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	01db      	lsls	r3, r3, #7
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3384      	adds	r3, #132	; 0x84
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	4611      	mov	r1, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	01d2      	lsls	r2, r2, #7
 8005f9c:	440a      	add	r2, r1
 8005f9e:	3284      	adds	r2, #132	; 0x84
 8005fa0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fa4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb6:	4413      	add	r3, r2
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	440b      	add	r3, r1
 8005fc6:	3384      	adds	r3, #132	; 0x84
 8005fc8:	4619      	mov	r1, r3
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fde:	4413      	add	r3, r2
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	3384      	adds	r3, #132	; 0x84
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	01d2      	lsls	r2, r2, #7
 8005ffe:	440a      	add	r2, r1
 8006000:	3284      	adds	r2, #132	; 0x84
 8006002:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006006:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006016:	4413      	add	r3, r2
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	01db      	lsls	r3, r3, #7
 8006024:	440b      	add	r3, r1
 8006026:	3384      	adds	r3, #132	; 0x84
 8006028:	4619      	mov	r1, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4413      	add	r3, r2
 800603c:	3384      	adds	r3, #132	; 0x84
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	4611      	mov	r1, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	01d2      	lsls	r2, r2, #7
 800604a:	440a      	add	r2, r1
 800604c:	3284      	adds	r2, #132	; 0x84
 800604e:	f023 0307 	bic.w	r3, r3, #7
 8006052:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	3384      	adds	r3, #132	; 0x84
 8006062:	461a      	mov	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4413      	add	r3, r2
 8006092:	3384      	adds	r3, #132	; 0x84
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	01db      	lsls	r3, r3, #7
 80060a0:	4413      	add	r3, r2
 80060a2:	3384      	adds	r3, #132	; 0x84
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b0:	461a      	mov	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4619      	mov	r1, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	440b      	add	r3, r1
 80060c6:	3384      	adds	r3, #132	; 0x84
 80060c8:	4619      	mov	r1, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	01db      	lsls	r3, r3, #7
 80060da:	4413      	add	r3, r2
 80060dc:	3384      	adds	r3, #132	; 0x84
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	4611      	mov	r1, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	01d2      	lsls	r2, r2, #7
 80060ea:	440a      	add	r2, r1
 80060ec:	3284      	adds	r2, #132	; 0x84
 80060ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	4413      	add	r3, r2
 8006100:	3384      	adds	r3, #132	; 0x84
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	; 0x84
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	4611      	mov	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	01d2      	lsls	r2, r2, #7
 8006124:	440a      	add	r2, r1
 8006126:	3284      	adds	r2, #132	; 0x84
 8006128:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800612c:	f023 0307 	bic.w	r3, r3, #7
 8006130:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	6809      	ldr	r1, [r1, #0]
 800613e:	4608      	mov	r0, r1
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	01c9      	lsls	r1, r1, #7
 8006144:	4401      	add	r1, r0
 8006146:	3184      	adds	r1, #132	; 0x84
 8006148:	4313      	orrs	r3, r2
 800614a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	01db      	lsls	r3, r3, #7
 8006156:	4413      	add	r3, r2
 8006158:	3384      	adds	r3, #132	; 0x84
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	01db      	lsls	r3, r3, #7
 8006166:	4413      	add	r3, r2
 8006168:	3384      	adds	r3, #132	; 0x84
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	01db      	lsls	r3, r3, #7
 800617a:	4413      	add	r3, r2
 800617c:	3384      	adds	r3, #132	; 0x84
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800618e:	2304      	movs	r3, #4
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	e01b      	b.n	80061cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800619c:	2303      	movs	r3, #3
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e014      	b.n	80061cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00b      	beq.n	80061c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d007      	beq.n	80061c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d003      	beq.n	80061c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061be:	2b07      	cmp	r3, #7
 80061c0:	d102      	bne.n	80061c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80061c2:	2302      	movs	r3, #2
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e001      	b.n	80061cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80061c8:	2301      	movs	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	01db      	lsls	r3, r3, #7
 80061d6:	4413      	add	r3, r2
 80061d8:	3384      	adds	r3, #132	; 0x84
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	4611      	mov	r1, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	01d2      	lsls	r2, r2, #7
 80061e6:	440a      	add	r2, r1
 80061e8:	3284      	adds	r2, #132	; 0x84
 80061ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	041a      	lsls	r2, r3, #16
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	1acb      	subs	r3, r1, r3
 8006206:	69f9      	ldr	r1, [r7, #28]
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	3303      	adds	r3, #3
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	6809      	ldr	r1, [r1, #0]
 8006212:	4608      	mov	r0, r1
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	01c9      	lsls	r1, r1, #7
 8006218:	4401      	add	r1, r0
 800621a:	3184      	adds	r1, #132	; 0x84
 800621c:	4313      	orrs	r3, r2
 800621e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	01db      	lsls	r3, r3, #7
 800622a:	4413      	add	r3, r2
 800622c:	3384      	adds	r3, #132	; 0x84
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	4611      	mov	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	01d2      	lsls	r2, r2, #7
 800623a:	440a      	add	r2, r1
 800623c:	3284      	adds	r2, #132	; 0x84
 800623e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	4413      	add	r3, r2
 8006254:	3384      	adds	r3, #132	; 0x84
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	01db      	lsls	r3, r3, #7
 8006268:	4413      	add	r3, r2
 800626a:	3384      	adds	r3, #132	; 0x84
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	4611      	mov	r1, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	01d2      	lsls	r2, r2, #7
 8006278:	440a      	add	r2, r1
 800627a:	3284      	adds	r2, #132	; 0x84
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6013      	str	r3, [r2, #0]
}
 8006282:	bf00      	nop
 8006284:	3724      	adds	r7, #36	; 0x24
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_PWREx_EnableOverDrive+0x94>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062bc:	f7fd fc8a 	bl	8003bd4 <HAL_GetTick>
 80062c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062c2:	e009      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062c4:	f7fd fc86 	bl	8003bd4 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d901      	bls.n	80062d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e01f      	b.n	8006318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <HAL_PWREx_EnableOverDrive+0x98>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d1ee      	bne.n	80062c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ec:	f7fd fc72 	bl	8003bd4 <HAL_GetTick>
 80062f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062f2:	e009      	b.n	8006308 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062f4:	f7fd fc6e 	bl	8003bd4 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006302:	d901      	bls.n	8006308 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e007      	b.n	8006318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_PWREx_EnableOverDrive+0x98>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006314:	d1ee      	bne.n	80062f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40023800 	.word	0x40023800
 8006324:	420e0040 	.word	0x420e0040
 8006328:	40007000 	.word	0x40007000
 800632c:	420e0044 	.word	0x420e0044

08006330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e25b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d075      	beq.n	800643a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800634e:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00c      	beq.n	8006374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800635a:	4ba0      	ldr	r3, [pc, #640]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006362:	2b08      	cmp	r3, #8
 8006364:	d112      	bne.n	800638c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006366:	4b9d      	ldr	r3, [pc, #628]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006372:	d10b      	bne.n	800638c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	4b99      	ldr	r3, [pc, #612]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05b      	beq.n	8006438 <HAL_RCC_OscConfig+0x108>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d157      	bne.n	8006438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e236      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d106      	bne.n	80063a4 <HAL_RCC_OscConfig+0x74>
 8006396:	4b91      	ldr	r3, [pc, #580]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a90      	ldr	r2, [pc, #576]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e01d      	b.n	80063e0 <HAL_RCC_OscConfig+0xb0>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x98>
 80063ae:	4b8b      	ldr	r3, [pc, #556]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a8a      	ldr	r2, [pc, #552]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a87      	ldr	r2, [pc, #540]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0xb0>
 80063c8:	4b84      	ldr	r3, [pc, #528]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a83      	ldr	r2, [pc, #524]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a80      	ldr	r2, [pc, #512]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd fbf4 	bl	8003bd4 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fd fbf0 	bl	8003bd4 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1fb      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b76      	ldr	r3, [pc, #472]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0xc0>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fd fbe0 	bl	8003bd4 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fd fbdc 	bl	8003bd4 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e1e7      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642a:	4b6c      	ldr	r3, [pc, #432]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0xe8>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d063      	beq.n	800650e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006446:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 030c 	and.w	r3, r3, #12
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800645a:	2b08      	cmp	r3, #8
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645e:	4b5f      	ldr	r3, [pc, #380]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646a:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_RCC_OscConfig+0x152>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e1bb      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b56      	ldr	r3, [pc, #344]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4952      	ldr	r1, [pc, #328]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	e03a      	b.n	800650e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a0:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <HAL_RCC_OscConfig+0x2b0>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fd fb95 	bl	8003bd4 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ae:	f7fd fb91 	bl	8003bd4 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e19c      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c0:	4b46      	ldr	r3, [pc, #280]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064cc:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4940      	ldr	r1, [pc, #256]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]
 80064e0:	e015      	b.n	800650e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e2:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <HAL_RCC_OscConfig+0x2b0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fd fb74 	bl	8003bd4 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f0:	f7fd fb70 	bl	8003bd4 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e17b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006502:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d030      	beq.n	800657c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d016      	beq.n	8006550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_RCC_OscConfig+0x2b4>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fd fb54 	bl	8003bd4 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006530:	f7fd fb50 	bl	8003bd4 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e15b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006542:	4b26      	ldr	r3, [pc, #152]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x200>
 800654e:	e015      	b.n	800657c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006550:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_OscConfig+0x2b4>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006556:	f7fd fb3d 	bl	8003bd4 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800655e:	f7fd fb39 	bl	8003bd4 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e144      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80a0 	beq.w	80066ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10f      	bne.n	80065ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a8:	6413      	str	r3, [r2, #64]	; 0x40
 80065aa:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d121      	bne.n	800660a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a07      	ldr	r2, [pc, #28]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065d2:	f7fd faff 	bl	8003bd4 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	e011      	b.n	80065fe <HAL_RCC_OscConfig+0x2ce>
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	42470000 	.word	0x42470000
 80065e4:	42470e80 	.word	0x42470e80
 80065e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fd faf2 	bl	8003bd4 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e0fd      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b81      	ldr	r3, [pc, #516]	; (8006804 <HAL_RCC_OscConfig+0x4d4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d106      	bne.n	8006620 <HAL_RCC_OscConfig+0x2f0>
 8006612:	4b7d      	ldr	r3, [pc, #500]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a7c      	ldr	r2, [pc, #496]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
 800661e:	e01c      	b.n	800665a <HAL_RCC_OscConfig+0x32a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b05      	cmp	r3, #5
 8006626:	d10c      	bne.n	8006642 <HAL_RCC_OscConfig+0x312>
 8006628:	4b77      	ldr	r3, [pc, #476]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	4a76      	ldr	r2, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800662e:	f043 0304 	orr.w	r3, r3, #4
 8006632:	6713      	str	r3, [r2, #112]	; 0x70
 8006634:	4b74      	ldr	r3, [pc, #464]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a73      	ldr	r2, [pc, #460]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e00b      	b.n	800665a <HAL_RCC_OscConfig+0x32a>
 8006642:	4b71      	ldr	r3, [pc, #452]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a70      	ldr	r2, [pc, #448]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a6d      	ldr	r2, [pc, #436]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fd fab7 	bl	8003bd4 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fd fab3 	bl	8003bd4 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bc      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006680:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ee      	beq.n	800666a <HAL_RCC_OscConfig+0x33a>
 800668c:	e014      	b.n	80066b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668e:	f7fd faa1 	bl	8003bd4 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006694:	e00a      	b.n	80066ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fd fa9d 	bl	8003bd4 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0a6      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ac:	4b56      	ldr	r3, [pc, #344]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ee      	bne.n	8006696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d105      	bne.n	80066ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066be:	4b52      	ldr	r3, [pc, #328]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a51      	ldr	r2, [pc, #324]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8092 	beq.w	80067f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d05c      	beq.n	800679a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d141      	bne.n	800676c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e8:	4b48      	ldr	r3, [pc, #288]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ee:	f7fd fa71 	bl	8003bd4 <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f6:	f7fd fa6d 	bl	8003bd4 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e078      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f0      	bne.n	80066f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	019b      	lsls	r3, r3, #6
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	3b01      	subs	r3, #1
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	4933      	ldr	r1, [pc, #204]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673e:	4b33      	ldr	r3, [pc, #204]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fd fa46 	bl	8003bd4 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fd fa42 	bl	8003bd4 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e04d      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675e:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x41c>
 800676a:	e045      	b.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006772:	f7fd fa2f 	bl	8003bd4 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677a:	f7fd fa2b 	bl	8003bd4 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e036      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x44a>
 8006798:	e02e      	b.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e029      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d11c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d115      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ce:	4013      	ands	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10d      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d106      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40007000 	.word	0x40007000
 8006808:	40023800 	.word	0x40023800
 800680c:	42470060 	.word	0x42470060

08006810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0cc      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006824:	4b68      	ldr	r3, [pc, #416]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90c      	bls.n	800684c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006832:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b63      	ldr	r3, [pc, #396]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0b8      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d020      	beq.n	800689a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4a58      	ldr	r2, [pc, #352]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800686e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800687c:	4b53      	ldr	r3, [pc, #332]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4a52      	ldr	r2, [pc, #328]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006888:	4b50      	ldr	r3, [pc, #320]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	494d      	ldr	r1, [pc, #308]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d044      	beq.n	8006930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d107      	bne.n	80068be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ae:	4b47      	ldr	r3, [pc, #284]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d119      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e07f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d003      	beq.n	80068ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ce:	4b3f      	ldr	r3, [pc, #252]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e06f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068de:	4b3b      	ldr	r3, [pc, #236]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e067      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f023 0203 	bic.w	r2, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4934      	ldr	r1, [pc, #208]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006900:	f7fd f968 	bl	8003bd4 <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006906:	e00a      	b.n	800691e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fd f964 	bl	8003bd4 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f241 3288 	movw	r2, #5000	; 0x1388
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e04f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691e:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 020c 	and.w	r2, r3, #12
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	429a      	cmp	r2, r3
 800692e:	d1eb      	bne.n	8006908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20c      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e032      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4916      	ldr	r1, [pc, #88]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	490e      	ldr	r1, [pc, #56]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006996:	f000 f821 	bl	80069dc <HAL_RCC_GetSysClockFreq>
 800699a:	4601      	mov	r1, r0
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <HAL_RCC_ClockConfig+0x1c0>)
 80069a8:	5cd3      	ldrb	r3, [r2, r3]
 80069aa:	fa21 f303 	lsr.w	r3, r1, r3
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <HAL_RCC_ClockConfig+0x1c4>)
 80069b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <HAL_RCC_ClockConfig+0x1c8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fa fe5e 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40023c00 	.word	0x40023c00
 80069cc:	40023800 	.word	0x40023800
 80069d0:	08008b04 	.word	0x08008b04
 80069d4:	20000010 	.word	0x20000010
 80069d8:	20000090 	.word	0x20000090

080069dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	2300      	movs	r3, #0
 80069ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069f2:	4b63      	ldr	r3, [pc, #396]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d007      	beq.n	8006a0e <HAL_RCC_GetSysClockFreq+0x32>
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d008      	beq.n	8006a14 <HAL_RCC_GetSysClockFreq+0x38>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 80b4 	bne.w	8006b70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a08:	4b5e      	ldr	r3, [pc, #376]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a0a:	60bb      	str	r3, [r7, #8]
       break;
 8006a0c:	e0b3      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a0e:	4b5e      	ldr	r3, [pc, #376]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006a10:	60bb      	str	r3, [r7, #8]
      break;
 8006a12:	e0b0      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a14:	4b5a      	ldr	r3, [pc, #360]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a1e:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d04a      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a2a:	4b55      	ldr	r3, [pc, #340]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	099b      	lsrs	r3, r3, #6
 8006a30:	f04f 0400 	mov.w	r4, #0
 8006a34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	ea03 0501 	and.w	r5, r3, r1
 8006a40:	ea04 0602 	and.w	r6, r4, r2
 8006a44:	4629      	mov	r1, r5
 8006a46:	4632      	mov	r2, r6
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f04f 0400 	mov.w	r4, #0
 8006a50:	0154      	lsls	r4, r2, #5
 8006a52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a56:	014b      	lsls	r3, r1, #5
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	1b49      	subs	r1, r1, r5
 8006a5e:	eb62 0206 	sbc.w	r2, r2, r6
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	f04f 0400 	mov.w	r4, #0
 8006a6a:	0194      	lsls	r4, r2, #6
 8006a6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a70:	018b      	lsls	r3, r1, #6
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	eb64 0402 	sbc.w	r4, r4, r2
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	00e2      	lsls	r2, r4, #3
 8006a82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a86:	00d9      	lsls	r1, r3, #3
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4614      	mov	r4, r2
 8006a8c:	195b      	adds	r3, r3, r5
 8006a8e:	eb44 0406 	adc.w	r4, r4, r6
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	0262      	lsls	r2, r4, #9
 8006a9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006aa0:	0259      	lsls	r1, r3, #9
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f04f 0400 	mov.w	r4, #0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	f7f9 fb9a 	bl	80001ec <__aeabi_uldivmod>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e049      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac0:	4b2f      	ldr	r3, [pc, #188]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	099b      	lsrs	r3, r3, #6
 8006ac6:	f04f 0400 	mov.w	r4, #0
 8006aca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	ea03 0501 	and.w	r5, r3, r1
 8006ad6:	ea04 0602 	and.w	r6, r4, r2
 8006ada:	4629      	mov	r1, r5
 8006adc:	4632      	mov	r2, r6
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	f04f 0400 	mov.w	r4, #0
 8006ae6:	0154      	lsls	r4, r2, #5
 8006ae8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006aec:	014b      	lsls	r3, r1, #5
 8006aee:	4619      	mov	r1, r3
 8006af0:	4622      	mov	r2, r4
 8006af2:	1b49      	subs	r1, r1, r5
 8006af4:	eb62 0206 	sbc.w	r2, r2, r6
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	f04f 0400 	mov.w	r4, #0
 8006b00:	0194      	lsls	r4, r2, #6
 8006b02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b06:	018b      	lsls	r3, r1, #6
 8006b08:	1a5b      	subs	r3, r3, r1
 8006b0a:	eb64 0402 	sbc.w	r4, r4, r2
 8006b0e:	f04f 0100 	mov.w	r1, #0
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	00e2      	lsls	r2, r4, #3
 8006b18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b1c:	00d9      	lsls	r1, r3, #3
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4614      	mov	r4, r2
 8006b22:	195b      	adds	r3, r3, r5
 8006b24:	eb44 0406 	adc.w	r4, r4, r6
 8006b28:	f04f 0100 	mov.w	r1, #0
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	02a2      	lsls	r2, r4, #10
 8006b32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b36:	0299      	lsls	r1, r3, #10
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	4621      	mov	r1, r4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f04f 0400 	mov.w	r4, #0
 8006b46:	461a      	mov	r2, r3
 8006b48:	4623      	mov	r3, r4
 8006b4a:	f7f9 fb4f 	bl	80001ec <__aeabi_uldivmod>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	460c      	mov	r4, r1
 8006b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	60bb      	str	r3, [r7, #8]
      break;
 8006b6e:	e002      	b.n	8006b76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b72:	60bb      	str	r3, [r7, #8]
      break;
 8006b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b76:	68bb      	ldr	r3, [r7, #8]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	40023800 	.word	0x40023800
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	007a1200 	.word	0x007a1200

08006b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b92:	681b      	ldr	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000010 	.word	0x20000010

08006ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ba8:	f7ff fff0 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bac:	4601      	mov	r1, r0
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	0a9b      	lsrs	r3, r3, #10
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	4a03      	ldr	r2, [pc, #12]	; (8006bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	08008b14 	.word	0x08008b14

08006bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd0:	f7ff ffdc 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	0b5b      	lsrs	r3, r3, #13
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	4a03      	ldr	r2, [pc, #12]	; (8006bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be2:	5cd3      	ldrb	r3, [r2, r3]
 8006be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	08008b14 	.word	0x08008b14

08006bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	220f      	movs	r2, #15
 8006c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c04:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <HAL_RCC_GetClockConfig+0x5c>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 0203 	and.w	r2, r3, #3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <HAL_RCC_GetClockConfig+0x5c>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <HAL_RCC_GetClockConfig+0x5c>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <HAL_RCC_GetClockConfig+0x60>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 020f 	and.w	r2, r3, #15
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	601a      	str	r2, [r3, #0]
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40023800 	.word	0x40023800
 8006c54:	40023c00 	.word	0x40023c00

08006c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d075      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c8c:	4bad      	ldr	r3, [pc, #692]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c92:	f7fc ff9f 	bl	8003bd4 <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c9a:	f7fc ff9b 	bl	8003bd4 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e18b      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cac:	4ba6      	ldr	r3, [pc, #664]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	019a      	lsls	r2, r3, #6
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	071b      	lsls	r3, r3, #28
 8006cd0:	499d      	ldr	r1, [pc, #628]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01f      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ce4:	4b98      	ldr	r3, [pc, #608]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cea:	0f1b      	lsrs	r3, r3, #28
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	019a      	lsls	r2, r3, #6
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	071b      	lsls	r3, r3, #28
 8006d04:	4990      	ldr	r1, [pc, #576]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d0c:	4b8e      	ldr	r3, [pc, #568]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d12:	f023 021f 	bic.w	r2, r3, #31
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	498a      	ldr	r1, [pc, #552]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00d      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	019a      	lsls	r2, r3, #6
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	071b      	lsls	r3, r3, #28
 8006d44:	4980      	ldr	r1, [pc, #512]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d4c:	4b7d      	ldr	r3, [pc, #500]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d52:	f7fc ff3f 	bl	8003bd4 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d5a:	f7fc ff3b 	bl	8003bd4 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e12b      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d6c:	4b76      	ldr	r3, [pc, #472]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0f0      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d079      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d90:	4b6e      	ldr	r3, [pc, #440]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d96:	f7fc ff1d 	bl	8003bd4 <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d9e:	f7fc ff19 	bl	8003bd4 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e109      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006db0:	4b65      	ldr	r3, [pc, #404]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dbc:	d0ef      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d020      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dca:	4b5f      	ldr	r3, [pc, #380]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd0:	0f1b      	lsrs	r3, r3, #28
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	019a      	lsls	r2, r3, #6
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	061b      	lsls	r3, r3, #24
 8006de4:	431a      	orrs	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	071b      	lsls	r3, r3, #28
 8006dea:	4957      	ldr	r1, [pc, #348]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006df2:	4b55      	ldr	r3, [pc, #340]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	4950      	ldr	r1, [pc, #320]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01e      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e18:	4b4b      	ldr	r3, [pc, #300]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	019a      	lsls	r2, r3, #6
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	061b      	lsls	r3, r3, #24
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	071b      	lsls	r3, r3, #28
 8006e38:	4943      	ldr	r1, [pc, #268]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e40:	4b41      	ldr	r3, [pc, #260]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	493e      	ldr	r1, [pc, #248]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e56:	4b3d      	ldr	r3, [pc, #244]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e5c:	f7fc feba 	bl	8003bd4 <HAL_GetTick>
 8006e60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e64:	f7fc feb6 	bl	8003bd4 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e0a6      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e76:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e82:	d1ef      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 808d 	beq.w	8006fac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	4a2b      	ldr	r2, [pc, #172]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea2:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006eae:	4b28      	ldr	r3, [pc, #160]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a27      	ldr	r2, [pc, #156]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eba:	f7fc fe8b 	bl	8003bd4 <HAL_GetTick>
 8006ebe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ec2:	f7fc fe87 	bl	8003bd4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e077      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ee0:	4b19      	ldr	r3, [pc, #100]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d039      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d032      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f14:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d11e      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f26:	f7fc fe55 	bl	8003bd4 <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2c:	e014      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2e:	f7fc fe51 	bl	8003bd4 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d90b      	bls.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e03f      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006f44:	42470068 	.word	0x42470068
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	42470070 	.word	0x42470070
 8006f50:	40007000 	.word	0x40007000
 8006f54:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f58:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0e4      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f70:	d10d      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f86:	4911      	ldr	r1, [pc, #68]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	608b      	str	r3, [r1, #8]
 8006f8c:	e005      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	4a0e      	ldr	r2, [pc, #56]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f98:	6093      	str	r3, [r2, #8]
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa6:	4909      	ldr	r1, [pc, #36]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d004      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006fbe:	4b04      	ldr	r3, [pc, #16]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fc0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	424711e0 	.word	0x424711e0

08006fd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e025      	b.n	8007034 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7f9 fb97 	bl	8000730 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f001 fbef 	bl	80087f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	461a      	mov	r2, r3
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	f001 fc5a 	bl	80088de <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d101      	bne.n	8007058 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007054:	2302      	movs	r3, #2
 8007056:	e018      	b.n	800708a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fcb7 	bl	80089dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d104      	bne.n	8007080 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2205      	movs	r2, #5
 800707a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800707e:	e003      	b.n	8007088 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d101      	bne.n	80070ac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e00e      	b.n	80070ca <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fcca 	bl	8008a54 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e056      	b.n	8007192 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fa fa2c 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800711a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	ea42 0103 	orr.w	r1, r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	f003 0104 	and.w	r1, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e01a      	b.n	80071e2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fa fa11 	bl	80015ec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b088      	sub	sp, #32
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_SPI_Transmit+0x22>
 8007208:	2302      	movs	r3, #2
 800720a:	e11e      	b.n	800744a <HAL_SPI_Transmit+0x260>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007214:	f7fc fcde 	bl	8003bd4 <HAL_GetTick>
 8007218:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	d002      	beq.n	8007230 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800722a:	2302      	movs	r3, #2
 800722c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800722e:	e103      	b.n	8007438 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_SPI_Transmit+0x52>
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d102      	bne.n	8007242 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007240:	e0fa      	b.n	8007438 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2203      	movs	r2, #3
 8007246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d107      	bne.n	800729a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d007      	beq.n	80072b8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c0:	d14b      	bne.n	800735a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_SPI_Transmit+0xe6>
 80072ca:	8afb      	ldrh	r3, [r7, #22]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d13e      	bne.n	800734e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	881a      	ldrh	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	1c9a      	adds	r2, r3, #2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072f4:	e02b      	b.n	800734e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d112      	bne.n	800732a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	86da      	strh	r2, [r3, #54]	; 0x36
 8007328:	e011      	b.n	800734e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732a:	f7fc fc53 	bl	8003bd4 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d803      	bhi.n	8007342 <HAL_SPI_Transmit+0x158>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d102      	bne.n	8007348 <HAL_SPI_Transmit+0x15e>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800734c:	e074      	b.n	8007438 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1ce      	bne.n	80072f6 <HAL_SPI_Transmit+0x10c>
 8007358:	e04c      	b.n	80073f4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_SPI_Transmit+0x17e>
 8007362:	8afb      	ldrh	r3, [r7, #22]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d140      	bne.n	80073ea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800738e:	e02c      	b.n	80073ea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b02      	cmp	r3, #2
 800739c:	d113      	bne.n	80073c6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80073c4:	e011      	b.n	80073ea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c6:	f7fc fc05 	bl	8003bd4 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d803      	bhi.n	80073de <HAL_SPI_Transmit+0x1f4>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d102      	bne.n	80073e4 <HAL_SPI_Transmit+0x1fa>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073e8:	e026      	b.n	8007438 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1cd      	bne.n	8007390 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fbb3 	bl	8007b64 <SPI_EndRxTxTransaction>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2220      	movs	r2, #32
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007412:	2300      	movs	r3, #0
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e000      	b.n	8007438 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007448:	7ffb      	ldrb	r3, [r7, #31]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af02      	add	r7, sp, #8
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800746e:	d112      	bne.n	8007496 <HAL_SPI_Receive+0x44>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10e      	bne.n	8007496 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2204      	movs	r2, #4
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f8e9 	bl	8007664 <HAL_SPI_TransmitReceive>
 8007492:	4603      	mov	r3, r0
 8007494:	e0e2      	b.n	800765c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_SPI_Receive+0x52>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e0db      	b.n	800765c <HAL_SPI_Receive+0x20a>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ac:	f7fc fb92 	bl	8003bd4 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074be:	2302      	movs	r3, #2
 80074c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074c2:	e0c2      	b.n	800764a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_SPI_Receive+0x7e>
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d4:	e0b9      	b.n	800764a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2204      	movs	r2, #4
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	88fa      	ldrh	r2, [r7, #6]
 80074ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751c:	d107      	bne.n	800752e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d007      	beq.n	800754c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d162      	bne.n	800761a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007554:	e02e      	b.n	80075b4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d115      	bne.n	8007590 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f103 020c 	add.w	r2, r3, #12
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800758e:	e011      	b.n	80075b4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007590:	f7fc fb20 	bl	8003bd4 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d803      	bhi.n	80075a8 <HAL_SPI_Receive+0x156>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d102      	bne.n	80075ae <HAL_SPI_Receive+0x15c>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075b2:	e04a      	b.n	800764a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1cb      	bne.n	8007556 <HAL_SPI_Receive+0x104>
 80075be:	e031      	b.n	8007624 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d113      	bne.n	80075f6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	b292      	uxth	r2, r2
 80075da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	1c9a      	adds	r2, r3, #2
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075f4:	e011      	b.n	800761a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f6:	f7fc faed 	bl	8003bd4 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d803      	bhi.n	800760e <HAL_SPI_Receive+0x1bc>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d102      	bne.n	8007614 <HAL_SPI_Receive+0x1c2>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007618:	e017      	b.n	800764a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1cd      	bne.n	80075c0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa35 	bl	8007a98 <SPI_EndRxTransaction>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
 8007646:	e000      	b.n	800764a <HAL_SPI_Receive+0x1f8>
  }

error :
 8007648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007672:	2301      	movs	r3, #1
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_SPI_TransmitReceive+0x26>
 8007686:	2302      	movs	r3, #2
 8007688:	e18a      	b.n	80079a0 <HAL_SPI_TransmitReceive+0x33c>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007692:	f7fc fa9f 	bl	8003bd4 <HAL_GetTick>
 8007696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d00f      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x70>
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ba:	d107      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <HAL_SPI_TransmitReceive+0x68>
 80076c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d003      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076d2:	e15b      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x82>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x82>
 80076e0:	887b      	ldrh	r3, [r7, #2]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ec:	e14e      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d003      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2205      	movs	r2, #5
 80076fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	887a      	ldrh	r2, [r7, #2]
 8007712:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	887a      	ldrh	r2, [r7, #2]
 8007718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	887a      	ldrh	r2, [r7, #2]
 8007724:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	887a      	ldrh	r2, [r7, #2]
 800772a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d007      	beq.n	8007756 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775e:	d178      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_SPI_TransmitReceive+0x10a>
 8007768:	8b7b      	ldrh	r3, [r7, #26]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d166      	bne.n	800783c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007792:	e053      	b.n	800783c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d11b      	bne.n	80077da <HAL_SPI_TransmitReceive+0x176>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d016      	beq.n	80077da <HAL_SPI_TransmitReceive+0x176>
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d113      	bne.n	80077da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	881a      	ldrh	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	1c9a      	adds	r2, r3, #2
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d119      	bne.n	800781c <HAL_SPI_TransmitReceive+0x1b8>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d014      	beq.n	800781c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	b292      	uxth	r2, r2
 80077fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007818:	2301      	movs	r3, #1
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800781c:	f7fc f9da 	bl	8003bd4 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007828:	429a      	cmp	r2, r3
 800782a:	d807      	bhi.n	800783c <HAL_SPI_TransmitReceive+0x1d8>
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d003      	beq.n	800783c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800783a:	e0a7      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1a6      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x130>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1a1      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x130>
 8007850:	e07c      	b.n	800794c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_SPI_TransmitReceive+0x1fc>
 800785a:	8b7b      	ldrh	r3, [r7, #26]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d16b      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007886:	e057      	b.n	8007938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b02      	cmp	r3, #2
 8007894:	d11c      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x26c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x26c>
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d114      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d119      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x2ae>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d014      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800790e:	2301      	movs	r3, #1
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007912:	f7fc f95f 	bl	8003bd4 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791e:	429a      	cmp	r2, r3
 8007920:	d803      	bhi.n	800792a <HAL_SPI_TransmitReceive+0x2c6>
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d102      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x2cc>
 800792a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007936:	e029      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1a2      	bne.n	8007888 <HAL_SPI_TransmitReceive+0x224>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d19d      	bne.n	8007888 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800794c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f907 	bl	8007b64 <SPI_EndRxTxTransaction>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007968:	e010      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	e000      	b.n	800798c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800798a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800799c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3730      	adds	r7, #48	; 0x30
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079b6:	b2db      	uxtb	r3, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	4613      	mov	r3, r2
 80079d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079d4:	e04c      	b.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079dc:	d048      	beq.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079de:	f7fc f8f9 	bl	8003bd4 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d902      	bls.n	80079f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d13d      	bne.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0c:	d111      	bne.n	8007a32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a16:	d004      	beq.n	8007a22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a20:	d107      	bne.n	8007a32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a3a:	d10f      	bne.n	8007a5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e00f      	b.n	8007a90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d1a3      	bne.n	80079d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aac:	d111      	bne.n	8007ad2 <SPI_EndRxTransaction+0x3a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab6:	d004      	beq.n	8007ac2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac0:	d107      	bne.n	8007ad2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ada:	d12a      	bne.n	8007b32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae4:	d012      	beq.n	8007b0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	2180      	movs	r1, #128	; 0x80
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff ff67 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d02d      	beq.n	8007b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	f043 0220 	orr.w	r2, r3, #32
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e026      	b.n	8007b5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	2101      	movs	r1, #1
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff ff54 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01a      	beq.n	8007b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f043 0220 	orr.w	r2, r3, #32
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e013      	b.n	8007b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff ff41 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f043 0220 	orr.w	r2, r3, #32
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e000      	b.n	8007b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <SPI_EndRxTxTransaction+0x7c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1b      	ldr	r2, [pc, #108]	; (8007be4 <SPI_EndRxTxTransaction+0x80>)
 8007b76:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7a:	0d5b      	lsrs	r3, r3, #21
 8007b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b80:	fb02 f303 	mul.w	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8e:	d112      	bne.n	8007bb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff ff12 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d016      	beq.n	8007bd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007baa:	f043 0220 	orr.w	r2, r3, #32
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e00f      	b.n	8007bd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d0f2      	beq.n	8007bb6 <SPI_EndRxTxTransaction+0x52>
 8007bd0:	e000      	b.n	8007bd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bd2:	bf00      	nop
  }

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000010 	.word	0x20000010
 8007be4:	165e9f81 	.word	0x165e9f81

08007be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e01d      	b.n	8007c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f815 	bl	8007c3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4610      	mov	r0, r2
 8007c28:	f000 f968 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b06      	cmp	r3, #6
 8007c7a:	d007      	beq.n	8007c8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d122      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d11b      	bne.n	8007cf6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f06f 0202 	mvn.w	r2, #2
 8007cc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8ee 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007ce2:	e005      	b.n	8007cf0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8e0 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8f1 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d122      	bne.n	8007d4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d11b      	bne.n	8007d4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0204 	mvn.w	r2, #4
 8007d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f8c4 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007d36:	e005      	b.n	8007d44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f8b6 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8c7 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d122      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d11b      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f06f 0208 	mvn.w	r2, #8
 8007d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2204      	movs	r2, #4
 8007d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f89a 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007d8a:	e005      	b.n	8007d98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f88c 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f89d 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d122      	bne.n	8007df2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d11b      	bne.n	8007df2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f06f 0210 	mvn.w	r2, #16
 8007dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f870 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007dde:	e005      	b.n	8007dec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f862 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f873 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10e      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d107      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f06f 0201 	mvn.w	r2, #1
 8007e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7f9 f849 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d10e      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d107      	bne.n	8007e4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f903 	bl	8008050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d10e      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d107      	bne.n	8007e76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f838 	bl	8007ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d10e      	bne.n	8007ea2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d107      	bne.n	8007ea2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f06f 0220 	mvn.w	r2, #32
 8007e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f8cd 	bl	800803c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a40      	ldr	r2, [pc, #256]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d00f      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3d      	ldr	r2, [pc, #244]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00b      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3c      	ldr	r2, [pc, #240]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3b      	ldr	r2, [pc, #236]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d108      	bne.n	8007f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d02b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d027      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2c      	ldr	r2, [pc, #176]	; (8008014 <TIM_Base_SetConfig+0x118>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d023      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2b      	ldr	r2, [pc, #172]	; (8008018 <TIM_Base_SetConfig+0x11c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2a      	ldr	r2, [pc, #168]	; (800801c <TIM_Base_SetConfig+0x120>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d017      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a28      	ldr	r2, [pc, #160]	; (8008024 <TIM_Base_SetConfig+0x128>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a27      	ldr	r2, [pc, #156]	; (8008028 <TIM_Base_SetConfig+0x12c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00f      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <TIM_Base_SetConfig+0x130>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00b      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <TIM_Base_SetConfig+0x134>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a24      	ldr	r2, [pc, #144]	; (8008034 <TIM_Base_SetConfig+0x138>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a23      	ldr	r2, [pc, #140]	; (8008038 <TIM_Base_SetConfig+0x13c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <TIM_Base_SetConfig+0x114>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_Base_SetConfig+0xf8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a0c      	ldr	r2, [pc, #48]	; (8008020 <TIM_Base_SetConfig+0x124>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d103      	bne.n	8007ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	615a      	str	r2, [r3, #20]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40010400 	.word	0x40010400
 8008024:	40014000 	.word	0x40014000
 8008028:	40014400 	.word	0x40014400
 800802c:	40014800 	.word	0x40014800
 8008030:	40001800 	.word	0x40001800
 8008034:	40001c00 	.word	0x40001c00
 8008038:	40002000 	.word	0x40002000

0800803c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e03f      	b.n	80080f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7f9 fbc0 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2224      	movs	r2, #36	; 0x24
 8008094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f829 	bl	8008100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	431a      	orrs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008142:	f023 030c 	bic.w	r3, r3, #12
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	430b      	orrs	r3, r1
 800814e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	f040 818b 	bne.w	8008488 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4ac1      	ldr	r2, [pc, #772]	; (800847c <UART_SetConfig+0x37c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d005      	beq.n	8008188 <UART_SetConfig+0x88>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4abf      	ldr	r2, [pc, #764]	; (8008480 <UART_SetConfig+0x380>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f040 80bd 	bne.w	8008302 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fe fd20 	bl	8006bcc <HAL_RCC_GetPCLK2Freq>
 800818c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	461d      	mov	r5, r3
 8008192:	f04f 0600 	mov.w	r6, #0
 8008196:	46a8      	mov	r8, r5
 8008198:	46b1      	mov	r9, r6
 800819a:	eb18 0308 	adds.w	r3, r8, r8
 800819e:	eb49 0409 	adc.w	r4, r9, r9
 80081a2:	4698      	mov	r8, r3
 80081a4:	46a1      	mov	r9, r4
 80081a6:	eb18 0805 	adds.w	r8, r8, r5
 80081aa:	eb49 0906 	adc.w	r9, r9, r6
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081c2:	4688      	mov	r8, r1
 80081c4:	4691      	mov	r9, r2
 80081c6:	eb18 0005 	adds.w	r0, r8, r5
 80081ca:	eb49 0106 	adc.w	r1, r9, r6
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	461d      	mov	r5, r3
 80081d4:	f04f 0600 	mov.w	r6, #0
 80081d8:	196b      	adds	r3, r5, r5
 80081da:	eb46 0406 	adc.w	r4, r6, r6
 80081de:	461a      	mov	r2, r3
 80081e0:	4623      	mov	r3, r4
 80081e2:	f7f8 f803 	bl	80001ec <__aeabi_uldivmod>
 80081e6:	4603      	mov	r3, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	461a      	mov	r2, r3
 80081ec:	4ba5      	ldr	r3, [pc, #660]	; (8008484 <UART_SetConfig+0x384>)
 80081ee:	fba3 2302 	umull	r2, r3, r3, r2
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	461d      	mov	r5, r3
 80081fc:	f04f 0600 	mov.w	r6, #0
 8008200:	46a9      	mov	r9, r5
 8008202:	46b2      	mov	sl, r6
 8008204:	eb19 0309 	adds.w	r3, r9, r9
 8008208:	eb4a 040a 	adc.w	r4, sl, sl
 800820c:	4699      	mov	r9, r3
 800820e:	46a2      	mov	sl, r4
 8008210:	eb19 0905 	adds.w	r9, r9, r5
 8008214:	eb4a 0a06 	adc.w	sl, sl, r6
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800822c:	4689      	mov	r9, r1
 800822e:	4692      	mov	sl, r2
 8008230:	eb19 0005 	adds.w	r0, r9, r5
 8008234:	eb4a 0106 	adc.w	r1, sl, r6
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	461d      	mov	r5, r3
 800823e:	f04f 0600 	mov.w	r6, #0
 8008242:	196b      	adds	r3, r5, r5
 8008244:	eb46 0406 	adc.w	r4, r6, r6
 8008248:	461a      	mov	r2, r3
 800824a:	4623      	mov	r3, r4
 800824c:	f7f7 ffce 	bl	80001ec <__aeabi_uldivmod>
 8008250:	4603      	mov	r3, r0
 8008252:	460c      	mov	r4, r1
 8008254:	461a      	mov	r2, r3
 8008256:	4b8b      	ldr	r3, [pc, #556]	; (8008484 <UART_SetConfig+0x384>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	3332      	adds	r3, #50	; 0x32
 800826a:	4a86      	ldr	r2, [pc, #536]	; (8008484 <UART_SetConfig+0x384>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008278:	4498      	add	r8, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	461d      	mov	r5, r3
 800827e:	f04f 0600 	mov.w	r6, #0
 8008282:	46a9      	mov	r9, r5
 8008284:	46b2      	mov	sl, r6
 8008286:	eb19 0309 	adds.w	r3, r9, r9
 800828a:	eb4a 040a 	adc.w	r4, sl, sl
 800828e:	4699      	mov	r9, r3
 8008290:	46a2      	mov	sl, r4
 8008292:	eb19 0905 	adds.w	r9, r9, r5
 8008296:	eb4a 0a06 	adc.w	sl, sl, r6
 800829a:	f04f 0100 	mov.w	r1, #0
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082ae:	4689      	mov	r9, r1
 80082b0:	4692      	mov	sl, r2
 80082b2:	eb19 0005 	adds.w	r0, r9, r5
 80082b6:	eb4a 0106 	adc.w	r1, sl, r6
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	461d      	mov	r5, r3
 80082c0:	f04f 0600 	mov.w	r6, #0
 80082c4:	196b      	adds	r3, r5, r5
 80082c6:	eb46 0406 	adc.w	r4, r6, r6
 80082ca:	461a      	mov	r2, r3
 80082cc:	4623      	mov	r3, r4
 80082ce:	f7f7 ff8d 	bl	80001ec <__aeabi_uldivmod>
 80082d2:	4603      	mov	r3, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	461a      	mov	r2, r3
 80082d8:	4b6a      	ldr	r3, [pc, #424]	; (8008484 <UART_SetConfig+0x384>)
 80082da:	fba3 1302 	umull	r1, r3, r3, r2
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	2164      	movs	r1, #100	; 0x64
 80082e2:	fb01 f303 	mul.w	r3, r1, r3
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	3332      	adds	r3, #50	; 0x32
 80082ec:	4a65      	ldr	r2, [pc, #404]	; (8008484 <UART_SetConfig+0x384>)
 80082ee:	fba2 2303 	umull	r2, r3, r2, r3
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	f003 0207 	and.w	r2, r3, #7
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4442      	add	r2, r8
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	e26f      	b.n	80087e2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008302:	f7fe fc4f 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8008306:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	461d      	mov	r5, r3
 800830c:	f04f 0600 	mov.w	r6, #0
 8008310:	46a8      	mov	r8, r5
 8008312:	46b1      	mov	r9, r6
 8008314:	eb18 0308 	adds.w	r3, r8, r8
 8008318:	eb49 0409 	adc.w	r4, r9, r9
 800831c:	4698      	mov	r8, r3
 800831e:	46a1      	mov	r9, r4
 8008320:	eb18 0805 	adds.w	r8, r8, r5
 8008324:	eb49 0906 	adc.w	r9, r9, r6
 8008328:	f04f 0100 	mov.w	r1, #0
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008334:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008338:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800833c:	4688      	mov	r8, r1
 800833e:	4691      	mov	r9, r2
 8008340:	eb18 0005 	adds.w	r0, r8, r5
 8008344:	eb49 0106 	adc.w	r1, r9, r6
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	461d      	mov	r5, r3
 800834e:	f04f 0600 	mov.w	r6, #0
 8008352:	196b      	adds	r3, r5, r5
 8008354:	eb46 0406 	adc.w	r4, r6, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4623      	mov	r3, r4
 800835c:	f7f7 ff46 	bl	80001ec <__aeabi_uldivmod>
 8008360:	4603      	mov	r3, r0
 8008362:	460c      	mov	r4, r1
 8008364:	461a      	mov	r2, r3
 8008366:	4b47      	ldr	r3, [pc, #284]	; (8008484 <UART_SetConfig+0x384>)
 8008368:	fba3 2302 	umull	r2, r3, r3, r2
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	461d      	mov	r5, r3
 8008376:	f04f 0600 	mov.w	r6, #0
 800837a:	46a9      	mov	r9, r5
 800837c:	46b2      	mov	sl, r6
 800837e:	eb19 0309 	adds.w	r3, r9, r9
 8008382:	eb4a 040a 	adc.w	r4, sl, sl
 8008386:	4699      	mov	r9, r3
 8008388:	46a2      	mov	sl, r4
 800838a:	eb19 0905 	adds.w	r9, r9, r5
 800838e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008392:	f04f 0100 	mov.w	r1, #0
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800839e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083a6:	4689      	mov	r9, r1
 80083a8:	4692      	mov	sl, r2
 80083aa:	eb19 0005 	adds.w	r0, r9, r5
 80083ae:	eb4a 0106 	adc.w	r1, sl, r6
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	461d      	mov	r5, r3
 80083b8:	f04f 0600 	mov.w	r6, #0
 80083bc:	196b      	adds	r3, r5, r5
 80083be:	eb46 0406 	adc.w	r4, r6, r6
 80083c2:	461a      	mov	r2, r3
 80083c4:	4623      	mov	r3, r4
 80083c6:	f7f7 ff11 	bl	80001ec <__aeabi_uldivmod>
 80083ca:	4603      	mov	r3, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	461a      	mov	r2, r3
 80083d0:	4b2c      	ldr	r3, [pc, #176]	; (8008484 <UART_SetConfig+0x384>)
 80083d2:	fba3 1302 	umull	r1, r3, r3, r2
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2164      	movs	r1, #100	; 0x64
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	3332      	adds	r3, #50	; 0x32
 80083e4:	4a27      	ldr	r2, [pc, #156]	; (8008484 <UART_SetConfig+0x384>)
 80083e6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083f2:	4498      	add	r8, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	461d      	mov	r5, r3
 80083f8:	f04f 0600 	mov.w	r6, #0
 80083fc:	46a9      	mov	r9, r5
 80083fe:	46b2      	mov	sl, r6
 8008400:	eb19 0309 	adds.w	r3, r9, r9
 8008404:	eb4a 040a 	adc.w	r4, sl, sl
 8008408:	4699      	mov	r9, r3
 800840a:	46a2      	mov	sl, r4
 800840c:	eb19 0905 	adds.w	r9, r9, r5
 8008410:	eb4a 0a06 	adc.w	sl, sl, r6
 8008414:	f04f 0100 	mov.w	r1, #0
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008428:	4689      	mov	r9, r1
 800842a:	4692      	mov	sl, r2
 800842c:	eb19 0005 	adds.w	r0, r9, r5
 8008430:	eb4a 0106 	adc.w	r1, sl, r6
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	461d      	mov	r5, r3
 800843a:	f04f 0600 	mov.w	r6, #0
 800843e:	196b      	adds	r3, r5, r5
 8008440:	eb46 0406 	adc.w	r4, r6, r6
 8008444:	461a      	mov	r2, r3
 8008446:	4623      	mov	r3, r4
 8008448:	f7f7 fed0 	bl	80001ec <__aeabi_uldivmod>
 800844c:	4603      	mov	r3, r0
 800844e:	460c      	mov	r4, r1
 8008450:	461a      	mov	r2, r3
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <UART_SetConfig+0x384>)
 8008454:	fba3 1302 	umull	r1, r3, r3, r2
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	2164      	movs	r1, #100	; 0x64
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	3332      	adds	r3, #50	; 0x32
 8008466:	4a07      	ldr	r2, [pc, #28]	; (8008484 <UART_SetConfig+0x384>)
 8008468:	fba2 2303 	umull	r2, r3, r2, r3
 800846c:	095b      	lsrs	r3, r3, #5
 800846e:	f003 0207 	and.w	r2, r3, #7
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4442      	add	r2, r8
 8008478:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800847a:	e1b2      	b.n	80087e2 <UART_SetConfig+0x6e2>
 800847c:	40011000 	.word	0x40011000
 8008480:	40011400 	.word	0x40011400
 8008484:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4ad7      	ldr	r2, [pc, #860]	; (80087ec <UART_SetConfig+0x6ec>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d005      	beq.n	800849e <UART_SetConfig+0x39e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4ad6      	ldr	r2, [pc, #856]	; (80087f0 <UART_SetConfig+0x6f0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	f040 80d1 	bne.w	8008640 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800849e:	f7fe fb95 	bl	8006bcc <HAL_RCC_GetPCLK2Freq>
 80084a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	469a      	mov	sl, r3
 80084a8:	f04f 0b00 	mov.w	fp, #0
 80084ac:	46d0      	mov	r8, sl
 80084ae:	46d9      	mov	r9, fp
 80084b0:	eb18 0308 	adds.w	r3, r8, r8
 80084b4:	eb49 0409 	adc.w	r4, r9, r9
 80084b8:	4698      	mov	r8, r3
 80084ba:	46a1      	mov	r9, r4
 80084bc:	eb18 080a 	adds.w	r8, r8, sl
 80084c0:	eb49 090b 	adc.w	r9, r9, fp
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80084d8:	4688      	mov	r8, r1
 80084da:	4691      	mov	r9, r2
 80084dc:	eb1a 0508 	adds.w	r5, sl, r8
 80084e0:	eb4b 0609 	adc.w	r6, fp, r9
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4619      	mov	r1, r3
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	f04f 0400 	mov.w	r4, #0
 80084f6:	0094      	lsls	r4, r2, #2
 80084f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084fc:	008b      	lsls	r3, r1, #2
 80084fe:	461a      	mov	r2, r3
 8008500:	4623      	mov	r3, r4
 8008502:	4628      	mov	r0, r5
 8008504:	4631      	mov	r1, r6
 8008506:	f7f7 fe71 	bl	80001ec <__aeabi_uldivmod>
 800850a:	4603      	mov	r3, r0
 800850c:	460c      	mov	r4, r1
 800850e:	461a      	mov	r2, r3
 8008510:	4bb8      	ldr	r3, [pc, #736]	; (80087f4 <UART_SetConfig+0x6f4>)
 8008512:	fba3 2302 	umull	r2, r3, r3, r2
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	469b      	mov	fp, r3
 8008520:	f04f 0c00 	mov.w	ip, #0
 8008524:	46d9      	mov	r9, fp
 8008526:	46e2      	mov	sl, ip
 8008528:	eb19 0309 	adds.w	r3, r9, r9
 800852c:	eb4a 040a 	adc.w	r4, sl, sl
 8008530:	4699      	mov	r9, r3
 8008532:	46a2      	mov	sl, r4
 8008534:	eb19 090b 	adds.w	r9, r9, fp
 8008538:	eb4a 0a0c 	adc.w	sl, sl, ip
 800853c:	f04f 0100 	mov.w	r1, #0
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800854c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008550:	4689      	mov	r9, r1
 8008552:	4692      	mov	sl, r2
 8008554:	eb1b 0509 	adds.w	r5, fp, r9
 8008558:	eb4c 060a 	adc.w	r6, ip, sl
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4619      	mov	r1, r3
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	f04f 0400 	mov.w	r4, #0
 800856e:	0094      	lsls	r4, r2, #2
 8008570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008574:	008b      	lsls	r3, r1, #2
 8008576:	461a      	mov	r2, r3
 8008578:	4623      	mov	r3, r4
 800857a:	4628      	mov	r0, r5
 800857c:	4631      	mov	r1, r6
 800857e:	f7f7 fe35 	bl	80001ec <__aeabi_uldivmod>
 8008582:	4603      	mov	r3, r0
 8008584:	460c      	mov	r4, r1
 8008586:	461a      	mov	r2, r3
 8008588:	4b9a      	ldr	r3, [pc, #616]	; (80087f4 <UART_SetConfig+0x6f4>)
 800858a:	fba3 1302 	umull	r1, r3, r3, r2
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	2164      	movs	r1, #100	; 0x64
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	3332      	adds	r3, #50	; 0x32
 800859c:	4a95      	ldr	r2, [pc, #596]	; (80087f4 <UART_SetConfig+0x6f4>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a8:	4498      	add	r8, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	469b      	mov	fp, r3
 80085ae:	f04f 0c00 	mov.w	ip, #0
 80085b2:	46d9      	mov	r9, fp
 80085b4:	46e2      	mov	sl, ip
 80085b6:	eb19 0309 	adds.w	r3, r9, r9
 80085ba:	eb4a 040a 	adc.w	r4, sl, sl
 80085be:	4699      	mov	r9, r3
 80085c0:	46a2      	mov	sl, r4
 80085c2:	eb19 090b 	adds.w	r9, r9, fp
 80085c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80085ca:	f04f 0100 	mov.w	r1, #0
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085de:	4689      	mov	r9, r1
 80085e0:	4692      	mov	sl, r2
 80085e2:	eb1b 0509 	adds.w	r5, fp, r9
 80085e6:	eb4c 060a 	adc.w	r6, ip, sl
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	4619      	mov	r1, r3
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	f04f 0400 	mov.w	r4, #0
 80085fc:	0094      	lsls	r4, r2, #2
 80085fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008602:	008b      	lsls	r3, r1, #2
 8008604:	461a      	mov	r2, r3
 8008606:	4623      	mov	r3, r4
 8008608:	4628      	mov	r0, r5
 800860a:	4631      	mov	r1, r6
 800860c:	f7f7 fdee 	bl	80001ec <__aeabi_uldivmod>
 8008610:	4603      	mov	r3, r0
 8008612:	460c      	mov	r4, r1
 8008614:	461a      	mov	r2, r3
 8008616:	4b77      	ldr	r3, [pc, #476]	; (80087f4 <UART_SetConfig+0x6f4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	; 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	3332      	adds	r3, #50	; 0x32
 800862a:	4a72      	ldr	r2, [pc, #456]	; (80087f4 <UART_SetConfig+0x6f4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4442      	add	r2, r8
 800863c:	609a      	str	r2, [r3, #8]
 800863e:	e0d0      	b.n	80087e2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008640:	f7fe fab0 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8008644:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	469a      	mov	sl, r3
 800864a:	f04f 0b00 	mov.w	fp, #0
 800864e:	46d0      	mov	r8, sl
 8008650:	46d9      	mov	r9, fp
 8008652:	eb18 0308 	adds.w	r3, r8, r8
 8008656:	eb49 0409 	adc.w	r4, r9, r9
 800865a:	4698      	mov	r8, r3
 800865c:	46a1      	mov	r9, r4
 800865e:	eb18 080a 	adds.w	r8, r8, sl
 8008662:	eb49 090b 	adc.w	r9, r9, fp
 8008666:	f04f 0100 	mov.w	r1, #0
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008672:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008676:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800867a:	4688      	mov	r8, r1
 800867c:	4691      	mov	r9, r2
 800867e:	eb1a 0508 	adds.w	r5, sl, r8
 8008682:	eb4b 0609 	adc.w	r6, fp, r9
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4619      	mov	r1, r3
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	f04f 0400 	mov.w	r4, #0
 8008698:	0094      	lsls	r4, r2, #2
 800869a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800869e:	008b      	lsls	r3, r1, #2
 80086a0:	461a      	mov	r2, r3
 80086a2:	4623      	mov	r3, r4
 80086a4:	4628      	mov	r0, r5
 80086a6:	4631      	mov	r1, r6
 80086a8:	f7f7 fda0 	bl	80001ec <__aeabi_uldivmod>
 80086ac:	4603      	mov	r3, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	461a      	mov	r2, r3
 80086b2:	4b50      	ldr	r3, [pc, #320]	; (80087f4 <UART_SetConfig+0x6f4>)
 80086b4:	fba3 2302 	umull	r2, r3, r3, r2
 80086b8:	095b      	lsrs	r3, r3, #5
 80086ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	469b      	mov	fp, r3
 80086c2:	f04f 0c00 	mov.w	ip, #0
 80086c6:	46d9      	mov	r9, fp
 80086c8:	46e2      	mov	sl, ip
 80086ca:	eb19 0309 	adds.w	r3, r9, r9
 80086ce:	eb4a 040a 	adc.w	r4, sl, sl
 80086d2:	4699      	mov	r9, r3
 80086d4:	46a2      	mov	sl, r4
 80086d6:	eb19 090b 	adds.w	r9, r9, fp
 80086da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f2:	4689      	mov	r9, r1
 80086f4:	4692      	mov	sl, r2
 80086f6:	eb1b 0509 	adds.w	r5, fp, r9
 80086fa:	eb4c 060a 	adc.w	r6, ip, sl
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	4619      	mov	r1, r3
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	f04f 0400 	mov.w	r4, #0
 8008710:	0094      	lsls	r4, r2, #2
 8008712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008716:	008b      	lsls	r3, r1, #2
 8008718:	461a      	mov	r2, r3
 800871a:	4623      	mov	r3, r4
 800871c:	4628      	mov	r0, r5
 800871e:	4631      	mov	r1, r6
 8008720:	f7f7 fd64 	bl	80001ec <__aeabi_uldivmod>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	461a      	mov	r2, r3
 800872a:	4b32      	ldr	r3, [pc, #200]	; (80087f4 <UART_SetConfig+0x6f4>)
 800872c:	fba3 1302 	umull	r1, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	3332      	adds	r3, #50	; 0x32
 800873e:	4a2d      	ldr	r2, [pc, #180]	; (80087f4 <UART_SetConfig+0x6f4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800874a:	4498      	add	r8, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	469b      	mov	fp, r3
 8008750:	f04f 0c00 	mov.w	ip, #0
 8008754:	46d9      	mov	r9, fp
 8008756:	46e2      	mov	sl, ip
 8008758:	eb19 0309 	adds.w	r3, r9, r9
 800875c:	eb4a 040a 	adc.w	r4, sl, sl
 8008760:	4699      	mov	r9, r3
 8008762:	46a2      	mov	sl, r4
 8008764:	eb19 090b 	adds.w	r9, r9, fp
 8008768:	eb4a 0a0c 	adc.w	sl, sl, ip
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800877c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008780:	4689      	mov	r9, r1
 8008782:	4692      	mov	sl, r2
 8008784:	eb1b 0509 	adds.w	r5, fp, r9
 8008788:	eb4c 060a 	adc.w	r6, ip, sl
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	4619      	mov	r1, r3
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f04f 0400 	mov.w	r4, #0
 800879e:	0094      	lsls	r4, r2, #2
 80087a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087a4:	008b      	lsls	r3, r1, #2
 80087a6:	461a      	mov	r2, r3
 80087a8:	4623      	mov	r3, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	4631      	mov	r1, r6
 80087ae:	f7f7 fd1d 	bl	80001ec <__aeabi_uldivmod>
 80087b2:	4603      	mov	r3, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <UART_SetConfig+0x6f4>)
 80087ba:	fba3 1302 	umull	r1, r3, r3, r2
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	2164      	movs	r1, #100	; 0x64
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	3332      	adds	r3, #50	; 0x32
 80087cc:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <UART_SetConfig+0x6f4>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	f003 020f 	and.w	r2, r3, #15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4442      	add	r2, r8
 80087de:	609a      	str	r2, [r3, #8]
}
 80087e0:	e7ff      	b.n	80087e2 <UART_SetConfig+0x6e2>
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	40011000 	.word	0x40011000
 80087f0:	40011400 	.word	0x40011400
 80087f4:	51eb851f 	.word	0x51eb851f

080087f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d029      	beq.n	8008866 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800881e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008822:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800882c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008832:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008838:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800883e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008844:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800884a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008850:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008856:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e034      	b.n	80088d0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008872:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800887c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008882:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008896:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800889a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088a4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80088aa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80088b0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80088b6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80088bc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088de:	b480      	push	{r7}
 80088e0:	b087      	sub	sp, #28
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d02e      	beq.n	8008956 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008904:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008914:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	3b01      	subs	r3, #1
 800891c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800891e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	3b01      	subs	r3, #1
 8008926:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008928:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	3b01      	subs	r3, #1
 8008930:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008932:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	3b01      	subs	r3, #1
 800893a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800893c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	3b01      	subs	r3, #1
 8008944:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008946:	4313      	orrs	r3, r2
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	609a      	str	r2, [r3, #8]
 8008954:	e03b      	b.n	80089ce <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008966:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	3b01      	subs	r3, #1
 800896e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	3b01      	subs	r3, #1
 8008976:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008978:	4313      	orrs	r3, r2
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800898c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	3b01      	subs	r3, #1
 800899a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800899c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80089a6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80089b0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80089ba:	4313      	orrs	r3, r2
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80089f8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008a02:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008a14:	f7fb f8de 	bl	8003bd4 <HAL_GetTick>
 8008a18:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008a1a:	e010      	b.n	8008a3e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d00c      	beq.n	8008a3e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <FMC_SDRAM_SendCommand+0x5e>
 8008a2a:	f7fb f8d3 	bl	8003bd4 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d201      	bcs.n	8008a3e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e006      	b.n	8008a4c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d0e8      	beq.n	8008a1c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <__libc_init_array>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0d      	ldr	r6, [pc, #52]	; (8008ab4 <__libc_init_array+0x38>)
 8008a80:	4c0d      	ldr	r4, [pc, #52]	; (8008ab8 <__libc_init_array+0x3c>)
 8008a82:	1ba4      	subs	r4, r4, r6
 8008a84:	10a4      	asrs	r4, r4, #2
 8008a86:	2500      	movs	r5, #0
 8008a88:	42a5      	cmp	r5, r4
 8008a8a:	d109      	bne.n	8008aa0 <__libc_init_array+0x24>
 8008a8c:	4e0b      	ldr	r6, [pc, #44]	; (8008abc <__libc_init_array+0x40>)
 8008a8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ac0 <__libc_init_array+0x44>)
 8008a90:	f000 f820 	bl	8008ad4 <_init>
 8008a94:	1ba4      	subs	r4, r4, r6
 8008a96:	10a4      	asrs	r4, r4, #2
 8008a98:	2500      	movs	r5, #0
 8008a9a:	42a5      	cmp	r5, r4
 8008a9c:	d105      	bne.n	8008aaa <__libc_init_array+0x2e>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aa4:	4798      	blx	r3
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	e7ee      	b.n	8008a88 <__libc_init_array+0xc>
 8008aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aae:	4798      	blx	r3
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	e7f2      	b.n	8008a9a <__libc_init_array+0x1e>
 8008ab4:	0800b1c4 	.word	0x0800b1c4
 8008ab8:	0800b1c4 	.word	0x0800b1c4
 8008abc:	0800b1c4 	.word	0x0800b1c4
 8008ac0:	0800b1c8 	.word	0x0800b1c8

08008ac4 <memset>:
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d100      	bne.n	8008ace <memset+0xa>
 8008acc:	4770      	bx	lr
 8008ace:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad2:	e7f9      	b.n	8008ac8 <memset+0x4>

08008ad4 <_init>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr

08008ae0 <_fini>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr
