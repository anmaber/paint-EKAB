
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026c8  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e0  080093e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e8  080093e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080093f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000005c  0800944c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800944c  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c64f  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e03  00000000  00000000  0003c6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a20  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00041f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271e3  00000000  00000000  00043718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001739e  00000000  00000000  0006a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2ad0  00000000  00000000  00081c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164769  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  001647e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006d00 	.word	0x08006d00

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08006d00 	.word	0x08006d00

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <MX_DMA2D_Init+0x38>)
 80004f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004fc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_DMA2D_Init+0x34>)
 800050c:	f002 fdf8 	bl	8003100 <HAL_DMA2D_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000516:	f000 fcb1 	bl	8000e7c <Error_Handler>
  }

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000224 	.word	0x20000224
 8000524:	4002b000 	.word	0x4002b000

08000528 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_DMA2D_MspInit+0x3c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10d      	bne.n	8000556 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	4002b000 	.word	0x4002b000
 8000568:	40023800 	.word	0x40023800

0800056c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_FMC_Init+0x98>)
 8000586:	4a20      	ldr	r2, [pc, #128]	; (8000608 <MX_FMC_Init+0x9c>)
 8000588:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_FMC_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_FMC_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_FMC_Init+0x98>)
 8000598:	2204      	movs	r2, #4
 800059a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_FMC_Init+0x98>)
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_FMC_Init+0x98>)
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_FMC_Init+0x98>)
 80005aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_FMC_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_FMC_Init+0x98>)
 80005b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_FMC_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_FMC_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80005da:	2303      	movs	r3, #3
 80005dc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_FMC_Init+0x98>)
 80005ec:	f004 fe08 	bl	8005200 <HAL_SDRAM_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 80005f6:	f000 fc41 	bl	8000e7c <Error_Handler>
  }

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000264 	.word	0x20000264
 8000608:	a0000140 	.word	0xa0000140

0800060c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_FMC_MspInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d16f      	bne.n	8000708 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <HAL_FMC_MspInit+0x104>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6393      	str	r3, [r2, #56]	; 0x38
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800064a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800064e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800065c:	230c      	movs	r3, #12
 800065e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <HAL_FMC_MspInit+0x10c>)
 8000666:	f002 ffd7 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067a:	230c      	movs	r3, #12
 800067c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <HAL_FMC_MspInit+0x110>)
 8000684:	f002 ffc8 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8000688:	f248 1333 	movw	r3, #33075	; 0x8133
 800068c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069a:	230c      	movs	r3, #12
 800069c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <HAL_FMC_MspInit+0x114>)
 80006a4:	f002 ffb8 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80006a8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80006ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ba:	230c      	movs	r3, #12
 80006bc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <HAL_FMC_MspInit+0x118>)
 80006c4:	f002 ffa8 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80006c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80006cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006da:	230c      	movs	r3, #12
 80006dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <HAL_FMC_MspInit+0x11c>)
 80006e4:	f002 ff98 	bl	8003618 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f8:	230c      	movs	r3, #12
 80006fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <HAL_FMC_MspInit+0x120>)
 8000702:	f002 ff89 	bl	8003618 <HAL_GPIO_Init>
 8000706:	e000      	b.n	800070a <HAL_FMC_MspInit+0xfe>
    return;
 8000708:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	40023800 	.word	0x40023800
 8000718:	40021400 	.word	0x40021400
 800071c:	40020800 	.word	0x40020800
 8000720:	40021800 	.word	0x40021800
 8000724:	40021000 	.word	0x40021000
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40020400 	.word	0x40020400

08000730 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000738:	f7ff ff68 	bl	800060c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <MX_GPIO_Init+0xf4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0xf4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a32      	ldr	r2, [pc, #200]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <MX_GPIO_Init+0xf4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

}
 800082a:	bf00      	nop
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C3_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C3_Init+0x74>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_I2C3_Init+0x74>)
 800087a:	f003 f99b 	bl	8003bb4 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 fafa 	bl	8000e7c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C3_Init+0x74>)
 800088c:	f003 faca 	bl	8003e24 <HAL_I2CEx_ConfigAnalogFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 faf1 	bl	8000e7c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C3_Init+0x74>)
 800089e:	f003 fafd 	bl	8003e9c <HAL_I2CEx_ConfigDigitalFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fae8 	bl	8000e7c <Error_Handler>
  }

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000298 	.word	0x20000298
 80008b4:	40005c00 	.word	0x40005c00
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_I2C_MspInit+0xc4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d14b      	bne.n	8000976 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091c:	2312      	movs	r3, #18
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000928:	2304      	movs	r3, #4
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <HAL_I2C_MspInit+0xcc>)
 8000934:	f002 fe70 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800094a:	2304      	movs	r3, #4
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <HAL_I2C_MspInit+0xd0>)
 8000956:	f002 fe5f 	bl	8003618 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005c00 	.word	0x40005c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09a      	sub	sp, #104	; 0x68
 8000994:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099a:	2234      	movs	r2, #52	; 0x34
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f006 f9a6 	bl	8006cf0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f006 f9a0 	bl	8006cf0 <memset>

  hltdc.Instance = LTDC;
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009b2:	4a4f      	ldr	r2, [pc, #316]	; (8000af0 <MX_LTDC_Init+0x160>)
 80009b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009b6:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009c2:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009c8:	4b48      	ldr	r3, [pc, #288]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80009ce:	4b47      	ldr	r3, [pc, #284]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80009d4:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009dc:	220e      	movs	r2, #14
 80009de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009e8:	f240 1225 	movw	r2, #293	; 0x125
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009f0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009f8:	f240 122b 	movw	r2, #299	; 0x12b
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a00:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a20:	f003 fa7c 	bl	8003f1c <HAL_LTDC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a2a:	f000 fa27 	bl	8000e7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a50:	2305      	movs	r3, #5
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481c      	ldr	r0, [pc, #112]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a7c:	f003 fb1e 	bl	80040bc <HAL_LTDC_ConfigLayer>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a86:	f000 f9f9 	bl	8000e7c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aaa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aac:	2305      	movs	r3, #5
 8000aae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000ad6:	f003 faf1 	bl	80040bc <HAL_LTDC_ConfigLayer>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ae0:	f000 f9cc 	bl	8000e7c <Error_Handler>
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3768      	adds	r7, #104	; 0x68
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200002ec 	.word	0x200002ec
 8000af0:	40016800 	.word	0x40016800

08000af4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a77      	ldr	r2, [pc, #476]	; (8000cf0 <HAL_LTDC_MspInit+0x1fc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f040 80e8 	bne.w	8000ce8 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	4b75      	ldr	r3, [pc, #468]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a74      	ldr	r2, [pc, #464]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a6d      	ldr	r2, [pc, #436]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a66      	ldr	r2, [pc, #408]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a5f      	ldr	r2, [pc, #380]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b5d      	ldr	r3, [pc, #372]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a58      	ldr	r2, [pc, #352]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b48      	ldr	r3, [pc, #288]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	230e      	movs	r3, #14
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483f      	ldr	r0, [pc, #252]	; (8000cf8 <HAL_LTDC_MspInit+0x204>)
 8000bfa:	f002 fd0d 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000bfe:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c10:	230e      	movs	r3, #14
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4838      	ldr	r0, [pc, #224]	; (8000cfc <HAL_LTDC_MspInit+0x208>)
 8000c1c:	f002 fcfc 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c20:	2303      	movs	r3, #3
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c30:	2309      	movs	r3, #9
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <HAL_LTDC_MspInit+0x20c>)
 8000c3c:	f002 fcec 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000c40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c52:	230e      	movs	r3, #14
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4828      	ldr	r0, [pc, #160]	; (8000d00 <HAL_LTDC_MspInit+0x20c>)
 8000c5e:	f002 fcdb 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000c62:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4821      	ldr	r0, [pc, #132]	; (8000d04 <HAL_LTDC_MspInit+0x210>)
 8000c80:	f002 fcca 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000c84:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c96:	230e      	movs	r3, #14
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <HAL_LTDC_MspInit+0x214>)
 8000ca2:	f002 fcb9 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ca6:	2348      	movs	r3, #72	; 0x48
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb6:	230e      	movs	r3, #14
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HAL_LTDC_MspInit+0x218>)
 8000cc2:	f002 fca9 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <HAL_LTDC_MspInit+0x210>)
 8000ce4:	f002 fc98 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40016800 	.word	0x40016800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021400 	.word	0x40021400
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40021800 	.word	0x40021800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f001 fef2 	bl	8002afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f814 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fd12 	bl	8000744 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000d20:	f7ff fbe4 	bl	80004ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d24:	f7ff fc22 	bl	800056c <MX_FMC_Init>
  MX_I2C3_Init();
 8000d28:	f7ff fd88 	bl	800083c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000d2c:	f7ff fe30 	bl	8000990 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000d30:	f000 f930 	bl	8000f94 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000d34:	f000 fa94 	bl	8001260 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initLCD();
 8000d38:	f000 f8a7 	bl	8000e8a <initLCD>
  printHelloScreen();
 8000d3c:	f000 f8b6 	bl	8000eac <printHelloScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <main+0x30>
	...

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0a0      	sub	sp, #128	; 0x80
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d4e:	2230      	movs	r2, #48	; 0x30
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 ffcc 	bl	8006cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2230      	movs	r2, #48	; 0x30
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 ffbd 	bl	8006cf0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <SystemClock_Config+0x10c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <SystemClock_Config+0x10c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <SystemClock_Config+0x10c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <SystemClock_Config+0x110>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <SystemClock_Config+0x110>)
 8000d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <SystemClock_Config+0x110>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dc6:	23b4      	movs	r3, #180	; 0xb4
 8000dc8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fbc0 	bl	800455c <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000de2:	f000 f84b 	bl	8000e7c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000de6:	f003 fb69 	bl	80044bc <HAL_PWREx_EnableOverDrive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000df0:	f000 f844 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e10:	2105      	movs	r1, #5
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fe12 	bl	8004a3c <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e1e:	f000 f82d 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e22:	2308      	movs	r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 f823 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000e44:	f000 f81a 	bl	8000e7c <Error_Handler>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3780      	adds	r7, #128	; 0x80
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f001 fe69 	bl	8002b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40001000 	.word	0x40001000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <initLCD>:

#include "paintIntro.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void initLCD(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8000e8e:	f000 fddd 	bl	8001a4c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 8000e92:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fe5a 	bl	8001b50 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f000 febb 	bl	8001c18 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000ea2:	f001 fa63 	bl	800236c <BSP_LCD_DisplayOn>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <printHelloScreen>:

void printHelloScreen(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb6:	f000 fef1 	bl	8001c9c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <printHelloScreen+0xd4>)
 8000ebc:	f000 febc 	bl	8001c38 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 125, 220, 70);
 8000ec0:	2346      	movs	r3, #70	; 0x46
 8000ec2:	22dc      	movs	r2, #220	; 0xdc
 8000ec4:	217d      	movs	r1, #125	; 0x7d
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f001 f88e 	bl	8001fe8 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font24);
 8000ecc:	482d      	ldr	r0, [pc, #180]	; (8000f84 <printHelloScreen+0xd8>)
 8000ece:	f000 fecb 	bl	8001c68 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 135, (uint8_t*)"EKAB", CENTER_MODE);
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <printHelloScreen+0xdc>)
 8000ed6:	2187      	movs	r1, #135	; 0x87
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 ff4b 	bl	8001d74 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8000ede:	482b      	ldr	r0, [pc, #172]	; (8000f8c <printHelloScreen+0xe0>)
 8000ee0:	f000 fec2 	bl	8001c68 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 155, (uint8_t*)"DRAW", CENTER_MODE);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4a2a      	ldr	r2, [pc, #168]	; (8000f90 <printHelloScreen+0xe4>)
 8000ee8:	219b      	movs	r1, #155	; 0x9b
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 ff42 	bl	8001d74 <BSP_LCD_DisplayStringAt>
	HAL_Delay(750);
 8000ef0:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000ef4:	f001 fe44 	bl	8002b80 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8000ef8:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8000efc:	f000 fe9c 	bl	8001c38 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(100, 176, 5);
 8000f00:	2205      	movs	r2, #5
 8000f02:	21b0      	movs	r1, #176	; 0xb0
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f001 f991 	bl	800222c <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(115, 176, 5);
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	21b0      	movs	r1, #176	; 0xb0
 8000f0e:	2073      	movs	r0, #115	; 0x73
 8000f10:	f001 f98c 	bl	800222c <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(130, 176, 5);
 8000f14:	2205      	movs	r2, #5
 8000f16:	21b0      	movs	r1, #176	; 0xb0
 8000f18:	2082      	movs	r0, #130	; 0x82
 8000f1a:	f001 f987 	bl	800222c <BSP_LCD_FillCircle>
	HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f001 fe2d 	bl	8002b80 <HAL_Delay>
	int i =0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]

	for(i = 100; i <=130; i+=15)
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e01f      	b.n	8000f70 <printHelloScreen+0xc4>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000f30:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000f34:	f000 fe80 	bl	8001c38 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	21b0      	movs	r1, #176	; 0xb0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 f973 	bl	800222c <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8000f46:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f4a:	f001 fe19 	bl	8002b80 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <printHelloScreen+0xd4>)
 8000f50:	f000 fe72 	bl	8001c38 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	2205      	movs	r2, #5
 8000f5a:	21b0      	movs	r1, #176	; 0xb0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 f965 	bl	800222c <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8000f62:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f66:	f001 fe0b 	bl	8002b80 <HAL_Delay>
	for(i = 100; i <=130; i+=15)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	330f      	adds	r3, #15
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b82      	cmp	r3, #130	; 0x82
 8000f74:	dddc      	ble.n	8000f30 <printHelloScreen+0x84>
	}
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	ff800080 	.word	0xff800080
 8000f84:	20000040 	.word	0x20000040
 8000f88:	08006d18 	.word	0x08006d18
 8000f8c:	20000048 	.word	0x20000048
 8000f90:	08006d20 	.word	0x08006d20

08000f94 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <MX_SPI5_Init+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_SPI5_Init+0x64>)
 8000fe6:	f004 f98a 	bl	80052fe <HAL_SPI_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ff0:	f7ff ff44 	bl	8000e7c <Error_Handler>
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000394 	.word	0x20000394
 8000ffc:	40015000 	.word	0x40015000

08001000 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_SPI_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12c      	bne.n	800107c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_SPI_MspInit+0x88>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_SPI_MspInit+0x88>)
 800102c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_SPI_MspInit+0x88>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_SPI_MspInit+0x88>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_SPI_MspInit+0x88>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_SPI_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800105a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800106c:	2305      	movs	r3, #5
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x8c>)
 8001078:	f002 face 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40015000 	.word	0x40015000
 8001088:	40023800 	.word	0x40023800
 800108c:	40021400 	.word	0x40021400

08001090 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_SPI_MspDeInit+0x30>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10a      	bne.n	80010b8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_SPI_MspDeInit+0x34>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_SPI_MspDeInit+0x34>)
 80010a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80010ae:	f44f 7160 	mov.w	r1, #896	; 0x380
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspDeInit+0x38>)
 80010b4:	f002 fc5a 	bl	800396c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40015000 	.word	0x40015000
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40021400 	.word	0x40021400

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f001 fdff 	bl	8002d34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001136:	2036      	movs	r0, #54	; 0x36
 8001138:	f001 fe18 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_InitTick+0xa4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_InitTick+0xa4>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_InitTick+0xa4>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001158:	f107 0210 	add.w	r2, r7, #16
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fe5c 	bl	8004e20 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001168:	f003 fe32 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 800116c:	4603      	mov	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_InitTick+0xa8>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0c9b      	lsrs	r3, r3, #18
 800117c:	3b01      	subs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_InitTick+0xac>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_InitTick+0xb0>)
 8001184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_InitTick+0xac>)
 8001188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_InitTick+0xac>)
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_InitTick+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_InitTick+0xac>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_InitTick+0xac>)
 80011a2:	f004 fe37 	bl	8005e14 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d104      	bne.n	80011b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_InitTick+0xac>)
 80011ae:	f004 fe66 	bl	8005e7e <HAL_TIM_Base_Start_IT>
 80011b2:	4603      	mov	r3, r0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3730      	adds	r7, #48	; 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	200003ec 	.word	0x200003ec
 80011cc:	40001000 	.word	0x40001000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM6_DAC_IRQHandler+0x10>)
 8001226:	f004 fe4e 	bl	8005ec6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003ec 	.word	0x200003ec

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <SystemInit+0x28>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <SystemInit+0x28>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <SystemInit+0x28>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	609a      	str	r2, [r3, #8]
#endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f004 fffa 	bl	8006290 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f7ff fdeb 	bl	8000e7c <Error_Handler>
  }

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000042c 	.word	0x2000042c
 80012b0:	40011000 	.word	0x40011000

080012b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_UART_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_UART_MspInit+0x88>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_UART_MspInit+0x88>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800130e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001320:	2307      	movs	r3, #7
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_UART_MspInit+0x8c>)
 800132c:	f002 f974 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40011000 	.word	0x40011000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
  ldr  r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136e:	f7ff ff61 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f005 fc99 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fccb 	bl	8000d10 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800137c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001380:	080093f0 	.word	0x080093f0
  ldr  r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001388:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 800138c:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8001390:	2000051c 	.word	0x2000051c

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>

08001396 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800139a:	f000 fa5d 	bl	8001858 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800139e:	20ca      	movs	r0, #202	; 0xca
 80013a0:	f000 f95d 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80013a4:	20c3      	movs	r0, #195	; 0xc3
 80013a6:	f000 f967 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80013aa:	2008      	movs	r0, #8
 80013ac:	f000 f964 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80013b0:	2050      	movs	r0, #80	; 0x50
 80013b2:	f000 f961 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80013b6:	20cf      	movs	r0, #207	; 0xcf
 80013b8:	f000 f951 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f95b 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80013c2:	20c1      	movs	r0, #193	; 0xc1
 80013c4:	f000 f958 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80013c8:	2030      	movs	r0, #48	; 0x30
 80013ca:	f000 f955 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80013ce:	20ed      	movs	r0, #237	; 0xed
 80013d0:	f000 f945 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80013d4:	2064      	movs	r0, #100	; 0x64
 80013d6:	f000 f94f 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f94c 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80013e0:	2012      	movs	r0, #18
 80013e2:	f000 f949 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80013e6:	2081      	movs	r0, #129	; 0x81
 80013e8:	f000 f946 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80013ec:	20e8      	movs	r0, #232	; 0xe8
 80013ee:	f000 f936 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80013f2:	2085      	movs	r0, #133	; 0x85
 80013f4:	f000 f940 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 f93d 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80013fe:	2078      	movs	r0, #120	; 0x78
 8001400:	f000 f93a 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001404:	20cb      	movs	r0, #203	; 0xcb
 8001406:	f000 f92a 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800140a:	2039      	movs	r0, #57	; 0x39
 800140c:	f000 f934 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001410:	202c      	movs	r0, #44	; 0x2c
 8001412:	f000 f931 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f92e 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800141c:	2034      	movs	r0, #52	; 0x34
 800141e:	f000 f92b 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001422:	2002      	movs	r0, #2
 8001424:	f000 f928 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001428:	20f7      	movs	r0, #247	; 0xf7
 800142a:	f000 f918 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800142e:	2020      	movs	r0, #32
 8001430:	f000 f922 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001434:	20ea      	movs	r0, #234	; 0xea
 8001436:	f000 f912 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f91c 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f919 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001446:	20b1      	movs	r0, #177	; 0xb1
 8001448:	f000 f909 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 f913 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001452:	201b      	movs	r0, #27
 8001454:	f000 f910 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001458:	20b6      	movs	r0, #182	; 0xb6
 800145a:	f000 f900 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800145e:	200a      	movs	r0, #10
 8001460:	f000 f90a 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001464:	20a2      	movs	r0, #162	; 0xa2
 8001466:	f000 f907 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800146a:	20c0      	movs	r0, #192	; 0xc0
 800146c:	f000 f8f7 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001470:	2010      	movs	r0, #16
 8001472:	f000 f901 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001476:	20c1      	movs	r0, #193	; 0xc1
 8001478:	f000 f8f1 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800147c:	2010      	movs	r0, #16
 800147e:	f000 f8fb 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001482:	20c5      	movs	r0, #197	; 0xc5
 8001484:	f000 f8eb 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001488:	2045      	movs	r0, #69	; 0x45
 800148a:	f000 f8f5 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800148e:	2015      	movs	r0, #21
 8001490:	f000 f8f2 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001494:	20c7      	movs	r0, #199	; 0xc7
 8001496:	f000 f8e2 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800149a:	2090      	movs	r0, #144	; 0x90
 800149c:	f000 f8ec 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80014a0:	2036      	movs	r0, #54	; 0x36
 80014a2:	f000 f8dc 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80014a6:	20c8      	movs	r0, #200	; 0xc8
 80014a8:	f000 f8e6 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80014ac:	20f2      	movs	r0, #242	; 0xf2
 80014ae:	f000 f8d6 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f8e0 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80014b8:	20b0      	movs	r0, #176	; 0xb0
 80014ba:	f000 f8d0 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80014be:	20c2      	movs	r0, #194	; 0xc2
 80014c0:	f000 f8da 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80014c4:	20b6      	movs	r0, #182	; 0xb6
 80014c6:	f000 f8ca 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f000 f8d4 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80014d0:	20a7      	movs	r0, #167	; 0xa7
 80014d2:	f000 f8d1 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80014d6:	2027      	movs	r0, #39	; 0x27
 80014d8:	f000 f8ce 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80014dc:	2004      	movs	r0, #4
 80014de:	f000 f8cb 	bl	8001678 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80014e2:	202a      	movs	r0, #42	; 0x2a
 80014e4:	f000 f8bb 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f8c5 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f8c2 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8bf 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80014fa:	20ef      	movs	r0, #239	; 0xef
 80014fc:	f000 f8bc 	bl	8001678 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001500:	202b      	movs	r0, #43	; 0x2b
 8001502:	f000 f8ac 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f8b6 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800150c:	2000      	movs	r0, #0
 800150e:	f000 f8b3 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 f8b0 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001518:	203f      	movs	r0, #63	; 0x3f
 800151a:	f000 f8ad 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800151e:	20f6      	movs	r0, #246	; 0xf6
 8001520:	f000 f89d 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 f8a7 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f8a4 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001530:	2006      	movs	r0, #6
 8001532:	f000 f8a1 	bl	8001678 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001536:	202c      	movs	r0, #44	; 0x2c
 8001538:	f000 f891 	bl	800165e <ili9341_WriteReg>
  LCD_Delay(200);
 800153c:	20c8      	movs	r0, #200	; 0xc8
 800153e:	f000 fa79 	bl	8001a34 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001542:	2026      	movs	r0, #38	; 0x26
 8001544:	f000 f88b 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001548:	2001      	movs	r0, #1
 800154a:	f000 f895 	bl	8001678 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800154e:	20e0      	movs	r0, #224	; 0xe0
 8001550:	f000 f885 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001554:	200f      	movs	r0, #15
 8001556:	f000 f88f 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800155a:	2029      	movs	r0, #41	; 0x29
 800155c:	f000 f88c 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001560:	2024      	movs	r0, #36	; 0x24
 8001562:	f000 f889 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001566:	200c      	movs	r0, #12
 8001568:	f000 f886 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800156c:	200e      	movs	r0, #14
 800156e:	f000 f883 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001572:	2009      	movs	r0, #9
 8001574:	f000 f880 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001578:	204e      	movs	r0, #78	; 0x4e
 800157a:	f000 f87d 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800157e:	2078      	movs	r0, #120	; 0x78
 8001580:	f000 f87a 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001584:	203c      	movs	r0, #60	; 0x3c
 8001586:	f000 f877 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800158a:	2009      	movs	r0, #9
 800158c:	f000 f874 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001590:	2013      	movs	r0, #19
 8001592:	f000 f871 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001596:	2005      	movs	r0, #5
 8001598:	f000 f86e 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800159c:	2017      	movs	r0, #23
 800159e:	f000 f86b 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015a2:	2011      	movs	r0, #17
 80015a4:	f000 f868 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 f865 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80015ae:	20e1      	movs	r0, #225	; 0xe1
 80015b0:	f000 f855 	bl	800165e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f85f 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80015ba:	2016      	movs	r0, #22
 80015bc:	f000 f85c 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015c0:	201b      	movs	r0, #27
 80015c2:	f000 f859 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80015c6:	2004      	movs	r0, #4
 80015c8:	f000 f856 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f000 f853 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f000 f850 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80015d8:	2031      	movs	r0, #49	; 0x31
 80015da:	f000 f84d 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80015de:	2033      	movs	r0, #51	; 0x33
 80015e0:	f000 f84a 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80015e4:	2042      	movs	r0, #66	; 0x42
 80015e6:	f000 f847 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015ea:	2005      	movs	r0, #5
 80015ec:	f000 f844 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015f0:	200c      	movs	r0, #12
 80015f2:	f000 f841 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f000 f83e 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f000 f83b 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001602:	202f      	movs	r0, #47	; 0x2f
 8001604:	f000 f838 	bl	8001678 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001608:	200f      	movs	r0, #15
 800160a:	f000 f835 	bl	8001678 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800160e:	2011      	movs	r0, #17
 8001610:	f000 f825 	bl	800165e <ili9341_WriteReg>
  LCD_Delay(200);
 8001614:	20c8      	movs	r0, #200	; 0xc8
 8001616:	f000 fa0d 	bl	8001a34 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800161a:	2029      	movs	r0, #41	; 0x29
 800161c:	f000 f81f 	bl	800165e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001620:	202c      	movs	r0, #44	; 0x2c
 8001622:	f000 f81c 	bl	800165e <ili9341_WriteReg>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800162e:	f000 f913 	bl	8001858 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001632:	2103      	movs	r1, #3
 8001634:	20d3      	movs	r0, #211	; 0xd3
 8001636:	f000 f82c 	bl	8001692 <ili9341_ReadData>
 800163a:	4603      	mov	r3, r0
 800163c:	b29b      	uxth	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}

08001642 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001646:	2029      	movs	r0, #41	; 0x29
 8001648:	f000 f809 	bl	800165e <ili9341_WriteReg>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001654:	2028      	movs	r0, #40	; 0x28
 8001656:	f000 f802 	bl	800165e <ili9341_WriteReg>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}

0800165e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f98e 	bl	800198c <LCD_IO_WriteReg>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f95f 	bl	8001948 <LCD_IO_WriteData>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	460a      	mov	r2, r1
 800169c:	80fb      	strh	r3, [r7, #6]
 800169e:	4613      	mov	r3, r2
 80016a0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80016a2:	797a      	ldrb	r2, [r7, #5]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f991 	bl	80019d0 <LCD_IO_ReadData>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80016bc:	23f0      	movs	r3, #240	; 0xf0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80016cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80016e0:	4819      	ldr	r0, [pc, #100]	; (8001748 <SPIx_Init+0x6c>)
 80016e2:	f004 fa77 	bl	8005bd4 <HAL_SPI_GetState>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12b      	bne.n	8001744 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <SPIx_Init+0x6c>)
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <SPIx_Init+0x70>)
 80016f0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <SPIx_Init+0x6c>)
 80016f4:	2218      	movs	r2, #24
 80016f6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <SPIx_Init+0x6c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <SPIx_Init+0x6c>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <SPIx_Init+0x6c>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <SPIx_Init+0x6c>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <SPIx_Init+0x6c>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <SPIx_Init+0x6c>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <SPIx_Init+0x6c>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <SPIx_Init+0x6c>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <SPIx_Init+0x6c>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SPIx_Init+0x6c>)
 8001732:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001736:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <SPIx_Init+0x6c>)
 800173a:	f000 f853 	bl	80017e4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800173e:	4802      	ldr	r0, [pc, #8]	; (8001748 <SPIx_Init+0x6c>)
 8001740:	f003 fddd 	bl	80052fe <HAL_SPI_Init>
  } 
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000007c 	.word	0x2000007c
 800174c:	40015000 	.word	0x40015000

08001750 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <SPIx_Read+0x38>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f107 0108 	add.w	r1, r7, #8
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <SPIx_Read+0x3c>)
 800176c:	f003 ff87 	bl	800567e <HAL_SPI_Receive>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800177a:	f000 f827 	bl	80017cc <SPIx_Error>
  }
  
  return readvalue;
 800177e:	68bb      	ldr	r3, [r7, #8]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000003c 	.word	0x2000003c
 800178c:	2000007c 	.word	0x2000007c

08001790 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <SPIx_Write+0x34>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1db9      	adds	r1, r7, #6
 80017a4:	2201      	movs	r2, #1
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <SPIx_Write+0x38>)
 80017a8:	f003 fe35 	bl	8005416 <HAL_SPI_Transmit>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80017b6:	f000 f809 	bl	80017cc <SPIx_Error>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000003c 	.word	0x2000003c
 80017c8:	2000007c 	.word	0x2000007c

080017cc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <SPIx_Error+0x14>)
 80017d2:	f003 fdf8 	bl	80053c6 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80017d6:	f7ff ff81 	bl	80016dc <SPIx_Init>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000007c 	.word	0x2000007c

080017e4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <SPIx_MspInit+0x6c>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	4a16      	ldr	r2, [pc, #88]	; (8001850 <SPIx_MspInit+0x6c>)
 80017f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017fa:	6453      	str	r3, [r2, #68]	; 0x44
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <SPIx_MspInit+0x6c>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <SPIx_MspInit+0x6c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <SPIx_MspInit+0x6c>)
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <SPIx_MspInit+0x6c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001824:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <SPIx_MspInit+0x70>)
 8001842:	f001 fee9 	bl	8003618 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40021400 	.word	0x40021400

08001858 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <LCD_IO_Init+0xe0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d164      	bne.n	8001930 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <LCD_IO_Init+0xe0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b32      	ldr	r3, [pc, #200]	; (800193c <LCD_IO_Init+0xe4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a31      	ldr	r2, [pc, #196]	; (800193c <LCD_IO_Init+0xe4>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <LCD_IO_Init+0xe4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4827      	ldr	r0, [pc, #156]	; (8001940 <LCD_IO_Init+0xe8>)
 80018a2:	f001 feb9 	bl	8003618 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <LCD_IO_Init+0xe4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <LCD_IO_Init+0xe4>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <LCD_IO_Init+0xe4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4819      	ldr	r0, [pc, #100]	; (8001940 <LCD_IO_Init+0xe8>)
 80018dc:	f001 fe9c 	bl	8003618 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <LCD_IO_Init+0xe4>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <LCD_IO_Init+0xe4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <LCD_IO_Init+0xe4>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80018fc:	2304      	movs	r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <LCD_IO_Init+0xec>)
 8001914:	f001 fe80 	bl	8003618 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001918:	2200      	movs	r2, #0
 800191a:	2104      	movs	r1, #4
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <LCD_IO_Init+0xec>)
 800191e:	f002 f92f 	bl	8003b80 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001922:	2201      	movs	r2, #1
 8001924:	2104      	movs	r1, #4
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <LCD_IO_Init+0xec>)
 8001928:	f002 f92a 	bl	8003b80 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800192c:	f7ff fed6 	bl	80016dc <SPIx_Init>
  }
}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200000d4 	.word	0x200000d4
 800193c:	40023800 	.word	0x40023800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40020800 	.word	0x40020800

08001948 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <LCD_IO_WriteData+0x3c>)
 800195a:	f002 f911 	bl	8003b80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800195e:	2200      	movs	r2, #0
 8001960:	2104      	movs	r1, #4
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <LCD_IO_WriteData+0x40>)
 8001964:	f002 f90c 	bl	8003b80 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff10 	bl	8001790 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <LCD_IO_WriteData+0x40>)
 8001976:	f002 f903 	bl	8003b80 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40020800 	.word	0x40020800

0800198c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199c:	480a      	ldr	r0, [pc, #40]	; (80019c8 <LCD_IO_WriteReg+0x3c>)
 800199e:	f002 f8ef 	bl	8003b80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <LCD_IO_WriteReg+0x40>)
 80019a8:	f002 f8ea 	bl	8003b80 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff feed 	bl	8001790 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80019b6:	2201      	movs	r2, #1
 80019b8:	2104      	movs	r1, #4
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <LCD_IO_WriteReg+0x40>)
 80019bc:	f002 f8e0 	bl	8003b80 <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020800 	.word	0x40020800

080019d0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	80fb      	strh	r3, [r7, #6]
 80019dc:	4613      	mov	r3, r2
 80019de:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80019e4:	2200      	movs	r2, #0
 80019e6:	2104      	movs	r1, #4
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <LCD_IO_ReadData+0x5c>)
 80019ea:	f002 f8c9 	bl	8003b80 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <LCD_IO_ReadData+0x60>)
 80019f6:	f002 f8c3 	bl	8003b80 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fec7 	bl	8001790 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fea3 	bl	8001750 <SPIx_Read>
 8001a0a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <LCD_IO_ReadData+0x60>)
 8001a14:	f002 f8b4 	bl	8003b80 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <LCD_IO_ReadData+0x5c>)
 8001a1e:	f002 f8af 	bl	8003b80 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00

08001a34 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f001 f89f 	bl	8002b80 <HAL_Delay>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a52:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <BSP_LCD_Init+0xc0>)
 8001a54:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a58:	2209      	movs	r2, #9
 8001a5a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a64:	221d      	movs	r2, #29
 8001a66:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a70:	f240 120d 	movw	r2, #269	; 0x10d
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a78:	f240 1243 	movw	r2, #323	; 0x143
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a80:	f240 1217 	movw	r2, #279	; 0x117
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a88:	f240 1247 	movw	r2, #327	; 0x147
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <BSP_LCD_Init+0xc4>)
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <BSP_LCD_Init+0xc4>)
 8001aae:	22c0      	movs	r2, #192	; 0xc0
 8001ab0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <BSP_LCD_Init+0xc4>)
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <BSP_LCD_Init+0xc4>)
 8001aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001ac0:	4813      	ldr	r0, [pc, #76]	; (8001b10 <BSP_LCD_Init+0xc4>)
 8001ac2:	f003 f9df 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001ade:	f000 fc55 	bl	800238c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <BSP_LCD_Init+0xbc>)
 8001ae4:	f002 fa1a 	bl	8003f1c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <BSP_LCD_Init+0xc8>)
 8001aea:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <BSP_LCD_Init+0xcc>)
 8001aec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <BSP_LCD_Init+0xc8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001af6:	f000 fe37 	bl	8002768 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001afa:	4808      	ldr	r0, [pc, #32]	; (8001b1c <BSP_LCD_Init+0xd0>)
 8001afc:	f000 f8b4 	bl	8001c68 <BSP_LCD_SetFont>

  return LCD_OK;
 8001b00:	2300      	movs	r3, #0
}  
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000046c 	.word	0x2000046c
 8001b0c:	40016800 	.word	0x40016800
 8001b10:	20000118 	.word	0x20000118
 8001b14:	20000514 	.word	0x20000514
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	20000040 	.word	0x20000040

08001b20 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <BSP_LCD_GetXSize+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	4798      	blx	r3
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000514 	.word	0x20000514

08001b38 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <BSP_LCD_GetYSize+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	4798      	blx	r3
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000514 	.word	0x20000514

08001b50 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b090      	sub	sp, #64	; 0x40
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001b60:	f7ff ffde 	bl	8001b20 <BSP_LCD_GetXSize>
 8001b64:	4603      	mov	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001b6c:	f7ff ffe4 	bl	8001b38 <BSP_LCD_GetYSize>
 8001b70:	4603      	mov	r3, r0
 8001b72:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001b7c:	23ff      	movs	r3, #255	; 0xff
 8001b7e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001ba0:	f7ff ffbe 	bl	8001b20 <BSP_LCD_GetXSize>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001ba8:	f7ff ffc6 	bl	8001b38 <BSP_LCD_GetYSize>
 8001bac:	4603      	mov	r3, r0
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001bb0:	88fa      	ldrh	r2, [r7, #6]
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4814      	ldr	r0, [pc, #80]	; (8001c0c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001bba:	f002 fa7f 	bl	80040bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	4913      	ldr	r1, [pc, #76]	; (8001c10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3304      	adds	r3, #4
 8001bce:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3308      	adds	r3, #8
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001be6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	4909      	ldr	r1, [pc, #36]	; (8001c10 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001bfe:	f002 fa9b 	bl	8004138 <HAL_LTDC_EnableDither>
}
 8001c02:	bf00      	nop
 8001c04:	3740      	adds	r7, #64	; 0x40
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000046c 	.word	0x2000046c
 8001c10:	2000014c 	.word	0x2000014c
 8001c14:	20000040 	.word	0x20000040

08001c18 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <BSP_LCD_SelectLayer+0x1c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000148 	.word	0x20000148

08001c38 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <BSP_LCD_SetTextColor+0x28>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <BSP_LCD_SetTextColor+0x2c>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000148 	.word	0x20000148
 8001c64:	2000014c 	.word	0x2000014c

08001c68 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <BSP_LCD_SetFont+0x2c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4908      	ldr	r1, [pc, #32]	; (8001c98 <BSP_LCD_SetFont+0x30>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	3308      	adds	r3, #8
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000148 	.word	0x20000148
 8001c98:	2000014c 	.word	0x2000014c

08001c9c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <BSP_LCD_Clear+0x48>)
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <BSP_LCD_Clear+0x48>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <BSP_LCD_Clear+0x4c>)
 8001cae:	2134      	movs	r1, #52	; 0x34
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	335c      	adds	r3, #92	; 0x5c
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461d      	mov	r5, r3
 8001cbc:	f7ff ff30 	bl	8001b20 <BSP_LCD_GetXSize>
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	f7ff ff39 	bl	8001b38 <BSP_LCD_GetYSize>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	4632      	mov	r2, r6
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f000 fd0e 	bl	80026f8 <FillBuffer>
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	20000148 	.word	0x20000148
 8001ce8:	2000046c 	.word	0x2000046c

08001cec <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	80bb      	strh	r3, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <BSP_LCD_DisplayChar+0x80>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	491b      	ldr	r1, [pc, #108]	; (8001d70 <BSP_LCD_DisplayChar+0x84>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3308      	adds	r3, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <BSP_LCD_DisplayChar+0x80>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4c14      	ldr	r4, [pc, #80]	; (8001d70 <BSP_LCD_DisplayChar+0x84>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4423      	add	r3, r4
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d30:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <BSP_LCD_DisplayChar+0x80>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4c0d      	ldr	r4, [pc, #52]	; (8001d70 <BSP_LCD_DisplayChar+0x84>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4423      	add	r3, r4
 8001d44:	3308      	adds	r3, #8
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	3307      	adds	r3, #7
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da00      	bge.n	8001d52 <BSP_LCD_DisplayChar+0x66>
 8001d50:	3307      	adds	r3, #7
 8001d52:	10db      	asrs	r3, r3, #3
 8001d54:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d58:	18ca      	adds	r2, r1, r3
 8001d5a:	88b9      	ldrh	r1, [r7, #4]
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fc10 	bl	8002584 <DrawChar>
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	20000148 	.word	0x20000148
 8001d70:	2000014c 	.word	0x2000014c

08001d74 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	81fb      	strh	r3, [r7, #14]
 8001d82:	460b      	mov	r3, r1
 8001d84:	81bb      	strh	r3, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	83fb      	strh	r3, [r7, #30]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001d9e:	e002      	b.n	8001da6 <BSP_LCD_DisplayStringAt+0x32>
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	617a      	str	r2, [r7, #20]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f6      	bne.n	8001da0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001db2:	f7ff feb5 	bl	8001b20 <BSP_LCD_GetXSize>
 8001db6:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	494a      	ldr	r1, [pc, #296]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d01c      	beq.n	8001e12 <BSP_LCD_DisplayStringAt+0x9e>
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <BSP_LCD_DisplayStringAt+0x98>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d12e      	bne.n	8001e3e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad1      	subs	r1, r2, r3
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	483e      	ldr	r0, [pc, #248]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4403      	add	r3, r0
 8001df6:	3308      	adds	r3, #8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	889b      	ldrh	r3, [r3, #4]
 8001dfc:	fb03 f301 	mul.w	r3, r3, r1
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	4413      	add	r3, r2
 8001e08:	83fb      	strh	r3, [r7, #30]
      break;
 8001e0a:	e01b      	b.n	8001e44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	83fb      	strh	r3, [r7, #30]
      break;
 8001e10:	e018      	b.n	8001e44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4831      	ldr	r0, [pc, #196]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4403      	add	r3, r0
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	889b      	ldrh	r3, [r3, #4]
 8001e30:	fb11 f303 	smulbb	r3, r1, r3
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	4413      	add	r3, r2
 8001e3a:	83fb      	strh	r3, [r7, #30]
      break;
 8001e3c:	e002      	b.n	8001e44 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	83fb      	strh	r3, [r7, #30]
      break;
 8001e42:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e44:	e01a      	b.n	8001e7c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	89b9      	ldrh	r1, [r7, #12]
 8001e4c:	8bfb      	ldrh	r3, [r7, #30]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff4c 	bl	8001cec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4922      	ldr	r1, [pc, #136]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	3308      	adds	r3, #8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	889a      	ldrh	r2, [r3, #4]
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
    i++;
 8001e76:	8bbb      	ldrh	r3, [r7, #28]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2dc      	uxtb	r4, r3
 8001e8a:	f7ff fe49 	bl	8001b20 <BSP_LCD_GetXSize>
 8001e8e:	4605      	mov	r5, r0
 8001e90:	8bb9      	ldrh	r1, [r7, #28]
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4403      	add	r3, r0
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	889b      	ldrh	r3, [r3, #4]
 8001ea8:	fb03 f301 	mul.w	r3, r3, r1
 8001eac:	1aeb      	subs	r3, r5, r3
 8001eae:	b299      	uxth	r1, r3
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <BSP_LCD_DisplayStringAt+0x170>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4403      	add	r3, r0
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	889b      	ldrh	r3, [r3, #4]
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	bf2c      	ite	cs
 8001eca:	2301      	movcs	r3, #1
 8001ecc:	2300      	movcc	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4023      	ands	r3, r4
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1b6      	bne.n	8001e46 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee0:	20000148 	.word	0x20000148
 8001ee4:	2000014c 	.word	0x2000014c

08001ee8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	80bb      	strh	r3, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <BSP_LCD_DrawHLine+0x70>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <BSP_LCD_DrawHLine+0x74>)
 8001f04:	2134      	movs	r1, #52	; 0x34
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	335c      	adds	r3, #92	; 0x5c
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	f7ff fe06 	bl	8001b20 <BSP_LCD_GetXSize>
 8001f14:	4602      	mov	r2, r0
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	fb03 f202 	mul.w	r2, r3, r2
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4423      	add	r3, r4
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <BSP_LCD_DrawHLine+0x70>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	68fc      	ldr	r4, [r7, #12]
 8001f2c:	887d      	ldrh	r5, [r7, #2]
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <BSP_LCD_DrawHLine+0x70>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	490b      	ldr	r1, [pc, #44]	; (8001f60 <BSP_LCD_DrawHLine+0x78>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	462a      	mov	r2, r5
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f000 fbd4 	bl	80026f8 <FillBuffer>
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}
 8001f58:	20000148 	.word	0x20000148
 8001f5c:	2000046c 	.word	0x2000046c
 8001f60:	2000014c 	.word	0x2000014c

08001f64 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	80bb      	strh	r3, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <BSP_LCD_DrawVLine+0x78>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <BSP_LCD_DrawVLine+0x7c>)
 8001f80:	2134      	movs	r1, #52	; 0x34
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	335c      	adds	r3, #92	; 0x5c
 8001f8a:	681c      	ldr	r4, [r3, #0]
 8001f8c:	f7ff fdc8 	bl	8001b20 <BSP_LCD_GetXSize>
 8001f90:	4602      	mov	r2, r0
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	fb03 f202 	mul.w	r2, r3, r2
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4423      	add	r3, r4
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <BSP_LCD_DrawVLine+0x78>)
 8001fa4:	681c      	ldr	r4, [r3, #0]
 8001fa6:	68fd      	ldr	r5, [r7, #12]
 8001fa8:	887e      	ldrh	r6, [r7, #2]
 8001faa:	f7ff fdb9 	bl	8001b20 <BSP_LCD_GetXSize>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	1e59      	subs	r1, r3, #1
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <BSP_LCD_DrawVLine+0x78>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <BSP_LCD_DrawVLine+0x80>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	9100      	str	r1, [sp, #0]
 8001fc8:	4633      	mov	r3, r6
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4629      	mov	r1, r5
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f000 fb92 	bl	80026f8 <FillBuffer>
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	20000148 	.word	0x20000148
 8001fe0:	2000046c 	.word	0x2000046c
 8001fe4:	2000014c 	.word	0x2000014c

08001fe8 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	80fb      	strh	r3, [r7, #6]
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80bb      	strh	r3, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	88b9      	ldrh	r1, [r7, #4]
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff6b 	bl	8001ee8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	883b      	ldrh	r3, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	b299      	uxth	r1, r3
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff62 	bl	8001ee8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002024:	883a      	ldrh	r2, [r7, #0]
 8002026:	88b9      	ldrh	r1, [r7, #4]
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff9a 	bl	8001f64 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	883a      	ldrh	r2, [r7, #0]
 800203a:	88b9      	ldrh	r1, [r7, #4]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff91 	bl	8001f64 <BSP_LCD_DrawVLine>
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
	...

0800204c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
 8002056:	460b      	mov	r3, r1
 8002058:	80bb      	strh	r3, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	f1c3 0303 	rsb	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002070:	e0cf      	b.n	8002212 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	b29a      	uxth	r2, r3
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4413      	add	r3, r2
 800207a:	b298      	uxth	r0, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	b29b      	uxth	r3, r3
 8002080:	88ba      	ldrh	r2, [r7, #4]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	b29c      	uxth	r4, r3
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4967      	ldr	r1, [pc, #412]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4621      	mov	r1, r4
 800209c:	f000 fa4c 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b298      	uxth	r0, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	88ba      	ldrh	r2, [r7, #4]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	b29c      	uxth	r4, r3
 80020b4:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	495b      	ldr	r1, [pc, #364]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4621      	mov	r1, r4
 80020ca:	f000 fa35 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	4413      	add	r3, r2
 80020d6:	b298      	uxth	r0, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	88ba      	ldrh	r2, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b29c      	uxth	r4, r3
 80020e2:	4b50      	ldr	r3, [pc, #320]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4950      	ldr	r1, [pc, #320]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4621      	mov	r1, r4
 80020f8:	f000 fa1e 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b298      	uxth	r0, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	b29b      	uxth	r3, r3
 800210a:	88ba      	ldrh	r2, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b29c      	uxth	r4, r3
 8002110:	4b44      	ldr	r3, [pc, #272]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4944      	ldr	r1, [pc, #272]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4621      	mov	r1, r4
 8002126:	f000 fa07 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	b29a      	uxth	r2, r3
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	4413      	add	r3, r2
 8002132:	b298      	uxth	r0, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	b29a      	uxth	r2, r3
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	b29c      	uxth	r4, r3
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4939      	ldr	r1, [pc, #228]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4621      	mov	r1, r4
 8002154:	f000 f9f0 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	b29b      	uxth	r3, r3
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b298      	uxth	r0, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	b29a      	uxth	r2, r3
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	b29c      	uxth	r4, r3
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	492d      	ldr	r1, [pc, #180]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4621      	mov	r1, r4
 8002182:	f000 f9d9 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	b29a      	uxth	r2, r3
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4413      	add	r3, r2
 800218e:	b298      	uxth	r0, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	b29a      	uxth	r2, r3
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	b29c      	uxth	r4, r3
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	f000 f9c2 	bl	8002538 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	88fa      	ldrh	r2, [r7, #6]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b298      	uxth	r0, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	b29c      	uxth	r4, r3
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <BSP_LCD_DrawCircle+0x1d8>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <BSP_LCD_DrawCircle+0x1dc>)
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4621      	mov	r1, r4
 80021de:	f000 f9ab 	bl	8002538 <BSP_LCD_DrawPixel>

    if (d < 0)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da06      	bge.n	80021f6 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	4413      	add	r3, r2
 80021f0:	3306      	adds	r3, #6
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00a      	b.n	800220c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	009a      	lsls	r2, r3, #2
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4413      	add	r3, r2
 8002202:	330a      	adds	r3, #10
 8002204:	617b      	str	r3, [r7, #20]
      cury--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	3301      	adds	r3, #1
 8002210:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	f67f af2b 	bls.w	8002072 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	20000148 	.word	0x20000148
 8002228:	2000014c 	.word	0x2000014c

0800222c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	460b      	mov	r3, r1
 8002238:	80bb      	strh	r3, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	f1c3 0303 	rsb	r3, r3, #3
 8002246:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <BSP_LCD_FillCircle+0x138>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4944      	ldr	r1, [pc, #272]	; (8002368 <BSP_LCD_FillCircle+0x13c>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fce8 	bl	8001c38 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002268:	e061      	b.n	800232e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d021      	beq.n	80022b4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	b29b      	uxth	r3, r3
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b298      	uxth	r0, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	b29a      	uxth	r2, r3
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	b299      	uxth	r1, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	b29b      	uxth	r3, r3
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff fe2b 	bl	8001ee8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b29b      	uxth	r3, r3
 8002296:	88fa      	ldrh	r2, [r7, #6]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b298      	uxth	r0, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	88ba      	ldrh	r2, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b299      	uxth	r1, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f7ff fe1a 	bl	8001ee8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d021      	beq.n	80022fe <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b298      	uxth	r0, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	88ba      	ldrh	r2, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b299      	uxth	r1, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff fe06 	bl	8001ee8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	88fa      	ldrh	r2, [r7, #6]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	b298      	uxth	r0, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	b299      	uxth	r1, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	f7ff fdf5 	bl	8001ee8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da06      	bge.n	8002312 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	4413      	add	r3, r2
 800230c:	3306      	adds	r3, #6
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4413      	add	r3, r2
 800231e:	330a      	adds	r3, #10
 8002320:	617b      	str	r3, [r7, #20]
      cury--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3b01      	subs	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	3301      	adds	r3, #1
 800232c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d999      	bls.n	800226a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <BSP_LCD_FillCircle+0x138>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	490b      	ldr	r1, [pc, #44]	; (8002368 <BSP_LCD_FillCircle+0x13c>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc75 	bl	8001c38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	88b9      	ldrh	r1, [r7, #4]
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe79 	bl	800204c <BSP_LCD_DrawCircle>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000148 	.word	0x20000148
 8002368:	2000014c 	.word	0x2000014c

0800236c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <BSP_LCD_DisplayOn+0x1c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800237a:	4b03      	ldr	r3, [pc, #12]	; (8002388 <BSP_LCD_DisplayOn+0x1c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4798      	blx	r3
  }
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000514 	.word	0x20000514

0800238c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a60      	ldr	r2, [pc, #384]	; (800251c <BSP_LCD_MspInit+0x190>)
 800239c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a59      	ldr	r2, [pc, #356]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a52      	ldr	r2, [pc, #328]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a4b      	ldr	r2, [pc, #300]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <BSP_LCD_MspInit+0x190>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a44      	ldr	r2, [pc, #272]	; (800251c <BSP_LCD_MspInit+0x190>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b42      	ldr	r3, [pc, #264]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <BSP_LCD_MspInit+0x190>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <BSP_LCD_MspInit+0x190>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a2f      	ldr	r2, [pc, #188]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <BSP_LCD_MspInit+0x190>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002472:	f641 0358 	movw	r3, #6232	; 0x1858
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002480:	2302      	movs	r3, #2
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002484:	230e      	movs	r3, #14
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	4824      	ldr	r0, [pc, #144]	; (8002520 <BSP_LCD_MspInit+0x194>)
 8002490:	f001 f8c2 	bl	8003618 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002494:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4820      	ldr	r0, [pc, #128]	; (8002524 <BSP_LCD_MspInit+0x198>)
 80024a2:	f001 f8b9 	bl	8003618 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80024a6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	481d      	ldr	r0, [pc, #116]	; (8002528 <BSP_LCD_MspInit+0x19c>)
 80024b4:	f001 f8b0 	bl	8003618 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80024b8:	2348      	movs	r3, #72	; 0x48
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	4619      	mov	r1, r3
 80024c2:	481a      	ldr	r0, [pc, #104]	; (800252c <BSP_LCD_MspInit+0x1a0>)
 80024c4:	f001 f8a8 	bl	8003618 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4816      	ldr	r0, [pc, #88]	; (8002530 <BSP_LCD_MspInit+0x1a4>)
 80024d6:	f001 f89f 	bl	8003618 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80024da:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4813      	ldr	r0, [pc, #76]	; (8002534 <BSP_LCD_MspInit+0x1a8>)
 80024e8:	f001 f896 	bl	8003618 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80024ec:	2303      	movs	r3, #3
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80024f0:	2309      	movs	r3, #9
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	480a      	ldr	r0, [pc, #40]	; (8002524 <BSP_LCD_MspInit+0x198>)
 80024fc:	f001 f88c 	bl	8003618 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <BSP_LCD_MspInit+0x1a8>)
 800250e:	f001 f883 	bl	8003618 <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3738      	adds	r7, #56	; 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800

08002538 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	603a      	str	r2, [r7, #0]
 8002542:	80fb      	strh	r3, [r7, #6]
 8002544:	460b      	mov	r3, r1
 8002546:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <BSP_LCD_DrawPixel+0x44>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <BSP_LCD_DrawPixel+0x48>)
 800254e:	2134      	movs	r1, #52	; 0x34
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	681c      	ldr	r4, [r3, #0]
 800255a:	88bd      	ldrh	r5, [r7, #4]
 800255c:	f7ff fae0 	bl	8001b20 <BSP_LCD_GetXSize>
 8002560:	4603      	mov	r3, r0
 8002562:	fb03 f205 	mul.w	r2, r3, r5
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4423      	add	r3, r4
 800256e:	461a      	mov	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bdb0      	pop	{r4, r5, r7, pc}
 800257c:	20000148 	.word	0x20000148
 8002580:	2000046c 	.word	0x2000046c

08002584 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	603a      	str	r2, [r7, #0]
 800258e:	80fb      	strh	r3, [r7, #6]
 8002590:	460b      	mov	r3, r1
 8002592:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <DrawChar+0x16c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4953      	ldr	r1, [pc, #332]	; (80026f4 <DrawChar+0x170>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3308      	adds	r3, #8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	88db      	ldrh	r3, [r3, #6]
 80025b6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80025b8:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <DrawChar+0x16c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <DrawChar+0x170>)
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3308      	adds	r3, #8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	3307      	adds	r3, #7
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da00      	bge.n	80025da <DrawChar+0x56>
 80025d8:	3307      	adds	r3, #7
 80025da:	10db      	asrs	r3, r3, #3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8a3b      	ldrh	r3, [r7, #16]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e076      	b.n	80026de <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80025f0:	8a3b      	ldrh	r3, [r7, #16]
 80025f2:	3307      	adds	r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da00      	bge.n	80025fa <DrawChar+0x76>
 80025f8:	3307      	adds	r3, #7
 80025fa:	10db      	asrs	r3, r3, #3
 80025fc:	461a      	mov	r2, r3
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fb03 f302 	mul.w	r3, r3, r2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800260a:	8a3b      	ldrh	r3, [r7, #16]
 800260c:	3307      	adds	r3, #7
 800260e:	2b00      	cmp	r3, #0
 8002610:	da00      	bge.n	8002614 <DrawChar+0x90>
 8002612:	3307      	adds	r3, #7
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <DrawChar+0x9c>
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <DrawChar+0xa4>
 800261e:	e00c      	b.n	800263a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	e016      	b.n	8002656 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	3201      	adds	r2, #1
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	e00d      	b.n	8002656 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	041a      	lsls	r2, r3, #16
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3301      	adds	r3, #1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	4313      	orrs	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	3202      	adds	r2, #2
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
      break;
 8002654:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e036      	b.n	80026ca <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800265c:	8a3a      	ldrh	r2, [r7, #16]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad2      	subs	r2, r2, r3
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4413      	add	r3, r2
 8002666:	3b01      	subs	r3, #1
 8002668:	2201      	movs	r2, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	461a      	mov	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	b29a      	uxth	r2, r3
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4413      	add	r3, r2
 8002680:	b298      	uxth	r0, r3
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <DrawChar+0x16c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	491b      	ldr	r1, [pc, #108]	; (80026f4 <DrawChar+0x170>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	88bb      	ldrh	r3, [r7, #4]
 8002696:	4619      	mov	r1, r3
 8002698:	f7ff ff4e 	bl	8002538 <BSP_LCD_DrawPixel>
 800269c:	e012      	b.n	80026c4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	4413      	add	r3, r2
 80026a6:	b298      	uxth	r0, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <DrawChar+0x16c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4911      	ldr	r1, [pc, #68]	; (80026f4 <DrawChar+0x170>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3304      	adds	r3, #4
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	4619      	mov	r1, r3
 80026c0:	f7ff ff3a 	bl	8002538 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	8a3b      	ldrh	r3, [r7, #16]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3c4      	bcc.n	800265c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	3301      	adds	r3, #1
 80026d6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d384      	bcc.n	80025f0 <DrawChar+0x6c>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000148 	.word	0x20000148
 80026f4:	2000014c 	.word	0x2000014c

080026f8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <FillBuffer+0x68>)
 8002708:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800270c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <FillBuffer+0x68>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <FillBuffer+0x68>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <FillBuffer+0x68>)
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <FillBuffer+0x6c>)
 800271e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <FillBuffer+0x68>)
 8002722:	f000 fced 	bl	8003100 <HAL_DMA2D_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d115      	bne.n	8002758 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	480c      	ldr	r0, [pc, #48]	; (8002760 <FillBuffer+0x68>)
 8002730:	f000 fe44 	bl	80033bc <HAL_DMA2D_ConfigLayer>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10e      	bne.n	8002758 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69f9      	ldr	r1, [r7, #28]
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <FillBuffer+0x68>)
 8002746:	f000 fd24 	bl	8003192 <HAL_DMA2D_Start>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002750:	210a      	movs	r1, #10
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <FillBuffer+0x68>)
 8002754:	f000 fd48 	bl	80031e8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200000d8 	.word	0x200000d8
 8002764:	4002b000 	.word	0x4002b000

08002768 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <BSP_SDRAM_Init+0xac>)
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <BSP_SDRAM_Init+0xb0>)
 8002770:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <BSP_SDRAM_Init+0xb4>)
 800277a:	2207      	movs	r2, #7
 800277c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002780:	2204      	movs	r2, #4
 8002782:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002786:	2207      	movs	r2, #7
 8002788:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <BSP_SDRAM_Init+0xb4>)
 800278c:	2202      	movs	r2, #2
 800278e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002792:	2202      	movs	r2, #2
 8002794:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <BSP_SDRAM_Init+0xb4>)
 8002798:	2202      	movs	r2, #2
 800279a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <BSP_SDRAM_Init+0xac>)
 800279e:	2201      	movs	r2, #1
 80027a0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027aa:	2204      	movs	r2, #4
 80027ac:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027b0:	2210      	movs	r2, #16
 80027b2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80027c0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ce:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80027de:	2100      	movs	r1, #0
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027e2:	f000 f87f 	bl	80028e4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <BSP_SDRAM_Init+0xb4>)
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <BSP_SDRAM_Init+0xac>)
 80027ea:	f002 fd09 	bl	8005200 <HAL_SDRAM_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e002      	b.n	8002802 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002802:	f240 506a 	movw	r0, #1386	; 0x56a
 8002806:	f000 f80d 	bl	8002824 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <BSP_SDRAM_Init+0xb8>)
 800280c:	781b      	ldrb	r3, [r3, #0]
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000164 	.word	0x20000164
 8002818:	a0000140 	.word	0xa0000140
 800281c:	20000198 	.word	0x20000198
 8002820:	20000050 	.word	0x20000050

08002824 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002838:	2208      	movs	r2, #8
 800283a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800283e:	2201      	movs	r2, #1
 8002840:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284c:	4923      	ldr	r1, [pc, #140]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800284e:	4824      	ldr	r0, [pc, #144]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002850:	f002 fd0a 	bl	8005268 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f993 	bl	8002b80 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800285c:	2202      	movs	r2, #2
 800285e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002862:	2208      	movs	r2, #8
 8002864:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002868:	2201      	movs	r2, #1
 800286a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002876:	4919      	ldr	r1, [pc, #100]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002878:	4819      	ldr	r0, [pc, #100]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800287a:	f002 fcf5 	bl	8005268 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002880:	2203      	movs	r2, #3
 8002882:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002886:	2208      	movs	r2, #8
 8002888:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800288c:	2204      	movs	r2, #4
 800288e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289a:	4910      	ldr	r1, [pc, #64]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800289c:	4810      	ldr	r0, [pc, #64]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800289e:	f002 fce3 	bl	8005268 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80028a2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80028a6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028aa:	2204      	movs	r2, #4
 80028ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b0:	2208      	movs	r2, #8
 80028b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028be:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80028c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028c8:	f002 fcce 	bl	8005268 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028d0:	f002 fcf5 	bl	80052be <HAL_SDRAM_ProgramRefreshRate>
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200001b4 	.word	0x200001b4
 80028e0:	20000164 	.word	0x20000164

080028e4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80ec 	beq.w	8002ace <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fa:	4b77      	ldr	r3, [pc, #476]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4a76      	ldr	r2, [pc, #472]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6393      	str	r3, [r2, #56]	; 0x38
 8002906:	4b74      	ldr	r3, [pc, #464]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800291c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a5a      	ldr	r2, [pc, #360]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b54      	ldr	r3, [pc, #336]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029a8:	f043 0320 	orr.w	r3, r3, #32
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <BSP_SDRAM_MspInit+0x1f4>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029da:	2302      	movs	r3, #2
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80029e2:	230c      	movs	r3, #12
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80029e6:	2360      	movs	r3, #96	; 0x60
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80029ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	483a      	ldr	r0, [pc, #232]	; (8002adc <BSP_SDRAM_MspInit+0x1f8>)
 80029f2:	f000 fe11 	bl	8003618 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80029f6:	2301      	movs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80029fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fe:	4619      	mov	r1, r3
 8002a00:	4837      	ldr	r0, [pc, #220]	; (8002ae0 <BSP_SDRAM_MspInit+0x1fc>)
 8002a02:	f000 fe09 	bl	8003618 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002a06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4834      	ldr	r0, [pc, #208]	; (8002ae4 <BSP_SDRAM_MspInit+0x200>)
 8002a14:	f000 fe00 	bl	8003618 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002a18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <BSP_SDRAM_MspInit+0x204>)
 8002a26:	f000 fdf7 	bl	8003618 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002a2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	482d      	ldr	r0, [pc, #180]	; (8002aec <BSP_SDRAM_MspInit+0x208>)
 8002a38:	f000 fdee 	bl	8003618 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002a3c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	4829      	ldr	r0, [pc, #164]	; (8002af0 <BSP_SDRAM_MspInit+0x20c>)
 8002a4a:	f000 fde5 	bl	8003618 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a60:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a68:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a70:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a78:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a86:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a90:	2203      	movs	r2, #3
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <BSP_SDRAM_MspInit+0x214>)
 8002aa4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002ab2:	4810      	ldr	r0, [pc, #64]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002ab4:	f000 fa16 	bl	8002ee4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002ab8:	480e      	ldr	r0, [pc, #56]	; (8002af4 <BSP_SDRAM_MspInit+0x210>)
 8002aba:	f000 f965 	bl	8002d88 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	2038      	movs	r0, #56	; 0x38
 8002ac4:	f000 f936 	bl	8002d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002ac8:	2038      	movs	r0, #56	; 0x38
 8002aca:	f000 f94f 	bl	8002d6c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002ace:	bf00      	nop
 8002ad0:	3740      	adds	r7, #64	; 0x40
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021800 	.word	0x40021800
 8002af4:	200001c4 	.word	0x200001c4
 8002af8:	40026410 	.word	0x40026410

08002afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <HAL_Init+0x40>)
 8002b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_Init+0x40>)
 8002b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_Init+0x40>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f000 f8fa 	bl	8002d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe faf6 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b30:	f7fe facc 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00

08002b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_IncTick+0x20>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_IncTick+0x24>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_IncTick+0x24>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000058 	.word	0x20000058
 8002b64:	20000518 	.word	0x20000518

08002b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_GetTick+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000518 	.word	0x20000518

08002b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff ffee 	bl	8002b68 <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d005      	beq.n	8002ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_Delay+0x40>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ba6:	bf00      	nop
 8002ba8:	f7ff ffde 	bl	8002b68 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8f7      	bhi.n	8002ba8 <HAL_Delay+0x28>
  {
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000058 	.word	0x20000058

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <__NVIC_EnableIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff4c 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d46:	f7ff ff61 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7ff ffb1 	bl	8002cb8 <NVIC_EncodePriority>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff80 	bl	8002c64 <__NVIC_SetPriority>
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff54 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff fee8 	bl	8002b68 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e099      	b.n	8002ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	e00f      	b.n	8002de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc6:	f7ff fecf 	bl	8002b68 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d908      	bls.n	8002de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e078      	b.n	8002ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e8      	bne.n	8002dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_DMA_Init+0x158>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d117      	bne.n	8002eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f8bd 	bl	800300c <DMA_CheckFifoParam>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f874 	bl	8002fa0 <DMA_CalcBaseAndBitshift>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	f010803f 	.word	0xf010803f

08002ee4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e050      	b.n	8002f98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	e048      	b.n	8002f98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2221      	movs	r2, #33	; 0x21
 8002f44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f82a 	bl	8002fa0 <DMA_CalcBaseAndBitshift>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	223f      	movs	r2, #63	; 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3b10      	subs	r3, #16
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <DMA_CalcBaseAndBitshift+0x64>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <DMA_CalcBaseAndBitshift+0x68>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d909      	bls.n	8002fe2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe0:	e007      	b.n	8002ff2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	aaaaaaab 	.word	0xaaaaaaab
 8003008:	080093d8 	.word	0x080093d8

0800300c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d855      	bhi.n	80030d8 <DMA_CheckFifoParam+0xcc>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <DMA_CheckFifoParam+0x28>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003045 	.word	0x08003045
 8003038:	08003057 	.word	0x08003057
 800303c:	08003045 	.word	0x08003045
 8003040:	080030d9 	.word	0x080030d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d045      	beq.n	80030dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e042      	b.n	80030dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800305e:	d13f      	bne.n	80030e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003064:	e03c      	b.n	80030e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	d121      	bne.n	80030b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d836      	bhi.n	80030e4 <DMA_CheckFifoParam+0xd8>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <DMA_CheckFifoParam+0x70>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	0800308d 	.word	0x0800308d
 8003080:	08003093 	.word	0x08003093
 8003084:	0800308d 	.word	0x0800308d
 8003088:	080030a5 	.word	0x080030a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      break;
 8003090:	e02f      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d024      	beq.n	80030e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a2:	e021      	b.n	80030e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ac:	d11e      	bne.n	80030ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030b2:	e01b      	b.n	80030ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <DMA_CheckFifoParam+0xb4>
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d003      	beq.n	80030c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030be:	e018      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e015      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      break;
 80030d6:	e00b      	b.n	80030f0 <DMA_CheckFifoParam+0xe4>
      break;
 80030d8:	bf00      	nop
 80030da:	e00a      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030dc:	bf00      	nop
 80030de:	e008      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e0:	bf00      	nop
 80030e2:	e006      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e4:	bf00      	nop
 80030e6:	e004      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <DMA_CheckFifoParam+0xe6>
      break;
 80030f0:	bf00      	nop
    }
  } 
  
  return status; 
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e03b      	b.n	800318a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd f9fe 	bl	8000528 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	f023 0107 	bic.w	r1, r3, #7
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800316a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d1      	ldr	r1, [r2, #12]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	430b      	orrs	r3, r1
 8003178:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af02      	add	r7, sp, #8
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_DMA2D_Start+0x1c>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e018      	b.n	80031e0 <HAL_DMA2D_Start+0x4e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f989 	bl	80034e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d056      	beq.n	80032b2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003204:	f7ff fcb0 	bl	8002b68 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800320a:	e04b      	b.n	80032a4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800321a:	2b00      	cmp	r3, #0
 800321c:	d023      	beq.n	8003266 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2221      	movs	r2, #33	; 0x21
 8003250:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2204      	movs	r2, #4
 8003256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0a5      	b.n	80033b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01a      	beq.n	80032a4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800326e:	f7ff fc7b 	bl	8002b68 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <HAL_DMA2D_PollForTransfer+0x9c>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e086      	b.n	80033b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ac      	beq.n	800320c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d061      	beq.n	8003398 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032d4:	f7ff fc48 	bl	8002b68 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80032da:	e056      	b.n	800338a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02e      	beq.n	800334c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2229      	movs	r2, #41	; 0x29
 8003336:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2204      	movs	r2, #4
 800333c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e032      	b.n	80033b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d01a      	beq.n	800338a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003354:	f7ff fc08 	bl	8002b68 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <HAL_DMA2D_PollForTransfer+0x182>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10f      	bne.n	800338a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e013      	b.n	80033b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0a1      	beq.n	80032dc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2212      	movs	r2, #18
 800339e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_DMA2D_ConfigLayer+0x20>
 80033d8:	2302      	movs	r3, #2
 80033da:	e079      	b.n	80034d0 <HAL_DMA2D_ConfigLayer+0x114>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	3318      	adds	r3, #24
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003406:	4b35      	ldr	r3, [pc, #212]	; (80034dc <HAL_DMA2D_ConfigLayer+0x120>)
 8003408:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d003      	beq.n	800341a <HAL_DMA2D_ConfigLayer+0x5e>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b09      	cmp	r3, #9
 8003418:	d107      	bne.n	800342a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e005      	b.n	8003436 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d120      	bne.n	800347e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43db      	mvns	r3, r3
 8003446:	ea02 0103 	and.w	r1, r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	430a      	orrs	r2, r1
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b0a      	cmp	r3, #10
 8003464:	d003      	beq.n	800346e <HAL_DMA2D_ConfigLayer+0xb2>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b09      	cmp	r3, #9
 800346c:	d127      	bne.n	80034be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
 800347c:	e01f      	b.n	80034be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	ea02 0103 	and.w	r1, r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d003      	beq.n	80034b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d106      	bne.n	80034be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80034bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	ff03000f 	.word	0xff03000f

080034e0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b08b      	sub	sp, #44	; 0x2c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	041a      	lsls	r2, r3, #16
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	431a      	orrs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003518:	d174      	bne.n	8003604 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003520:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003528:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003530:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	431a      	orrs	r2, r3
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	4313      	orrs	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
 8003550:	e053      	b.n	80035fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4313      	orrs	r3, r2
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e048      	b.n	80035fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d111      	bne.n	8003594 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	0cdb      	lsrs	r3, r3, #19
 8003574:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	0a9b      	lsrs	r3, r3, #10
 800357a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	08db      	lsrs	r3, r3, #3
 8003580:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	02db      	lsls	r3, r3, #11
 800358a:	4313      	orrs	r3, r2
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e032      	b.n	80035fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d117      	bne.n	80035cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	0fdb      	lsrs	r3, r3, #31
 80035a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	0cdb      	lsrs	r3, r3, #19
 80035a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	0adb      	lsrs	r3, r3, #11
 80035ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	08db      	lsrs	r3, r3, #3
 80035b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	029b      	lsls	r3, r3, #10
 80035bc:	431a      	orrs	r2, r3
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	03db      	lsls	r3, r3, #15
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e016      	b.n	80035fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	0f1b      	lsrs	r3, r3, #28
 80035d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	0d1b      	lsrs	r3, r3, #20
 80035d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	0b1b      	lsrs	r3, r3, #12
 80035dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	011a      	lsls	r2, r3, #4
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	431a      	orrs	r2, r3
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	4313      	orrs	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003602:	e003      	b.n	800360c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	60da      	str	r2, [r3, #12]
}
 800360c:	bf00      	nop
 800360e:	372c      	adds	r7, #44	; 0x2c
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e177      	b.n	8003924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 8166 	bne.w	800391e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d00b      	beq.n	8003672 <HAL_GPIO_Init+0x5a>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d007      	beq.n	8003672 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003666:	2b11      	cmp	r3, #17
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b12      	cmp	r3, #18
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0xfc>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b12      	cmp	r3, #18
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80c0 	beq.w	800391e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b65      	ldr	r3, [pc, #404]	; (8003938 <HAL_GPIO_Init+0x320>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a64      	ldr	r2, [pc, #400]	; (8003938 <HAL_GPIO_Init+0x320>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b62      	ldr	r3, [pc, #392]	; (8003938 <HAL_GPIO_Init+0x320>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a60      	ldr	r2, [pc, #384]	; (800393c <HAL_GPIO_Init+0x324>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_GPIO_Init+0x328>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d037      	beq.n	8003856 <HAL_GPIO_Init+0x23e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_GPIO_Init+0x32c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d031      	beq.n	8003852 <HAL_GPIO_Init+0x23a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a55      	ldr	r2, [pc, #340]	; (8003948 <HAL_GPIO_Init+0x330>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02b      	beq.n	800384e <HAL_GPIO_Init+0x236>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_GPIO_Init+0x334>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d025      	beq.n	800384a <HAL_GPIO_Init+0x232>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a53      	ldr	r2, [pc, #332]	; (8003950 <HAL_GPIO_Init+0x338>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01f      	beq.n	8003846 <HAL_GPIO_Init+0x22e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a52      	ldr	r2, [pc, #328]	; (8003954 <HAL_GPIO_Init+0x33c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d019      	beq.n	8003842 <HAL_GPIO_Init+0x22a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a51      	ldr	r2, [pc, #324]	; (8003958 <HAL_GPIO_Init+0x340>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_GPIO_Init+0x226>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a50      	ldr	r2, [pc, #320]	; (800395c <HAL_GPIO_Init+0x344>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00d      	beq.n	800383a <HAL_GPIO_Init+0x222>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a4f      	ldr	r2, [pc, #316]	; (8003960 <HAL_GPIO_Init+0x348>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <HAL_GPIO_Init+0x21e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4e      	ldr	r2, [pc, #312]	; (8003964 <HAL_GPIO_Init+0x34c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <HAL_GPIO_Init+0x21a>
 800382e:	2309      	movs	r3, #9
 8003830:	e012      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003832:	230a      	movs	r3, #10
 8003834:	e010      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003836:	2308      	movs	r3, #8
 8003838:	e00e      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800383a:	2307      	movs	r3, #7
 800383c:	e00c      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800383e:	2306      	movs	r3, #6
 8003840:	e00a      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003842:	2305      	movs	r3, #5
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003846:	2304      	movs	r3, #4
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003856:	2300      	movs	r3, #0
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003868:	4934      	ldr	r1, [pc, #208]	; (800393c <HAL_GPIO_Init+0x324>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_GPIO_Init+0x350>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389a:	4a33      	ldr	r2, [pc, #204]	; (8003968 <HAL_GPIO_Init+0x350>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038a0:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_GPIO_Init+0x350>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <HAL_GPIO_Init+0x350>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	f67f ae84 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3724      	adds	r7, #36	; 0x24
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40023800 	.word	0x40023800
 800393c:	40013800 	.word	0x40013800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40020800 	.word	0x40020800
 800394c:	40020c00 	.word	0x40020c00
 8003950:	40021000 	.word	0x40021000
 8003954:	40021400 	.word	0x40021400
 8003958:	40021800 	.word	0x40021800
 800395c:	40021c00 	.word	0x40021c00
 8003960:	40022000 	.word	0x40022000
 8003964:	40022400 	.word	0x40022400
 8003968:	40013c00 	.word	0x40013c00

0800396c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e0d9      	b.n	8003b3c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003988:	2201      	movs	r2, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	429a      	cmp	r2, r3
 80039a0:	f040 80c9 	bne.w	8003b36 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039a4:	4a6a      	ldr	r2, [pc, #424]	; (8003b50 <HAL_GPIO_DeInit+0x1e4>)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	3302      	adds	r3, #2
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a62      	ldr	r2, [pc, #392]	; (8003b54 <HAL_GPIO_DeInit+0x1e8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d037      	beq.n	8003a3e <HAL_GPIO_DeInit+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a61      	ldr	r2, [pc, #388]	; (8003b58 <HAL_GPIO_DeInit+0x1ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_GPIO_DeInit+0xce>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a60      	ldr	r2, [pc, #384]	; (8003b5c <HAL_GPIO_DeInit+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02b      	beq.n	8003a36 <HAL_GPIO_DeInit+0xca>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a5f      	ldr	r2, [pc, #380]	; (8003b60 <HAL_GPIO_DeInit+0x1f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d025      	beq.n	8003a32 <HAL_GPIO_DeInit+0xc6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a5e      	ldr	r2, [pc, #376]	; (8003b64 <HAL_GPIO_DeInit+0x1f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_GPIO_DeInit+0xc2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a5d      	ldr	r2, [pc, #372]	; (8003b68 <HAL_GPIO_DeInit+0x1fc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_DeInit+0xbe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a5c      	ldr	r2, [pc, #368]	; (8003b6c <HAL_GPIO_DeInit+0x200>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_DeInit+0xba>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a5b      	ldr	r2, [pc, #364]	; (8003b70 <HAL_GPIO_DeInit+0x204>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_DeInit+0xb6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <HAL_GPIO_DeInit+0x208>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_DeInit+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <HAL_GPIO_DeInit+0x20c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_DeInit+0xae>
 8003a16:	2309      	movs	r3, #9
 8003a18:	e012      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	e010      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	e00e      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a22:	2307      	movs	r3, #7
 8003a24:	e00c      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a26:	2306      	movs	r3, #6
 8003a28:	e00a      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	e008      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a2e:	2304      	movs	r3, #4
 8003a30:	e006      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a32:	2303      	movs	r3, #3
 8003a34:	e004      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_DeInit+0xd4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	f002 0203 	and.w	r2, r2, #3
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	4093      	lsls	r3, r2
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d132      	bne.n	8003ab6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	4948      	ldr	r1, [pc, #288]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	4945      	ldr	r1, [pc, #276]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	4941      	ldr	r1, [pc, #260]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a7a:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	493e      	ldr	r1, [pc, #248]	; (8003b7c <HAL_GPIO_DeInit+0x210>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_GPIO_DeInit+0x1e4>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	4829      	ldr	r0, [pc, #164]	; (8003b50 <HAL_GPIO_DeInit+0x1e4>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	400a      	ands	r2, r1
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2103      	movs	r1, #3
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	08d2      	lsrs	r2, r2, #3
 8003aec:	4019      	ands	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2103      	movs	r1, #3
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	2101      	movs	r1, #1
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2103      	movs	r1, #3
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	f67f af22 	bls.w	8003988 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40022400 	.word	0x40022400
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b9c:	e003      	b.n	8003ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	041a      	lsls	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e11f      	b.n	8003e06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc fe6e 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c18:	f001 f8da 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4a7b      	ldr	r2, [pc, #492]	; (8003e10 <HAL_I2C_Init+0x25c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d807      	bhi.n	8003c38 <HAL_I2C_Init+0x84>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a7a      	ldr	r2, [pc, #488]	; (8003e14 <HAL_I2C_Init+0x260>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bf94      	ite	ls
 8003c30:	2301      	movls	r3, #1
 8003c32:	2300      	movhi	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e006      	b.n	8003c46 <HAL_I2C_Init+0x92>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <HAL_I2C_Init+0x264>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bf94      	ite	ls
 8003c40:	2301      	movls	r3, #1
 8003c42:	2300      	movhi	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0db      	b.n	8003e06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a72      	ldr	r2, [pc, #456]	; (8003e1c <HAL_I2C_Init+0x268>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a64      	ldr	r2, [pc, #400]	; (8003e10 <HAL_I2C_Init+0x25c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <HAL_I2C_Init+0xd4>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	e009      	b.n	8003c9c <HAL_I2C_Init+0xe8>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	4a63      	ldr	r2, [pc, #396]	; (8003e20 <HAL_I2C_Init+0x26c>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4956      	ldr	r1, [pc, #344]	; (8003e10 <HAL_I2C_Init+0x25c>)
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	d80d      	bhi.n	8003cd8 <HAL_I2C_Init+0x124>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e59      	subs	r1, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	bf38      	it	cc
 8003cd4:	2304      	movcc	r3, #4
 8003cd6:	e04f      	b.n	8003d78 <HAL_I2C_Init+0x1c4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <HAL_I2C_Init+0x150>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1e58      	subs	r0, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e012      	b.n	8003d2a <HAL_I2C_Init+0x176>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	0099      	lsls	r1, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Init+0x17e>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e022      	b.n	8003d78 <HAL_I2C_Init+0x1c4>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <HAL_I2C_Init+0x1a4>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e58      	subs	r0, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	440b      	add	r3, r1
 8003d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d56:	e00f      	b.n	8003d78 <HAL_I2C_Init+0x1c4>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	0099      	lsls	r1, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	6809      	ldr	r1, [r1, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6911      	ldr	r1, [r2, #16]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	000186a0 	.word	0x000186a0
 8003e14:	001e847f 	.word	0x001e847f
 8003e18:	003d08ff 	.word	0x003d08ff
 8003e1c:	431bde83 	.word	0x431bde83
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d129      	bne.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2224      	movs	r2, #36	; 0x24
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0210 	bic.w	r2, r2, #16
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d12a      	bne.n	8003f0c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	89fb      	ldrh	r3, [r7, #14]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	89fa      	ldrh	r2, [r7, #14]
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0bf      	b.n	80040ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc fdd6 	bl	8000af4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68d9      	ldr	r1, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6959      	ldr	r1, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 800401a:	400b      	ands	r3, r1
 800401c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6959      	ldr	r1, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0206 	orr.w	r2, r2, #6
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	f000f800 	.word	0xf000f800

080040bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_LTDC_ConfigLayer+0x1a>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e02c      	b.n	8004130 <HAL_LTDC_ConfigLayer+0x74>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2134      	movs	r1, #52	; 0x34
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f83b 	bl	800418c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bdb0      	pop	{r4, r5, r7, pc}

08004138 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_LTDC_EnableDither+0x16>
 800414a:	2302      	movs	r3, #2
 800414c:	e016      	b.n	800417c <HAL_LTDC_EnableDither+0x44>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_LTDC_EnableDither+0x50>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_LTDC_EnableDither+0x50>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40016800 	.word	0x40016800

0800418c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	4413      	add	r3, r2
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	4413      	add	r3, r2
 80041ba:	3384      	adds	r3, #132	; 0x84
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	4611      	mov	r1, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	01d2      	lsls	r2, r2, #7
 80041c8:	440a      	add	r2, r1
 80041ca:	3284      	adds	r2, #132	; 0x84
 80041cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	4413      	add	r3, r2
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	440b      	add	r3, r1
 80041f2:	3384      	adds	r3, #132	; 0x84
 80041f4:	4619      	mov	r1, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420a:	4413      	add	r3, r2
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	01db      	lsls	r3, r3, #7
 800421a:	4413      	add	r3, r2
 800421c:	3384      	adds	r3, #132	; 0x84
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	4611      	mov	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	01d2      	lsls	r2, r2, #7
 800422a:	440a      	add	r2, r1
 800422c:	3284      	adds	r2, #132	; 0x84
 800422e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004232:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004242:	4413      	add	r3, r2
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4619      	mov	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	01db      	lsls	r3, r3, #7
 8004250:	440b      	add	r3, r1
 8004252:	3384      	adds	r3, #132	; 0x84
 8004254:	4619      	mov	r1, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	01db      	lsls	r3, r3, #7
 8004266:	4413      	add	r3, r2
 8004268:	3384      	adds	r3, #132	; 0x84
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	4611      	mov	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	01d2      	lsls	r2, r2, #7
 8004276:	440a      	add	r2, r1
 8004278:	3284      	adds	r2, #132	; 0x84
 800427a:	f023 0307 	bic.w	r3, r3, #7
 800427e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	3384      	adds	r3, #132	; 0x84
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	01db      	lsls	r3, r3, #7
 80042bc:	4413      	add	r3, r2
 80042be:	3384      	adds	r3, #132	; 0x84
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	01db      	lsls	r3, r3, #7
 80042cc:	4413      	add	r3, r2
 80042ce:	3384      	adds	r3, #132	; 0x84
 80042d0:	461a      	mov	r2, r3
 80042d2:	2300      	movs	r3, #0
 80042d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042dc:	461a      	mov	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	440b      	add	r3, r1
 80042f2:	3384      	adds	r3, #132	; 0x84
 80042f4:	4619      	mov	r1, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	01db      	lsls	r3, r3, #7
 8004306:	4413      	add	r3, r2
 8004308:	3384      	adds	r3, #132	; 0x84
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	4611      	mov	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	01d2      	lsls	r2, r2, #7
 8004316:	440a      	add	r2, r1
 8004318:	3284      	adds	r2, #132	; 0x84
 800431a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	01db      	lsls	r3, r3, #7
 800432a:	4413      	add	r3, r2
 800432c:	3384      	adds	r3, #132	; 0x84
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	4413      	add	r3, r2
 8004342:	3384      	adds	r3, #132	; 0x84
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	4611      	mov	r1, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	01d2      	lsls	r2, r2, #7
 8004350:	440a      	add	r2, r1
 8004352:	3284      	adds	r2, #132	; 0x84
 8004354:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004358:	f023 0307 	bic.w	r3, r3, #7
 800435c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	6809      	ldr	r1, [r1, #0]
 800436a:	4608      	mov	r0, r1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	01c9      	lsls	r1, r1, #7
 8004370:	4401      	add	r1, r0
 8004372:	3184      	adds	r1, #132	; 0x84
 8004374:	4313      	orrs	r3, r2
 8004376:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	; 0x84
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	01db      	lsls	r3, r3, #7
 8004392:	4413      	add	r3, r2
 8004394:	3384      	adds	r3, #132	; 0x84
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	4413      	add	r3, r2
 80043a8:	3384      	adds	r3, #132	; 0x84
 80043aa:	461a      	mov	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80043ba:	2304      	movs	r3, #4
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e01b      	b.n	80043f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d102      	bne.n	80043ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80043c8:	2303      	movs	r3, #3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e014      	b.n	80043f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d00b      	beq.n	80043ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d007      	beq.n	80043ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d003      	beq.n	80043ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043ea:	2b07      	cmp	r3, #7
 80043ec:	d102      	bne.n	80043f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80043ee:	2302      	movs	r3, #2
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e001      	b.n	80043f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043f4:	2301      	movs	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	4413      	add	r3, r2
 8004404:	3384      	adds	r3, #132	; 0x84
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4611      	mov	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	01d2      	lsls	r2, r2, #7
 8004412:	440a      	add	r2, r1
 8004414:	3284      	adds	r2, #132	; 0x84
 8004416:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800441a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	041a      	lsls	r2, r3, #16
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1acb      	subs	r3, r1, r3
 8004432:	69f9      	ldr	r1, [r7, #28]
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	3303      	adds	r3, #3
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6809      	ldr	r1, [r1, #0]
 800443e:	4608      	mov	r0, r1
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	01c9      	lsls	r1, r1, #7
 8004444:	4401      	add	r1, r0
 8004446:	3184      	adds	r1, #132	; 0x84
 8004448:	4313      	orrs	r3, r2
 800444a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	4413      	add	r3, r2
 8004458:	3384      	adds	r3, #132	; 0x84
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	4611      	mov	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	01d2      	lsls	r2, r2, #7
 8004466:	440a      	add	r2, r1
 8004468:	3284      	adds	r2, #132	; 0x84
 800446a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	01db      	lsls	r3, r3, #7
 800447e:	4413      	add	r3, r2
 8004480:	3384      	adds	r3, #132	; 0x84
 8004482:	461a      	mov	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	4413      	add	r3, r2
 8004496:	3384      	adds	r3, #132	; 0x84
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	4611      	mov	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	01d2      	lsls	r2, r2, #7
 80044a4:	440a      	add	r2, r1
 80044a6:	3284      	adds	r2, #132	; 0x84
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	3724      	adds	r7, #36	; 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_PWREx_EnableOverDrive+0x90>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_PWREx_EnableOverDrive+0x90>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_PWREx_EnableOverDrive+0x90>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_PWREx_EnableOverDrive+0x94>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e8:	f7fe fb3e 	bl	8002b68 <HAL_GetTick>
 80044ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044ee:	e009      	b.n	8004504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f0:	f7fe fb3a 	bl	8002b68 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044fe:	d901      	bls.n	8004504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e01f      	b.n	8004544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_PWREx_EnableOverDrive+0x98>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d1ee      	bne.n	80044f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004518:	f7fe fb26 	bl	8002b68 <HAL_GetTick>
 800451c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800451e:	e009      	b.n	8004534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004520:	f7fe fb22 	bl	8002b68 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800452e:	d901      	bls.n	8004534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e007      	b.n	8004544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_PWREx_EnableOverDrive+0x98>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004540:	d1ee      	bne.n	8004520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	420e0040 	.word	0x420e0040
 8004554:	40007000 	.word	0x40007000
 8004558:	420e0044 	.word	0x420e0044

0800455c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e25b      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d075      	beq.n	8004666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457a:	4ba3      	ldr	r3, [pc, #652]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4ba0      	ldr	r3, [pc, #640]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458e:	2b08      	cmp	r3, #8
 8004590:	d112      	bne.n	80045b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004592:	4b9d      	ldr	r3, [pc, #628]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459e:	d10b      	bne.n	80045b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	4b99      	ldr	r3, [pc, #612]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05b      	beq.n	8004664 <HAL_RCC_OscConfig+0x108>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d157      	bne.n	8004664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e236      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCC_OscConfig+0x74>
 80045c2:	4b91      	ldr	r3, [pc, #580]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a90      	ldr	r2, [pc, #576]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e01d      	b.n	800460c <HAL_RCC_OscConfig+0xb0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x98>
 80045da:	4b8b      	ldr	r3, [pc, #556]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a8a      	ldr	r2, [pc, #552]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a87      	ldr	r2, [pc, #540]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0xb0>
 80045f4:	4b84      	ldr	r3, [pc, #528]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a83      	ldr	r2, [pc, #524]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fe faa8 	bl	8002b68 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800461c:	f7fe faa4 	bl	8002b68 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e1fb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b76      	ldr	r3, [pc, #472]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0xc0>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fa94 	bl	8002b68 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fa90 	bl	8002b68 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1e7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	4b6c      	ldr	r3, [pc, #432]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0xe8>
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d063      	beq.n	800473a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004672:	4b65      	ldr	r3, [pc, #404]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004686:	2b08      	cmp	r3, #8
 8004688:	d11c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468a:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	4b5c      	ldr	r3, [pc, #368]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_RCC_OscConfig+0x152>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d001      	beq.n	80046ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e1bb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ae:	4b56      	ldr	r3, [pc, #344]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4952      	ldr	r1, [pc, #328]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	e03a      	b.n	800473a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046cc:	4b4f      	ldr	r3, [pc, #316]	; (800480c <HAL_RCC_OscConfig+0x2b0>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fe fa49 	bl	8002b68 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046da:	f7fe fa45 	bl	8002b68 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e19c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	4b46      	ldr	r3, [pc, #280]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f8:	4b43      	ldr	r3, [pc, #268]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4940      	ldr	r1, [pc, #256]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]
 800470c:	e015      	b.n	800473a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <HAL_RCC_OscConfig+0x2b0>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fe fa28 	bl	8002b68 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471c:	f7fe fa24 	bl	8002b68 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e17b      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d030      	beq.n	80047a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474e:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCC_OscConfig+0x2b4>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fe fa08 	bl	8002b68 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475c:	f7fe fa04 	bl	8002b68 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e15b      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x200>
 800477a:	e015      	b.n	80047a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_RCC_OscConfig+0x2b4>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004782:	f7fe f9f1 	bl	8002b68 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478a:	f7fe f9ed 	bl	8002b68 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e144      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a0 	beq.w	80048f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_OscConfig+0x2b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d121      	bne.n	8004836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_OscConfig+0x2b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a07      	ldr	r2, [pc, #28]	; (8004814 <HAL_RCC_OscConfig+0x2b8>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fe:	f7fe f9b3 	bl	8002b68 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	e011      	b.n	800482a <HAL_RCC_OscConfig+0x2ce>
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	42470000 	.word	0x42470000
 8004810:	42470e80 	.word	0x42470e80
 8004814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004818:	f7fe f9a6 	bl	8002b68 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0fd      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482a:	4b81      	ldr	r3, [pc, #516]	; (8004a30 <HAL_RCC_OscConfig+0x4d4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x2f0>
 800483e:	4b7d      	ldr	r3, [pc, #500]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4a7c      	ldr	r2, [pc, #496]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6713      	str	r3, [r2, #112]	; 0x70
 800484a:	e01c      	b.n	8004886 <HAL_RCC_OscConfig+0x32a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b05      	cmp	r3, #5
 8004852:	d10c      	bne.n	800486e <HAL_RCC_OscConfig+0x312>
 8004854:	4b77      	ldr	r3, [pc, #476]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a76      	ldr	r2, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	4b74      	ldr	r3, [pc, #464]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	4a73      	ldr	r2, [pc, #460]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	; 0x70
 800486c:	e00b      	b.n	8004886 <HAL_RCC_OscConfig+0x32a>
 800486e:	4b71      	ldr	r3, [pc, #452]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a70      	ldr	r2, [pc, #448]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	4b6e      	ldr	r3, [pc, #440]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a6d      	ldr	r2, [pc, #436]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d015      	beq.n	80048ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488e:	f7fe f96b 	bl	8002b68 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fe f967 	bl	8002b68 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0bc      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ac:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ee      	beq.n	8004896 <HAL_RCC_OscConfig+0x33a>
 80048b8:	e014      	b.n	80048e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ba:	f7fe f955 	bl	8002b68 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c2:	f7fe f951 	bl	8002b68 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e0a6      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d8:	4b56      	ldr	r3, [pc, #344]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ee      	bne.n	80048c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ea:	4b52      	ldr	r3, [pc, #328]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	4a51      	ldr	r2, [pc, #324]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8092 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004900:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b08      	cmp	r3, #8
 800490a:	d05c      	beq.n	80049c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d141      	bne.n	8004998 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004914:	4b48      	ldr	r3, [pc, #288]	; (8004a38 <HAL_RCC_OscConfig+0x4dc>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fe f925 	bl	8002b68 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004922:	f7fe f921 	bl	8002b68 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e078      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004934:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	3b01      	subs	r3, #1
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	4933      	ldr	r1, [pc, #204]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496a:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <HAL_RCC_OscConfig+0x4dc>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fe f8fa 	bl	8002b68 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004978:	f7fe f8f6 	bl	8002b68 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e04d      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x41c>
 8004996:	e045      	b.n	8004a24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_OscConfig+0x4dc>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fe f8e3 	bl	8002b68 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fe f8df 	bl	8002b68 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e036      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0x44a>
 80049c4:	e02e      	b.n	8004a24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e029      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCC_OscConfig+0x4d8>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d11c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d115      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40007000 	.word	0x40007000
 8004a34:	40023800 	.word	0x40023800
 8004a38:	42470060 	.word	0x42470060

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cc      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b68      	ldr	r3, [pc, #416]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d90c      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b65      	ldr	r3, [pc, #404]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a58      	ldr	r2, [pc, #352]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d044      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d119      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e067      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4934      	ldr	r1, [pc, #208]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7fe f81c 	bl	8002b68 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fe f818 	bl	8002b68 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d20c      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1c8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fc fa9a 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08006d28 	.word	0x08006d28
 8004c00:	20000000 	.word	0x20000000
 8004c04:	20000054 	.word	0x20000054

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1e:	4b63      	ldr	r3, [pc, #396]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d007      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x32>
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x38>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 80b4 	bne.w	8004d9c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b5e      	ldr	r3, [pc, #376]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c36:	60bb      	str	r3, [r7, #8]
       break;
 8004c38:	e0b3      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b5e      	ldr	r3, [pc, #376]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c3c:	60bb      	str	r3, [r7, #8]
      break;
 8004c3e:	e0b0      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b5a      	ldr	r3, [pc, #360]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b58      	ldr	r3, [pc, #352]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04a      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b55      	ldr	r3, [pc, #340]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	ea03 0501 	and.w	r5, r3, r1
 8004c6c:	ea04 0602 	and.w	r6, r4, r2
 8004c70:	4629      	mov	r1, r5
 8004c72:	4632      	mov	r2, r6
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	f04f 0400 	mov.w	r4, #0
 8004c7c:	0154      	lsls	r4, r2, #5
 8004c7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c82:	014b      	lsls	r3, r1, #5
 8004c84:	4619      	mov	r1, r3
 8004c86:	4622      	mov	r2, r4
 8004c88:	1b49      	subs	r1, r1, r5
 8004c8a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	f04f 0400 	mov.w	r4, #0
 8004c96:	0194      	lsls	r4, r2, #6
 8004c98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c9c:	018b      	lsls	r3, r1, #6
 8004c9e:	1a5b      	subs	r3, r3, r1
 8004ca0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	00e2      	lsls	r2, r4, #3
 8004cae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cb2:	00d9      	lsls	r1, r3, #3
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	195b      	adds	r3, r3, r5
 8004cba:	eb44 0406 	adc.w	r4, r4, r6
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	0262      	lsls	r2, r4, #9
 8004cc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ccc:	0259      	lsls	r1, r3, #9
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f7fb fa84 	bl	80001ec <__aeabi_uldivmod>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e049      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cec:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	f04f 0400 	mov.w	r4, #0
 8004cf6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	ea03 0501 	and.w	r5, r3, r1
 8004d02:	ea04 0602 	and.w	r6, r4, r2
 8004d06:	4629      	mov	r1, r5
 8004d08:	4632      	mov	r2, r6
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	f04f 0400 	mov.w	r4, #0
 8004d12:	0154      	lsls	r4, r2, #5
 8004d14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d18:	014b      	lsls	r3, r1, #5
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	1b49      	subs	r1, r1, r5
 8004d20:	eb62 0206 	sbc.w	r2, r2, r6
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	f04f 0400 	mov.w	r4, #0
 8004d2c:	0194      	lsls	r4, r2, #6
 8004d2e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d32:	018b      	lsls	r3, r1, #6
 8004d34:	1a5b      	subs	r3, r3, r1
 8004d36:	eb64 0402 	sbc.w	r4, r4, r2
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	00e2      	lsls	r2, r4, #3
 8004d44:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d48:	00d9      	lsls	r1, r3, #3
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	195b      	adds	r3, r3, r5
 8004d50:	eb44 0406 	adc.w	r4, r4, r6
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	02a2      	lsls	r2, r4, #10
 8004d5e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d62:	0299      	lsls	r1, r3, #10
 8004d64:	460b      	mov	r3, r1
 8004d66:	4614      	mov	r4, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fa39 	bl	80001ec <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	60bb      	str	r3, [r7, #8]
      break;
 8004d9a:	e002      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d9e:	60bb      	str	r3, [r7, #8]
      break;
 8004da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da2:	68bb      	ldr	r3, [r7, #8]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	007a1200 	.word	0x007a1200

08004db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000

08004dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dd4:	f7ff fff0 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4601      	mov	r1, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0a9b      	lsrs	r3, r3, #10
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4a03      	ldr	r2, [pc, #12]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40023800 	.word	0x40023800
 8004df4:	08006d38 	.word	0x08006d38

08004df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dfc:	f7ff ffdc 	bl	8004db8 <HAL_RCC_GetHCLKFreq>
 8004e00:	4601      	mov	r1, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0b5b      	lsrs	r3, r3, #13
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4a03      	ldr	r2, [pc, #12]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e0e:	5cd3      	ldrb	r3, [r2, r3]
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	08006d38 	.word	0x08006d38

08004e20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_GetClockConfig+0x5c>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCC_GetClockConfig+0x60>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	601a      	str	r2, [r3, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d075      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb8:	4bad      	ldr	r3, [pc, #692]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fe53 	bl	8002b68 <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ec6:	f7fd fe4f 	bl	8002b68 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e18b      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ed8:	4ba6      	ldr	r3, [pc, #664]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	019a      	lsls	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	071b      	lsls	r3, r3, #28
 8004efc:	499d      	ldr	r1, [pc, #628]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01f      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f10:	4b98      	ldr	r3, [pc, #608]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f16:	0f1b      	lsrs	r3, r3, #28
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	019a      	lsls	r2, r3, #6
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	071b      	lsls	r3, r3, #28
 8004f30:	4990      	ldr	r1, [pc, #576]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f38:	4b8e      	ldr	r3, [pc, #568]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3e:	f023 021f 	bic.w	r2, r3, #31
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	498a      	ldr	r1, [pc, #552]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	019a      	lsls	r2, r3, #6
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	071b      	lsls	r3, r3, #28
 8004f70:	4980      	ldr	r1, [pc, #512]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f78:	4b7d      	ldr	r3, [pc, #500]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7e:	f7fd fdf3 	bl	8002b68 <HAL_GetTick>
 8004f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f86:	f7fd fdef 	bl	8002b68 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e12b      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f98:	4b76      	ldr	r3, [pc, #472]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d079      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fbc:	4b6e      	ldr	r3, [pc, #440]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc2:	f7fd fdd1 	bl	8002b68 <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fca:	f7fd fdcd 	bl	8002b68 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e109      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fdc:	4b65      	ldr	r3, [pc, #404]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe8:	d0ef      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ff6:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	0f1b      	lsrs	r3, r3, #28
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	019a      	lsls	r2, r3, #6
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	431a      	orrs	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	071b      	lsls	r3, r3, #28
 8005016:	4957      	ldr	r1, [pc, #348]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800501e:	4b55      	ldr	r3, [pc, #340]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005024:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	3b01      	subs	r3, #1
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	4950      	ldr	r1, [pc, #320]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01e      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005044:	4b4b      	ldr	r3, [pc, #300]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	0e1b      	lsrs	r3, r3, #24
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	071b      	lsls	r3, r3, #28
 8005064:	4943      	ldr	r1, [pc, #268]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800506c:	4b41      	ldr	r3, [pc, #260]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800506e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005072:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	493e      	ldr	r1, [pc, #248]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005082:	4b3d      	ldr	r3, [pc, #244]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005088:	f7fd fd6e 	bl	8002b68 <HAL_GetTick>
 800508c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005090:	f7fd fd6a 	bl	8002b68 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e0a6      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050a2:	4b34      	ldr	r3, [pc, #208]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ae:	d1ef      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 808d 	beq.w	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050da:	4b28      	ldr	r3, [pc, #160]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a27      	ldr	r2, [pc, #156]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050e6:	f7fd fd3f 	bl	8002b68 <HAL_GetTick>
 80050ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ee:	f7fd fd3b 	bl	8002b68 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e077      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005114:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d039      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d032      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005140:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11e      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005152:	f7fd fd09 	bl	8002b68 <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005158:	e014      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515a:	f7fd fd05 	bl	8002b68 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	; 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d90b      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e03f      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005170:	42470068 	.word	0x42470068
 8005174:	40023800 	.word	0x40023800
 8005178:	42470070 	.word	0x42470070
 800517c:	40007000 	.word	0x40007000
 8005180:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0e4      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519c:	d10d      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x336>
 800519e:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	4911      	ldr	r1, [pc, #68]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	608b      	str	r3, [r1, #8]
 80051b8:	e005      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051c4:	6093      	str	r3, [r2, #8]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d2:	4909      	ldr	r1, [pc, #36]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	424711e0 	.word	0x424711e0

08005200 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e025      	b.n	8005260 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fb fa81 	bl	8000730 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f001 fbef 	bl	8006a24 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	461a      	mov	r2, r3
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	f001 fc5a 	bl	8006b0a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d101      	bne.n	8005284 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	e018      	b.n	80052b6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fcb7 	bl	8006c08 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d104      	bne.n	80052ac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2205      	movs	r2, #5
 80052a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80052aa:	e003      	b.n	80052b4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d101      	bne.n	80052d8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
 80052d6:	e00e      	b.n	80052f6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fcca 	bl	8006c80 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e056      	b.n	80053be <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb fe68 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	ea42 0103 	orr.w	r1, r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 0104 	and.w	r1, r3, #4
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e01a      	b.n	800540e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fb fe4d 	bl	8001090 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b088      	sub	sp, #32
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_SPI_Transmit+0x22>
 8005434:	2302      	movs	r3, #2
 8005436:	e11e      	b.n	8005676 <HAL_SPI_Transmit+0x260>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005440:	f7fd fb92 	bl	8002b68 <HAL_GetTick>
 8005444:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545a:	e103      	b.n	8005664 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x52>
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800546c:	e0fa      	b.n	8005664 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d107      	bne.n	80054c6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d007      	beq.n	80054e4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ec:	d14b      	bne.n	8005586 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_SPI_Transmit+0xe6>
 80054f6:	8afb      	ldrh	r3, [r7, #22]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d13e      	bne.n	800557a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	1c9a      	adds	r2, r3, #2
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005520:	e02b      	b.n	800557a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d112      	bne.n	8005556 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	881a      	ldrh	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	1c9a      	adds	r2, r3, #2
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	86da      	strh	r2, [r3, #54]	; 0x36
 8005554:	e011      	b.n	800557a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005556:	f7fd fb07 	bl	8002b68 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d803      	bhi.n	800556e <HAL_SPI_Transmit+0x158>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d102      	bne.n	8005574 <HAL_SPI_Transmit+0x15e>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005578:	e074      	b.n	8005664 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ce      	bne.n	8005522 <HAL_SPI_Transmit+0x10c>
 8005584:	e04c      	b.n	8005620 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_SPI_Transmit+0x17e>
 800558e:	8afb      	ldrh	r3, [r7, #22]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d140      	bne.n	8005616 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	7812      	ldrb	r2, [r2, #0]
 80055a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055ba:	e02c      	b.n	8005616 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d113      	bne.n	80055f2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80055f0:	e011      	b.n	8005616 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f2:	f7fd fab9 	bl	8002b68 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d803      	bhi.n	800560a <HAL_SPI_Transmit+0x1f4>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <HAL_SPI_Transmit+0x1fa>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005614:	e026      	b.n	8005664 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1cd      	bne.n	80055bc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fbb3 	bl	8005d90 <SPI_EndRxTxTransaction>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e000      	b.n	8005664 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005674:	7ffb      	ldrb	r3, [r7, #31]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af02      	add	r7, sp, #8
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	603b      	str	r3, [r7, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569a:	d112      	bne.n	80056c2 <HAL_SPI_Receive+0x44>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10e      	bne.n	80056c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2204      	movs	r2, #4
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f8e9 	bl	8005890 <HAL_SPI_TransmitReceive>
 80056be:	4603      	mov	r3, r0
 80056c0:	e0e2      	b.n	8005888 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_SPI_Receive+0x52>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0db      	b.n	8005888 <HAL_SPI_Receive+0x20a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fd fa46 	bl	8002b68 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056ee:	e0c2      	b.n	8005876 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_SPI_Receive+0x7e>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005700:	e0b9      	b.n	8005876 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2204      	movs	r2, #4
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	88fa      	ldrh	r2, [r7, #6]
 800571a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005748:	d107      	bne.n	800575a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005758:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d007      	beq.n	8005778 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d162      	bne.n	8005846 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005780:	e02e      	b.n	80057e0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d115      	bne.n	80057bc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f103 020c 	add.w	r2, r3, #12
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ba:	e011      	b.n	80057e0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057bc:	f7fd f9d4 	bl	8002b68 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d803      	bhi.n	80057d4 <HAL_SPI_Receive+0x156>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d102      	bne.n	80057da <HAL_SPI_Receive+0x15c>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057de:	e04a      	b.n	8005876 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1cb      	bne.n	8005782 <HAL_SPI_Receive+0x104>
 80057ea:	e031      	b.n	8005850 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d113      	bne.n	8005822 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	b292      	uxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005820:	e011      	b.n	8005846 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005822:	f7fd f9a1 	bl	8002b68 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d803      	bhi.n	800583a <HAL_SPI_Receive+0x1bc>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d102      	bne.n	8005840 <HAL_SPI_Receive+0x1c2>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005844:	e017      	b.n	8005876 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1cd      	bne.n	80057ec <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fa35 	bl	8005cc4 <SPI_EndRxTransaction>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
 8005872:	e000      	b.n	8005876 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005886:	7dfb      	ldrb	r3, [r7, #23]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800589e:	2301      	movs	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x26>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e18a      	b.n	8005bcc <HAL_SPI_TransmitReceive+0x33c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058be:	f7fd f953 	bl	8002b68 <HAL_GetTick>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d00f      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x70>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e6:	d107      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <HAL_SPI_TransmitReceive+0x68>
 80058f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d003      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058fe:	e15b      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x82>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x82>
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005918:	e14e      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b04      	cmp	r3, #4
 8005924:	d003      	beq.n	800592e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2205      	movs	r2, #5
 800592a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	887a      	ldrh	r2, [r7, #2]
 800593e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	887a      	ldrh	r2, [r7, #2]
 8005950:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	887a      	ldrh	r2, [r7, #2]
 8005956:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d007      	beq.n	8005982 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598a:	d178      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_SPI_TransmitReceive+0x10a>
 8005994:	8b7b      	ldrh	r3, [r7, #26]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d166      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	e053      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d11b      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x176>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d016      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x176>
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d113      	bne.n	8005a06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d119      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x1b8>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d014      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a44:	2301      	movs	r3, #1
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a48:	f7fd f88e 	bl	8002b68 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d807      	bhi.n	8005a68 <HAL_SPI_TransmitReceive+0x1d8>
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d003      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a66:	e0a7      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1a6      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x130>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1a1      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x130>
 8005a7c:	e07c      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x1fc>
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d16b      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ab2:	e057      	b.n	8005b64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d11c      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x26c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d017      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x26c>
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d114      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d119      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x2ae>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d014      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b3e:	f7fd f813 	bl	8002b68 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d803      	bhi.n	8005b56 <HAL_SPI_TransmitReceive+0x2c6>
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d102      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x2cc>
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b62:	e029      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1a2      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x224>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d19d      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f907 	bl	8005d90 <SPI_EndRxTxTransaction>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b94:	e010      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	e000      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3730      	adds	r7, #48	; 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be2:	b2db      	uxtb	r3, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c00:	e04c      	b.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d048      	beq.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c0a:	f7fc ffad 	bl	8002b68 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d902      	bls.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d13d      	bne.n	8005c9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c38:	d111      	bne.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c42:	d004      	beq.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4c:	d107      	bne.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	d10f      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e00f      	b.n	8005cbc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1a3      	bne.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d111      	bne.n	8005cfe <SPI_EndRxTransaction+0x3a>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce2:	d004      	beq.n	8005cee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cec:	d107      	bne.n	8005cfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d06:	d12a      	bne.n	8005d5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d10:	d012      	beq.n	8005d38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff67 	bl	8005bf0 <SPI_WaitFlagStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02d      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e026      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2101      	movs	r1, #1
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ff54 	bl	8005bf0 <SPI_WaitFlagStateUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01a      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e013      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2101      	movs	r1, #1
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff ff41 	bl	8005bf0 <SPI_WaitFlagStateUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e000      	b.n	8005d86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <SPI_EndRxTxTransaction+0x7c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <SPI_EndRxTxTransaction+0x80>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0d5b      	lsrs	r3, r3, #21
 8005da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d112      	bne.n	8005de2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff ff12 	bl	8005bf0 <SPI_WaitFlagStateUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d0f2      	beq.n	8005de2 <SPI_EndRxTxTransaction+0x52>
 8005dfc:	e000      	b.n	8005e00 <SPI_EndRxTxTransaction+0x70>
        break;
 8005dfe:	bf00      	nop
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	165e9f81 	.word	0x165e9f81

08005e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e01d      	b.n	8005e62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f815 	bl	8005e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 f968 	bl	8006128 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b06      	cmp	r3, #6
 8005ea6:	d007      	beq.n	8005eb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d122      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d11b      	bne.n	8005f22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0202 	mvn.w	r2, #2
 8005ef2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8ee 	bl	80060ea <HAL_TIM_IC_CaptureCallback>
 8005f0e:	e005      	b.n	8005f1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8e0 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f8f1 	bl	80060fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d122      	bne.n	8005f76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d11b      	bne.n	8005f76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f06f 0204 	mvn.w	r2, #4
 8005f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8c4 	bl	80060ea <HAL_TIM_IC_CaptureCallback>
 8005f62:	e005      	b.n	8005f70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8b6 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8c7 	bl	80060fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d122      	bne.n	8005fca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d11b      	bne.n	8005fca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0208 	mvn.w	r2, #8
 8005f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0303 	and.w	r3, r3, #3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f89a 	bl	80060ea <HAL_TIM_IC_CaptureCallback>
 8005fb6:	e005      	b.n	8005fc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f88c 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f89d 	bl	80060fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d122      	bne.n	800601e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d11b      	bne.n	800601e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f06f 0210 	mvn.w	r2, #16
 8005fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f870 	bl	80060ea <HAL_TIM_IC_CaptureCallback>
 800600a:	e005      	b.n	8006018 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f862 	bl	80060d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f873 	bl	80060fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10e      	bne.n	800604a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0201 	mvn.w	r2, #1
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fa ff07 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d10e      	bne.n	8006076 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f903 	bl	800627c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d10e      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f838 	bl	8006112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d10e      	bne.n	80060ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f06f 0220 	mvn.w	r2, #32
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8cd 	bl	8006268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a40      	ldr	r2, [pc, #256]	; (800623c <TIM_Base_SetConfig+0x114>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d00f      	beq.n	8006168 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a3d      	ldr	r2, [pc, #244]	; (8006240 <TIM_Base_SetConfig+0x118>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00b      	beq.n	8006168 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3c      	ldr	r2, [pc, #240]	; (8006244 <TIM_Base_SetConfig+0x11c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d007      	beq.n	8006168 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3b      	ldr	r2, [pc, #236]	; (8006248 <TIM_Base_SetConfig+0x120>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3a      	ldr	r2, [pc, #232]	; (800624c <TIM_Base_SetConfig+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d108      	bne.n	800617a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2f      	ldr	r2, [pc, #188]	; (800623c <TIM_Base_SetConfig+0x114>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02b      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006188:	d027      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2c      	ldr	r2, [pc, #176]	; (8006240 <TIM_Base_SetConfig+0x118>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d023      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2b      	ldr	r2, [pc, #172]	; (8006244 <TIM_Base_SetConfig+0x11c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01f      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2a      	ldr	r2, [pc, #168]	; (8006248 <TIM_Base_SetConfig+0x120>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01b      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a29      	ldr	r2, [pc, #164]	; (800624c <TIM_Base_SetConfig+0x124>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d017      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <TIM_Base_SetConfig+0x128>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a27      	ldr	r2, [pc, #156]	; (8006254 <TIM_Base_SetConfig+0x12c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a26      	ldr	r2, [pc, #152]	; (8006258 <TIM_Base_SetConfig+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <TIM_Base_SetConfig+0x134>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <TIM_Base_SetConfig+0x138>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <TIM_Base_SetConfig+0x13c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a0a      	ldr	r2, [pc, #40]	; (800623c <TIM_Base_SetConfig+0x114>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0xf8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <TIM_Base_SetConfig+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d103      	bne.n	8006228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	615a      	str	r2, [r3, #20]
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40001800 	.word	0x40001800
 8006260:	40001c00 	.word	0x40001c00
 8006264:	40002000 	.word	0x40002000

08006268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e03f      	b.n	8006322 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fa fffc 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f829 	bl	800632c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800636e:	f023 030c 	bic.w	r3, r3, #12
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	430b      	orrs	r3, r1
 800637a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639a:	f040 818b 	bne.w	80066b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4ac1      	ldr	r2, [pc, #772]	; (80066a8 <UART_SetConfig+0x37c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d005      	beq.n	80063b4 <UART_SetConfig+0x88>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4abf      	ldr	r2, [pc, #764]	; (80066ac <UART_SetConfig+0x380>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f040 80bd 	bne.w	800652e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b4:	f7fe fd20 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 80063b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	461d      	mov	r5, r3
 80063be:	f04f 0600 	mov.w	r6, #0
 80063c2:	46a8      	mov	r8, r5
 80063c4:	46b1      	mov	r9, r6
 80063c6:	eb18 0308 	adds.w	r3, r8, r8
 80063ca:	eb49 0409 	adc.w	r4, r9, r9
 80063ce:	4698      	mov	r8, r3
 80063d0:	46a1      	mov	r9, r4
 80063d2:	eb18 0805 	adds.w	r8, r8, r5
 80063d6:	eb49 0906 	adc.w	r9, r9, r6
 80063da:	f04f 0100 	mov.w	r1, #0
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ee:	4688      	mov	r8, r1
 80063f0:	4691      	mov	r9, r2
 80063f2:	eb18 0005 	adds.w	r0, r8, r5
 80063f6:	eb49 0106 	adc.w	r1, r9, r6
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	461d      	mov	r5, r3
 8006400:	f04f 0600 	mov.w	r6, #0
 8006404:	196b      	adds	r3, r5, r5
 8006406:	eb46 0406 	adc.w	r4, r6, r6
 800640a:	461a      	mov	r2, r3
 800640c:	4623      	mov	r3, r4
 800640e:	f7f9 feed 	bl	80001ec <__aeabi_uldivmod>
 8006412:	4603      	mov	r3, r0
 8006414:	460c      	mov	r4, r1
 8006416:	461a      	mov	r2, r3
 8006418:	4ba5      	ldr	r3, [pc, #660]	; (80066b0 <UART_SetConfig+0x384>)
 800641a:	fba3 2302 	umull	r2, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	461d      	mov	r5, r3
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	46a9      	mov	r9, r5
 800642e:	46b2      	mov	sl, r6
 8006430:	eb19 0309 	adds.w	r3, r9, r9
 8006434:	eb4a 040a 	adc.w	r4, sl, sl
 8006438:	4699      	mov	r9, r3
 800643a:	46a2      	mov	sl, r4
 800643c:	eb19 0905 	adds.w	r9, r9, r5
 8006440:	eb4a 0a06 	adc.w	sl, sl, r6
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006458:	4689      	mov	r9, r1
 800645a:	4692      	mov	sl, r2
 800645c:	eb19 0005 	adds.w	r0, r9, r5
 8006460:	eb4a 0106 	adc.w	r1, sl, r6
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	461d      	mov	r5, r3
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	196b      	adds	r3, r5, r5
 8006470:	eb46 0406 	adc.w	r4, r6, r6
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	f7f9 feb8 	bl	80001ec <__aeabi_uldivmod>
 800647c:	4603      	mov	r3, r0
 800647e:	460c      	mov	r4, r1
 8006480:	461a      	mov	r2, r3
 8006482:	4b8b      	ldr	r3, [pc, #556]	; (80066b0 <UART_SetConfig+0x384>)
 8006484:	fba3 1302 	umull	r1, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	2164      	movs	r1, #100	; 0x64
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	3332      	adds	r3, #50	; 0x32
 8006496:	4a86      	ldr	r2, [pc, #536]	; (80066b0 <UART_SetConfig+0x384>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064a4:	4498      	add	r8, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	461d      	mov	r5, r3
 80064aa:	f04f 0600 	mov.w	r6, #0
 80064ae:	46a9      	mov	r9, r5
 80064b0:	46b2      	mov	sl, r6
 80064b2:	eb19 0309 	adds.w	r3, r9, r9
 80064b6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ba:	4699      	mov	r9, r3
 80064bc:	46a2      	mov	sl, r4
 80064be:	eb19 0905 	adds.w	r9, r9, r5
 80064c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064da:	4689      	mov	r9, r1
 80064dc:	4692      	mov	sl, r2
 80064de:	eb19 0005 	adds.w	r0, r9, r5
 80064e2:	eb4a 0106 	adc.w	r1, sl, r6
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	461d      	mov	r5, r3
 80064ec:	f04f 0600 	mov.w	r6, #0
 80064f0:	196b      	adds	r3, r5, r5
 80064f2:	eb46 0406 	adc.w	r4, r6, r6
 80064f6:	461a      	mov	r2, r3
 80064f8:	4623      	mov	r3, r4
 80064fa:	f7f9 fe77 	bl	80001ec <__aeabi_uldivmod>
 80064fe:	4603      	mov	r3, r0
 8006500:	460c      	mov	r4, r1
 8006502:	461a      	mov	r2, r3
 8006504:	4b6a      	ldr	r3, [pc, #424]	; (80066b0 <UART_SetConfig+0x384>)
 8006506:	fba3 1302 	umull	r1, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2164      	movs	r1, #100	; 0x64
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	3332      	adds	r3, #50	; 0x32
 8006518:	4a65      	ldr	r2, [pc, #404]	; (80066b0 <UART_SetConfig+0x384>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f003 0207 	and.w	r2, r3, #7
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4442      	add	r2, r8
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	e26f      	b.n	8006a0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800652e:	f7fe fc4f 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8006532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	461d      	mov	r5, r3
 8006538:	f04f 0600 	mov.w	r6, #0
 800653c:	46a8      	mov	r8, r5
 800653e:	46b1      	mov	r9, r6
 8006540:	eb18 0308 	adds.w	r3, r8, r8
 8006544:	eb49 0409 	adc.w	r4, r9, r9
 8006548:	4698      	mov	r8, r3
 800654a:	46a1      	mov	r9, r4
 800654c:	eb18 0805 	adds.w	r8, r8, r5
 8006550:	eb49 0906 	adc.w	r9, r9, r6
 8006554:	f04f 0100 	mov.w	r1, #0
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006568:	4688      	mov	r8, r1
 800656a:	4691      	mov	r9, r2
 800656c:	eb18 0005 	adds.w	r0, r8, r5
 8006570:	eb49 0106 	adc.w	r1, r9, r6
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	461d      	mov	r5, r3
 800657a:	f04f 0600 	mov.w	r6, #0
 800657e:	196b      	adds	r3, r5, r5
 8006580:	eb46 0406 	adc.w	r4, r6, r6
 8006584:	461a      	mov	r2, r3
 8006586:	4623      	mov	r3, r4
 8006588:	f7f9 fe30 	bl	80001ec <__aeabi_uldivmod>
 800658c:	4603      	mov	r3, r0
 800658e:	460c      	mov	r4, r1
 8006590:	461a      	mov	r2, r3
 8006592:	4b47      	ldr	r3, [pc, #284]	; (80066b0 <UART_SetConfig+0x384>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	461d      	mov	r5, r3
 80065a2:	f04f 0600 	mov.w	r6, #0
 80065a6:	46a9      	mov	r9, r5
 80065a8:	46b2      	mov	sl, r6
 80065aa:	eb19 0309 	adds.w	r3, r9, r9
 80065ae:	eb4a 040a 	adc.w	r4, sl, sl
 80065b2:	4699      	mov	r9, r3
 80065b4:	46a2      	mov	sl, r4
 80065b6:	eb19 0905 	adds.w	r9, r9, r5
 80065ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065d2:	4689      	mov	r9, r1
 80065d4:	4692      	mov	sl, r2
 80065d6:	eb19 0005 	adds.w	r0, r9, r5
 80065da:	eb4a 0106 	adc.w	r1, sl, r6
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	461d      	mov	r5, r3
 80065e4:	f04f 0600 	mov.w	r6, #0
 80065e8:	196b      	adds	r3, r5, r5
 80065ea:	eb46 0406 	adc.w	r4, r6, r6
 80065ee:	461a      	mov	r2, r3
 80065f0:	4623      	mov	r3, r4
 80065f2:	f7f9 fdfb 	bl	80001ec <__aeabi_uldivmod>
 80065f6:	4603      	mov	r3, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	461a      	mov	r2, r3
 80065fc:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <UART_SetConfig+0x384>)
 80065fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2164      	movs	r1, #100	; 0x64
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	3332      	adds	r3, #50	; 0x32
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <UART_SetConfig+0x384>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800661e:	4498      	add	r8, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	461d      	mov	r5, r3
 8006624:	f04f 0600 	mov.w	r6, #0
 8006628:	46a9      	mov	r9, r5
 800662a:	46b2      	mov	sl, r6
 800662c:	eb19 0309 	adds.w	r3, r9, r9
 8006630:	eb4a 040a 	adc.w	r4, sl, sl
 8006634:	4699      	mov	r9, r3
 8006636:	46a2      	mov	sl, r4
 8006638:	eb19 0905 	adds.w	r9, r9, r5
 800663c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800664c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006654:	4689      	mov	r9, r1
 8006656:	4692      	mov	sl, r2
 8006658:	eb19 0005 	adds.w	r0, r9, r5
 800665c:	eb4a 0106 	adc.w	r1, sl, r6
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	461d      	mov	r5, r3
 8006666:	f04f 0600 	mov.w	r6, #0
 800666a:	196b      	adds	r3, r5, r5
 800666c:	eb46 0406 	adc.w	r4, r6, r6
 8006670:	461a      	mov	r2, r3
 8006672:	4623      	mov	r3, r4
 8006674:	f7f9 fdba 	bl	80001ec <__aeabi_uldivmod>
 8006678:	4603      	mov	r3, r0
 800667a:	460c      	mov	r4, r1
 800667c:	461a      	mov	r2, r3
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <UART_SetConfig+0x384>)
 8006680:	fba3 1302 	umull	r1, r3, r3, r2
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	2164      	movs	r1, #100	; 0x64
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	3332      	adds	r3, #50	; 0x32
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <UART_SetConfig+0x384>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f003 0207 	and.w	r2, r3, #7
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4442      	add	r2, r8
 80066a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066a6:	e1b2      	b.n	8006a0e <UART_SetConfig+0x6e2>
 80066a8:	40011000 	.word	0x40011000
 80066ac:	40011400 	.word	0x40011400
 80066b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4ad7      	ldr	r2, [pc, #860]	; (8006a18 <UART_SetConfig+0x6ec>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d005      	beq.n	80066ca <UART_SetConfig+0x39e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4ad6      	ldr	r2, [pc, #856]	; (8006a1c <UART_SetConfig+0x6f0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	f040 80d1 	bne.w	800686c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066ca:	f7fe fb95 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 80066ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	469a      	mov	sl, r3
 80066d4:	f04f 0b00 	mov.w	fp, #0
 80066d8:	46d0      	mov	r8, sl
 80066da:	46d9      	mov	r9, fp
 80066dc:	eb18 0308 	adds.w	r3, r8, r8
 80066e0:	eb49 0409 	adc.w	r4, r9, r9
 80066e4:	4698      	mov	r8, r3
 80066e6:	46a1      	mov	r9, r4
 80066e8:	eb18 080a 	adds.w	r8, r8, sl
 80066ec:	eb49 090b 	adc.w	r9, r9, fp
 80066f0:	f04f 0100 	mov.w	r1, #0
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006704:	4688      	mov	r8, r1
 8006706:	4691      	mov	r9, r2
 8006708:	eb1a 0508 	adds.w	r5, sl, r8
 800670c:	eb4b 0609 	adc.w	r6, fp, r9
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	0094      	lsls	r4, r2, #2
 8006724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006728:	008b      	lsls	r3, r1, #2
 800672a:	461a      	mov	r2, r3
 800672c:	4623      	mov	r3, r4
 800672e:	4628      	mov	r0, r5
 8006730:	4631      	mov	r1, r6
 8006732:	f7f9 fd5b 	bl	80001ec <__aeabi_uldivmod>
 8006736:	4603      	mov	r3, r0
 8006738:	460c      	mov	r4, r1
 800673a:	461a      	mov	r2, r3
 800673c:	4bb8      	ldr	r3, [pc, #736]	; (8006a20 <UART_SetConfig+0x6f4>)
 800673e:	fba3 2302 	umull	r2, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	469b      	mov	fp, r3
 800674c:	f04f 0c00 	mov.w	ip, #0
 8006750:	46d9      	mov	r9, fp
 8006752:	46e2      	mov	sl, ip
 8006754:	eb19 0309 	adds.w	r3, r9, r9
 8006758:	eb4a 040a 	adc.w	r4, sl, sl
 800675c:	4699      	mov	r9, r3
 800675e:	46a2      	mov	sl, r4
 8006760:	eb19 090b 	adds.w	r9, r9, fp
 8006764:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006768:	f04f 0100 	mov.w	r1, #0
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800677c:	4689      	mov	r9, r1
 800677e:	4692      	mov	sl, r2
 8006780:	eb1b 0509 	adds.w	r5, fp, r9
 8006784:	eb4c 060a 	adc.w	r6, ip, sl
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	4619      	mov	r1, r3
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	f04f 0400 	mov.w	r4, #0
 800679a:	0094      	lsls	r4, r2, #2
 800679c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067a0:	008b      	lsls	r3, r1, #2
 80067a2:	461a      	mov	r2, r3
 80067a4:	4623      	mov	r3, r4
 80067a6:	4628      	mov	r0, r5
 80067a8:	4631      	mov	r1, r6
 80067aa:	f7f9 fd1f 	bl	80001ec <__aeabi_uldivmod>
 80067ae:	4603      	mov	r3, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	461a      	mov	r2, r3
 80067b4:	4b9a      	ldr	r3, [pc, #616]	; (8006a20 <UART_SetConfig+0x6f4>)
 80067b6:	fba3 1302 	umull	r1, r3, r3, r2
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	2164      	movs	r1, #100	; 0x64
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	3332      	adds	r3, #50	; 0x32
 80067c8:	4a95      	ldr	r2, [pc, #596]	; (8006a20 <UART_SetConfig+0x6f4>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067d4:	4498      	add	r8, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	469b      	mov	fp, r3
 80067da:	f04f 0c00 	mov.w	ip, #0
 80067de:	46d9      	mov	r9, fp
 80067e0:	46e2      	mov	sl, ip
 80067e2:	eb19 0309 	adds.w	r3, r9, r9
 80067e6:	eb4a 040a 	adc.w	r4, sl, sl
 80067ea:	4699      	mov	r9, r3
 80067ec:	46a2      	mov	sl, r4
 80067ee:	eb19 090b 	adds.w	r9, r9, fp
 80067f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067f6:	f04f 0100 	mov.w	r1, #0
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800680a:	4689      	mov	r9, r1
 800680c:	4692      	mov	sl, r2
 800680e:	eb1b 0509 	adds.w	r5, fp, r9
 8006812:	eb4c 060a 	adc.w	r6, ip, sl
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	f04f 0400 	mov.w	r4, #0
 8006828:	0094      	lsls	r4, r2, #2
 800682a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800682e:	008b      	lsls	r3, r1, #2
 8006830:	461a      	mov	r2, r3
 8006832:	4623      	mov	r3, r4
 8006834:	4628      	mov	r0, r5
 8006836:	4631      	mov	r1, r6
 8006838:	f7f9 fcd8 	bl	80001ec <__aeabi_uldivmod>
 800683c:	4603      	mov	r3, r0
 800683e:	460c      	mov	r4, r1
 8006840:	461a      	mov	r2, r3
 8006842:	4b77      	ldr	r3, [pc, #476]	; (8006a20 <UART_SetConfig+0x6f4>)
 8006844:	fba3 1302 	umull	r1, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	2164      	movs	r1, #100	; 0x64
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	3332      	adds	r3, #50	; 0x32
 8006856:	4a72      	ldr	r2, [pc, #456]	; (8006a20 <UART_SetConfig+0x6f4>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4442      	add	r2, r8
 8006868:	609a      	str	r2, [r3, #8]
 800686a:	e0d0      	b.n	8006a0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800686c:	f7fe fab0 	bl	8004dd0 <HAL_RCC_GetPCLK1Freq>
 8006870:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	469a      	mov	sl, r3
 8006876:	f04f 0b00 	mov.w	fp, #0
 800687a:	46d0      	mov	r8, sl
 800687c:	46d9      	mov	r9, fp
 800687e:	eb18 0308 	adds.w	r3, r8, r8
 8006882:	eb49 0409 	adc.w	r4, r9, r9
 8006886:	4698      	mov	r8, r3
 8006888:	46a1      	mov	r9, r4
 800688a:	eb18 080a 	adds.w	r8, r8, sl
 800688e:	eb49 090b 	adc.w	r9, r9, fp
 8006892:	f04f 0100 	mov.w	r1, #0
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800689e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068a6:	4688      	mov	r8, r1
 80068a8:	4691      	mov	r9, r2
 80068aa:	eb1a 0508 	adds.w	r5, sl, r8
 80068ae:	eb4b 0609 	adc.w	r6, fp, r9
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4619      	mov	r1, r3
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	f04f 0400 	mov.w	r4, #0
 80068c4:	0094      	lsls	r4, r2, #2
 80068c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ca:	008b      	lsls	r3, r1, #2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4623      	mov	r3, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	4631      	mov	r1, r6
 80068d4:	f7f9 fc8a 	bl	80001ec <__aeabi_uldivmod>
 80068d8:	4603      	mov	r3, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	461a      	mov	r2, r3
 80068de:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <UART_SetConfig+0x6f4>)
 80068e0:	fba3 2302 	umull	r2, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	469b      	mov	fp, r3
 80068ee:	f04f 0c00 	mov.w	ip, #0
 80068f2:	46d9      	mov	r9, fp
 80068f4:	46e2      	mov	sl, ip
 80068f6:	eb19 0309 	adds.w	r3, r9, r9
 80068fa:	eb4a 040a 	adc.w	r4, sl, sl
 80068fe:	4699      	mov	r9, r3
 8006900:	46a2      	mov	sl, r4
 8006902:	eb19 090b 	adds.w	r9, r9, fp
 8006906:	eb4a 0a0c 	adc.w	sl, sl, ip
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800691e:	4689      	mov	r9, r1
 8006920:	4692      	mov	sl, r2
 8006922:	eb1b 0509 	adds.w	r5, fp, r9
 8006926:	eb4c 060a 	adc.w	r6, ip, sl
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4619      	mov	r1, r3
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	0094      	lsls	r4, r2, #2
 800693e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006942:	008b      	lsls	r3, r1, #2
 8006944:	461a      	mov	r2, r3
 8006946:	4623      	mov	r3, r4
 8006948:	4628      	mov	r0, r5
 800694a:	4631      	mov	r1, r6
 800694c:	f7f9 fc4e 	bl	80001ec <__aeabi_uldivmod>
 8006950:	4603      	mov	r3, r0
 8006952:	460c      	mov	r4, r1
 8006954:	461a      	mov	r2, r3
 8006956:	4b32      	ldr	r3, [pc, #200]	; (8006a20 <UART_SetConfig+0x6f4>)
 8006958:	fba3 1302 	umull	r1, r3, r3, r2
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	2164      	movs	r1, #100	; 0x64
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	3332      	adds	r3, #50	; 0x32
 800696a:	4a2d      	ldr	r2, [pc, #180]	; (8006a20 <UART_SetConfig+0x6f4>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006976:	4498      	add	r8, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	469b      	mov	fp, r3
 800697c:	f04f 0c00 	mov.w	ip, #0
 8006980:	46d9      	mov	r9, fp
 8006982:	46e2      	mov	sl, ip
 8006984:	eb19 0309 	adds.w	r3, r9, r9
 8006988:	eb4a 040a 	adc.w	r4, sl, sl
 800698c:	4699      	mov	r9, r3
 800698e:	46a2      	mov	sl, r4
 8006990:	eb19 090b 	adds.w	r9, r9, fp
 8006994:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006998:	f04f 0100 	mov.w	r1, #0
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ac:	4689      	mov	r9, r1
 80069ae:	4692      	mov	sl, r2
 80069b0:	eb1b 0509 	adds.w	r5, fp, r9
 80069b4:	eb4c 060a 	adc.w	r6, ip, sl
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4619      	mov	r1, r3
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	f04f 0400 	mov.w	r4, #0
 80069ca:	0094      	lsls	r4, r2, #2
 80069cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069d0:	008b      	lsls	r3, r1, #2
 80069d2:	461a      	mov	r2, r3
 80069d4:	4623      	mov	r3, r4
 80069d6:	4628      	mov	r0, r5
 80069d8:	4631      	mov	r1, r6
 80069da:	f7f9 fc07 	bl	80001ec <__aeabi_uldivmod>
 80069de:	4603      	mov	r3, r0
 80069e0:	460c      	mov	r4, r1
 80069e2:	461a      	mov	r2, r3
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <UART_SetConfig+0x6f4>)
 80069e6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	2164      	movs	r1, #100	; 0x64
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	3332      	adds	r3, #50	; 0x32
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <UART_SetConfig+0x6f4>)
 80069fa:	fba2 2303 	umull	r2, r3, r2, r3
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4442      	add	r2, r8
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	e7ff      	b.n	8006a0e <UART_SetConfig+0x6e2>
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a18:	40011000 	.word	0x40011000
 8006a1c:	40011400 	.word	0x40011400
 8006a20:	51eb851f 	.word	0x51eb851f

08006a24 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d029      	beq.n	8006a92 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a4e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a58:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006a5e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006a64:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006a6a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006a70:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006a76:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006a7c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006a82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e034      	b.n	8006afc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006aa8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006aae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ac6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ad0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006ad6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006adc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006ae2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006ae8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b087      	sub	sp, #28
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d02e      	beq.n	8006b82 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b30:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006b40:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006b4a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006b54:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006b5e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006b68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e03b      	b.n	8006bfa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b92:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006bb8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006bc8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006bd2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006bdc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006be6:	4313      	orrs	r3, r2
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006c24:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006c2e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006c40:	f7fb ff92 	bl	8002b68 <HAL_GetTick>
 8006c44:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006c46:	e010      	b.n	8006c6a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d00c      	beq.n	8006c6a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <FMC_SDRAM_SendCommand+0x5e>
 8006c56:	f7fb ff87 	bl	8002b68 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d201      	bcs.n	8006c6a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e006      	b.n	8006c78 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d0e8      	beq.n	8006c48 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4e0d      	ldr	r6, [pc, #52]	; (8006ce0 <__libc_init_array+0x38>)
 8006cac:	4c0d      	ldr	r4, [pc, #52]	; (8006ce4 <__libc_init_array+0x3c>)
 8006cae:	1ba4      	subs	r4, r4, r6
 8006cb0:	10a4      	asrs	r4, r4, #2
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	42a5      	cmp	r5, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	4e0b      	ldr	r6, [pc, #44]	; (8006ce8 <__libc_init_array+0x40>)
 8006cba:	4c0c      	ldr	r4, [pc, #48]	; (8006cec <__libc_init_array+0x44>)
 8006cbc:	f000 f820 	bl	8006d00 <_init>
 8006cc0:	1ba4      	subs	r4, r4, r6
 8006cc2:	10a4      	asrs	r4, r4, #2
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	42a5      	cmp	r5, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cd0:	4798      	blx	r3
 8006cd2:	3501      	adds	r5, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cda:	4798      	blx	r3
 8006cdc:	3501      	adds	r5, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	080093e8 	.word	0x080093e8
 8006ce4:	080093e8 	.word	0x080093e8
 8006ce8:	080093e8 	.word	0x080093e8
 8006cec:	080093ec 	.word	0x080093ec

08006cf0 <memset>:
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d100      	bne.n	8006cfa <memset+0xa>
 8006cf8:	4770      	bx	lr
 8006cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfe:	e7f9      	b.n	8006cf4 <memset+0x4>

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
