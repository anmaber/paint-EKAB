
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf8  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c444  0800c444  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c44c  0800c44c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c44c  0800c44c  0001c44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800c454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200000a0  0800c4f4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800c4f4  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020633  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b67  00000000  00000000  00040703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de8  00000000  00000000  00045270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b60  00000000  00000000  00047058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028991  00000000  00000000  00048bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c153  00000000  00000000  00071549  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e456a  00000000  00000000  0008d69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a94  00000000  00000000  00171c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000a0 	.word	0x200000a0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009834 	.word	0x08009834

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000a4 	.word	0x200000a4
 80001e8:	08009834 	.word	0x08009834

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <showChooseCanvaInterface>:
#include "chooseViewStructure.h"
#include "chooseCanvaInterface.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void showChooseCanvaInterface(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f002 ff60 	bl	80033b8 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 80004f8:	481c      	ldr	r0, [pc, #112]	; (800056c <showChooseCanvaInterface+0x80>)
 80004fa:	f002 fe6b 	bl	80031d4 <BSP_LCD_SetTextColor>

	BSP_LCD_FillRect(30, 45, 180, 70);
 80004fe:	2346      	movs	r3, #70	; 0x46
 8000500:	22b4      	movs	r2, #180	; 0xb4
 8000502:	212d      	movs	r1, #45	; 0x2d
 8000504:	201e      	movs	r0, #30
 8000506:	f003 fa1f 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 125, 180, 70);
 800050a:	2346      	movs	r3, #70	; 0x46
 800050c:	22b4      	movs	r2, #180	; 0xb4
 800050e:	217d      	movs	r1, #125	; 0x7d
 8000510:	201e      	movs	r0, #30
 8000512:	f003 fa19 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 205, 180, 70);
 8000516:	2346      	movs	r3, #70	; 0x46
 8000518:	22b4      	movs	r2, #180	; 0xb4
 800051a:	21cd      	movs	r1, #205	; 0xcd
 800051c:	201e      	movs	r0, #30
 800051e:	f003 fa13 	bl	8003948 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000522:	f04f 30ff 	mov.w	r0, #4294967295
 8000526:	f002 fe55 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <showChooseCanvaInterface+0x84>)
 800052c:	f002 fe84 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000530:	480e      	ldr	r0, [pc, #56]	; (800056c <showChooseCanvaInterface+0x80>)
 8000532:	f002 fe67 	bl	8003204 <BSP_LCD_SetBackColor>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"CANVAS #1", CENTER_MODE);
 8000536:	2301      	movs	r3, #1
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <showChooseCanvaInterface+0x88>)
 800053a:	2144      	movs	r1, #68	; 0x44
 800053c:	2000      	movs	r0, #0
 800053e:	f002 ffa7 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,148, (uint8_t*)"CANVAS #2", CENTER_MODE);
 8000542:	2301      	movs	r3, #1
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <showChooseCanvaInterface+0x8c>)
 8000546:	2194      	movs	r1, #148	; 0x94
 8000548:	2000      	movs	r0, #0
 800054a:	f002 ffa1 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"INFO", CENTER_MODE);
 800054e:	2301      	movs	r3, #1
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <showChooseCanvaInterface+0x90>)
 8000552:	21e4      	movs	r1, #228	; 0xe4
 8000554:	2000      	movs	r0, #0
 8000556:	f002 ff9b 	bl	8003490 <BSP_LCD_DisplayStringAt>
	activeView = ChooseScreen;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <showChooseCanvaInterface+0x94>)
 800055c:	2203      	movs	r2, #3
 800055e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f003 ffe0 	bl	8004528 <HAL_Delay>


}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	ff800080 	.word	0xff800080
 8000570:	2000007c 	.word	0x2000007c
 8000574:	0800984c 	.word	0x0800984c
 8000578:	08009858 	.word	0x08009858
 800057c:	08009864 	.word	0x08009864
 8000580:	20000284 	.word	0x20000284

08000584 <choose>:

void choose(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	while(activeView == ChooseScreen)
 8000588:	e032      	b.n	80005f0 <choose+0x6c>
	{
		BSP_TS_GetState(&tsChooseCanva);
 800058a:	481c      	ldr	r0, [pc, #112]	; (80005fc <choose+0x78>)
 800058c:	f003 fed8 	bl	8004340 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 45 && tsChooseCanva.Y < 115)
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <choose+0x78>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <choose+0x2c>
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <choose+0x78>)
 800059a:	889b      	ldrh	r3, [r3, #4]
 800059c:	2b2d      	cmp	r3, #45	; 0x2d
 800059e:	d907      	bls.n	80005b0 <choose+0x2c>
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <choose+0x78>)
 80005a2:	889b      	ldrh	r3, [r3, #4]
 80005a4:	2b72      	cmp	r3, #114	; 0x72
 80005a6:	d803      	bhi.n	80005b0 <choose+0x2c>
		{
			activeView = Canvas1;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <choose+0x7c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e01f      	b.n	80005f0 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 125 && tsChooseCanva.Y < 195)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <choose+0x78>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <choose+0x4c>
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <choose+0x78>)
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2b7d      	cmp	r3, #125	; 0x7d
 80005be:	d907      	bls.n	80005d0 <choose+0x4c>
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <choose+0x78>)
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2bc2      	cmp	r3, #194	; 0xc2
 80005c6:	d803      	bhi.n	80005d0 <choose+0x4c>
		{
			activeView = Canvas2;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <choose+0x7c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e00f      	b.n	80005f0 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <choose+0x78>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <choose+0x6c>
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <choose+0x78>)
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	2bcd      	cmp	r3, #205	; 0xcd
 80005de:	d907      	bls.n	80005f0 <choose+0x6c>
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <choose+0x78>)
 80005e2:	889b      	ldrh	r3, [r3, #4]
 80005e4:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80005e8:	d802      	bhi.n	80005f0 <choose+0x6c>
		{
			activeView = Info;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <choose+0x7c>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]
	while(activeView == ChooseScreen)
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <choose+0x7c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d0c8      	beq.n	800058a <choose+0x6>
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000288 	.word	0x20000288
 8000600:	20000284 	.word	0x20000284

08000604 <showInfoScreen>:

void showInfoScreen(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f002 fed4 	bl	80033b8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000610:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000614:	f002 fdde 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f002 fdf2 	bl	8003204 <BSP_LCD_SetBackColor>


	BSP_LCD_SetFont(&Font16);
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <showInfoScreen+0xc8>)
 8000622:	f002 fe09 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,50, (uint8_t*)"App:",CENTER_MODE);
 8000626:	2301      	movs	r3, #1
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <showInfoScreen+0xcc>)
 800062a:	2132      	movs	r1, #50	; 0x32
 800062c:	2000      	movs	r0, #0
 800062e:	f002 ff2f 	bl	8003490 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 8000632:	4828      	ldr	r0, [pc, #160]	; (80006d4 <showInfoScreen+0xd0>)
 8000634:	f002 fe00 	bl	8003238 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"App has autosave mode. When you",CENTER_MODE);
 8000638:	2301      	movs	r3, #1
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <showInfoScreen+0xd4>)
 800063c:	2144      	movs	r1, #68	; 0x44
 800063e:	2000      	movs	r0, #0
 8000640:	f002 ff26 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,82, (uint8_t*)"leave canvas and return,",CENTER_MODE);
 8000644:	2301      	movs	r3, #1
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <showInfoScreen+0xd8>)
 8000648:	2152      	movs	r1, #82	; 0x52
 800064a:	2000      	movs	r0, #0
 800064c:	f002 ff20 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,96, (uint8_t*)"you will see your last drawing.",CENTER_MODE);
 8000650:	2301      	movs	r3, #1
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <showInfoScreen+0xdc>)
 8000654:	2160      	movs	r1, #96	; 0x60
 8000656:	2000      	movs	r0, #0
 8000658:	f002 ff1a 	bl	8003490 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 800065c:	481b      	ldr	r0, [pc, #108]	; (80006cc <showInfoScreen+0xc8>)
 800065e:	f002 fdeb 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,125, (uint8_t*)"Authors:",CENTER_MODE);
 8000662:	2301      	movs	r3, #1
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <showInfoScreen+0xe0>)
 8000666:	217d      	movs	r1, #125	; 0x7d
 8000668:	2000      	movs	r0, #0
 800066a:	f002 ff11 	bl	8003490 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <showInfoScreen+0xd0>)
 8000670:	f002 fde2 	bl	8003238 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,142, (uint8_t*)"Anna Bernas",CENTER_MODE);
 8000674:	2301      	movs	r3, #1
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <showInfoScreen+0xe4>)
 8000678:	218e      	movs	r1, #142	; 0x8e
 800067a:	2000      	movs	r0, #0
 800067c:	f002 ff08 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,160, (uint8_t*)"Emilia Kalinska",CENTER_MODE);
 8000680:	2301      	movs	r3, #1
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <showInfoScreen+0xe8>)
 8000684:	21a0      	movs	r1, #160	; 0xa0
 8000686:	2000      	movs	r0, #0
 8000688:	f002 ff02 	bl	8003490 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 800068c:	4818      	ldr	r0, [pc, #96]	; (80006f0 <showInfoScreen+0xec>)
 800068e:	f002 fda1 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <showInfoScreen+0xec>)
 8000694:	f002 fdb6 	bl	8003204 <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(30, 205, 180, 70);
 8000698:	2346      	movs	r3, #70	; 0x46
 800069a:	22b4      	movs	r2, #180	; 0xb4
 800069c:	21cd      	movs	r1, #205	; 0xcd
 800069e:	201e      	movs	r0, #30
 80006a0:	f003 f952 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f002 fd94 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <showInfoScreen+0xf0>)
 80006ae:	f002 fdc3 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"BACK", CENTER_MODE);
 80006b2:	2301      	movs	r3, #1
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <showInfoScreen+0xf4>)
 80006b6:	21e4      	movs	r1, #228	; 0xe4
 80006b8:	2000      	movs	r0, #0
 80006ba:	f002 fee9 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006be:	f04f 30ff 	mov.w	r0, #4294967295
 80006c2:	f002 fd9f 	bl	8003204 <BSP_LCD_SetBackColor>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	0800986c 	.word	0x0800986c
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	08009874 	.word	0x08009874
 80006dc:	08009894 	.word	0x08009894
 80006e0:	080098b0 	.word	0x080098b0
 80006e4:	080098d0 	.word	0x080098d0
 80006e8:	080098dc 	.word	0x080098dc
 80006ec:	080098e8 	.word	0x080098e8
 80006f0:	ff800080 	.word	0xff800080
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	080098f8 	.word	0x080098f8

080006fc <serviceInfoScreen>:

void serviceInfoScreen(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	showInfoScreen();
 8000700:	f7ff ff80 	bl	8000604 <showInfoScreen>
	HAL_Delay(500);
 8000704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000708:	f003 ff0e 	bl	8004528 <HAL_Delay>
	while(activeView == Info)
 800070c:	e012      	b.n	8000734 <serviceInfoScreen+0x38>
	{
		BSP_TS_GetState(&tsChooseCanva);
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <serviceInfoScreen+0x44>)
 8000710:	f003 fe16 	bl	8004340 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <serviceInfoScreen+0x44>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <serviceInfoScreen+0x38>
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <serviceInfoScreen+0x44>)
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2bcd      	cmp	r3, #205	; 0xcd
 8000722:	d907      	bls.n	8000734 <serviceInfoScreen+0x38>
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <serviceInfoScreen+0x44>)
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800072c:	d802      	bhi.n	8000734 <serviceInfoScreen+0x38>
		{
			activeView = ChooseScreen;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <serviceInfoScreen+0x48>)
 8000730:	2203      	movs	r2, #3
 8000732:	701a      	strb	r2, [r3, #0]
	while(activeView == Info)
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <serviceInfoScreen+0x48>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d0e8      	beq.n	800070e <serviceInfoScreen+0x12>
		}
	}
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000288 	.word	0x20000288
 8000744:	20000284 	.word	0x20000284

08000748 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_DMA2D_Init+0x34>)
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <MX_DMA2D_Init+0x38>)
 8000750:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_DMA2D_Init+0x34>)
 8000754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000758:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_DMA2D_Init+0x34>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_DMA2D_Init+0x34>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_DMA2D_Init+0x34>)
 8000768:	f004 f99e 	bl	8004aa8 <HAL_DMA2D_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000772:	f000 fcfd 	bl	8001170 <Error_Handler>
  }

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000290 	.word	0x20000290
 8000780:	4002b000 	.word	0x4002b000

08000784 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_DMA2D_MspInit+0x3c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d10d      	bne.n	80007b2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 80007a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	4002b000 	.word	0x4002b000
 80007c4:	40023800 	.word	0x40023800

080007c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_FMC_Init+0x98>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MX_FMC_Init+0x9c>)
 80007e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_FMC_Init+0x98>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_FMC_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_FMC_Init+0x98>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_FMC_Init+0x98>)
 80007fa:	2210      	movs	r2, #16
 80007fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_FMC_Init+0x98>)
 8000800:	2240      	movs	r2, #64	; 0x40
 8000802:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_FMC_Init+0x98>)
 8000806:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800080a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_FMC_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_FMC_Init+0x98>)
 8000814:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000818:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_FMC_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_FMC_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800082a:	2307      	movs	r3, #7
 800082c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000836:	2303      	movs	r3, #3
 8000838:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_FMC_Init+0x98>)
 8000848:	f007 fa74 	bl	8007d34 <HAL_SDRAM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000852:	f000 fc8d 	bl	8001170 <Error_Handler>
  }

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002d0 	.word	0x200002d0
 8000864:	a0000140 	.word	0xa0000140

08000868 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <HAL_FMC_MspInit+0x104>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d16f      	bne.n	8000964 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <HAL_FMC_MspInit+0x104>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_FMC_MspInit+0x108>)
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <HAL_FMC_MspInit+0x108>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6393      	str	r3, [r2, #56]	; 0x38
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <HAL_FMC_MspInit+0x108>)
 800089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80008a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	482c      	ldr	r0, [pc, #176]	; (8000974 <HAL_FMC_MspInit+0x10c>)
 80008c2:	f004 fd8f 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <HAL_FMC_MspInit+0x110>)
 80008e0:	f004 fd80 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80008e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80008e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	481f      	ldr	r0, [pc, #124]	; (800097c <HAL_FMC_MspInit+0x114>)
 8000900:	f004 fd70 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000904:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000908:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <HAL_FMC_MspInit+0x118>)
 8000920:	f004 fd60 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8000924:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000928:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <HAL_FMC_MspInit+0x11c>)
 8000940:	f004 fd50 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000944:	2360      	movs	r3, #96	; 0x60
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000954:	230c      	movs	r3, #12
 8000956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <HAL_FMC_MspInit+0x120>)
 800095e:	f004 fd41 	bl	80053e4 <HAL_GPIO_Init>
 8000962:	e000      	b.n	8000966 <HAL_FMC_MspInit+0xfe>
    return;
 8000964:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000bc 	.word	0x200000bc
 8000970:	40023800 	.word	0x40023800
 8000974:	40021400 	.word	0x40021400
 8000978:	40020800 	.word	0x40020800
 800097c:	40021800 	.word	0x40021800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020c00 	.word	0x40020c00
 8000988:	40020400 	.word	0x40020400

0800098c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000994:	f7ff ff68 	bl	8000868 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

}
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_I2C3_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_I2C3_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ad6:	f004 ff53 	bl	8005980 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 fb46 	bl	8001170 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ae8:	f005 ff37 	bl	800695a <HAL_I2CEx_ConfigAnalogFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000af2:	f000 fb3d 	bl	8001170 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000afa:	f005 ff6a 	bl	80069d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fb34 	bl	8001170 <Error_Handler>
  }

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000304 	.word	0x20000304
 8000b10:	40005c00 	.word	0x40005c00
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <HAL_I2C_MspInit+0xc4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d14b      	bne.n	8000bd2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b78:	2312      	movs	r3, #18
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b84:	2304      	movs	r3, #4
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <HAL_I2C_MspInit+0xcc>)
 8000b90:	f004 fc28 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <HAL_I2C_MspInit+0xd0>)
 8000bb2:	f004 fc17 	bl	80053e4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005c00 	.word	0x40005c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_I2C_MspDeInit+0x3c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d10f      	bne.n	8000c1e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_I2C_MspDeInit+0x40>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_I2C_MspDeInit+0x40>)
 8000c04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <HAL_I2C_MspDeInit+0x44>)
 8000c10:	f004 fd92 	bl	8005738 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_I2C_MspDeInit+0x48>)
 8000c1a:	f004 fd8d 	bl	8005738 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40005c00 	.word	0x40005c00
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020000 	.word	0x40020000

08000c38 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09a      	sub	sp, #104	; 0x68
 8000c3c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c42:	2234      	movs	r2, #52	; 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f008 fdec 	bl	8009824 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2234      	movs	r2, #52	; 0x34
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fde6 	bl	8009824 <memset>

  hltdc.Instance = LTDC;
 8000c58:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c5a:	4a4f      	ldr	r2, [pc, #316]	; (8000d98 <MX_LTDC_Init+0x160>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c70:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c84:	220e      	movs	r2, #14
 8000c86:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c90:	22fe      	movs	r2, #254	; 0xfe
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c96:	f240 1245 	movw	r2, #325	; 0x145
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000ca6:	f240 1247 	movw	r2, #327	; 0x147
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cc4:	4833      	ldr	r0, [pc, #204]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cc6:	f005 fec3 	bl	8006a50 <HAL_LTDC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 fa4e 	bl	8001170 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000d22:	f005 ff65 	bl	8006bf0 <HAL_LTDC_ConfigLayer>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000d2c:	f000 fa20 	bl	8001170 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d52:	2305      	movs	r3, #5
 8000d54:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2201      	movs	r2, #1
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000d7c:	f005 ff38 	bl	8006bf0 <HAL_LTDC_ConfigLayer>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8000d86:	f000 f9f3 	bl	8001170 <Error_Handler>
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3768      	adds	r7, #104	; 0x68
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000358 	.word	0x20000358
 8000d98:	40016800 	.word	0x40016800

08000d9c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a77      	ldr	r2, [pc, #476]	; (8000f98 <HAL_LTDC_MspInit+0x1fc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f040 80e8 	bne.w	8000f90 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a74      	ldr	r2, [pc, #464]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a6d      	ldr	r2, [pc, #436]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	4b67      	ldr	r3, [pc, #412]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a66      	ldr	r2, [pc, #408]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a5f      	ldr	r2, [pc, #380]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e96:	230e      	movs	r3, #14
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <HAL_LTDC_MspInit+0x204>)
 8000ea2:	f004 fa9f 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000ea6:	f641 0358 	movw	r3, #6232	; 0x1858
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4838      	ldr	r0, [pc, #224]	; (8000fa4 <HAL_LTDC_MspInit+0x208>)
 8000ec4:	f004 fa8e 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ed8:	2309      	movs	r3, #9
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <HAL_LTDC_MspInit+0x20c>)
 8000ee4:	f004 fa7e 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000ee8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000efa:	230e      	movs	r3, #14
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <HAL_LTDC_MspInit+0x20c>)
 8000f06:	f004 fa6d 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000f0a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4821      	ldr	r0, [pc, #132]	; (8000fac <HAL_LTDC_MspInit+0x210>)
 8000f28:	f004 fa5c 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000f2c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <HAL_LTDC_MspInit+0x214>)
 8000f4a:	f004 fa4b 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000f4e:	2348      	movs	r3, #72	; 0x48
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	230e      	movs	r3, #14
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <HAL_LTDC_MspInit+0x218>)
 8000f6a:	f004 fa3b 	bl	80053e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f80:	2309      	movs	r3, #9
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <HAL_LTDC_MspInit+0x210>)
 8000f8c:	f004 fa2a 	bl	80053e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40016800 	.word	0x40016800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f003 fa72 	bl	80044a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f83a 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fcec 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000fc8:	f7ff fbbe 	bl	8000748 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fcc:	f7ff fbfc 	bl	80007c8 <MX_FMC_Init>
  MX_I2C3_Init();
 8000fd0:	f7ff fd62 	bl	8000a98 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fd4:	f7ff fe30 	bl	8000c38 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fd8:	f000 fe68 	bl	8001cac <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000fdc:	f000 ffcc 	bl	8001f78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initLCD();
 8000fe0:	f000 fd60 	bl	8001aa4 <initLCD>
	printHelloScreen();
 8000fe4:	f000 fd6e 	bl	8001ac4 <printHelloScreen>
	configTS();
 8000fe8:	f000 f8c9 	bl	800117e <configTS>
	showChooseCanvaInterface();
 8000fec:	f7ff fa7e 	bl	80004ec <showChooseCanvaInterface>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		switch(activeView)
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <main+0x7c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d81b      	bhi.n	8001030 <main+0x78>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <main+0x48>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	08001019 	.word	0x08001019
 8001008:	0800102b 	.word	0x0800102b
 800100c:	08001021 	.word	0x08001021
		{
		case Canvas1:
			paintService('1');
 8001010:	2031      	movs	r0, #49	; 0x31
 8001012:	f000 f98d 	bl	8001330 <paintService>
			break;
 8001016:	e00c      	b.n	8001032 <main+0x7a>
		case Canvas2:
			paintService('2');
 8001018:	2032      	movs	r0, #50	; 0x32
 800101a:	f000 f989 	bl	8001330 <paintService>
			break;
 800101e:	e008      	b.n	8001032 <main+0x7a>
		case ChooseScreen:
			showChooseCanvaInterface();
 8001020:	f7ff fa64 	bl	80004ec <showChooseCanvaInterface>
			choose();
 8001024:	f7ff faae 	bl	8000584 <choose>
			break;
 8001028:	e003      	b.n	8001032 <main+0x7a>
		case Info:
			serviceInfoScreen();
 800102a:	f7ff fb67 	bl	80006fc <serviceInfoScreen>
			break;
 800102e:	e000      	b.n	8001032 <main+0x7a>
		default:
			break;
 8001030:	bf00      	nop
		switch(activeView)
 8001032:	e7dd      	b.n	8000ff0 <main+0x38>
 8001034:	20000284 	.word	0x20000284

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0a0      	sub	sp, #128	; 0x80
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f008 fbec 	bl	8009824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f008 fbdd 	bl	8009824 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <SystemClock_Config+0x10c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <SystemClock_Config+0x10c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <SystemClock_Config+0x10c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <SystemClock_Config+0x110>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <SystemClock_Config+0x110>)
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemClock_Config+0x110>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010ba:	23b4      	movs	r3, #180	; 0xb4
 80010bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 ffe0 	bl	8007090 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010d6:	f000 f84b 	bl	8001170 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010da:	f005 ff89 	bl	8006ff0 <HAL_PWREx_EnableOverDrive>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010e4:	f000 f844 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001104:	2105      	movs	r1, #5
 8001106:	4618      	mov	r0, r3
 8001108:	f006 fa32 	bl	8007570 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001112:	f000 f82d 	bl	8001170 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001116:	2308      	movs	r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800111a:	23c0      	movs	r3, #192	; 0xc0
 800111c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800111e:	2304      	movs	r3, #4
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fc43 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001138:	f000 f81a 	bl	8001170 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3780      	adds	r7, #128	; 0x80
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115e:	f003 f9c3 	bl	80044e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40001000 	.word	0x40001000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <configTS>:

#include "paint.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void configTS(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	f002 f917 	bl	80033b8 <BSP_LCD_Clear>

	if(BSP_TS_Init(1000, 1000) == TS_OK)
 800118a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800118e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001192:	f003 f89b 	bl	80042cc <BSP_TS_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d107      	bne.n	80011ac <configTS+0x2e>
	{
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f002 f90a 	bl	80033b8 <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011a8:	f002 f814 	bl	80031d4 <BSP_LCD_SetTextColor>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <showPaintInterface>:
uint16_t LastColorMArkdownY = 96;
uint16_t LastThicknessMarkdownX = 53;
uint16_t LastThicknessMArkdownY = 3;

void showPaintInterface(uint8_t canvas)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	f002 f8fb 	bl	80033b8 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011c6:	f002 f805 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80011ca:	4851      	ldr	r0, [pc, #324]	; (8001310 <showPaintInterface+0x160>)
 80011cc:	f002 f834 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f002 f816 	bl	8003204 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(9, 5, '#');
 80011d8:	2223      	movs	r2, #35	; 0x23
 80011da:	2105      	movs	r1, #5
 80011dc:	2009      	movs	r0, #9
 80011de:	f002 f913 	bl	8003408 <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(20,5, canvas);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2105      	movs	r1, #5
 80011e8:	2014      	movs	r0, #20
 80011ea:	f002 f90d 	bl	8003408 <BSP_LCD_DisplayChar>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011f2:	f001 ffef 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(55, 5, 30, 30);
 80011f6:	231e      	movs	r3, #30
 80011f8:	221e      	movs	r2, #30
 80011fa:	2105      	movs	r1, #5
 80011fc:	2037      	movs	r0, #55	; 0x37
 80011fe:	f002 fa81 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(93, 5, 30, 30);
 8001202:	231e      	movs	r3, #30
 8001204:	221e      	movs	r2, #30
 8001206:	2105      	movs	r1, #5
 8001208:	205d      	movs	r0, #93	; 0x5d
 800120a:	f002 fa7b 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(131, 5, 30, 30);
 800120e:	231e      	movs	r3, #30
 8001210:	221e      	movs	r2, #30
 8001212:	2105      	movs	r1, #5
 8001214:	2083      	movs	r0, #131	; 0x83
 8001216:	f002 fa75 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_FillCircle(70, 20, 5);
 800121a:	2205      	movs	r2, #5
 800121c:	2114      	movs	r1, #20
 800121e:	2046      	movs	r0, #70	; 0x46
 8001220:	f002 fbec 	bl	80039fc <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(108, 20, 10);
 8001224:	220a      	movs	r2, #10
 8001226:	2114      	movs	r1, #20
 8001228:	206c      	movs	r0, #108	; 0x6c
 800122a:	f002 fbe7 	bl	80039fc <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(146, 20, 15);
 800122e:	220f      	movs	r2, #15
 8001230:	2114      	movs	r1, #20
 8001232:	2092      	movs	r0, #146	; 0x92
 8001234:	f002 fbe2 	bl	80039fc <BSP_LCD_FillCircle>

	BSP_LCD_DrawRect(164, 5, 74, 30);
 8001238:	231e      	movs	r3, #30
 800123a:	224a      	movs	r2, #74	; 0x4a
 800123c:	2105      	movs	r1, #5
 800123e:	20a4      	movs	r0, #164	; 0xa4
 8001240:	f002 fa60 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font16);
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <showPaintInterface+0x160>)
 8001246:	f001 fff7 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(180, 15, (uint8_t *)"EXIT",LEFT_MODE);
 800124a:	2303      	movs	r3, #3
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <showPaintInterface+0x164>)
 800124e:	210f      	movs	r1, #15
 8001250:	20b4      	movs	r0, #180	; 0xb4
 8001252:	f002 f91d 	bl	8003490 <BSP_LCD_DisplayStringAt>


	BSP_LCD_DrawRect(5, 22, 30, 30);
 8001256:	231e      	movs	r3, #30
 8001258:	221e      	movs	r2, #30
 800125a:	2116      	movs	r1, #22
 800125c:	2005      	movs	r0, #5
 800125e:	f002 fa51 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayChar(15, 30, 'C');
 8001262:	2243      	movs	r2, #67	; 0x43
 8001264:	211e      	movs	r1, #30
 8001266:	200f      	movs	r0, #15
 8001268:	f002 f8ce 	bl	8003408 <BSP_LCD_DisplayChar>

	BSP_LCD_DrawRect(5, 60, 30, 30);
 800126c:	231e      	movs	r3, #30
 800126e:	221e      	movs	r2, #30
 8001270:	213c      	movs	r1, #60	; 0x3c
 8001272:	2005      	movs	r0, #5
 8001274:	f002 fa46 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(5, 98, 30, 30);
 8001278:	231e      	movs	r3, #30
 800127a:	221e      	movs	r2, #30
 800127c:	2162      	movs	r1, #98	; 0x62
 800127e:	2005      	movs	r0, #5
 8001280:	f002 fb62 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001284:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001288:	f001 ffa4 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 136, 30, 30);
 800128c:	231e      	movs	r3, #30
 800128e:	221e      	movs	r2, #30
 8001290:	2188      	movs	r1, #136	; 0x88
 8001292:	2005      	movs	r0, #5
 8001294:	f002 fb58 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <showPaintInterface+0x168>)
 800129a:	f001 ff9b 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 174, 30, 30);
 800129e:	231e      	movs	r3, #30
 80012a0:	221e      	movs	r2, #30
 80012a2:	21ae      	movs	r1, #174	; 0xae
 80012a4:	2005      	movs	r0, #5
 80012a6:	f002 fb4f 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <showPaintInterface+0x16c>)
 80012ac:	f001 ff92 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5,212 , 30, 30);
 80012b0:	231e      	movs	r3, #30
 80012b2:	221e      	movs	r2, #30
 80012b4:	21d4      	movs	r1, #212	; 0xd4
 80012b6:	2005      	movs	r0, #5
 80012b8:	f002 fb46 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80012bc:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80012c0:	f001 ff88 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 250, 30, 30);
 80012c4:	231e      	movs	r3, #30
 80012c6:	221e      	movs	r2, #30
 80012c8:	21fa      	movs	r1, #250	; 0xfa
 80012ca:	2005      	movs	r0, #5
 80012cc:	f002 fb3c 	bl	8003948 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 80012d0:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80012d4:	f001 ff7e 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 288, 30, 30);
 80012d8:	231e      	movs	r3, #30
 80012da:	221e      	movs	r2, #30
 80012dc:	f44f 7190 	mov.w	r1, #288	; 0x120
 80012e0:	2005      	movs	r0, #5
 80012e2:	f002 fb31 	bl	8003948 <BSP_LCD_FillRect>

	markdown(LastColorMarkdownX, LastColorMArkdownY, COLOR);
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <showPaintInterface+0x170>)
 80012e8:	8818      	ldrh	r0, [r3, #0]
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <showPaintInterface+0x174>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	f000 fa2f 	bl	8001754 <markdown>
	markdown(LastThicknessMarkdownX, LastThicknessMArkdownY, THICKNESS);
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <showPaintInterface+0x178>)
 80012f8:	8818      	ldrh	r0, [r3, #0]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <showPaintInterface+0x17c>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f000 fa27 	bl	8001754 <markdown>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000084 	.word	0x20000084
 8001314:	08009900 	.word	0x08009900
 8001318:	ffff0000 	.word	0xffff0000
 800131c:	ff0000ff 	.word	0xff0000ff
 8001320:	20000006 	.word	0x20000006
 8001324:	20000008 	.word	0x20000008
 8001328:	2000000a 	.word	0x2000000a
 800132c:	2000000c 	.word	0x2000000c

08001330 <paintService>:

void paintService(uint8_t canvas)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	clearWorkspace(canvas);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa3d 	bl	80017bc <clearWorkspace>
	if(activeView == Canvas1)
 8001342:	4ba6      	ldr	r3, [pc, #664]	; (80015dc <paintService+0x2ac>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10c      	bne.n	8001364 <paintService+0x34>
	{
		loadPartOfSketch(10, 0x080C0000, 38, 38);
 800134a:	2326      	movs	r3, #38	; 0x26
 800134c:	2226      	movs	r2, #38	; 0x26
 800134e:	49a4      	ldr	r1, [pc, #656]	; (80015e0 <paintService+0x2b0>)
 8001350:	200a      	movs	r0, #10
 8001352:	f000 fafa 	bl	800194a <loadPartOfSketch>
		loadPartOfSketch(11, 0x080E0000, 38, 179);
 8001356:	23b3      	movs	r3, #179	; 0xb3
 8001358:	2226      	movs	r2, #38	; 0x26
 800135a:	49a2      	ldr	r1, [pc, #648]	; (80015e4 <paintService+0x2b4>)
 800135c:	200b      	movs	r0, #11
 800135e:	f000 faf4 	bl	800194a <loadPartOfSketch>
 8001362:	e00b      	b.n	800137c <paintService+0x4c>
	}
	else
	{
		loadPartOfSketch(8, 0x08080000, 38, 38);
 8001364:	2326      	movs	r3, #38	; 0x26
 8001366:	2226      	movs	r2, #38	; 0x26
 8001368:	499f      	ldr	r1, [pc, #636]	; (80015e8 <paintService+0x2b8>)
 800136a:	2008      	movs	r0, #8
 800136c:	f000 faed 	bl	800194a <loadPartOfSketch>
		loadPartOfSketch(9, 0x080A0000, 38, 179);
 8001370:	23b3      	movs	r3, #179	; 0xb3
 8001372:	2226      	movs	r2, #38	; 0x26
 8001374:	499d      	ldr	r1, [pc, #628]	; (80015ec <paintService+0x2bc>)
 8001376:	2009      	movs	r0, #9
 8001378:	f000 fae7 	bl	800194a <loadPartOfSketch>
	}

	HAL_Delay(500);
 800137c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001380:	f003 f8d2 	bl	8004528 <HAL_Delay>
	while(activeView == Canvas1 || activeView == Canvas2)
 8001384:	e184      	b.n	8001690 <paintService+0x360>
	{
		BSP_TS_GetState(&ts_struct);
 8001386:	489a      	ldr	r0, [pc, #616]	; (80015f0 <paintService+0x2c0>)
 8001388:	f002 ffda 	bl	8004340 <BSP_TS_GetState>
		if(ts_struct.TouchDetected && ts_struct.X < 240-LastRadius){
 800138c:	4b98      	ldr	r3, [pc, #608]	; (80015f0 <paintService+0x2c0>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 817d 	beq.w	8001690 <paintService+0x360>
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <paintService+0x2c0>)
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	461a      	mov	r2, r3
 800139c:	4b95      	ldr	r3, [pc, #596]	; (80015f4 <paintService+0x2c4>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f280 8173 	bge.w	8001690 <paintService+0x360>
			if(ts_struct.TouchDetected && ts_struct.X > 37 + LastRadius && ts_struct.Y > 37+LastRadius)
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <paintService+0x2c0>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01e      	beq.n	80013f0 <paintService+0xc0>
 80013b2:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <paintService+0x2c0>)
 80013b4:	885b      	ldrh	r3, [r3, #2]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <paintService+0x2c4>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3325      	adds	r3, #37	; 0x25
 80013be:	429a      	cmp	r2, r3
 80013c0:	dd16      	ble.n	80013f0 <paintService+0xc0>
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <paintService+0x2c0>)
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b8a      	ldr	r3, [pc, #552]	; (80015f4 <paintService+0x2c4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	3325      	adds	r3, #37	; 0x25
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dd0e      	ble.n	80013f0 <paintService+0xc0>
			{
				BSP_LCD_SetTextColor(LastColor);
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <paintService+0x2c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fefc 	bl	80031d4 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(ts_struct.X, ts_struct.Y, LastRadius);
 80013dc:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <paintService+0x2c0>)
 80013de:	8858      	ldrh	r0, [r3, #2]
 80013e0:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <paintService+0x2c0>)
 80013e2:	8899      	ldrh	r1, [r3, #4]
 80013e4:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <paintService+0x2c4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f002 fb07 	bl	80039fc <BSP_LCD_FillCircle>
 80013ee:	e14f      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 164) && (ts_struct.Y < 35) && (ts_struct.X <238))
 80013f0:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <paintService+0x2c0>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d03f      	beq.n	8001478 <paintService+0x148>
 80013f8:	4b7d      	ldr	r3, [pc, #500]	; (80015f0 <paintService+0x2c0>)
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	2ba4      	cmp	r3, #164	; 0xa4
 80013fe:	d93b      	bls.n	8001478 <paintService+0x148>
 8001400:	4b7b      	ldr	r3, [pc, #492]	; (80015f0 <paintService+0x2c0>)
 8001402:	889b      	ldrh	r3, [r3, #4]
 8001404:	2b22      	cmp	r3, #34	; 0x22
 8001406:	d837      	bhi.n	8001478 <paintService+0x148>
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <paintService+0x2c0>)
 800140a:	885b      	ldrh	r3, [r3, #2]
 800140c:	2bed      	cmp	r3, #237	; 0xed
 800140e:	d833      	bhi.n	8001478 <paintService+0x148>
			{
				LastColor = LCD_COLOR_BLACK;
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <paintService+0x2c8>)
 8001412:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001416:	601a      	str	r2, [r3, #0]
				LastRadius = 5;
 8001418:	4b76      	ldr	r3, [pc, #472]	; (80015f4 <paintService+0x2c4>)
 800141a:	2205      	movs	r2, #5
 800141c:	801a      	strh	r2, [r3, #0]
				LastColorMarkdownX = 3;
 800141e:	4b77      	ldr	r3, [pc, #476]	; (80015fc <paintService+0x2cc>)
 8001420:	2203      	movs	r2, #3
 8001422:	801a      	strh	r2, [r3, #0]
				LastColorMArkdownY = 96;
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <paintService+0x2d0>)
 8001426:	2260      	movs	r2, #96	; 0x60
 8001428:	801a      	strh	r2, [r3, #0]
				LastThicknessMarkdownX = 53;
 800142a:	4b76      	ldr	r3, [pc, #472]	; (8001604 <paintService+0x2d4>)
 800142c:	2235      	movs	r2, #53	; 0x35
 800142e:	801a      	strh	r2, [r3, #0]
				LastThicknessMArkdownY = 3;
 8001430:	4b75      	ldr	r3, [pc, #468]	; (8001608 <paintService+0x2d8>)
 8001432:	2203      	movs	r2, #3
 8001434:	801a      	strh	r2, [r3, #0]

				if(activeView == Canvas1)
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <paintService+0x2ac>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <paintService+0x128>
				{
					savePartOfSketch(10, 0x080C0000, 38, 38);
 800143e:	2326      	movs	r3, #38	; 0x26
 8001440:	2226      	movs	r2, #38	; 0x26
 8001442:	4967      	ldr	r1, [pc, #412]	; (80015e0 <paintService+0x2b0>)
 8001444:	200a      	movs	r0, #10
 8001446:	f000 f9d1 	bl	80017ec <savePartOfSketch>
					savePartOfSketch(11, 0x080E0000, 38, 179);
 800144a:	23b3      	movs	r3, #179	; 0xb3
 800144c:	2226      	movs	r2, #38	; 0x26
 800144e:	4965      	ldr	r1, [pc, #404]	; (80015e4 <paintService+0x2b4>)
 8001450:	200b      	movs	r0, #11
 8001452:	f000 f9cb 	bl	80017ec <savePartOfSketch>
 8001456:	e00b      	b.n	8001470 <paintService+0x140>
				}
				else
				{
					savePartOfSketch(8, 0x08080000, 38, 38);
 8001458:	2326      	movs	r3, #38	; 0x26
 800145a:	2226      	movs	r2, #38	; 0x26
 800145c:	4962      	ldr	r1, [pc, #392]	; (80015e8 <paintService+0x2b8>)
 800145e:	2008      	movs	r0, #8
 8001460:	f000 f9c4 	bl	80017ec <savePartOfSketch>
					savePartOfSketch(9, 0x080A0000, 38, 179);
 8001464:	23b3      	movs	r3, #179	; 0xb3
 8001466:	2226      	movs	r2, #38	; 0x26
 8001468:	4960      	ldr	r1, [pc, #384]	; (80015ec <paintService+0x2bc>)
 800146a:	2009      	movs	r0, #9
 800146c:	f000 f9be 	bl	80017ec <savePartOfSketch>
				}
				activeView = ChooseScreen;
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <paintService+0x2ac>)
 8001472:	2203      	movs	r2, #3
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e10b      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 22) && (ts_struct.Y < 52) && (ts_struct.X <35))
 8001478:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <paintService+0x2c0>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d010      	beq.n	80014a2 <paintService+0x172>
 8001480:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <paintService+0x2c0>)
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	2b16      	cmp	r3, #22
 8001486:	d90c      	bls.n	80014a2 <paintService+0x172>
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <paintService+0x2c0>)
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	2b33      	cmp	r3, #51	; 0x33
 800148e:	d808      	bhi.n	80014a2 <paintService+0x172>
 8001490:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <paintService+0x2c0>)
 8001492:	885b      	ldrh	r3, [r3, #2]
 8001494:	2b22      	cmp	r3, #34	; 0x22
 8001496:	d804      	bhi.n	80014a2 <paintService+0x172>
			{
				clearWorkspace(canvas);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f98e 	bl	80017bc <clearWorkspace>
 80014a0:	e0f6      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 60) && (ts_struct.Y < 90))
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <paintService+0x2c0>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d011      	beq.n	80014ce <paintService+0x19e>
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <paintService+0x2c0>)
 80014ac:	889b      	ldrh	r3, [r3, #4]
 80014ae:	2b3c      	cmp	r3, #60	; 0x3c
 80014b0:	d90d      	bls.n	80014ce <paintService+0x19e>
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <paintService+0x2c0>)
 80014b4:	889b      	ldrh	r3, [r3, #4]
 80014b6:	2b59      	cmp	r3, #89	; 0x59
 80014b8:	d809      	bhi.n	80014ce <paintService+0x19e>
			{
				markdown(3, 58, COLOR);
 80014ba:	2200      	movs	r2, #0
 80014bc:	213a      	movs	r1, #58	; 0x3a
 80014be:	2003      	movs	r0, #3
 80014c0:	f000 f948 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_WHITE;
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <paintService+0x2c8>)
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e0e0      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 98) && (ts_struct.Y < 128))
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <paintService+0x2c0>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d011      	beq.n	80014fa <paintService+0x1ca>
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <paintService+0x2c0>)
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	2b62      	cmp	r3, #98	; 0x62
 80014dc:	d90d      	bls.n	80014fa <paintService+0x1ca>
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <paintService+0x2c0>)
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	d809      	bhi.n	80014fa <paintService+0x1ca>
			{
				markdown(3, 96, COLOR);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2160      	movs	r1, #96	; 0x60
 80014ea:	2003      	movs	r0, #3
 80014ec:	f000 f932 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_BLACK;
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <paintService+0x2c8>)
 80014f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e0ca      	b.n	8001690 <paintService+0x360>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 136) && (ts_struct.Y < 166))
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <paintService+0x2c0>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d011      	beq.n	8001526 <paintService+0x1f6>
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <paintService+0x2c0>)
 8001504:	889b      	ldrh	r3, [r3, #4]
 8001506:	2b88      	cmp	r3, #136	; 0x88
 8001508:	d90d      	bls.n	8001526 <paintService+0x1f6>
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <paintService+0x2c0>)
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	2ba5      	cmp	r3, #165	; 0xa5
 8001510:	d809      	bhi.n	8001526 <paintService+0x1f6>
			{
				markdown(3, 134, COLOR);
 8001512:	2200      	movs	r2, #0
 8001514:	2186      	movs	r1, #134	; 0x86
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f91c 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_YELLOW;
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <paintService+0x2c8>)
 800151e:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e0b4      	b.n	8001690 <paintService+0x360>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 174) && (ts_struct.Y < 204))
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <paintService+0x2c0>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <paintService+0x220>
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <paintService+0x2c0>)
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	2bae      	cmp	r3, #174	; 0xae
 8001534:	d90c      	bls.n	8001550 <paintService+0x220>
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <paintService+0x2c0>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	2bcb      	cmp	r3, #203	; 0xcb
 800153c:	d808      	bhi.n	8001550 <paintService+0x220>
			{
				markdown(3, 172, COLOR);
 800153e:	2200      	movs	r2, #0
 8001540:	21ac      	movs	r1, #172	; 0xac
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f906 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_RED;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <paintService+0x2c8>)
 800154a:	4a30      	ldr	r2, [pc, #192]	; (800160c <paintService+0x2dc>)
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e09f      	b.n	8001690 <paintService+0x360>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 212) && (ts_struct.Y < 242))
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <paintService+0x2c0>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d010      	beq.n	800157a <paintService+0x24a>
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <paintService+0x2c0>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	2bd4      	cmp	r3, #212	; 0xd4
 800155e:	d90c      	bls.n	800157a <paintService+0x24a>
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <paintService+0x2c0>)
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	2bf1      	cmp	r3, #241	; 0xf1
 8001566:	d808      	bhi.n	800157a <paintService+0x24a>
			{
				markdown(3, 210, COLOR);
 8001568:	2200      	movs	r2, #0
 800156a:	21d2      	movs	r1, #210	; 0xd2
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f8f1 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_BLUE;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <paintService+0x2c8>)
 8001574:	4a26      	ldr	r2, [pc, #152]	; (8001610 <paintService+0x2e0>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e08a      	b.n	8001690 <paintService+0x360>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 250) && (ts_struct.Y < 280))
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <paintService+0x2c0>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d012      	beq.n	80015a8 <paintService+0x278>
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <paintService+0x2c0>)
 8001584:	889b      	ldrh	r3, [r3, #4]
 8001586:	2bfa      	cmp	r3, #250	; 0xfa
 8001588:	d90e      	bls.n	80015a8 <paintService+0x278>
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <paintService+0x2c0>)
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001592:	d209      	bcs.n	80015a8 <paintService+0x278>
			{
				markdown(3, 248, COLOR);
 8001594:	2200      	movs	r2, #0
 8001596:	21f8      	movs	r1, #248	; 0xf8
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f8db 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_GREEN;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <paintService+0x2c8>)
 80015a0:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e073      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 288) && (ts_struct.Y < 318))
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <paintService+0x2c0>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d031      	beq.n	8001614 <paintService+0x2e4>
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <paintService+0x2c0>)
 80015b2:	889b      	ldrh	r3, [r3, #4]
 80015b4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80015b8:	d92c      	bls.n	8001614 <paintService+0x2e4>
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <paintService+0x2c0>)
 80015bc:	889b      	ldrh	r3, [r3, #4]
 80015be:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80015c2:	d227      	bcs.n	8001614 <paintService+0x2e4>
			{
				markdown(3, 286, COLOR);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 f8c2 	bl	8001754 <markdown>
				LastColor = LCD_COLOR_MAGENTA;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <paintService+0x2c8>)
 80015d2:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e05a      	b.n	8001690 <paintService+0x360>
 80015da:	bf00      	nop
 80015dc:	20000284 	.word	0x20000284
 80015e0:	080c0000 	.word	0x080c0000
 80015e4:	080e0000 	.word	0x080e0000
 80015e8:	08080000 	.word	0x08080000
 80015ec:	080a0000 	.word	0x080a0000
 80015f0:	20000400 	.word	0x20000400
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000006 	.word	0x20000006
 8001600:	20000008 	.word	0x20000008
 8001604:	2000000a 	.word	0x2000000a
 8001608:	2000000c 	.word	0x2000000c
 800160c:	ffff0000 	.word	0xffff0000
 8001610:	ff0000ff 	.word	0xff0000ff

			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 55) && (ts_struct.X < 85))
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <paintService+0x37c>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d010      	beq.n	800163e <paintService+0x30e>
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <paintService+0x37c>)
 800161e:	885b      	ldrh	r3, [r3, #2]
 8001620:	2b37      	cmp	r3, #55	; 0x37
 8001622:	d90c      	bls.n	800163e <paintService+0x30e>
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <paintService+0x37c>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	2b54      	cmp	r3, #84	; 0x54
 800162a:	d808      	bhi.n	800163e <paintService+0x30e>
			{
				LastRadius = 5;
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <paintService+0x380>)
 800162e:	2205      	movs	r2, #5
 8001630:	801a      	strh	r2, [r3, #0]
				markdown(53, 3, THICKNESS);
 8001632:	2201      	movs	r2, #1
 8001634:	2103      	movs	r1, #3
 8001636:	2035      	movs	r0, #53	; 0x35
 8001638:	f000 f88c 	bl	8001754 <markdown>
 800163c:	e028      	b.n	8001690 <paintService+0x360>

			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 93) && (ts_struct.X < 123))
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <paintService+0x37c>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d010      	beq.n	8001668 <paintService+0x338>
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <paintService+0x37c>)
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	2b5d      	cmp	r3, #93	; 0x5d
 800164c:	d90c      	bls.n	8001668 <paintService+0x338>
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <paintService+0x37c>)
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	2b7a      	cmp	r3, #122	; 0x7a
 8001654:	d808      	bhi.n	8001668 <paintService+0x338>
			{
				LastRadius = 10;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <paintService+0x380>)
 8001658:	220a      	movs	r2, #10
 800165a:	801a      	strh	r2, [r3, #0]
				markdown(91, 3, THICKNESS);
 800165c:	2201      	movs	r2, #1
 800165e:	2103      	movs	r1, #3
 8001660:	205b      	movs	r0, #91	; 0x5b
 8001662:	f000 f877 	bl	8001754 <markdown>
 8001666:	e013      	b.n	8001690 <paintService+0x360>
			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 131) && (ts_struct.X < 161))
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <paintService+0x37c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00f      	beq.n	8001690 <paintService+0x360>
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <paintService+0x37c>)
 8001672:	885b      	ldrh	r3, [r3, #2]
 8001674:	2b83      	cmp	r3, #131	; 0x83
 8001676:	d90b      	bls.n	8001690 <paintService+0x360>
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <paintService+0x37c>)
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	2ba0      	cmp	r3, #160	; 0xa0
 800167e:	d807      	bhi.n	8001690 <paintService+0x360>
			{
				LastRadius = 15;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <paintService+0x380>)
 8001682:	220f      	movs	r2, #15
 8001684:	801a      	strh	r2, [r3, #0]
				markdown(129, 3, THICKNESS);
 8001686:	2201      	movs	r2, #1
 8001688:	2103      	movs	r1, #3
 800168a:	2081      	movs	r0, #129	; 0x81
 800168c:	f000 f862 	bl	8001754 <markdown>
	while(activeView == Canvas1 || activeView == Canvas2)
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <paintService+0x384>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f43f ae76 	beq.w	8001386 <paintService+0x56>
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <paintService+0x384>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f43f ae71 	beq.w	8001386 <paintService+0x56>
			}
		}
	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000400 	.word	0x20000400
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000284 	.word	0x20000284

080016b8 <resetColorMarkdown>:

void resetColorMarkdown(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f001 fd88 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(3, 58, 34, 34);
 80016c4:	2322      	movs	r3, #34	; 0x22
 80016c6:	2222      	movs	r2, #34	; 0x22
 80016c8:	213a      	movs	r1, #58	; 0x3a
 80016ca:	2003      	movs	r0, #3
 80016cc:	f002 f81a 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 96, 34, 34);
 80016d0:	2322      	movs	r3, #34	; 0x22
 80016d2:	2222      	movs	r2, #34	; 0x22
 80016d4:	2160      	movs	r1, #96	; 0x60
 80016d6:	2003      	movs	r0, #3
 80016d8:	f002 f814 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 134, 34, 34);
 80016dc:	2322      	movs	r3, #34	; 0x22
 80016de:	2222      	movs	r2, #34	; 0x22
 80016e0:	2186      	movs	r1, #134	; 0x86
 80016e2:	2003      	movs	r0, #3
 80016e4:	f002 f80e 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 172, 34, 34);
 80016e8:	2322      	movs	r3, #34	; 0x22
 80016ea:	2222      	movs	r2, #34	; 0x22
 80016ec:	21ac      	movs	r1, #172	; 0xac
 80016ee:	2003      	movs	r0, #3
 80016f0:	f002 f808 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 210, 34, 34);
 80016f4:	2322      	movs	r3, #34	; 0x22
 80016f6:	2222      	movs	r2, #34	; 0x22
 80016f8:	21d2      	movs	r1, #210	; 0xd2
 80016fa:	2003      	movs	r0, #3
 80016fc:	f002 f802 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 248, 34, 34);
 8001700:	2322      	movs	r3, #34	; 0x22
 8001702:	2222      	movs	r2, #34	; 0x22
 8001704:	21f8      	movs	r1, #248	; 0xf8
 8001706:	2003      	movs	r0, #3
 8001708:	f001 fffc 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 286, 34, 34);
 800170c:	2322      	movs	r3, #34	; 0x22
 800170e:	2222      	movs	r2, #34	; 0x22
 8001710:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001714:	2003      	movs	r0, #3
 8001716:	f001 fff5 	bl	8003704 <BSP_LCD_DrawRect>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}

0800171e <resetThicknessMarkdown>:

void resetThicknessMarkdown(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	f001 fd55 	bl	80031d4 <BSP_LCD_SetTextColor>

	BSP_LCD_DrawRect(53, 3, 34, 34);
 800172a:	2322      	movs	r3, #34	; 0x22
 800172c:	2222      	movs	r2, #34	; 0x22
 800172e:	2103      	movs	r1, #3
 8001730:	2035      	movs	r0, #53	; 0x35
 8001732:	f001 ffe7 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(91, 3, 34, 34);
 8001736:	2322      	movs	r3, #34	; 0x22
 8001738:	2222      	movs	r2, #34	; 0x22
 800173a:	2103      	movs	r1, #3
 800173c:	205b      	movs	r0, #91	; 0x5b
 800173e:	f001 ffe1 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(129, 3, 34, 34);
 8001742:	2322      	movs	r3, #34	; 0x22
 8001744:	2222      	movs	r2, #34	; 0x22
 8001746:	2103      	movs	r1, #3
 8001748:	2081      	movs	r0, #129	; 0x81
 800174a:	f001 ffdb 	bl	8003704 <BSP_LCD_DrawRect>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <markdown>:

void markdown(uint16_t x,uint16_t y,Markdown_type type)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
 800175e:	460b      	mov	r3, r1
 8001760:	80bb      	strh	r3, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	70fb      	strb	r3, [r7, #3]
	if(type == COLOR)
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <markdown+0x2a>
	{
		resetColorMarkdown();
 800176c:	f7ff ffa4 	bl	80016b8 <resetColorMarkdown>
		LastColorMarkdownX = x;
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <markdown+0x54>)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	8013      	strh	r3, [r2, #0]
		LastColorMArkdownY = y;
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <markdown+0x58>)
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	8013      	strh	r3, [r2, #0]
 800177c:	e007      	b.n	800178e <markdown+0x3a>
	}
	else
	{
		resetThicknessMarkdown();
 800177e:	f7ff ffce 	bl	800171e <resetThicknessMarkdown>
		LastThicknessMarkdownX = x;
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <markdown+0x5c>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	8013      	strh	r3, [r2, #0]
		LastThicknessMArkdownY = y;
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <markdown+0x60>)
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	8013      	strh	r3, [r2, #0]
	}
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800178e:	480a      	ldr	r0, [pc, #40]	; (80017b8 <markdown+0x64>)
 8001790:	f001 fd20 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, 34, 34);
 8001794:	88b9      	ldrh	r1, [r7, #4]
 8001796:	88f8      	ldrh	r0, [r7, #6]
 8001798:	2322      	movs	r3, #34	; 0x22
 800179a:	2222      	movs	r2, #34	; 0x22
 800179c:	f001 ffb2 	bl	8003704 <BSP_LCD_DrawRect>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000006 	.word	0x20000006
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000a 	.word	0x2000000a
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	ffff0000 	.word	0xffff0000

080017bc <clearWorkspace>:

void clearWorkspace(uint8_t canvas)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	f001 fdf5 	bl	80033b8 <BSP_LCD_Clear>
	showPaintInterface(canvas);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fced 	bl	80011b0 <showPaintInterface>
	BSP_LCD_SetTextColor(LastColor);
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <clearWorkspace+0x2c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fcfa 	bl	80031d4 <BSP_LCD_SetTextColor>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000

080017ec <savePartOfSketch>:

void savePartOfSketch(uint8_t sector, uint32_t addrs,int startX,int startY)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	f5ad 3dde 	sub.w	sp, sp, #113664	; 0x1bc00
 80017f2:	b0c9      	sub	sp, #292	; 0x124
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4604      	mov	r4, r0
 80017f8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80017fc:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001800:	6001      	str	r1, [r0, #0]
 8001802:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001806:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800180a:	600a      	str	r2, [r1, #0]
 800180c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001810:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800181a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800181e:	4622      	mov	r2, r4
 8001820:	701a      	strb	r2, [r3, #0]
	uint32_t buff[28482];
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001828:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800182c:	6013      	str	r3, [r2, #0]
	for(i=startX ; i < 240; ++i)
 800182e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001832:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 800183c:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 8001840:	8013      	strh	r3, [r2, #0]
 8001842:	e05d      	b.n	8001900 <savePartOfSketch+0x114>
	{
		for(j=startY; j < startY+141; ++j)
 8001844:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001848:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001852:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8001856:	8013      	strh	r3, [r2, #0]
 8001858:	e038      	b.n	80018cc <savePartOfSketch+0xe0>
		{
			if(bufferIter > 28481) break;
 800185a:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800185e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f646 7241 	movw	r2, #28481	; 0x6f41
 8001868:	4293      	cmp	r3, r2
 800186a:	dc3d      	bgt.n	80018e8 <savePartOfSketch+0xfc>
			buff[bufferIter] = BSP_LCD_ReadPixel(i, j);
 800186c:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001870:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001874:	881a      	ldrh	r2, [r3, #0]
 8001876:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800187a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fcf2 	bl	800326c <BSP_LCD_ReadPixel>
 8001888:	4601      	mov	r1, r0
 800188a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800188e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001892:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001896:	f502 728c 	add.w	r2, r2, #280	; 0x118
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			bufferIter++;
 80018a0:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018a4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018b0:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80018b4:	6013      	str	r3, [r2, #0]
		for(j=startY; j < startY+141; ++j)
 80018b6:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018c6:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80018ca:	8013      	strh	r3, [r2, #0]
 80018cc:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80018da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	338d      	adds	r3, #141	; 0x8d
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dbb9      	blt.n	800185a <savePartOfSketch+0x6e>
 80018e6:	e000      	b.n	80018ea <savePartOfSketch+0xfe>
			if(bufferIter > 28481) break;
 80018e8:	bf00      	nop
	for(i=startX ; i < 240; ++i)
 80018ea:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018ee:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018fa:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 80018fe:	8013      	strh	r3, [r2, #0]
 8001900:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001904:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	2bef      	cmp	r3, #239	; 0xef
 800190c:	d99a      	bls.n	8001844 <savePartOfSketch+0x58>
		}
	}

	SetSectorAddr(sector,addrs);
 800190e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001912:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001916:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800191a:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f952 	bl	8001bcc <SetSectorAddr>
	WriteToFlash(0, buff,28482);
 8001928:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800192c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001930:	f646 7242 	movw	r2, #28482	; 0x6f42
 8001934:	4619      	mov	r1, r3
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f95e 	bl	8001bf8 <WriteToFlash>
}
 800193c:	bf00      	nop
 800193e:	f507 37de 	add.w	r7, r7, #113664	; 0x1bc00
 8001942:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}

0800194a <loadPartOfSketch>:

void loadPartOfSketch(uint8_t sector, uint32_t addrs,int startX,int startY)
{
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	f5ad 3dde 	sub.w	sp, sp, #113664	; 0x1bc00
 8001950:	b0c9      	sub	sp, #292	; 0x124
 8001952:	af00      	add	r7, sp, #0
 8001954:	4604      	mov	r4, r0
 8001956:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800195a:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800195e:	6001      	str	r1, [r0, #0]
 8001960:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001964:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8001968:	600a      	str	r2, [r1, #0]
 800196a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800196e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001978:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800197c:	4622      	mov	r2, r4
 800197e:	701a      	strb	r2, [r3, #0]
	uint32_t buff[28482];
	SetSectorAddr(sector,addrs);
 8001980:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001988:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800198c:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8001990:	7812      	ldrb	r2, [r2, #0]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	4610      	mov	r0, r2
 8001996:	f000 f919 	bl	8001bcc <SetSectorAddr>
	ReadFromFlash(0, buff,28482);
 800199a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800199e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019a2:	f646 7242 	movw	r2, #28482	; 0x6f42
 80019a6:	4619      	mov	r1, r3
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f957 	bl	8001c5c <ReadFromFlash>
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80019b4:	f502 728c 	add.w	r2, r2, #280	; 0x118
 80019b8:	6013      	str	r3, [r2, #0]
	for(i=startX ; i < 240; ++i)
 80019ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80019c8:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 80019cc:	8013      	strh	r3, [r2, #0]
 80019ce:	e05b      	b.n	8001a88 <loadPartOfSketch+0x13e>
	{
		for(j=startY; j < startY+141; ++j)
 80019d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80019de:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80019e2:	8013      	strh	r3, [r2, #0]
 80019e4:	e036      	b.n	8001a54 <loadPartOfSketch+0x10a>
		{
			if(bufferIter> 28481) break;
 80019e6:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80019ea:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f646 7241 	movw	r2, #28481	; 0x6f41
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dc3b      	bgt.n	8001a70 <loadPartOfSketch+0x126>
			BSP_LCD_DrawPixel(i, j, buff[bufferIter]);
 80019f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a00:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001a04:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a0e:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a12:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001a16:	8819      	ldrh	r1, [r3, #0]
 8001a18:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a1c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 f970 	bl	8003d08 <BSP_LCD_DrawPixel>
			bufferIter++;
 8001a28:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a2c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001a38:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8001a3c:	6013      	str	r3, [r2, #0]
		for(j=startY; j < startY+141; ++j)
 8001a3e:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001a4e:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 8001a52:	8013      	strh	r3, [r2, #0]
 8001a54:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	338d      	adds	r3, #141	; 0x8d
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbbb      	blt.n	80019e6 <loadPartOfSketch+0x9c>
 8001a6e:	e000      	b.n	8001a72 <loadPartOfSketch+0x128>
			if(bufferIter> 28481) break;
 8001a70:	bf00      	nop
	for(i=startX ; i < 240; ++i)
 8001a72:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a76:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001a82:	f502 728f 	add.w	r2, r2, #286	; 0x11e
 8001a86:	8013      	strh	r3, [r2, #0]
 8001a88:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001a8c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2bef      	cmp	r3, #239	; 0xef
 8001a94:	d99c      	bls.n	80019d0 <loadPartOfSketch+0x86>
		}
	}
}
 8001a96:	bf00      	nop
 8001a98:	f507 37de 	add.w	r7, r7, #113664	; 0x1bc00
 8001a9c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <initLCD>:

#include "paintIntro.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void initLCD(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8001aa8:	f001 fa9e 	bl	8002fe8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 8001aac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f001 fb1b 	bl	80030ec <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f001 fb7c 	bl	80031b4 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001abc:	f002 f83e 	bl	8003b3c <BSP_LCD_DisplayOn>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <printHelloScreen>:

void printHelloScreen(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	f001 fc73 	bl	80033b8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001ad2:	4831      	ldr	r0, [pc, #196]	; (8001b98 <printHelloScreen+0xd4>)
 8001ad4:	f001 fb7e 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 125, 220, 70);
 8001ad8:	2346      	movs	r3, #70	; 0x46
 8001ada:	22dc      	movs	r2, #220	; 0xdc
 8001adc:	217d      	movs	r1, #125	; 0x7d
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f001 fe10 	bl	8003704 <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font24);
 8001ae4:	482d      	ldr	r0, [pc, #180]	; (8001b9c <printHelloScreen+0xd8>)
 8001ae6:	f001 fba7 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 135, (uint8_t*)"EKAB", CENTER_MODE);
 8001aea:	2301      	movs	r3, #1
 8001aec:	4a2c      	ldr	r2, [pc, #176]	; (8001ba0 <printHelloScreen+0xdc>)
 8001aee:	2187      	movs	r1, #135	; 0x87
 8001af0:	2000      	movs	r0, #0
 8001af2:	f001 fccd 	bl	8003490 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001af6:	482b      	ldr	r0, [pc, #172]	; (8001ba4 <printHelloScreen+0xe0>)
 8001af8:	f001 fb9e 	bl	8003238 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 155, (uint8_t*)"DRAW", CENTER_MODE);
 8001afc:	2301      	movs	r3, #1
 8001afe:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <printHelloScreen+0xe4>)
 8001b00:	219b      	movs	r1, #155	; 0x9b
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fcc4 	bl	8003490 <BSP_LCD_DisplayStringAt>
	HAL_Delay(750);
 8001b08:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b0c:	f002 fd0c 	bl	8004528 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8001b10:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8001b14:	f001 fb5e 	bl	80031d4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(100, 176, 5);
 8001b18:	2205      	movs	r2, #5
 8001b1a:	21b0      	movs	r1, #176	; 0xb0
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	f001 ff6d 	bl	80039fc <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(115, 176, 5);
 8001b22:	2205      	movs	r2, #5
 8001b24:	21b0      	movs	r1, #176	; 0xb0
 8001b26:	2073      	movs	r0, #115	; 0x73
 8001b28:	f001 ff68 	bl	80039fc <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(130, 176, 5);
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	21b0      	movs	r1, #176	; 0xb0
 8001b30:	2082      	movs	r0, #130	; 0x82
 8001b32:	f001 ff63 	bl	80039fc <BSP_LCD_FillCircle>
	HAL_Delay(1000);
 8001b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3a:	f002 fcf5 	bl	8004528 <HAL_Delay>
	int i =0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]

	for(i = 100; i <=130; i+=15)
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	e01f      	b.n	8001b88 <printHelloScreen+0xc4>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001b48:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001b4c:	f001 fb42 	bl	80031d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2205      	movs	r2, #5
 8001b56:	21b0      	movs	r1, #176	; 0xb0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 ff4f 	bl	80039fc <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001b5e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b62:	f002 fce1 	bl	8004528 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001b66:	480c      	ldr	r0, [pc, #48]	; (8001b98 <printHelloScreen+0xd4>)
 8001b68:	f001 fb34 	bl	80031d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2205      	movs	r2, #5
 8001b72:	21b0      	movs	r1, #176	; 0xb0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 ff41 	bl	80039fc <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001b7a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001b7e:	f002 fcd3 	bl	8004528 <HAL_Delay>
	for(i = 100; i <=130; i+=15)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	330f      	adds	r3, #15
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b82      	cmp	r3, #130	; 0x82
 8001b8c:	dddc      	ble.n	8001b48 <printHelloScreen+0x84>
	}
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	ff800080 	.word	0xff800080
 8001b9c:	2000007c 	.word	0x2000007c
 8001ba0:	08009908 	.word	0x08009908
 8001ba4:	20000084 	.word	0x20000084
 8001ba8:	08009910 	.word	0x08009910

08001bac <EraseSector>:

static uint32_t SectorAddr;
static uint8_t SectorNum;

void EraseSector(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001bb0:	f003 fa5a 	bl	8005068 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <EraseSector+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fbc4 	bl	8005348 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8001bc0:	f003 fa74 	bl	80050ac <HAL_FLASH_Lock>
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200000c4 	.word	0x200000c4

08001bcc <SetSectorAddr>:

void SetSectorAddr(uint8_t sector, uint32_t addr)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	71fb      	strb	r3, [r7, #7]
	SectorNum = sector;
 8001bd8:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SetSectorAddr+0x24>)
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	7013      	strb	r3, [r2, #0]
	SectorAddr = addr;
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <SetSectorAddr+0x28>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	200000c4 	.word	0x200000c4
 8001bf4:	200000c0 	.word	0x200000c0

08001bf8 <WriteToFlash>:

void WriteToFlash(uint32_t idx, void *wrBuf, uint32_t Nsize)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <WriteToFlash+0x60>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

	EraseSector();
 8001c0e:	f7ff ffcd 	bl	8001bac <EraseSector>

	HAL_FLASH_Unlock();
 8001c12:	f003 fa29 	bl	8005068 <HAL_FLASH_Unlock>

	for(uint32_t i=0; i<Nsize; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e012      	b.n	8001c42 <WriteToFlash+0x4a>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 0400 	mov.w	r4, #0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	2002      	movs	r0, #2
 8001c32:	f003 f9c5 	bl	8004fc0 <HAL_FLASH_Program>
		flashAddress+=4;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Nsize; i++)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3e8      	bcc.n	8001c1c <WriteToFlash+0x24>
	}

	HAL_FLASH_Lock();
 8001c4a:	f003 fa2f 	bl	80050ac <HAL_FLASH_Lock>
}
 8001c4e:	bf00      	nop
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200000c0 	.word	0x200000c0

08001c5c <ReadFromFlash>:

void ReadFromFlash(uint32_t idx, void *rdBuf, uint32_t Nsize)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <ReadFromFlash+0x4c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]


		for(uint32_t i=0; i<Nsize; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00c      	b.n	8001c92 <ReadFromFlash+0x36>
		{
			*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	440b      	add	r3, r1
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	601a      	str	r2, [r3, #0]
			flashAddress+=4;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
		for(uint32_t i=0; i<Nsize; i++)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3ee      	bcc.n	8001c78 <ReadFromFlash+0x1c>
		}

}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	200000c0 	.word	0x200000c0

08001cac <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <MX_SPI5_Init+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_SPI5_Init+0x64>)
 8001cfe:	f006 f898 	bl	8007e32 <HAL_SPI_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001d08:	f7ff fa32 	bl	8001170 <Error_Handler>
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000408 	.word	0x20000408
 8001d14:	40015000 	.word	0x40015000

08001d18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_SPI_MspInit+0x84>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_SPI_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d72:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d84:	2305      	movs	r3, #5
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <HAL_SPI_MspInit+0x8c>)
 8001d90:	f003 fb28 	bl	80053e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40015000 	.word	0x40015000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40021400 	.word	0x40021400

08001da8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_SPI_MspDeInit+0x30>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10a      	bne.n	8001dd0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_SPI_MspDeInit+0x34>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_SPI_MspDeInit+0x34>)
 8001dc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001dc6:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_SPI_MspDeInit+0x38>)
 8001dcc:	f003 fcb4 	bl	8005738 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40015000 	.word	0x40015000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021400 	.word	0x40021400

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_MspInit+0x4c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	2036      	movs	r0, #54	; 0x36
 8001e4a:	f002 fc47 	bl	80046dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001e4e:	2036      	movs	r0, #54	; 0x36
 8001e50:	f002 fc60 	bl	8004714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_InitTick+0xa4>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_InitTick+0xa4>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_InitTick+0xa4>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e70:	f107 0210 	add.w	r2, r7, #16
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f005 fd6a 	bl	8007954 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e80:	f005 fd40 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8001e84:	4603      	mov	r3, r0
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_InitTick+0xa8>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	3b01      	subs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_InitTick+0xac>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_InitTick+0xb0>)
 8001e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_InitTick+0xac>)
 8001ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_InitTick+0xac>)
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_InitTick+0xac>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_InitTick+0xac>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <HAL_InitTick+0xac>)
 8001eba:	f006 fd45 	bl	8008948 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ec4:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <HAL_InitTick+0xac>)
 8001ec6:	f006 fd74 	bl	80089b2 <HAL_TIM_Base_Start_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	20000460 	.word	0x20000460
 8001ee4:	40001000 	.word	0x40001000

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler+0x4>

08001f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM6_DAC_IRQHandler+0x10>)
 8001f3e:	f006 fd5c 	bl	80089fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000460 	.word	0x20000460

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <SystemInit+0x28>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <SystemInit+0x28>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SystemInit+0x28>)
 8001f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f66:	609a      	str	r2, [r3, #8]
#endif
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_USART1_UART_Init+0x50>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	f006 ff08 	bl	8008dc4 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fba:	f7ff f8d9 	bl	8001170 <Error_Handler>
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004a0 	.word	0x200004a0
 8001fc8:	40011000 	.word	0x40011000

08001fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_UART_MspInit+0x84>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12c      	bne.n	8002048 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_UART_MspInit+0x88>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_UART_MspInit+0x88>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_UART_MspInit+0x88>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_UART_MspInit+0x88>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_UART_MspInit+0x88>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_UART_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002026:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002038:	2307      	movs	r3, #7
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_UART_MspInit+0x8c>)
 8002044:	f003 f9ce 	bl	80053e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40011000 	.word	0x40011000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002062:	e003      	b.n	800206c <LoopCopyDataInit>

08002064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800206a:	3104      	adds	r1, #4

0800206c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002074:	d3f6      	bcc.n	8002064 <CopyDataInit>
  ldr  r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002078:	e002      	b.n	8002080 <LoopFillZerobss>

0800207a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800207a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800207c:	f842 3b04 	str.w	r3, [r2], #4

08002080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002084:	d3f9      	bcc.n	800207a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002086:	f7ff ff61 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f007 fba7 	bl	80097dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7fe ff93 	bl	8000fb8 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002094:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002098:	0800c454 	.word	0x0800c454
  ldr  r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020a0:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 80020a4:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 80020a8:	20000604 	.word	0x20000604

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>

080020ae <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80020b2:	f000 fe4b 	bl	8002d4c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80020b6:	20ca      	movs	r0, #202	; 0xca
 80020b8:	f000 f95d 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80020bc:	20c3      	movs	r0, #195	; 0xc3
 80020be:	f000 f967 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80020c2:	2008      	movs	r0, #8
 80020c4:	f000 f964 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80020c8:	2050      	movs	r0, #80	; 0x50
 80020ca:	f000 f961 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80020ce:	20cf      	movs	r0, #207	; 0xcf
 80020d0:	f000 f951 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f95b 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80020da:	20c1      	movs	r0, #193	; 0xc1
 80020dc:	f000 f958 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80020e0:	2030      	movs	r0, #48	; 0x30
 80020e2:	f000 f955 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80020e6:	20ed      	movs	r0, #237	; 0xed
 80020e8:	f000 f945 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80020ec:	2064      	movs	r0, #100	; 0x64
 80020ee:	f000 f94f 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 f94c 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80020f8:	2012      	movs	r0, #18
 80020fa:	f000 f949 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80020fe:	2081      	movs	r0, #129	; 0x81
 8002100:	f000 f946 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002104:	20e8      	movs	r0, #232	; 0xe8
 8002106:	f000 f936 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800210a:	2085      	movs	r0, #133	; 0x85
 800210c:	f000 f940 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f93d 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 f93a 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800211c:	20cb      	movs	r0, #203	; 0xcb
 800211e:	f000 f92a 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002122:	2039      	movs	r0, #57	; 0x39
 8002124:	f000 f934 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002128:	202c      	movs	r0, #44	; 0x2c
 800212a:	f000 f931 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 f92e 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002134:	2034      	movs	r0, #52	; 0x34
 8002136:	f000 f92b 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800213a:	2002      	movs	r0, #2
 800213c:	f000 f928 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002140:	20f7      	movs	r0, #247	; 0xf7
 8002142:	f000 f918 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002146:	2020      	movs	r0, #32
 8002148:	f000 f922 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800214c:	20ea      	movs	r0, #234	; 0xea
 800214e:	f000 f912 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f91c 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f919 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800215e:	20b1      	movs	r0, #177	; 0xb1
 8002160:	f000 f909 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f913 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800216a:	201b      	movs	r0, #27
 800216c:	f000 f910 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002170:	20b6      	movs	r0, #182	; 0xb6
 8002172:	f000 f900 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002176:	200a      	movs	r0, #10
 8002178:	f000 f90a 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800217c:	20a2      	movs	r0, #162	; 0xa2
 800217e:	f000 f907 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002182:	20c0      	movs	r0, #192	; 0xc0
 8002184:	f000 f8f7 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002188:	2010      	movs	r0, #16
 800218a:	f000 f901 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800218e:	20c1      	movs	r0, #193	; 0xc1
 8002190:	f000 f8f1 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002194:	2010      	movs	r0, #16
 8002196:	f000 f8fb 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800219a:	20c5      	movs	r0, #197	; 0xc5
 800219c:	f000 f8eb 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80021a0:	2045      	movs	r0, #69	; 0x45
 80021a2:	f000 f8f5 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80021a6:	2015      	movs	r0, #21
 80021a8:	f000 f8f2 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80021ac:	20c7      	movs	r0, #199	; 0xc7
 80021ae:	f000 f8e2 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80021b2:	2090      	movs	r0, #144	; 0x90
 80021b4:	f000 f8ec 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80021b8:	2036      	movs	r0, #54	; 0x36
 80021ba:	f000 f8dc 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80021be:	20c8      	movs	r0, #200	; 0xc8
 80021c0:	f000 f8e6 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80021c4:	20f2      	movs	r0, #242	; 0xf2
 80021c6:	f000 f8d6 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f8e0 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80021d0:	20b0      	movs	r0, #176	; 0xb0
 80021d2:	f000 f8d0 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80021d6:	20c2      	movs	r0, #194	; 0xc2
 80021d8:	f000 f8da 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80021dc:	20b6      	movs	r0, #182	; 0xb6
 80021de:	f000 f8ca 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80021e2:	200a      	movs	r0, #10
 80021e4:	f000 f8d4 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80021e8:	20a7      	movs	r0, #167	; 0xa7
 80021ea:	f000 f8d1 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80021ee:	2027      	movs	r0, #39	; 0x27
 80021f0:	f000 f8ce 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80021f4:	2004      	movs	r0, #4
 80021f6:	f000 f8cb 	bl	8002390 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80021fa:	202a      	movs	r0, #42	; 0x2a
 80021fc:	f000 f8bb 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 f8c5 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002206:	2000      	movs	r0, #0
 8002208:	f000 f8c2 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f8bf 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002212:	20ef      	movs	r0, #239	; 0xef
 8002214:	f000 f8bc 	bl	8002390 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002218:	202b      	movs	r0, #43	; 0x2b
 800221a:	f000 f8ac 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f000 f8b6 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f000 f8b3 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 f8b0 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002230:	203f      	movs	r0, #63	; 0x3f
 8002232:	f000 f8ad 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002236:	20f6      	movs	r0, #246	; 0xf6
 8002238:	f000 f89d 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800223c:	2001      	movs	r0, #1
 800223e:	f000 f8a7 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f8a4 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002248:	2006      	movs	r0, #6
 800224a:	f000 f8a1 	bl	8002390 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800224e:	202c      	movs	r0, #44	; 0x2c
 8002250:	f000 f891 	bl	8002376 <ili9341_WriteReg>
  LCD_Delay(200);
 8002254:	20c8      	movs	r0, #200	; 0xc8
 8002256:	f000 fe67 	bl	8002f28 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800225a:	2026      	movs	r0, #38	; 0x26
 800225c:	f000 f88b 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 f895 	bl	8002390 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002266:	20e0      	movs	r0, #224	; 0xe0
 8002268:	f000 f885 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800226c:	200f      	movs	r0, #15
 800226e:	f000 f88f 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002272:	2029      	movs	r0, #41	; 0x29
 8002274:	f000 f88c 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002278:	2024      	movs	r0, #36	; 0x24
 800227a:	f000 f889 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800227e:	200c      	movs	r0, #12
 8002280:	f000 f886 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002284:	200e      	movs	r0, #14
 8002286:	f000 f883 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800228a:	2009      	movs	r0, #9
 800228c:	f000 f880 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002290:	204e      	movs	r0, #78	; 0x4e
 8002292:	f000 f87d 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002296:	2078      	movs	r0, #120	; 0x78
 8002298:	f000 f87a 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800229c:	203c      	movs	r0, #60	; 0x3c
 800229e:	f000 f877 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80022a2:	2009      	movs	r0, #9
 80022a4:	f000 f874 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80022a8:	2013      	movs	r0, #19
 80022aa:	f000 f871 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80022ae:	2005      	movs	r0, #5
 80022b0:	f000 f86e 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80022b4:	2017      	movs	r0, #23
 80022b6:	f000 f86b 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80022ba:	2011      	movs	r0, #17
 80022bc:	f000 f868 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f865 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80022c6:	20e1      	movs	r0, #225	; 0xe1
 80022c8:	f000 f855 	bl	8002376 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 f85f 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80022d2:	2016      	movs	r0, #22
 80022d4:	f000 f85c 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80022d8:	201b      	movs	r0, #27
 80022da:	f000 f859 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80022de:	2004      	movs	r0, #4
 80022e0:	f000 f856 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80022e4:	2011      	movs	r0, #17
 80022e6:	f000 f853 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80022ea:	2007      	movs	r0, #7
 80022ec:	f000 f850 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80022f0:	2031      	movs	r0, #49	; 0x31
 80022f2:	f000 f84d 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80022f6:	2033      	movs	r0, #51	; 0x33
 80022f8:	f000 f84a 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80022fc:	2042      	movs	r0, #66	; 0x42
 80022fe:	f000 f847 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002302:	2005      	movs	r0, #5
 8002304:	f000 f844 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002308:	200c      	movs	r0, #12
 800230a:	f000 f841 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800230e:	200a      	movs	r0, #10
 8002310:	f000 f83e 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002314:	2028      	movs	r0, #40	; 0x28
 8002316:	f000 f83b 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800231a:	202f      	movs	r0, #47	; 0x2f
 800231c:	f000 f838 	bl	8002390 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002320:	200f      	movs	r0, #15
 8002322:	f000 f835 	bl	8002390 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002326:	2011      	movs	r0, #17
 8002328:	f000 f825 	bl	8002376 <ili9341_WriteReg>
  LCD_Delay(200);
 800232c:	20c8      	movs	r0, #200	; 0xc8
 800232e:	f000 fdfb 	bl	8002f28 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002332:	2029      	movs	r0, #41	; 0x29
 8002334:	f000 f81f 	bl	8002376 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002338:	202c      	movs	r0, #44	; 0x2c
 800233a:	f000 f81c 	bl	8002376 <ili9341_WriteReg>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}

08002342 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002346:	f000 fd01 	bl	8002d4c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800234a:	2103      	movs	r1, #3
 800234c:	20d3      	movs	r0, #211	; 0xd3
 800234e:	f000 f82c 	bl	80023aa <ili9341_ReadData>
 8002352:	4603      	mov	r3, r0
 8002354:	b29b      	uxth	r3, r3
}
 8002356:	4618      	mov	r0, r3
 8002358:	bd80      	pop	{r7, pc}

0800235a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800235e:	2029      	movs	r0, #41	; 0x29
 8002360:	f000 f809 	bl	8002376 <ili9341_WriteReg>
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800236c:	2028      	movs	r0, #40	; 0x28
 800236e:	f000 f802 	bl	8002376 <ili9341_WriteReg>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}

08002376 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fd7c 	bl	8002e80 <LCD_IO_WriteReg>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd4d 	bl	8002e3c <LCD_IO_WriteData>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	460a      	mov	r2, r1
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	4613      	mov	r3, r2
 80023b8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80023ba:	797a      	ldrb	r2, [r7, #5]
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fd7f 	bl	8002ec4 <LCD_IO_ReadData>
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80023d4:	23f0      	movs	r3, #240	; 0xf0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80023e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa59 	bl	80028b8 <stmpe811_GetInstance>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	d112      	bne.n	8002436 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002410:	2000      	movs	r0, #0
 8002412:	f000 fa51 	bl	80028b8 <stmpe811_GetInstance>
 8002416:	4603      	mov	r3, r0
 8002418:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d80a      	bhi.n	8002436 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	b2d1      	uxtb	r1, r2
 8002426:	4a06      	ldr	r2, [pc, #24]	; (8002440 <stmpe811_Init+0x4c>)
 8002428:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800242a:	f000 fd88 	bl	8002f3e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f807 	bl	8002444 <stmpe811_Reset>
    }
  }
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200000c8 	.word	0x200000c8

08002444 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2202      	movs	r2, #2
 8002454:	2103      	movs	r1, #3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fd7d 	bl	8002f56 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800245c:	200a      	movs	r0, #10
 800245e:	f000 fdb7 	bl	8002fd0 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2200      	movs	r2, #0
 8002468:	2103      	movs	r1, #3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fd73 	bl	8002f56 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002470:	2002      	movs	r0, #2
 8002472:	f000 fdad 	bl	8002fd0 <IOE_Delay>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800247e:	b590      	push	{r4, r7, lr}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002488:	f000 fd59 	bl	8002f3e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fd72 	bl	8002f7c <IOE_Read>
 8002498:	4603      	mov	r3, r0
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fd69 	bl	8002f7c <IOE_Read>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80024ae:	4323      	orrs	r3, r4
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29b      	uxth	r3, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}

080024bc <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2109      	movs	r1, #9
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fd53 	bl	8002f7c <IOE_Read>
 80024d6:	4603      	mov	r3, r0
 80024d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	2109      	movs	r1, #9
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fd33 	bl	8002f56 <IOE_Write>
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2109      	movs	r1, #9
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fd35 	bl	8002f7c <IOE_Read>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	2109      	movs	r1, #9
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fd15 	bl	8002f56 <IOE_Write>
    
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	460a      	mov	r2, r1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	4613      	mov	r3, r2
 8002542:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	210a      	movs	r1, #10
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd14 	bl	8002f7c <IOE_Read>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	797b      	ldrb	r3, [r7, #5]
 800255c:	4313      	orrs	r3, r2
 800255e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	210a      	movs	r1, #10
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fcf4 	bl	8002f56 <IOE_Write>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	460a      	mov	r2, r1
 8002580:	80fb      	strh	r3, [r7, #6]
 8002582:	4613      	mov	r3, r2
 8002584:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	210a      	movs	r1, #10
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fcf3 	bl	8002f7c <IOE_Read>
 8002596:	4603      	mov	r3, r0
 8002598:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800259a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800259e:	43db      	mvns	r3, r3
 80025a0:	b25a      	sxtb	r2, r3
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4013      	ands	r3, r2
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	210a      	movs	r1, #10
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fcce 	bl	8002f56 <IOE_Write>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	460a      	mov	r2, r1
 80025cc:	80fb      	strh	r3, [r7, #6]
 80025ce:	4613      	mov	r3, r2
 80025d0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	210b      	movs	r1, #11
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fccf 	bl	8002f7c <IOE_Read>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	797b      	ldrb	r3, [r7, #5]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b2db      	uxtb	r3, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	460a      	mov	r2, r1
 80025fa:	80fb      	strh	r3, [r7, #6]
 80025fc:	4613      	mov	r3, r2
 80025fe:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	797a      	ldrb	r2, [r7, #5]
 8002606:	210b      	movs	r1, #11
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fca4 	bl	8002f56 <IOE_Write>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	6039      	str	r1, [r7, #0]
 8002620:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2117      	movs	r1, #23
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fca5 	bl	8002f7c <IOE_Read>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b25b      	sxtb	r3, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	b25a      	sxtb	r2, r3
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4013      	ands	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	2117      	movs	r1, #23
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fc80 	bl	8002f56 <IOE_Write>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2104      	movs	r1, #4
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fc84 	bl	8002f7c <IOE_Read>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	2104      	movs	r1, #4
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fc64 	bl	8002f56 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	21f0      	movs	r1, #240	; 0xf0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ffbf 	bl	8002616 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	2104      	movs	r1, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fc54 	bl	8002f56 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2249      	movs	r2, #73	; 0x49
 80026b4:	2120      	movs	r1, #32
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fc4d 	bl	8002f56 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80026bc:	2002      	movs	r0, #2
 80026be:	f000 fc87 	bl	8002fd0 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	2121      	movs	r1, #33	; 0x21
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fc43 	bl	8002f56 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	229a      	movs	r2, #154	; 0x9a
 80026d6:	2141      	movs	r1, #65	; 0x41
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fc3c 	bl	8002f56 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2201      	movs	r2, #1
 80026e4:	214a      	movs	r1, #74	; 0x4a
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc35 	bl	8002f56 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	214b      	movs	r1, #75	; 0x4b
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fc2e 	bl	8002f56 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	214b      	movs	r1, #75	; 0x4b
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fc27 	bl	8002f56 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2201      	movs	r2, #1
 800270e:	2156      	movs	r1, #86	; 0x56
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fc20 	bl	8002f56 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2201      	movs	r2, #1
 800271c:	2158      	movs	r1, #88	; 0x58
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fc19 	bl	8002f56 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2201      	movs	r2, #1
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fc12 	bl	8002f56 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	210b      	movs	r1, #11
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fc0b 	bl	8002f56 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002740:	2002      	movs	r0, #2
 8002742:	f000 fc45 	bl	8002fd0 <IOE_Delay>
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fc0a 	bl	8002f7c <IOE_Read>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800277a:	7bbb      	ldrb	r3, [r7, #14]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	214c      	movs	r1, #76	; 0x4c
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fbf8 	bl	8002f7c <IOE_Read>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d010      	beq.n	80027b4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e00d      	b.n	80027b4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2201      	movs	r2, #1
 800279e:	214b      	movs	r1, #75	; 0x4b
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fbd8 	bl	8002f56 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2200      	movs	r2, #0
 80027ac:	214b      	movs	r1, #75	; 0x4b
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fbd1 	bl	8002f56 <IOE_Write>
  }
  
  return ret;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	b2d8      	uxtb	r0, r3
 80027d0:	f107 0210 	add.w	r2, r7, #16
 80027d4:	2304      	movs	r3, #4
 80027d6:	21d7      	movs	r1, #215	; 0xd7
 80027d8:	f000 fbe3 	bl	8002fa2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80027dc:	7c3b      	ldrb	r3, [r7, #16]
 80027de:	061a      	lsls	r2, r3, #24
 80027e0:	7c7b      	ldrb	r3, [r7, #17]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	7cbb      	ldrb	r3, [r7, #18]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4313      	orrs	r3, r2
 80027ec:	7cfa      	ldrb	r2, [r7, #19]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	0d1b      	lsrs	r3, r3, #20
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2201      	movs	r2, #1
 8002812:	214b      	movs	r1, #75	; 0x4b
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb9e 	bl	8002f56 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800281a:	89fb      	ldrh	r3, [r7, #14]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2200      	movs	r2, #0
 8002820:	214b      	movs	r1, #75	; 0x4b
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fb97 	bl	8002f56 <IOE_Write>
}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800283a:	f000 fb86 	bl	8002f4a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	211f      	movs	r1, #31
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fe76 	bl	8002534 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fe36 	bl	80024bc <stmpe811_EnableGlobalIT>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fe47 	bl	80024f8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	211f      	movs	r1, #31
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe81 	bl	8002576 <stmpe811_DisableITSource>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	211f      	movs	r1, #31
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fe99 	bl	80025c2 <stmpe811_ReadGITStatus>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	211f      	movs	r1, #31
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fea1 	bl	80025f0 <stmpe811_ClearGlobalIT>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e00b      	b.n	80028e4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <stmpe811_GetInstance+0x40>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d101      	bne.n	80028de <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	e006      	b.n	80028ec <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d9f0      	bls.n	80028cc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80028ea:	23ff      	movs	r3, #255	; 0xff
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	200000c8 	.word	0x200000c8

080028fc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a33      	ldr	r2, [pc, #204]	; (80029d8 <I2Cx_MspInit+0xdc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d15f      	bne.n	80029ce <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b32      	ldr	r3, [pc, #200]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <I2Cx_MspInit+0xe0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800294c:	2312      	movs	r3, #18
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002958:	2304      	movs	r3, #4
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	481f      	ldr	r0, [pc, #124]	; (80029e0 <I2Cx_MspInit+0xe4>)
 8002964:	f002 fd3e 	bl	80053e4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800296c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	481b      	ldr	r0, [pc, #108]	; (80029e4 <I2Cx_MspInit+0xe8>)
 8002976:	f002 fd35 	bl	80053e4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <I2Cx_MspInit+0xe0>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <I2Cx_MspInit+0xe0>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <I2Cx_MspInit+0xe0>)
 800299c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <I2Cx_MspInit+0xe0>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <I2Cx_MspInit+0xe0>)
 80029a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ac:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	210f      	movs	r1, #15
 80029b2:	2048      	movs	r0, #72	; 0x48
 80029b4:	f001 fe92 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80029b8:	2048      	movs	r0, #72	; 0x48
 80029ba:	f001 feab 	bl	8004714 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	210f      	movs	r1, #15
 80029c2:	2049      	movs	r0, #73	; 0x49
 80029c4:	f001 fe8a 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80029c8:	2049      	movs	r0, #73	; 0x49
 80029ca:	f001 fea3 	bl	8004714 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40005c00 	.word	0x40005c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020800 	.word	0x40020800

080029e8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80029ec:	4814      	ldr	r0, [pc, #80]	; (8002a40 <I2Cx_Init+0x58>)
 80029ee:	f003 fc4f 	bl	8006290 <HAL_I2C_GetState>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d121      	bne.n	8002a3c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <I2Cx_Init+0x58>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <I2Cx_Init+0x5c>)
 80029fc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <I2Cx_Init+0x58>)
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <I2Cx_Init+0x60>)
 8002a02:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <I2Cx_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <I2Cx_Init+0x58>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <I2Cx_Init+0x58>)
 8002a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a16:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <I2Cx_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <I2Cx_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <I2Cx_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <I2Cx_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002a30:	4803      	ldr	r0, [pc, #12]	; (8002a40 <I2Cx_Init+0x58>)
 8002a32:	f7ff ff63 	bl	80028fc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002a36:	4802      	ldr	r0, [pc, #8]	; (8002a40 <I2Cx_Init+0x58>)
 8002a38:	f002 ffa2 	bl	8005980 <HAL_I2C_Init>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200004e0 	.word	0x200004e0
 8002a44:	40005c00 	.word	0x40005c00
 8002a48:	000186a0 	.word	0x000186a0

08002a4c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <I2Cx_ITConfig+0x58>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <I2Cx_ITConfig+0x58>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <I2Cx_ITConfig+0x58>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <I2Cx_ITConfig+0x5c>)
 8002a7e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4809      	ldr	r0, [pc, #36]	; (8002aac <I2Cx_ITConfig+0x60>)
 8002a86:	f002 fcad 	bl	80053e4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	2028      	movs	r0, #40	; 0x28
 8002a90:	f001 fe24 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002a94:	2028      	movs	r0, #40	; 0x28
 8002a96:	f001 fe3d 	bl	8004714 <HAL_NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	10210000 	.word	0x10210000
 8002aac:	40020000 	.word	0x40020000

08002ab0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <I2Cx_WriteData+0x4c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	1d7b      	adds	r3, r7, #5
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <I2Cx_WriteData+0x50>)
 8002ae0:	f003 f8b6 	bl	8005c50 <HAL_I2C_Mem_Write>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002aee:	f000 f863 	bl	8002bb8 <I2Cx_Error>
  }        
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000074 	.word	0x20000074
 8002b00:	200004e0 	.word	0x200004e0

08002b04 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af04      	add	r7, sp, #16
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	b299      	uxth	r1, r3
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <I2Cx_ReadData+0x50>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	f107 030e 	add.w	r3, r7, #14
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2301      	movs	r3, #1
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <I2Cx_ReadData+0x54>)
 8002b38:	f003 f984 	bl	8005e44 <HAL_I2C_Mem_Read>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002b46:	f000 f837 	bl	8002bb8 <I2Cx_Error>
  
  }
  return value;
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000074 	.word	0x20000074
 8002b58:	200004e0 	.word	0x200004e0

08002b5c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	603a      	str	r2, [r7, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	71bb      	strb	r3, [r7, #6]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <I2Cx_ReadBuffer+0x54>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <I2Cx_ReadBuffer+0x58>)
 8002b90:	f003 f958 	bl	8005e44 <HAL_I2C_Mem_Read>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e002      	b.n	8002ba8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002ba2:	f000 f809 	bl	8002bb8 <I2Cx_Error>

    return 1;
 8002ba6:	2301      	movs	r3, #1
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000074 	.word	0x20000074
 8002bb4:	200004e0 	.word	0x200004e0

08002bb8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <I2Cx_Error+0x14>)
 8002bbe:	f003 f817 	bl	8005bf0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002bc2:	f7ff ff11 	bl	80029e8 <I2Cx_Init>
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200004e0 	.word	0x200004e0

08002bd0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002bd4:	4819      	ldr	r0, [pc, #100]	; (8002c3c <SPIx_Init+0x6c>)
 8002bd6:	f005 fd97 	bl	8008708 <HAL_SPI_GetState>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d12b      	bne.n	8002c38 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <SPIx_Init+0x6c>)
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <SPIx_Init+0x70>)
 8002be4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <SPIx_Init+0x6c>)
 8002be8:	2218      	movs	r2, #24
 8002bea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <SPIx_Init+0x6c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <SPIx_Init+0x6c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <SPIx_Init+0x6c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <SPIx_Init+0x6c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <SPIx_Init+0x6c>)
 8002c06:	2207      	movs	r2, #7
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <SPIx_Init+0x6c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <SPIx_Init+0x6c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <SPIx_Init+0x6c>)
 8002c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <SPIx_Init+0x6c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SPIx_Init+0x6c>)
 8002c26:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c2a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <SPIx_Init+0x6c>)
 8002c2e:	f000 f853 	bl	8002cd8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002c32:	4802      	ldr	r0, [pc, #8]	; (8002c3c <SPIx_Init+0x6c>)
 8002c34:	f005 f8fd 	bl	8007e32 <HAL_SPI_Init>
  } 
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200000cc 	.word	0x200000cc
 8002c40:	40015000 	.word	0x40015000

08002c44 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <SPIx_Read+0x38>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f107 0108 	add.w	r1, r7, #8
 8002c5e:	4808      	ldr	r0, [pc, #32]	; (8002c80 <SPIx_Read+0x3c>)
 8002c60:	f005 faa7 	bl	80081b2 <HAL_SPI_Receive>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002c6e:	f000 f827 	bl	8002cc0 <SPIx_Error>
  }
  
  return readvalue;
 8002c72:	68bb      	ldr	r3, [r7, #8]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000078 	.word	0x20000078
 8002c80:	200000cc 	.word	0x200000cc

08002c84 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <SPIx_Write+0x34>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1db9      	adds	r1, r7, #6
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4808      	ldr	r0, [pc, #32]	; (8002cbc <SPIx_Write+0x38>)
 8002c9c:	f005 f955 	bl	8007f4a <HAL_SPI_Transmit>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002caa:	f000 f809 	bl	8002cc0 <SPIx_Error>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000078 	.word	0x20000078
 8002cbc:	200000cc 	.word	0x200000cc

08002cc0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <SPIx_Error+0x14>)
 8002cc6:	f005 f918 	bl	8007efa <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002cca:	f7ff ff81 	bl	8002bd0 <SPIx_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200000cc 	.word	0x200000cc

08002cd8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cee:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002d06:	f043 0320 	orr.w	r3, r3, #32
 8002d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <SPIx_MspInit+0x6c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002d18:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002d26:	2301      	movs	r3, #1
 8002d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4619      	mov	r1, r3
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <SPIx_MspInit+0x70>)
 8002d36:	f002 fb55 	bl	80053e4 <HAL_GPIO_Init>
}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40021400 	.word	0x40021400

08002d4c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <LCD_IO_Init+0xe0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d164      	bne.n	8002e24 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <LCD_IO_Init+0xe0>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	4619      	mov	r1, r3
 8002d94:	4827      	ldr	r0, [pc, #156]	; (8002e34 <LCD_IO_Init+0xe8>)
 8002d96:	f002 fb25 	bl	80053e4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4819      	ldr	r0, [pc, #100]	; (8002e34 <LCD_IO_Init+0xe8>)
 8002dd0:	f002 fb08 	bl	80053e4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6313      	str	r3, [r2, #48]	; 0x30
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <LCD_IO_Init+0xe4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002df0:	2304      	movs	r3, #4
 8002df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	4619      	mov	r1, r3
 8002e06:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LCD_IO_Init+0xec>)
 8002e08:	f002 faec 	bl	80053e4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <LCD_IO_Init+0xec>)
 8002e12:	f002 fd9b 	bl	800594c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002e16:	2201      	movs	r2, #1
 8002e18:	2104      	movs	r1, #4
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <LCD_IO_Init+0xec>)
 8002e1c:	f002 fd96 	bl	800594c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002e20:	f7ff fed6 	bl	8002bd0 <SPIx_Init>
  }
}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000124 	.word	0x20000124
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40020800 	.word	0x40020800

08002e3c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002e46:	2201      	movs	r2, #1
 8002e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e4c:	480a      	ldr	r0, [pc, #40]	; (8002e78 <LCD_IO_WriteData+0x3c>)
 8002e4e:	f002 fd7d 	bl	800594c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002e52:	2200      	movs	r2, #0
 8002e54:	2104      	movs	r1, #4
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <LCD_IO_WriteData+0x40>)
 8002e58:	f002 fd78 	bl	800594c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff10 	bl	8002c84 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e64:	2201      	movs	r2, #1
 8002e66:	2104      	movs	r1, #4
 8002e68:	4804      	ldr	r0, [pc, #16]	; (8002e7c <LCD_IO_WriteData+0x40>)
 8002e6a:	f002 fd6f 	bl	800594c <HAL_GPIO_WritePin>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020c00 	.word	0x40020c00
 8002e7c:	40020800 	.word	0x40020800

08002e80 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e90:	480a      	ldr	r0, [pc, #40]	; (8002ebc <LCD_IO_WriteReg+0x3c>)
 8002e92:	f002 fd5b 	bl	800594c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002e96:	2200      	movs	r2, #0
 8002e98:	2104      	movs	r1, #4
 8002e9a:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <LCD_IO_WriteReg+0x40>)
 8002e9c:	f002 fd56 	bl	800594c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff feed 	bl	8002c84 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2104      	movs	r1, #4
 8002eae:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <LCD_IO_WriteReg+0x40>)
 8002eb0:	f002 fd4c 	bl	800594c <HAL_GPIO_WritePin>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40020800 	.word	0x40020800

08002ec4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460a      	mov	r2, r1
 8002ece:	80fb      	strh	r3, [r7, #6]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2104      	movs	r1, #4
 8002edc:	4810      	ldr	r0, [pc, #64]	; (8002f20 <LCD_IO_ReadData+0x5c>)
 8002ede:	f002 fd35 	bl	800594c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee8:	480e      	ldr	r0, [pc, #56]	; (8002f24 <LCD_IO_ReadData+0x60>)
 8002eea:	f002 fd2f 	bl	800594c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fec7 	bl	8002c84 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002ef6:	797b      	ldrb	r3, [r7, #5]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fea3 	bl	8002c44 <SPIx_Read>
 8002efe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <LCD_IO_ReadData+0x60>)
 8002f08:	f002 fd20 	bl	800594c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2104      	movs	r1, #4
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <LCD_IO_ReadData+0x5c>)
 8002f12:	f002 fd1b 	bl	800594c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00

08002f28 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 faf9 	bl	8004528 <HAL_Delay>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002f42:	f7ff fd51 	bl	80029e8 <I2Cx_Init>
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002f4e:	f7ff fd7d 	bl	8002a4c <I2Cx_ITConfig>
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	71fb      	strb	r3, [r7, #7]
 8002f60:	460b      	mov	r3, r1
 8002f62:	71bb      	strb	r3, [r7, #6]
 8002f64:	4613      	mov	r3, r2
 8002f66:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002f68:	797a      	ldrb	r2, [r7, #5]
 8002f6a:	79b9      	ldrb	r1, [r7, #6]
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fd9e 	bl	8002ab0 <I2Cx_WriteData>
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	460a      	mov	r2, r1
 8002f86:	71fb      	strb	r3, [r7, #7]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002f8c:	79ba      	ldrb	r2, [r7, #6]
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fdb6 	bl	8002b04 <I2Cx_ReadData>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	603a      	str	r2, [r7, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	71fb      	strb	r3, [r7, #7]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	71bb      	strb	r3, [r7, #6]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	79b9      	ldrb	r1, [r7, #6]
 8002fbc:	79f8      	ldrb	r0, [r7, #7]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	f7ff fdcc 	bl	8002b5c <I2Cx_ReadBuffer>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	b29b      	uxth	r3, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f001 faa5 	bl	8004528 <HAL_Delay>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8002fee:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <BSP_LCD_Init+0xc0>)
 8002ff0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8002ff4:	2209      	movs	r2, #9
 8002ff6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003000:	221d      	movs	r2, #29
 8003002:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003004:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003006:	2203      	movs	r2, #3
 8003008:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <BSP_LCD_Init+0xbc>)
 800300c:	f240 120d 	movw	r2, #269	; 0x10d
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003014:	f240 1243 	movw	r2, #323	; 0x143
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <BSP_LCD_Init+0xbc>)
 800301c:	f240 1217 	movw	r2, #279	; 0x117
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003024:	f240 1247 	movw	r2, #327	; 0x147
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <BSP_LCD_Init+0xbc>)
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <BSP_LCD_Init+0xbc>)
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <BSP_LCD_Init+0xc4>)
 8003044:	2208      	movs	r2, #8
 8003046:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <BSP_LCD_Init+0xc4>)
 800304a:	22c0      	movs	r2, #192	; 0xc0
 800304c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <BSP_LCD_Init+0xc4>)
 8003050:	2204      	movs	r2, #4
 8003052:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <BSP_LCD_Init+0xc4>)
 8003056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800305c:	4813      	ldr	r0, [pc, #76]	; (80030ac <BSP_LCD_Init+0xc4>)
 800305e:	f004 fcab 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003064:	2200      	movs	r2, #0
 8003066:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <BSP_LCD_Init+0xbc>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003070:	2200      	movs	r2, #0
 8003072:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800307a:	f000 fd6f 	bl	8003b5c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <BSP_LCD_Init+0xbc>)
 8003080:	f003 fce6 	bl	8006a50 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <BSP_LCD_Init+0xc8>)
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <BSP_LCD_Init+0xcc>)
 8003088:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <BSP_LCD_Init+0xc8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003092:	f000 ff51 	bl	8003f38 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003096:	4808      	ldr	r0, [pc, #32]	; (80030b8 <BSP_LCD_Init+0xd0>)
 8003098:	f000 f8ce 	bl	8003238 <BSP_LCD_SetFont>

  return LCD_OK;
 800309c:	2300      	movs	r3, #0
}  
 800309e:	4618      	mov	r0, r3
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000534 	.word	0x20000534
 80030a8:	40016800 	.word	0x40016800
 80030ac:	20000168 	.word	0x20000168
 80030b0:	200005dc 	.word	0x200005dc
 80030b4:	20000014 	.word	0x20000014
 80030b8:	2000007c 	.word	0x2000007c

080030bc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <BSP_LCD_GetXSize+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	4798      	blx	r3
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200005dc 	.word	0x200005dc

080030d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <BSP_LCD_GetYSize+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	4798      	blx	r3
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200005dc 	.word	0x200005dc

080030ec <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b090      	sub	sp, #64	; 0x40
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80030fc:	f7ff ffde 	bl	80030bc <BSP_LCD_GetXSize>
 8003100:	4603      	mov	r3, r0
 8003102:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003108:	f7ff ffe4 	bl	80030d4 <BSP_LCD_GetYSize>
 800310c:	4603      	mov	r3, r0
 800310e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003118:	23ff      	movs	r3, #255	; 0xff
 800311a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003138:	2307      	movs	r3, #7
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800313c:	f7ff ffbe 	bl	80030bc <BSP_LCD_GetXSize>
 8003140:	4603      	mov	r3, r0
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003144:	f7ff ffc6 	bl	80030d4 <BSP_LCD_GetYSize>
 8003148:	4603      	mov	r3, r0
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4619      	mov	r1, r3
 8003154:	4814      	ldr	r0, [pc, #80]	; (80031a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003156:	f003 fd4b 	bl	8006bf0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	4913      	ldr	r1, [pc, #76]	; (80031ac <BSP_LCD_LayerDefaultInit+0xc0>)
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3304      	adds	r3, #4
 800316a:	f04f 32ff 	mov.w	r2, #4294967295
 800316e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	490e      	ldr	r1, [pc, #56]	; (80031ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3308      	adds	r3, #8
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003182:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003196:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 800319a:	f003 fd67 	bl	8006c6c <HAL_LTDC_EnableDither>
}
 800319e:	bf00      	nop
 80031a0:	3740      	adds	r7, #64	; 0x40
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000534 	.word	0x20000534
 80031ac:	2000019c 	.word	0x2000019c
 80031b0:	2000007c 	.word	0x2000007c

080031b4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <BSP_LCD_SelectLayer+0x1c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000198 	.word	0x20000198

080031d4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <BSP_LCD_SetTextColor+0x28>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <BSP_LCD_SetTextColor+0x2c>)
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20000198 	.word	0x20000198
 8003200:	2000019c 	.word	0x2000019c

08003204 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <BSP_LCD_SetBackColor+0x2c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4908      	ldr	r1, [pc, #32]	; (8003234 <BSP_LCD_SetBackColor+0x30>)
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3304      	adds	r3, #4
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000198 	.word	0x20000198
 8003234:	2000019c 	.word	0x2000019c

08003238 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003240:	4b08      	ldr	r3, [pc, #32]	; (8003264 <BSP_LCD_SetFont+0x2c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4908      	ldr	r1, [pc, #32]	; (8003268 <BSP_LCD_SetFont+0x30>)
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3308      	adds	r3, #8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000198 	.word	0x20000198
 8003268:	2000019c 	.word	0x2000019c

0800326c <BSP_LCD_ReadPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	460a      	mov	r2, r1
 8003276:	80fb      	strh	r3, [r7, #6]
 8003278:	4613      	mov	r3, r2
 800327a:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 8003286:	2134      	movs	r1, #52	; 0x34
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3348      	adds	r3, #72	; 0x48
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d115      	bne.n	80032c2 <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 8003296:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 800329c:	2134      	movs	r1, #52	; 0x34
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	335c      	adds	r3, #92	; 0x5c
 80032a6:	681c      	ldr	r4, [r3, #0]
 80032a8:	88bd      	ldrh	r5, [r7, #4]
 80032aa:	f7ff ff07 	bl	80030bc <BSP_LCD_GetXSize>
 80032ae:	4603      	mov	r3, r0
 80032b0:	fb03 f205 	mul.w	r2, r3, r5
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4423      	add	r3, r4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e070      	b.n	80033a4 <BSP_LCD_ReadPixel+0x138>
  }
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 80032c8:	2134      	movs	r1, #52	; 0x34
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3348      	adds	r3, #72	; 0x48
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d117      	bne.n	8003308 <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 80032de:	2134      	movs	r1, #52	; 0x34
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	681c      	ldr	r4, [r3, #0]
 80032ea:	88bd      	ldrh	r5, [r7, #4]
 80032ec:	f7ff fee6 	bl	80030bc <BSP_LCD_GetXSize>
 80032f0:	4603      	mov	r3, r0
 80032f2:	fb03 f205 	mul.w	r2, r3, r5
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4423      	add	r3, r4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e04d      	b.n	80033a4 <BSP_LCD_ReadPixel+0x138>
  }
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 800330e:	2134      	movs	r1, #52	; 0x34
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3348      	adds	r3, #72	; 0x48
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d015      	beq.n	800334a <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 8003324:	2134      	movs	r1, #52	; 0x34
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3348      	adds	r3, #72	; 0x48
 800332e:	681b      	ldr	r3, [r3, #0]
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00a      	beq.n	800334a <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 800333a:	2134      	movs	r1, #52	; 0x34
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3348      	adds	r3, #72	; 0x48
 8003344:	681b      	ldr	r3, [r3, #0]
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003346:	2b07      	cmp	r3, #7
 8003348:	d116      	bne.n	8003378 <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 8003350:	2134      	movs	r1, #52	; 0x34
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	335c      	adds	r3, #92	; 0x5c
 800335a:	681c      	ldr	r4, [r3, #0]
 800335c:	88bd      	ldrh	r5, [r7, #4]
 800335e:	f7ff fead 	bl	80030bc <BSP_LCD_GetXSize>
 8003362:	4603      	mov	r3, r0
 8003364:	fb03 f205 	mul.w	r2, r3, r5
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	4413      	add	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4423      	add	r3, r4
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e015      	b.n	80033a4 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <BSP_LCD_ReadPixel+0x144>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <BSP_LCD_ReadPixel+0x148>)
 800337e:	2134      	movs	r1, #52	; 0x34
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	335c      	adds	r3, #92	; 0x5c
 8003388:	681c      	ldr	r4, [r3, #0]
 800338a:	88bd      	ldrh	r5, [r7, #4]
 800338c:	f7ff fe96 	bl	80030bc <BSP_LCD_GetXSize>
 8003390:	4603      	mov	r3, r0
 8003392:	fb03 f205 	mul.w	r2, r3, r5
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	4413      	add	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4423      	add	r3, r4
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80033a4:	68fb      	ldr	r3, [r7, #12]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bdb0      	pop	{r4, r5, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000198 	.word	0x20000198
 80033b4:	20000534 	.word	0x20000534

080033b8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af02      	add	r7, sp, #8
 80033be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <BSP_LCD_Clear+0x48>)
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <BSP_LCD_Clear+0x48>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <BSP_LCD_Clear+0x4c>)
 80033ca:	2134      	movs	r1, #52	; 0x34
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	335c      	adds	r3, #92	; 0x5c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461d      	mov	r5, r3
 80033d8:	f7ff fe70 	bl	80030bc <BSP_LCD_GetXSize>
 80033dc:	4606      	mov	r6, r0
 80033de:	f7ff fe79 	bl	80030d4 <BSP_LCD_GetYSize>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	4632      	mov	r2, r6
 80033f0:	4629      	mov	r1, r5
 80033f2:	4620      	mov	r0, r4
 80033f4:	f000 fd68 	bl	8003ec8 <FillBuffer>
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003400:	20000198 	.word	0x20000198
 8003404:	20000534 	.word	0x20000534

08003408 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
 8003412:	460b      	mov	r3, r1
 8003414:	80bb      	strh	r3, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	491b      	ldr	r1, [pc, #108]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3308      	adds	r3, #8
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4c14      	ldr	r4, [pc, #80]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4423      	add	r3, r4
 8003446:	3308      	adds	r3, #8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800344c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <BSP_LCD_DisplayChar+0x80>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4c0d      	ldr	r4, [pc, #52]	; (800348c <BSP_LCD_DisplayChar+0x84>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4423      	add	r3, r4
 8003460:	3308      	adds	r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	889b      	ldrh	r3, [r3, #4]
 8003466:	3307      	adds	r3, #7
 8003468:	2b00      	cmp	r3, #0
 800346a:	da00      	bge.n	800346e <BSP_LCD_DisplayChar+0x66>
 800346c:	3307      	adds	r3, #7
 800346e:	10db      	asrs	r3, r3, #3
 8003470:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003474:	18ca      	adds	r2, r1, r3
 8003476:	88b9      	ldrh	r1, [r7, #4]
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fc6a 	bl	8003d54 <DrawChar>
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}
 8003488:	20000198 	.word	0x20000198
 800348c:	2000019c 	.word	0x2000019c

08003490 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60ba      	str	r2, [r7, #8]
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	81fb      	strh	r3, [r7, #14]
 800349e:	460b      	mov	r3, r1
 80034a0:	81bb      	strh	r3, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80034a6:	2301      	movs	r3, #1
 80034a8:	83fb      	strh	r3, [r7, #30]
 80034aa:	2300      	movs	r3, #0
 80034ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80034ba:	e002      	b.n	80034c2 <BSP_LCD_DisplayStringAt+0x32>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	3301      	adds	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	617a      	str	r2, [r7, #20]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f6      	bne.n	80034bc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80034ce:	f7ff fdf5 	bl	80030bc <BSP_LCD_GetXSize>
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	494a      	ldr	r1, [pc, #296]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3308      	adds	r3, #8
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	889b      	ldrh	r3, [r3, #4]
 80034e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ec:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d01c      	beq.n	800352e <BSP_LCD_DisplayStringAt+0x9e>
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d017      	beq.n	8003528 <BSP_LCD_DisplayStringAt+0x98>
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d12e      	bne.n	800355a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	1ad1      	subs	r1, r2, r3
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	483e      	ldr	r0, [pc, #248]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	3308      	adds	r3, #8
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	889b      	ldrh	r3, [r3, #4]
 8003518:	fb03 f301 	mul.w	r3, r3, r1
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	89fb      	ldrh	r3, [r7, #14]
 8003522:	4413      	add	r3, r2
 8003524:	83fb      	strh	r3, [r7, #30]
      break;
 8003526:	e01b      	b.n	8003560 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	83fb      	strh	r3, [r7, #30]
      break;
 800352c:	e018      	b.n	8003560 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	b299      	uxth	r1, r3
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4831      	ldr	r0, [pc, #196]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	3308      	adds	r3, #8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	889b      	ldrh	r3, [r3, #4]
 800354c:	fb11 f303 	smulbb	r3, r1, r3
 8003550:	b29a      	uxth	r2, r3
 8003552:	89fb      	ldrh	r3, [r7, #14]
 8003554:	4413      	add	r3, r2
 8003556:	83fb      	strh	r3, [r7, #30]
      break;
 8003558:	e002      	b.n	8003560 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	83fb      	strh	r3, [r7, #30]
      break;
 800355e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003560:	e01a      	b.n	8003598 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	89b9      	ldrh	r1, [r7, #12]
 8003568:	8bfb      	ldrh	r3, [r7, #30]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff4c 	bl	8003408 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4922      	ldr	r1, [pc, #136]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	889a      	ldrh	r2, [r3, #4]
 8003586:	8bfb      	ldrh	r3, [r7, #30]
 8003588:	4413      	add	r3, r2
 800358a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3301      	adds	r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
    i++;
 8003592:	8bbb      	ldrh	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2dc      	uxtb	r4, r3
 80035a6:	f7ff fd89 	bl	80030bc <BSP_LCD_GetXSize>
 80035aa:	4605      	mov	r5, r0
 80035ac:	8bb9      	ldrh	r1, [r7, #28]
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4813      	ldr	r0, [pc, #76]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4403      	add	r3, r0
 80035be:	3308      	adds	r3, #8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	889b      	ldrh	r3, [r3, #4]
 80035c4:	fb03 f301 	mul.w	r3, r3, r1
 80035c8:	1aeb      	subs	r3, r5, r3
 80035ca:	b299      	uxth	r1, r3
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <BSP_LCD_DisplayStringAt+0x16c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	480b      	ldr	r0, [pc, #44]	; (8003600 <BSP_LCD_DisplayStringAt+0x170>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	3308      	adds	r3, #8
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	4299      	cmp	r1, r3
 80035e4:	bf2c      	ite	cs
 80035e6:	2301      	movcs	r3, #1
 80035e8:	2300      	movcc	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4023      	ands	r3, r4
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1b6      	bne.n	8003562 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80035f4:	bf00      	nop
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}
 80035fc:	20000198 	.word	0x20000198
 8003600:	2000019c 	.word	0x2000019c

08003604 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	460b      	mov	r3, r1
 8003610:	80bb      	strh	r3, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <BSP_LCD_DrawHLine+0x70>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <BSP_LCD_DrawHLine+0x74>)
 8003620:	2134      	movs	r1, #52	; 0x34
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	335c      	adds	r3, #92	; 0x5c
 800362a:	681c      	ldr	r4, [r3, #0]
 800362c:	f7ff fd46 	bl	80030bc <BSP_LCD_GetXSize>
 8003630:	4602      	mov	r2, r0
 8003632:	88bb      	ldrh	r3, [r7, #4]
 8003634:	fb03 f202 	mul.w	r2, r3, r2
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4423      	add	r3, r4
 8003640:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <BSP_LCD_DrawHLine+0x70>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fc      	ldr	r4, [r7, #12]
 8003648:	887d      	ldrh	r5, [r7, #2]
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <BSP_LCD_DrawHLine+0x70>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	490b      	ldr	r1, [pc, #44]	; (800367c <BSP_LCD_DrawHLine+0x78>)
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2301      	movs	r3, #1
 8003664:	462a      	mov	r2, r5
 8003666:	4621      	mov	r1, r4
 8003668:	f000 fc2e 	bl	8003ec8 <FillBuffer>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bdb0      	pop	{r4, r5, r7, pc}
 8003674:	20000198 	.word	0x20000198
 8003678:	20000534 	.word	0x20000534
 800367c:	2000019c 	.word	0x2000019c

08003680 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b087      	sub	sp, #28
 8003684:	af02      	add	r7, sp, #8
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
 800368a:	460b      	mov	r3, r1
 800368c:	80bb      	strh	r3, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <BSP_LCD_DrawVLine+0x78>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <BSP_LCD_DrawVLine+0x7c>)
 800369c:	2134      	movs	r1, #52	; 0x34
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	335c      	adds	r3, #92	; 0x5c
 80036a6:	681c      	ldr	r4, [r3, #0]
 80036a8:	f7ff fd08 	bl	80030bc <BSP_LCD_GetXSize>
 80036ac:	4602      	mov	r2, r0
 80036ae:	88bb      	ldrh	r3, [r7, #4]
 80036b0:	fb03 f202 	mul.w	r2, r3, r2
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4423      	add	r3, r4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <BSP_LCD_DrawVLine+0x78>)
 80036c0:	681c      	ldr	r4, [r3, #0]
 80036c2:	68fd      	ldr	r5, [r7, #12]
 80036c4:	887e      	ldrh	r6, [r7, #2]
 80036c6:	f7ff fcf9 	bl	80030bc <BSP_LCD_GetXSize>
 80036ca:	4603      	mov	r3, r0
 80036cc:	1e59      	subs	r1, r3, #1
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <BSP_LCD_DrawVLine+0x78>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	480b      	ldr	r0, [pc, #44]	; (8003700 <BSP_LCD_DrawVLine+0x80>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4403      	add	r3, r0
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	9100      	str	r1, [sp, #0]
 80036e4:	4633      	mov	r3, r6
 80036e6:	2201      	movs	r2, #1
 80036e8:	4629      	mov	r1, r5
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 fbec 	bl	8003ec8 <FillBuffer>
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f8:	20000198 	.word	0x20000198
 80036fc:	20000534 	.word	0x20000534
 8003700:	2000019c 	.word	0x2000019c

08003704 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4604      	mov	r4, r0
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4623      	mov	r3, r4
 8003714:	80fb      	strh	r3, [r7, #6]
 8003716:	4603      	mov	r3, r0
 8003718:	80bb      	strh	r3, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	807b      	strh	r3, [r7, #2]
 800371e:	4613      	mov	r3, r2
 8003720:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	88b9      	ldrh	r1, [r7, #4]
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff6b 	bl	8003604 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800372e:	88ba      	ldrh	r2, [r7, #4]
 8003730:	883b      	ldrh	r3, [r7, #0]
 8003732:	4413      	add	r3, r2
 8003734:	b299      	uxth	r1, r3
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ff62 	bl	8003604 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003740:	883a      	ldrh	r2, [r7, #0]
 8003742:	88b9      	ldrh	r1, [r7, #4]
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff9a 	bl	8003680 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	887b      	ldrh	r3, [r7, #2]
 8003750:	4413      	add	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	883a      	ldrh	r2, [r7, #0]
 8003756:	88b9      	ldrh	r1, [r7, #4]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff91 	bl	8003680 <BSP_LCD_DrawVLine>
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
	...

08003768 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
 8003772:	460b      	mov	r3, r1
 8003774:	80bb      	strh	r3, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	f1c3 0303 	rsb	r3, r3, #3
 8003782:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800378c:	e0cf      	b.n	800392e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	b29a      	uxth	r2, r3
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	4413      	add	r3, r2
 8003796:	b298      	uxth	r0, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	b29b      	uxth	r3, r3
 800379c:	88ba      	ldrh	r2, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	b29c      	uxth	r4, r3
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4967      	ldr	r1, [pc, #412]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4621      	mov	r1, r4
 80037b8:	f000 faa6 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	b298      	uxth	r0, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	88ba      	ldrh	r2, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	b29c      	uxth	r4, r3
 80037d0:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	495b      	ldr	r1, [pc, #364]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4621      	mov	r1, r4
 80037e6:	f000 fa8f 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4413      	add	r3, r2
 80037f2:	b298      	uxth	r0, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	88ba      	ldrh	r2, [r7, #4]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	b29c      	uxth	r4, r3
 80037fe:	4b50      	ldr	r3, [pc, #320]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4950      	ldr	r1, [pc, #320]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4621      	mov	r1, r4
 8003814:	f000 fa78 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	b29b      	uxth	r3, r3
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	b298      	uxth	r0, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	b29b      	uxth	r3, r3
 8003826:	88ba      	ldrh	r2, [r7, #4]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	b29c      	uxth	r4, r3
 800382c:	4b44      	ldr	r3, [pc, #272]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4944      	ldr	r1, [pc, #272]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4621      	mov	r1, r4
 8003842:	f000 fa61 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	b29a      	uxth	r2, r3
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4413      	add	r3, r2
 800384e:	b298      	uxth	r0, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	b29a      	uxth	r2, r3
 8003854:	88bb      	ldrh	r3, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	b29c      	uxth	r4, r3
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4939      	ldr	r1, [pc, #228]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4621      	mov	r1, r4
 8003870:	f000 fa4a 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	b29b      	uxth	r3, r3
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	b298      	uxth	r0, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b29a      	uxth	r2, r3
 8003882:	88bb      	ldrh	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	b29c      	uxth	r4, r3
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	492d      	ldr	r1, [pc, #180]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	4621      	mov	r1, r4
 800389e:	f000 fa33 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4413      	add	r3, r2
 80038aa:	b298      	uxth	r0, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	88bb      	ldrh	r3, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4922      	ldr	r1, [pc, #136]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	4621      	mov	r1, r4
 80038cc:	f000 fa1c 	bl	8003d08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	b298      	uxth	r0, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	88bb      	ldrh	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	b29c      	uxth	r4, r3
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <BSP_LCD_DrawCircle+0x1d8>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4916      	ldr	r1, [pc, #88]	; (8003944 <BSP_LCD_DrawCircle+0x1dc>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	4621      	mov	r1, r4
 80038fa:	f000 fa05 	bl	8003d08 <BSP_LCD_DrawPixel>

    if (d < 0)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	da06      	bge.n	8003912 <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	3306      	adds	r3, #6
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e00a      	b.n	8003928 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	009a      	lsls	r2, r3, #2
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4413      	add	r3, r2
 800391e:	330a      	adds	r3, #10
 8003920:	617b      	str	r3, [r7, #20]
      cury--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3b01      	subs	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	3301      	adds	r3, #1
 800392c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	429a      	cmp	r2, r3
 8003934:	f67f af2b 	bls.w	800378e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	20000198 	.word	0x20000198
 8003944:	2000019c 	.word	0x2000019c

08003948 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af02      	add	r7, sp, #8
 8003950:	4604      	mov	r4, r0
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	461a      	mov	r2, r3
 8003958:	4623      	mov	r3, r4
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	4603      	mov	r3, r0
 800395e:	80bb      	strh	r3, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <BSP_LCD_FillRect+0xa8>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4920      	ldr	r1, [pc, #128]	; (80039f4 <BSP_LCD_FillRect+0xac>)
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fc28 	bl	80031d4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <BSP_LCD_FillRect+0xa8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <BSP_LCD_FillRect+0xb0>)
 800398a:	2134      	movs	r1, #52	; 0x34
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	335c      	adds	r3, #92	; 0x5c
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	f7ff fb91 	bl	80030bc <BSP_LCD_GetXSize>
 800399a:	4602      	mov	r2, r0
 800399c:	88bb      	ldrh	r3, [r7, #4]
 800399e:	fb03 f202 	mul.w	r2, r3, r2
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4423      	add	r3, r4
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <BSP_LCD_FillRect+0xa8>)
 80039ae:	681c      	ldr	r4, [r3, #0]
 80039b0:	68fd      	ldr	r5, [r7, #12]
 80039b2:	887e      	ldrh	r6, [r7, #2]
 80039b4:	f8b7 8000 	ldrh.w	r8, [r7]
 80039b8:	f7ff fb80 	bl	80030bc <BSP_LCD_GetXSize>
 80039bc:	4602      	mov	r2, r0
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	1ad1      	subs	r1, r2, r3
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <BSP_LCD_FillRect+0xa8>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	480b      	ldr	r0, [pc, #44]	; (80039f4 <BSP_LCD_FillRect+0xac>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4403      	add	r3, r0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	9100      	str	r1, [sp, #0]
 80039d8:	4643      	mov	r3, r8
 80039da:	4632      	mov	r2, r6
 80039dc:	4629      	mov	r1, r5
 80039de:	4620      	mov	r0, r4
 80039e0:	f000 fa72 	bl	8003ec8 <FillBuffer>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ee:	bf00      	nop
 80039f0:	20000198 	.word	0x20000198
 80039f4:	2000019c 	.word	0x2000019c
 80039f8:	20000534 	.word	0x20000534

080039fc <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
 8003a06:	460b      	mov	r3, r1
 8003a08:	80bb      	strh	r3, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	f1c3 0303 	rsb	r3, r3, #3
 8003a16:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003a20:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <BSP_LCD_FillCircle+0x138>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4944      	ldr	r1, [pc, #272]	; (8003b38 <BSP_LCD_FillCircle+0x13c>)
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fbce 	bl	80031d4 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003a38:	e061      	b.n	8003afe <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d021      	beq.n	8003a84 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	b298      	uxth	r0, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	88bb      	ldrh	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	b299      	uxth	r1, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f7ff fdd1 	bl	8003604 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b298      	uxth	r0, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	88ba      	ldrh	r2, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	b299      	uxth	r1, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7ff fdc0 	bl	8003604 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d021      	beq.n	8003ace <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	b298      	uxth	r0, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	88ba      	ldrh	r2, [r7, #4]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	b299      	uxth	r1, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f7ff fdac 	bl	8003604 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b298      	uxth	r0, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	88bb      	ldrh	r3, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	b299      	uxth	r1, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff fd9b 	bl	8003604 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da06      	bge.n	8003ae2 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	3306      	adds	r3, #6
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e00a      	b.n	8003af8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	009a      	lsls	r2, r3, #2
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	330a      	adds	r3, #10
 8003af0:	617b      	str	r3, [r7, #20]
      cury--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	3301      	adds	r3, #1
 8003afc:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d999      	bls.n	8003a3a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <BSP_LCD_FillCircle+0x138>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	490b      	ldr	r1, [pc, #44]	; (8003b38 <BSP_LCD_FillCircle+0x13c>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fb5b 	bl	80031d4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	88b9      	ldrh	r1, [r7, #4]
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fe1f 	bl	8003768 <BSP_LCD_DrawCircle>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000198 	.word	0x20000198
 8003b38:	2000019c 	.word	0x2000019c

08003b3c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <BSP_LCD_DisplayOn+0x1c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003b4a:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <BSP_LCD_DisplayOn+0x1c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4798      	blx	r3
  }
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200005dc 	.word	0x200005dc

08003b5c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	; 0x38
 8003b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	4b61      	ldr	r3, [pc, #388]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a60      	ldr	r2, [pc, #384]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a59      	ldr	r2, [pc, #356]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	4b53      	ldr	r3, [pc, #332]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a52      	ldr	r2, [pc, #328]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b50      	ldr	r3, [pc, #320]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b49      	ldr	r3, [pc, #292]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a44      	ldr	r2, [pc, #272]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a3d      	ldr	r2, [pc, #244]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a36      	ldr	r2, [pc, #216]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c14:	f043 0320 	orr.w	r3, r3, #32
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b34      	ldr	r3, [pc, #208]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <BSP_LCD_MspInit+0x190>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003c42:	f641 0358 	movw	r3, #6232	; 0x1858
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c50:	2302      	movs	r3, #2
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003c54:	230e      	movs	r3, #14
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4824      	ldr	r0, [pc, #144]	; (8003cf0 <BSP_LCD_MspInit+0x194>)
 8003c60:	f001 fbc0 	bl	80053e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003c64:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4820      	ldr	r0, [pc, #128]	; (8003cf4 <BSP_LCD_MspInit+0x198>)
 8003c72:	f001 fbb7 	bl	80053e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003c76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c80:	4619      	mov	r1, r3
 8003c82:	481d      	ldr	r0, [pc, #116]	; (8003cf8 <BSP_LCD_MspInit+0x19c>)
 8003c84:	f001 fbae 	bl	80053e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003c88:	2348      	movs	r3, #72	; 0x48
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	481a      	ldr	r0, [pc, #104]	; (8003cfc <BSP_LCD_MspInit+0x1a0>)
 8003c94:	f001 fba6 	bl	80053e4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4816      	ldr	r0, [pc, #88]	; (8003d00 <BSP_LCD_MspInit+0x1a4>)
 8003ca6:	f001 fb9d 	bl	80053e4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003caa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4813      	ldr	r0, [pc, #76]	; (8003d04 <BSP_LCD_MspInit+0x1a8>)
 8003cb8:	f001 fb94 	bl	80053e4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003cc0:	2309      	movs	r3, #9
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <BSP_LCD_MspInit+0x198>)
 8003ccc:	f001 fb8a 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003cd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4809      	ldr	r0, [pc, #36]	; (8003d04 <BSP_LCD_MspInit+0x1a8>)
 8003cde:	f001 fb81 	bl	80053e4 <HAL_GPIO_Init>
}
 8003ce2:	bf00      	nop
 8003ce4:	3738      	adds	r7, #56	; 0x38
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020000 	.word	0x40020000
 8003cf4:	40020400 	.word	0x40020400
 8003cf8:	40020800 	.word	0x40020800
 8003cfc:	40020c00 	.word	0x40020c00
 8003d00:	40021400 	.word	0x40021400
 8003d04:	40021800 	.word	0x40021800

08003d08 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	603a      	str	r2, [r7, #0]
 8003d12:	80fb      	strh	r3, [r7, #6]
 8003d14:	460b      	mov	r3, r1
 8003d16:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <BSP_LCD_DrawPixel+0x44>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <BSP_LCD_DrawPixel+0x48>)
 8003d1e:	2134      	movs	r1, #52	; 0x34
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	335c      	adds	r3, #92	; 0x5c
 8003d28:	681c      	ldr	r4, [r3, #0]
 8003d2a:	88bd      	ldrh	r5, [r7, #4]
 8003d2c:	f7ff f9c6 	bl	80030bc <BSP_LCD_GetXSize>
 8003d30:	4603      	mov	r3, r0
 8003d32:	fb03 f205 	mul.w	r2, r3, r5
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4423      	add	r3, r4
 8003d3e:	461a      	mov	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4c:	20000198 	.word	0x20000198
 8003d50:	20000534 	.word	0x20000534

08003d54 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	603a      	str	r2, [r7, #0]
 8003d5e:	80fb      	strh	r3, [r7, #6]
 8003d60:	460b      	mov	r3, r1
 8003d62:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <DrawChar+0x16c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4953      	ldr	r1, [pc, #332]	; (8003ec4 <DrawChar+0x170>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3308      	adds	r3, #8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	88db      	ldrh	r3, [r3, #6]
 8003d86:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003d88:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <DrawChar+0x16c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	494d      	ldr	r1, [pc, #308]	; (8003ec4 <DrawChar+0x170>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3308      	adds	r3, #8
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	889b      	ldrh	r3, [r3, #4]
 8003d9e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003da0:	8a3b      	ldrh	r3, [r7, #16]
 8003da2:	3307      	adds	r3, #7
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da00      	bge.n	8003daa <DrawChar+0x56>
 8003da8:	3307      	adds	r3, #7
 8003daa:	10db      	asrs	r3, r3, #3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8a3b      	ldrh	r3, [r7, #16]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e076      	b.n	8003eae <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003dc0:	8a3b      	ldrh	r3, [r7, #16]
 8003dc2:	3307      	adds	r3, #7
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	da00      	bge.n	8003dca <DrawChar+0x76>
 8003dc8:	3307      	adds	r3, #7
 8003dca:	10db      	asrs	r3, r3, #3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fb03 f302 	mul.w	r3, r3, r2
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003dda:	8a3b      	ldrh	r3, [r7, #16]
 8003ddc:	3307      	adds	r3, #7
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da00      	bge.n	8003de4 <DrawChar+0x90>
 8003de2:	3307      	adds	r3, #7
 8003de4:	10db      	asrs	r3, r3, #3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d002      	beq.n	8003df0 <DrawChar+0x9c>
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d004      	beq.n	8003df8 <DrawChar+0xa4>
 8003dee:	e00c      	b.n	8003e0a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]
      break;
 8003df6:	e016      	b.n	8003e26 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	3201      	adds	r2, #1
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
      break;
 8003e08:	e00d      	b.n	8003e26 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	041a      	lsls	r2, r3, #16
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3301      	adds	r3, #1
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	3202      	adds	r2, #2
 8003e1e:	7812      	ldrb	r2, [r2, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
      break;
 8003e24:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e036      	b.n	8003e9a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003e2c:	8a3a      	ldrh	r2, [r7, #16]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	4413      	add	r3, r2
 8003e36:	3b01      	subs	r3, #1
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b298      	uxth	r0, r3
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <DrawChar+0x16c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	491b      	ldr	r1, [pc, #108]	; (8003ec4 <DrawChar+0x170>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7ff ff4e 	bl	8003d08 <BSP_LCD_DrawPixel>
 8003e6c:	e012      	b.n	8003e94 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	4413      	add	r3, r2
 8003e76:	b298      	uxth	r0, r3
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <DrawChar+0x16c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <DrawChar+0x170>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3304      	adds	r3, #4
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	88bb      	ldrh	r3, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f7ff ff3a 	bl	8003d08 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	3301      	adds	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	8a3b      	ldrh	r3, [r7, #16]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d3c4      	bcc.n	8003e2c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003ea2:	88bb      	ldrh	r3, [r7, #4]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	8a7b      	ldrh	r3, [r7, #18]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d384      	bcc.n	8003dc0 <DrawChar+0x6c>
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000198 	.word	0x20000198
 8003ec4:	2000019c 	.word	0x2000019c

08003ec8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <FillBuffer+0x68>)
 8003ed8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003edc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <FillBuffer+0x68>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <FillBuffer+0x68>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <FillBuffer+0x68>)
 8003eec:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <FillBuffer+0x6c>)
 8003eee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003ef0:	480f      	ldr	r0, [pc, #60]	; (8003f30 <FillBuffer+0x68>)
 8003ef2:	f000 fdd9 	bl	8004aa8 <HAL_DMA2D_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d115      	bne.n	8003f28 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <FillBuffer+0x68>)
 8003f00:	f000 ff30 	bl	8004d64 <HAL_DMA2D_ConfigLayer>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10e      	bne.n	8003f28 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69f9      	ldr	r1, [r7, #28]
 8003f14:	4806      	ldr	r0, [pc, #24]	; (8003f30 <FillBuffer+0x68>)
 8003f16:	f000 fe10 	bl	8004b3a <HAL_DMA2D_Start>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003f20:	210a      	movs	r1, #10
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <FillBuffer+0x68>)
 8003f24:	f000 fe34 	bl	8004b90 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000128 	.word	0x20000128
 8003f34:	4002b000 	.word	0x4002b000

08003f38 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003f3c:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <BSP_SDRAM_Init+0xb0>)
 8003f40:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f44:	2202      	movs	r2, #2
 8003f46:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f50:	2204      	movs	r2, #4
 8003f52:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f56:	2207      	movs	r2, #7
 8003f58:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f62:	2202      	movs	r2, #2
 8003f64:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003f66:	4b21      	ldr	r3, [pc, #132]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003f68:	2202      	movs	r2, #2
 8003f6a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f80:	2210      	movs	r2, #16
 8003f82:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f8c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003f90:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	480c      	ldr	r0, [pc, #48]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003fb2:	f000 f87f 	bl	80040b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003fb6:	490d      	ldr	r1, [pc, #52]	; (8003fec <BSP_SDRAM_Init+0xb4>)
 8003fb8:	480a      	ldr	r0, [pc, #40]	; (8003fe4 <BSP_SDRAM_Init+0xac>)
 8003fba:	f003 febb 	bl	8007d34 <HAL_SDRAM_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <BSP_SDRAM_Init+0xb8>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e002      	b.n	8003fd2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <BSP_SDRAM_Init+0xb8>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003fd2:	f240 506a 	movw	r0, #1386	; 0x56a
 8003fd6:	f000 f80d 	bl	8003ff4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <BSP_SDRAM_Init+0xb8>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200001b4 	.word	0x200001b4
 8003fe8:	a0000140 	.word	0xa0000140
 8003fec:	200001e8 	.word	0x200001e8
 8003ff0:	20000094 	.word	0x20000094

08003ff4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004008:	2208      	movs	r2, #8
 800400a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800400e:	2201      	movs	r2, #1
 8004010:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800401c:	4923      	ldr	r1, [pc, #140]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800401e:	4824      	ldr	r0, [pc, #144]	; (80040b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004020:	f003 febc 	bl	8007d9c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004024:	2001      	movs	r0, #1
 8004026:	f000 fa7f 	bl	8004528 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800402c:	2202      	movs	r2, #2
 800402e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004032:	2208      	movs	r2, #8
 8004034:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004038:	2201      	movs	r2, #1
 800403a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004046:	4919      	ldr	r1, [pc, #100]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004048:	4819      	ldr	r0, [pc, #100]	; (80040b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800404a:	f003 fea7 	bl	8007d9c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004050:	2203      	movs	r2, #3
 8004052:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004056:	2208      	movs	r2, #8
 8004058:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800405c:	2204      	movs	r2, #4
 800405e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800406a:	4910      	ldr	r1, [pc, #64]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800406c:	4810      	ldr	r0, [pc, #64]	; (80040b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800406e:	f003 fe95 	bl	8007d9c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004072:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004076:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800407a:	2204      	movs	r2, #4
 800407c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004080:	2208      	movs	r2, #8
 8004082:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004086:	2201      	movs	r2, #1
 8004088:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800408e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004094:	4905      	ldr	r1, [pc, #20]	; (80040ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004096:	4806      	ldr	r0, [pc, #24]	; (80040b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004098:	f003 fe80 	bl	8007d9c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4804      	ldr	r0, [pc, #16]	; (80040b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80040a0:	f003 fea7 	bl	8007df2 <HAL_SDRAM_ProgramRefreshRate>
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000204 	.word	0x20000204
 80040b0:	200001b4 	.word	0x200001b4

080040b4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b090      	sub	sp, #64	; 0x40
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80ec 	beq.w	800429e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ca:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6393      	str	r3, [r2, #56]	; 0x38
 80040d6:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	4b70      	ldr	r3, [pc, #448]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a6f      	ldr	r2, [pc, #444]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	4b69      	ldr	r3, [pc, #420]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a68      	ldr	r2, [pc, #416]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a61      	ldr	r2, [pc, #388]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a5a      	ldr	r2, [pc, #360]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4b54      	ldr	r3, [pc, #336]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a53      	ldr	r2, [pc, #332]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b4d      	ldr	r3, [pc, #308]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004178:	f043 0320 	orr.w	r3, r3, #32
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a45      	ldr	r2, [pc, #276]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 8004194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <BSP_SDRAM_MspInit+0x1f4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80041aa:	2302      	movs	r3, #2
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80041b2:	230c      	movs	r3, #12
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80041b6:	2360      	movs	r3, #96	; 0x60
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80041ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041be:	4619      	mov	r1, r3
 80041c0:	483a      	ldr	r0, [pc, #232]	; (80042ac <BSP_SDRAM_MspInit+0x1f8>)
 80041c2:	f001 f90f 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80041c6:	2301      	movs	r3, #1
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80041ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ce:	4619      	mov	r1, r3
 80041d0:	4837      	ldr	r0, [pc, #220]	; (80042b0 <BSP_SDRAM_MspInit+0x1fc>)
 80041d2:	f001 f907 	bl	80053e4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80041d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80041dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e0:	4619      	mov	r1, r3
 80041e2:	4834      	ldr	r0, [pc, #208]	; (80042b4 <BSP_SDRAM_MspInit+0x200>)
 80041e4:	f001 f8fe 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80041e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80041ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041f2:	4619      	mov	r1, r3
 80041f4:	4830      	ldr	r0, [pc, #192]	; (80042b8 <BSP_SDRAM_MspInit+0x204>)
 80041f6:	f001 f8f5 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80041fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004204:	4619      	mov	r1, r3
 8004206:	482d      	ldr	r0, [pc, #180]	; (80042bc <BSP_SDRAM_MspInit+0x208>)
 8004208:	f001 f8ec 	bl	80053e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800420c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004216:	4619      	mov	r1, r3
 8004218:	4829      	ldr	r0, [pc, #164]	; (80042c0 <BSP_SDRAM_MspInit+0x20c>)
 800421a:	f001 f8e3 	bl	80053e4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800421e:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800422c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004230:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004238:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800423c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004240:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004244:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004248:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004256:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800425a:	2200      	movs	r2, #0
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004260:	2203      	movs	r2, #3
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004266:	2200      	movs	r2, #0
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004272:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <BSP_SDRAM_MspInit+0x214>)
 8004274:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
 800427c:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004282:	4810      	ldr	r0, [pc, #64]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 8004284:	f000 fb02 	bl	800488c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004288:	480e      	ldr	r0, [pc, #56]	; (80042c4 <BSP_SDRAM_MspInit+0x210>)
 800428a:	f000 fa51 	bl	8004730 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	210f      	movs	r1, #15
 8004292:	2038      	movs	r0, #56	; 0x38
 8004294:	f000 fa22 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004298:	2038      	movs	r0, #56	; 0x38
 800429a:	f000 fa3b 	bl	8004714 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800429e:	bf00      	nop
 80042a0:	3740      	adds	r7, #64	; 0x40
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40020400 	.word	0x40020400
 80042b0:	40020800 	.word	0x40020800
 80042b4:	40020c00 	.word	0x40020c00
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40021400 	.word	0x40021400
 80042c0:	40021800 	.word	0x40021800
 80042c4:	20000214 	.word	0x20000214
 80042c8:	40026410 	.word	0x40026410

080042cc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	460a      	mov	r2, r1
 80042d6:	80fb      	strh	r3, [r7, #6]
 80042d8:	4613      	mov	r3, r2
 80042da:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <BSP_TS_Init+0x64>)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80042e6:	4a13      	ldr	r2, [pc, #76]	; (8004334 <BSP_TS_Init+0x68>)
 80042e8:	88bb      	ldrh	r3, [r7, #4]
 80042ea:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <BSP_TS_Init+0x6c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2082      	movs	r0, #130	; 0x82
 80042f2:	4798      	blx	r3
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	f640 0311 	movw	r3, #2065	; 0x811
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d104      	bne.n	800430a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <BSP_TS_Init+0x70>)
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <BSP_TS_Init+0x6c>)
 8004304:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <BSP_TS_Init+0x70>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2082      	movs	r0, #130	; 0x82
 8004318:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <BSP_TS_Init+0x70>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2082      	movs	r0, #130	; 0x82
 8004322:	4798      	blx	r3
  }

  return ret;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000278 	.word	0x20000278
 8004334:	2000027a 	.word	0x2000027a
 8004338:	2000004c 	.word	0x2000004c
 800433c:	20000274 	.word	0x20000274

08004340 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <BSP_TS_GetState+0x148>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2082      	movs	r0, #130	; 0x82
 8004350:	4798      	blx	r3
 8004352:	4603      	mov	r3, r0
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 808d 	beq.w	800447e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004364:	4b48      	ldr	r3, [pc, #288]	; (8004488 <BSP_TS_GetState+0x148>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f107 020c 	add.w	r2, r7, #12
 800436e:	f107 010e 	add.w	r1, r7, #14
 8004372:	2082      	movs	r0, #130	; 0x82
 8004374:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004376:	89bb      	ldrh	r3, [r7, #12]
 8004378:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800437c:	b29b      	uxth	r3, r3
 800437e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004380:	89bb      	ldrh	r3, [r7, #12]
 8004382:	4a42      	ldr	r2, [pc, #264]	; (800448c <BSP_TS_GetState+0x14c>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800438c:	8abb      	ldrh	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	82bb      	strh	r3, [r7, #20]
 8004396:	e008      	b.n	80043aa <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004398:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <BSP_TS_GetState+0x150>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	8aba      	ldrh	r2, [r7, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d903      	bls.n	80043aa <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <BSP_TS_GetState+0x150>)
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80043aa:	8abb      	ldrh	r3, [r7, #20]
 80043ac:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d806      	bhi.n	80043c6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80043be:	330e      	adds	r3, #14
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	81fb      	strh	r3, [r7, #14]
 80043c4:	e005      	b.n	80043d2 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80043c6:	89fb      	ldrh	r3, [r7, #14]
 80043c8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80043cc:	3308      	adds	r3, #8
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <BSP_TS_GetState+0x154>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	82fb      	strh	r3, [r7, #22]
 80043e8:	e008      	b.n	80043fc <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80043ea:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <BSP_TS_GetState+0x158>)
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	8afa      	ldrh	r2, [r7, #22]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d903      	bls.n	80043fc <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <BSP_TS_GetState+0x158>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80043fc:	8afb      	ldrh	r3, [r7, #22]
 80043fe:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004400:	89fb      	ldrh	r3, [r7, #14]
 8004402:	461a      	mov	r2, r3
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <BSP_TS_GetState+0x15c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d906      	bls.n	800441a <BSP_TS_GetState+0xda>
 800440c:	89fa      	ldrh	r2, [r7, #14]
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <BSP_TS_GetState+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	e005      	b.n	8004426 <BSP_TS_GetState+0xe6>
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <BSP_TS_GetState+0x15c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	b29a      	uxth	r2, r3
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	b29b      	uxth	r3, r3
 8004426:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004428:	89bb      	ldrh	r3, [r7, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <BSP_TS_GetState+0x160>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d906      	bls.n	8004442 <BSP_TS_GetState+0x102>
 8004434:	89ba      	ldrh	r2, [r7, #12]
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <BSP_TS_GetState+0x160>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	e005      	b.n	800444e <BSP_TS_GetState+0x10e>
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <BSP_TS_GetState+0x160>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	b29a      	uxth	r2, r3
 8004448:	89bb      	ldrh	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004450:	8a7a      	ldrh	r2, [r7, #18]
 8004452:	8a3b      	ldrh	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	2b05      	cmp	r3, #5
 8004458:	dd07      	ble.n	800446a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800445a:	89fb      	ldrh	r3, [r7, #14]
 800445c:	461a      	mov	r2, r3
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <BSP_TS_GetState+0x15c>)
 8004460:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004462:	89bb      	ldrh	r3, [r7, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <BSP_TS_GetState+0x160>)
 8004468:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <BSP_TS_GetState+0x15c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <BSP_TS_GetState+0x160>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	809a      	strh	r2, [r3, #4]
  }
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000274 	.word	0x20000274
 800448c:	ba2e8ba3 	.word	0xba2e8ba3
 8004490:	2000027a 	.word	0x2000027a
 8004494:	88888889 	.word	0x88888889
 8004498:	20000278 	.word	0x20000278
 800449c:	2000027c 	.word	0x2000027c
 80044a0:	20000280 	.word	0x20000280

080044a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <HAL_Init+0x40>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <HAL_Init+0x40>)
 80044ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_Init+0x40>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_Init+0x40>)
 80044ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_Init+0x40>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <HAL_Init+0x40>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044cc:	2003      	movs	r0, #3
 80044ce:	f000 f8fa 	bl	80046c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fd fcae 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d8:	f7fd fc84 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023c00 	.word	0x40023c00

080044e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_IncTick+0x20>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_IncTick+0x24>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4413      	add	r3, r2
 80044f8:	4a04      	ldr	r2, [pc, #16]	; (800450c <HAL_IncTick+0x24>)
 80044fa:	6013      	str	r3, [r2, #0]
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	2000009c 	.word	0x2000009c
 800450c:	200005e0 	.word	0x200005e0

08004510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return uwTick;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_GetTick+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	200005e0 	.word	0x200005e0

08004528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff ffee 	bl	8004510 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d005      	beq.n	800454e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_Delay+0x40>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800454e:	bf00      	nop
 8004550:	f7ff ffde 	bl	8004510 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d8f7      	bhi.n	8004550 <HAL_Delay+0x28>
  {
  }
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	2000009c 	.word	0x2000009c

0800456c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	60d3      	str	r3, [r2, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <__NVIC_GetPriorityGrouping+0x18>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0307 	and.w	r3, r3, #7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db0b      	blt.n	80045fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	4907      	ldr	r1, [pc, #28]	; (8004608 <__NVIC_EnableIRQ+0x38>)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2001      	movs	r0, #1
 80045f2:	fa00 f202 	lsl.w	r2, r0, r2
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	; (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	; (800465c <__NVIC_SetPriority+0x50>)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ff4c 	bl	800456c <__NVIC_SetPriorityGrouping>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ee:	f7ff ff61 	bl	80045b4 <__NVIC_GetPriorityGrouping>
 80046f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	f7ff ffb1 	bl	8004660 <NVIC_EncodePriority>
 80046fe:	4602      	mov	r2, r0
 8004700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff80 	bl	800460c <__NVIC_SetPriority>
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff54 	bl	80045d0 <__NVIC_EnableIRQ>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7ff fee8 	bl	8004510 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e099      	b.n	8004880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476c:	e00f      	b.n	800478e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800476e:	f7ff fecf 	bl	8004510 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b05      	cmp	r3, #5
 800477a:	d908      	bls.n	800478e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e078      	b.n	8004880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e8      	bne.n	800476e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_DMA_Init+0x158>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d107      	bne.n	80047f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4313      	orrs	r3, r2
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b04      	cmp	r3, #4
 8004820:	d117      	bne.n	8004852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8bd 	bl	80049b4 <DMA_CheckFifoParam>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800484e:	2301      	movs	r3, #1
 8004850:	e016      	b.n	8004880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f874 	bl	8004948 <DMA_CalcBaseAndBitshift>
 8004860:	4603      	mov	r3, r0
 8004862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	223f      	movs	r2, #63	; 0x3f
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	f010803f 	.word	0xf010803f

0800488c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e050      	b.n	8004940 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d101      	bne.n	80048ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e048      	b.n	8004940 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2221      	movs	r2, #33	; 0x21
 80048ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f82a 	bl	8004948 <DMA_CalcBaseAndBitshift>
 80048f4:	4603      	mov	r3, r0
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	223f      	movs	r2, #63	; 0x3f
 8004922:	409a      	lsls	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	3b10      	subs	r3, #16
 8004958:	4a14      	ldr	r2, [pc, #80]	; (80049ac <DMA_CalcBaseAndBitshift+0x64>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d909      	bls.n	800498a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	659a      	str	r2, [r3, #88]	; 0x58
 8004988:	e007      	b.n	800499a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	aaaaaaab 	.word	0xaaaaaaab
 80049b0:	0800c43c 	.word	0x0800c43c

080049b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11f      	bne.n	8004a0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d855      	bhi.n	8004a80 <DMA_CheckFifoParam+0xcc>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <DMA_CheckFifoParam+0x28>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049ff 	.word	0x080049ff
 80049e4:	080049ed 	.word	0x080049ed
 80049e8:	08004a81 	.word	0x08004a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d045      	beq.n	8004a84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fc:	e042      	b.n	8004a84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a06:	d13f      	bne.n	8004a88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0c:	e03c      	b.n	8004a88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a16:	d121      	bne.n	8004a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d836      	bhi.n	8004a8c <DMA_CheckFifoParam+0xd8>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <DMA_CheckFifoParam+0x70>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a3b 	.word	0x08004a3b
 8004a2c:	08004a35 	.word	0x08004a35
 8004a30:	08004a4d 	.word	0x08004a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      break;
 8004a38:	e02f      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d024      	beq.n	8004a90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a4a:	e021      	b.n	8004a90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a54:	d11e      	bne.n	8004a94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a5a:	e01b      	b.n	8004a94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d902      	bls.n	8004a68 <DMA_CheckFifoParam+0xb4>
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d003      	beq.n	8004a6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a66:	e018      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e015      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7e:	e00b      	b.n	8004a98 <DMA_CheckFifoParam+0xe4>
      break;
 8004a80:	bf00      	nop
 8004a82:	e00a      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;
 8004a84:	bf00      	nop
 8004a86:	e008      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e006      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e004      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;
 8004a90:	bf00      	nop
 8004a92:	e002      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;   
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
      break;
 8004a98:	bf00      	nop
    }
  } 
  
  return status; 
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e03b      	b.n	8004b32 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fb fe58 	bl	8000784 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	f023 0107 	bic.w	r1, r3, #7
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68d1      	ldr	r1, [r2, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af02      	add	r7, sp, #8
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_DMA2D_Start+0x1c>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e018      	b.n	8004b88 <HAL_DMA2D_Start+0x4e>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f989 	bl	8004e88 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d056      	beq.n	8004c5a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004bac:	f7ff fcb0 	bl	8004510 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004bb2:	e04b      	b.n	8004c4c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	f043 0202 	orr.w	r2, r3, #2
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0a5      	b.n	8004d5a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d01a      	beq.n	8004c4c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004c16:	f7ff fc7b 	bl	8004510 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <HAL_DMA2D_PollForTransfer+0x9c>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e086      	b.n	8004d5a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ac      	beq.n	8004bb4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d061      	beq.n	8004d40 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7ff fc48 	bl	8004510 <HAL_GetTick>
 8004c80:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c82:	e056      	b.n	8004d32 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02e      	beq.n	8004cf4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	f043 0204 	orr.w	r2, r3, #4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2229      	movs	r2, #41	; 0x29
 8004cde:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e032      	b.n	8004d5a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d01a      	beq.n	8004d32 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004cfc:	f7ff fc08 	bl	8004510 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <HAL_DMA2D_PollForTransfer+0x182>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2203      	movs	r2, #3
 8004d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e013      	b.n	8004d5a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0a1      	beq.n	8004c84 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2212      	movs	r2, #18
 8004d46:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA2D_ConfigLayer+0x20>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e079      	b.n	8004e78 <HAL_DMA2D_ConfigLayer+0x114>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3318      	adds	r3, #24
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004dae:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <HAL_DMA2D_ConfigLayer+0x120>)
 8004db0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b0a      	cmp	r3, #10
 8004db8:	d003      	beq.n	8004dc2 <HAL_DMA2D_ConfigLayer+0x5e>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d107      	bne.n	8004dd2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e005      	b.n	8004dde <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d120      	bne.n	8004e26 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	ea02 0103 	and.w	r1, r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b0a      	cmp	r3, #10
 8004e0c:	d003      	beq.n	8004e16 <HAL_DMA2D_ConfigLayer+0xb2>
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b09      	cmp	r3, #9
 8004e14:	d127      	bne.n	8004e66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
 8004e24:	e01f      	b.n	8004e66 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	ea02 0103 	and.w	r1, r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b0a      	cmp	r3, #10
 8004e4e:	d003      	beq.n	8004e58 <HAL_DMA2D_ConfigLayer+0xf4>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b09      	cmp	r3, #9
 8004e56:	d106      	bne.n	8004e66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e64:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	ff03000f 	.word	0xff03000f

08004e88 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b08b      	sub	sp, #44	; 0x2c
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	041a      	lsls	r2, r3, #16
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ec0:	d174      	bne.n	8004fac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ec8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ed0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ed8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef8:	e053      	b.n	8004fa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d106      	bne.n	8004f10 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0e:	e048      	b.n	8004fa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d111      	bne.n	8004f3c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	0cdb      	lsrs	r3, r3, #19
 8004f1c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	0a9b      	lsrs	r3, r3, #10
 8004f22:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	08db      	lsrs	r3, r3, #3
 8004f28:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	02db      	lsls	r3, r3, #11
 8004f32:	4313      	orrs	r3, r2
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	e032      	b.n	8004fa2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d117      	bne.n	8004f74 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	0fdb      	lsrs	r3, r3, #31
 8004f48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	0cdb      	lsrs	r3, r3, #19
 8004f4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	0adb      	lsrs	r3, r3, #11
 8004f54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	08db      	lsrs	r3, r3, #3
 8004f5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	029b      	lsls	r3, r3, #10
 8004f64:	431a      	orrs	r2, r3
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	03db      	lsls	r3, r3, #15
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	e016      	b.n	8004fa2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	0f1b      	lsrs	r3, r3, #28
 8004f78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	0d1b      	lsrs	r3, r3, #20
 8004f7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	0b1b      	lsrs	r3, r3, #12
 8004f84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	011a      	lsls	r2, r3, #4
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	431a      	orrs	r2, r3
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004faa:	e003      	b.n	8004fb4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	60da      	str	r2, [r3, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	372c      	adds	r7, #44	; 0x2c
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <HAL_FLASH_Program+0xa0>)
 8004fd4:	7e1b      	ldrb	r3, [r3, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_FLASH_Program+0x1e>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e03b      	b.n	8005056 <HAL_FLASH_Program+0x96>
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_FLASH_Program+0xa0>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fe8:	f000 f870 	bl	80050cc <FLASH_WaitForLastOperation>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d12b      	bne.n	800504e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004ffc:	783b      	ldrb	r3, [r7, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f000 f919 	bl	8005238 <FLASH_Program_Byte>
 8005006:	e016      	b.n	8005036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800500e:	883b      	ldrh	r3, [r7, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f000 f8ec 	bl	80051f0 <FLASH_Program_HalfWord>
 8005018:	e00d      	b.n	8005036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d105      	bne.n	800502c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	68b8      	ldr	r0, [r7, #8]
 8005026:	f000 f8c1 	bl	80051ac <FLASH_Program_Word>
 800502a:	e004      	b.n	8005036 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800502c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	f000 f88b 	bl	800514c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005036:	f24c 3050 	movw	r0, #50000	; 0xc350
 800503a:	f000 f847 	bl	80050cc <FLASH_WaitForLastOperation>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_FLASH_Program+0xa4>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_FLASH_Program+0xa4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_FLASH_Program+0xa0>)
 8005050:	2200      	movs	r2, #0
 8005052:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200005e4 	.word	0x200005e4
 8005064:	40023c00 	.word	0x40023c00

08005068 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_FLASH_Unlock+0x38>)
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	da0b      	bge.n	8005092 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_FLASH_Unlock+0x38>)
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_FLASH_Unlock+0x3c>)
 800507e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <HAL_FLASH_Unlock+0x38>)
 8005082:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <HAL_FLASH_Unlock+0x40>)
 8005084:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_FLASH_Unlock+0x38>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da01      	bge.n	8005092 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005092:	79fb      	ldrb	r3, [r7, #7]
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40023c00 	.word	0x40023c00
 80050a4:	45670123 	.word	0x45670123
 80050a8:	cdef89ab 	.word	0xcdef89ab

080050ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_FLASH_Lock+0x1c>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <HAL_FLASH_Lock+0x1c>)
 80050b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40023c00 	.word	0x40023c00

080050cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <FLASH_WaitForLastOperation+0x78>)
 80050da:	2200      	movs	r2, #0
 80050dc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80050de:	f7ff fa17 	bl	8004510 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80050e4:	e010      	b.n	8005108 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d00c      	beq.n	8005108 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <FLASH_WaitForLastOperation+0x38>
 80050f4:	f7ff fa0c 	bl	8004510 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d201      	bcs.n	8005108 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e019      	b.n	800513c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <FLASH_WaitForLastOperation+0x7c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e8      	bne.n	80050e6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <FLASH_WaitForLastOperation+0x7c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005120:	4b09      	ldr	r3, [pc, #36]	; (8005148 <FLASH_WaitForLastOperation+0x7c>)
 8005122:	2201      	movs	r2, #1
 8005124:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <FLASH_WaitForLastOperation+0x7c>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005132:	f000 f8a3 	bl	800527c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
  
}  
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200005e4 	.word	0x200005e4
 8005148:	40023c00 	.word	0x40023c00

0800514c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800514c:	b490      	push	{r4, r7}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	4a0f      	ldr	r2, [pc, #60]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 800516a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800516e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <FLASH_Program_DoubleWord+0x5c>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005182:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005186:	e9d7 1200 	ldrd	r1, r2, [r7]
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	0013      	movs	r3, r2
 8005194:	2400      	movs	r4, #0
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	3204      	adds	r2, #4
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc90      	pop	{r4, r7}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00

080051ac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <FLASH_Program_Word+0x40>)
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <FLASH_Program_Word+0x40>)
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <FLASH_Program_Word+0x40>)
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <FLASH_Program_Word+0x40>)
 80051c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <FLASH_Program_Word+0x40>)
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	4a06      	ldr	r2, [pc, #24]	; (80051ec <FLASH_Program_Word+0x40>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	601a      	str	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40023c00 	.word	0x40023c00

080051f0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	4a06      	ldr	r2, [pc, #24]	; (8005234 <FLASH_Program_HalfWord+0x44>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	801a      	strh	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40023c00 	.word	0x40023c00

08005238 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <FLASH_Program_Byte+0x40>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <FLASH_Program_Byte+0x40>)
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <FLASH_Program_Byte+0x40>)
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <FLASH_Program_Byte+0x40>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <FLASH_Program_Byte+0x40>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	4a06      	ldr	r2, [pc, #24]	; (8005278 <FLASH_Program_Byte+0x40>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	701a      	strb	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40023c00 	.word	0x40023c00

0800527c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f043 0310 	orr.w	r3, r3, #16
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 8005296:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 800529a:	2210      	movs	r2, #16
 800529c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800529e:	4b28      	ldr	r3, [pc, #160]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f043 0308 	orr.w	r3, r3, #8
 80052b2:	4a24      	ldr	r2, [pc, #144]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052b4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052b8:	2220      	movs	r2, #32
 80052ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80052bc:	4b20      	ldr	r3, [pc, #128]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052d6:	2240      	movs	r2, #64	; 0x40
 80052d8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 80052f0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 800530e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 8005312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005316:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f043 0320 	orr.w	r3, r3, #32
 800532c:	4a05      	ldr	r2, [pc, #20]	; (8005344 <FLASH_SetErrorCode+0xc8>)
 800532e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <FLASH_SetErrorCode+0xc4>)
 8005332:	2202      	movs	r2, #2
 8005334:	60da      	str	r2, [r3, #12]
  }
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40023c00 	.word	0x40023c00
 8005344:	200005e4 	.word	0x200005e4

08005348 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e010      	b.n	8005386 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d103      	bne.n	8005372 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800536a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e009      	b.n	8005386 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d103      	bne.n	8005380 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e002      	b.n	8005386 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b0b      	cmp	r3, #11
 800538a:	d902      	bls.n	8005392 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	490f      	ldr	r1, [pc, #60]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4313      	orrs	r3, r2
 80053c0:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <FLASH_Erase_Sector+0x98>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	6113      	str	r3, [r2, #16]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40023c00 	.word	0x40023c00

080053e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	e177      	b.n	80056f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005400:	2201      	movs	r2, #1
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	429a      	cmp	r2, r3
 800541a:	f040 8166 	bne.w	80056ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d00b      	beq.n	800543e <HAL_GPIO_Init+0x5a>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d007      	beq.n	800543e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005432:	2b11      	cmp	r3, #17
 8005434:	d003      	beq.n	800543e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b12      	cmp	r3, #18
 800543c:	d130      	bne.n	80054a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2203      	movs	r2, #3
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005474:	2201      	movs	r2, #1
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 0201 	and.w	r2, r3, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	2203      	movs	r2, #3
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4013      	ands	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d003      	beq.n	80054e0 <HAL_GPIO_Init+0xfc>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b12      	cmp	r3, #18
 80054de:	d123      	bne.n	8005528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	08da      	lsrs	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3208      	adds	r2, #8
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	220f      	movs	r2, #15
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	08da      	lsrs	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3208      	adds	r2, #8
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	2203      	movs	r2, #3
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4013      	ands	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 0203 	and.w	r2, r3, #3
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4313      	orrs	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80c0 	beq.w	80056ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	4b65      	ldr	r3, [pc, #404]	; (8005704 <HAL_GPIO_Init+0x320>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	4a64      	ldr	r2, [pc, #400]	; (8005704 <HAL_GPIO_Init+0x320>)
 8005574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005578:	6453      	str	r3, [r2, #68]	; 0x44
 800557a:	4b62      	ldr	r3, [pc, #392]	; (8005704 <HAL_GPIO_Init+0x320>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005586:	4a60      	ldr	r2, [pc, #384]	; (8005708 <HAL_GPIO_Init+0x324>)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	3302      	adds	r3, #2
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	220f      	movs	r2, #15
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a57      	ldr	r2, [pc, #348]	; (800570c <HAL_GPIO_Init+0x328>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d037      	beq.n	8005622 <HAL_GPIO_Init+0x23e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a56      	ldr	r2, [pc, #344]	; (8005710 <HAL_GPIO_Init+0x32c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d031      	beq.n	800561e <HAL_GPIO_Init+0x23a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a55      	ldr	r2, [pc, #340]	; (8005714 <HAL_GPIO_Init+0x330>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02b      	beq.n	800561a <HAL_GPIO_Init+0x236>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a54      	ldr	r2, [pc, #336]	; (8005718 <HAL_GPIO_Init+0x334>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d025      	beq.n	8005616 <HAL_GPIO_Init+0x232>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a53      	ldr	r2, [pc, #332]	; (800571c <HAL_GPIO_Init+0x338>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01f      	beq.n	8005612 <HAL_GPIO_Init+0x22e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a52      	ldr	r2, [pc, #328]	; (8005720 <HAL_GPIO_Init+0x33c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d019      	beq.n	800560e <HAL_GPIO_Init+0x22a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a51      	ldr	r2, [pc, #324]	; (8005724 <HAL_GPIO_Init+0x340>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_GPIO_Init+0x226>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a50      	ldr	r2, [pc, #320]	; (8005728 <HAL_GPIO_Init+0x344>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00d      	beq.n	8005606 <HAL_GPIO_Init+0x222>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a4f      	ldr	r2, [pc, #316]	; (800572c <HAL_GPIO_Init+0x348>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <HAL_GPIO_Init+0x21e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <HAL_GPIO_Init+0x34c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_GPIO_Init+0x21a>
 80055fa:	2309      	movs	r3, #9
 80055fc:	e012      	b.n	8005624 <HAL_GPIO_Init+0x240>
 80055fe:	230a      	movs	r3, #10
 8005600:	e010      	b.n	8005624 <HAL_GPIO_Init+0x240>
 8005602:	2308      	movs	r3, #8
 8005604:	e00e      	b.n	8005624 <HAL_GPIO_Init+0x240>
 8005606:	2307      	movs	r3, #7
 8005608:	e00c      	b.n	8005624 <HAL_GPIO_Init+0x240>
 800560a:	2306      	movs	r3, #6
 800560c:	e00a      	b.n	8005624 <HAL_GPIO_Init+0x240>
 800560e:	2305      	movs	r3, #5
 8005610:	e008      	b.n	8005624 <HAL_GPIO_Init+0x240>
 8005612:	2304      	movs	r3, #4
 8005614:	e006      	b.n	8005624 <HAL_GPIO_Init+0x240>
 8005616:	2303      	movs	r3, #3
 8005618:	e004      	b.n	8005624 <HAL_GPIO_Init+0x240>
 800561a:	2302      	movs	r3, #2
 800561c:	e002      	b.n	8005624 <HAL_GPIO_Init+0x240>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_GPIO_Init+0x240>
 8005622:	2300      	movs	r3, #0
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f002 0203 	and.w	r2, r2, #3
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	4093      	lsls	r3, r2
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005634:	4934      	ldr	r1, [pc, #208]	; (8005708 <HAL_GPIO_Init+0x324>)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	089b      	lsrs	r3, r3, #2
 800563a:	3302      	adds	r3, #2
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005642:	4b3c      	ldr	r3, [pc, #240]	; (8005734 <HAL_GPIO_Init+0x350>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005666:	4a33      	ldr	r2, [pc, #204]	; (8005734 <HAL_GPIO_Init+0x350>)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800566c:	4b31      	ldr	r3, [pc, #196]	; (8005734 <HAL_GPIO_Init+0x350>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	43db      	mvns	r3, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4013      	ands	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005690:	4a28      	ldr	r2, [pc, #160]	; (8005734 <HAL_GPIO_Init+0x350>)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005696:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_GPIO_Init+0x350>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <HAL_GPIO_Init+0x350>)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056c0:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <HAL_GPIO_Init+0x350>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e4:	4a13      	ldr	r2, [pc, #76]	; (8005734 <HAL_GPIO_Init+0x350>)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	f67f ae84 	bls.w	8005400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056f8:	bf00      	nop
 80056fa:	3724      	adds	r7, #36	; 0x24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40023800 	.word	0x40023800
 8005708:	40013800 	.word	0x40013800
 800570c:	40020000 	.word	0x40020000
 8005710:	40020400 	.word	0x40020400
 8005714:	40020800 	.word	0x40020800
 8005718:	40020c00 	.word	0x40020c00
 800571c:	40021000 	.word	0x40021000
 8005720:	40021400 	.word	0x40021400
 8005724:	40021800 	.word	0x40021800
 8005728:	40021c00 	.word	0x40021c00
 800572c:	40022000 	.word	0x40022000
 8005730:	40022400 	.word	0x40022400
 8005734:	40013c00 	.word	0x40013c00

08005738 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e0d9      	b.n	8005908 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005754:	2201      	movs	r2, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	f040 80c9 	bne.w	8005902 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005770:	4a6a      	ldr	r2, [pc, #424]	; (800591c <HAL_GPIO_DeInit+0x1e4>)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	089b      	lsrs	r3, r3, #2
 8005776:	3302      	adds	r3, #2
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	220f      	movs	r2, #15
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a62      	ldr	r2, [pc, #392]	; (8005920 <HAL_GPIO_DeInit+0x1e8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d037      	beq.n	800580a <HAL_GPIO_DeInit+0xd2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a61      	ldr	r2, [pc, #388]	; (8005924 <HAL_GPIO_DeInit+0x1ec>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d031      	beq.n	8005806 <HAL_GPIO_DeInit+0xce>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a60      	ldr	r2, [pc, #384]	; (8005928 <HAL_GPIO_DeInit+0x1f0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02b      	beq.n	8005802 <HAL_GPIO_DeInit+0xca>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a5f      	ldr	r2, [pc, #380]	; (800592c <HAL_GPIO_DeInit+0x1f4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d025      	beq.n	80057fe <HAL_GPIO_DeInit+0xc6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <HAL_GPIO_DeInit+0x1f8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01f      	beq.n	80057fa <HAL_GPIO_DeInit+0xc2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a5d      	ldr	r2, [pc, #372]	; (8005934 <HAL_GPIO_DeInit+0x1fc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d019      	beq.n	80057f6 <HAL_GPIO_DeInit+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a5c      	ldr	r2, [pc, #368]	; (8005938 <HAL_GPIO_DeInit+0x200>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_GPIO_DeInit+0xba>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a5b      	ldr	r2, [pc, #364]	; (800593c <HAL_GPIO_DeInit+0x204>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00d      	beq.n	80057ee <HAL_GPIO_DeInit+0xb6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a5a      	ldr	r2, [pc, #360]	; (8005940 <HAL_GPIO_DeInit+0x208>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <HAL_GPIO_DeInit+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a59      	ldr	r2, [pc, #356]	; (8005944 <HAL_GPIO_DeInit+0x20c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d101      	bne.n	80057e6 <HAL_GPIO_DeInit+0xae>
 80057e2:	2309      	movs	r3, #9
 80057e4:	e012      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057e6:	230a      	movs	r3, #10
 80057e8:	e010      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057ea:	2308      	movs	r3, #8
 80057ec:	e00e      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057ee:	2307      	movs	r3, #7
 80057f0:	e00c      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057f2:	2306      	movs	r3, #6
 80057f4:	e00a      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057f6:	2305      	movs	r3, #5
 80057f8:	e008      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057fa:	2304      	movs	r3, #4
 80057fc:	e006      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 80057fe:	2303      	movs	r3, #3
 8005800:	e004      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 8005802:	2302      	movs	r3, #2
 8005804:	e002      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <HAL_GPIO_DeInit+0xd4>
 800580a:	2300      	movs	r3, #0
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	f002 0203 	and.w	r2, r2, #3
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	4093      	lsls	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	d132      	bne.n	8005882 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800581c:	4b4a      	ldr	r3, [pc, #296]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	43db      	mvns	r3, r3
 8005824:	4948      	ldr	r1, [pc, #288]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 8005826:	4013      	ands	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800582a:	4b47      	ldr	r3, [pc, #284]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	43db      	mvns	r3, r3
 8005832:	4945      	ldr	r1, [pc, #276]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 8005834:	4013      	ands	r3, r2
 8005836:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005838:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	43db      	mvns	r3, r3
 8005840:	4941      	ldr	r1, [pc, #260]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 8005842:	4013      	ands	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005846:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	43db      	mvns	r3, r3
 800584e:	493e      	ldr	r1, [pc, #248]	; (8005948 <HAL_GPIO_DeInit+0x210>)
 8005850:	4013      	ands	r3, r2
 8005852:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	220f      	movs	r2, #15
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005864:	4a2d      	ldr	r2, [pc, #180]	; (800591c <HAL_GPIO_DeInit+0x1e4>)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	3302      	adds	r3, #2
 800586c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	43da      	mvns	r2, r3
 8005874:	4829      	ldr	r0, [pc, #164]	; (800591c <HAL_GPIO_DeInit+0x1e4>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	400a      	ands	r2, r1
 800587c:	3302      	adds	r3, #2
 800587e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2103      	movs	r1, #3
 800588c:	fa01 f303 	lsl.w	r3, r1, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	220f      	movs	r2, #15
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	08d2      	lsrs	r2, r2, #3
 80058b8:	4019      	ands	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3208      	adds	r2, #8
 80058be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	2103      	movs	r1, #3
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	2101      	movs	r1, #1
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	2103      	movs	r1, #3
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	401a      	ands	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	3301      	adds	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	f67f af22 	bls.w	8005754 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40013800 	.word	0x40013800
 8005920:	40020000 	.word	0x40020000
 8005924:	40020400 	.word	0x40020400
 8005928:	40020800 	.word	0x40020800
 800592c:	40020c00 	.word	0x40020c00
 8005930:	40021000 	.word	0x40021000
 8005934:	40021400 	.word	0x40021400
 8005938:	40021800 	.word	0x40021800
 800593c:	40021c00 	.word	0x40021c00
 8005940:	40022000 	.word	0x40022000
 8005944:	40022400 	.word	0x40022400
 8005948:	40013c00 	.word	0x40013c00

0800594c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
 8005958:	4613      	mov	r3, r2
 800595a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005962:	887a      	ldrh	r2, [r7, #2]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005968:	e003      	b.n	8005972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	041a      	lsls	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e11f      	b.n	8005bd2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb f8b6 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059e4:	f001 ff8e 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 80059e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a7b      	ldr	r2, [pc, #492]	; (8005bdc <HAL_I2C_Init+0x25c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d807      	bhi.n	8005a04 <HAL_I2C_Init+0x84>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a7a      	ldr	r2, [pc, #488]	; (8005be0 <HAL_I2C_Init+0x260>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bf94      	ite	ls
 80059fc:	2301      	movls	r3, #1
 80059fe:	2300      	movhi	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e006      	b.n	8005a12 <HAL_I2C_Init+0x92>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a77      	ldr	r2, [pc, #476]	; (8005be4 <HAL_I2C_Init+0x264>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bf94      	ite	ls
 8005a0c:	2301      	movls	r3, #1
 8005a0e:	2300      	movhi	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0db      	b.n	8005bd2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a72      	ldr	r2, [pc, #456]	; (8005be8 <HAL_I2C_Init+0x268>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	0c9b      	lsrs	r3, r3, #18
 8005a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a64      	ldr	r2, [pc, #400]	; (8005bdc <HAL_I2C_Init+0x25c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d802      	bhi.n	8005a54 <HAL_I2C_Init+0xd4>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	3301      	adds	r3, #1
 8005a52:	e009      	b.n	8005a68 <HAL_I2C_Init+0xe8>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	4a63      	ldr	r2, [pc, #396]	; (8005bec <HAL_I2C_Init+0x26c>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	3301      	adds	r3, #1
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4956      	ldr	r1, [pc, #344]	; (8005bdc <HAL_I2C_Init+0x25c>)
 8005a84:	428b      	cmp	r3, r1
 8005a86:	d80d      	bhi.n	8005aa4 <HAL_I2C_Init+0x124>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1e59      	subs	r1, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	bf38      	it	cc
 8005aa0:	2304      	movcc	r3, #4
 8005aa2:	e04f      	b.n	8005b44 <HAL_I2C_Init+0x1c4>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d111      	bne.n	8005ad0 <HAL_I2C_Init+0x150>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1e58      	subs	r0, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	440b      	add	r3, r1
 8005aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e012      	b.n	8005af6 <HAL_I2C_Init+0x176>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1e58      	subs	r0, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6859      	ldr	r1, [r3, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	0099      	lsls	r1, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_I2C_Init+0x17e>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e022      	b.n	8005b44 <HAL_I2C_Init+0x1c4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10e      	bne.n	8005b24 <HAL_I2C_Init+0x1a4>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1e58      	subs	r0, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6859      	ldr	r1, [r3, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	440b      	add	r3, r1
 8005b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	e00f      	b.n	8005b44 <HAL_I2C_Init+0x1c4>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	0099      	lsls	r1, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	6809      	ldr	r1, [r1, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6911      	ldr	r1, [r2, #16]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	000186a0 	.word	0x000186a0
 8005be0:	001e847f 	.word	0x001e847f
 8005be4:	003d08ff 	.word	0x003d08ff
 8005be8:	431bde83 	.word	0x431bde83
 8005bec:	10624dd3 	.word	0x10624dd3

08005bf0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e021      	b.n	8005c46 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2224      	movs	r2, #36	; 0x24
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fa ffe6 	bl	8000bec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c6a:	f7fe fc51 	bl	8004510 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	f040 80d9 	bne.w	8005e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2319      	movs	r3, #25
 8005c84:	2201      	movs	r2, #1
 8005c86:	496d      	ldr	r1, [pc, #436]	; (8005e3c <HAL_I2C_Mem_Write+0x1ec>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fc89 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0cc      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2C_Mem_Write+0x56>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0c5      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d007      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2221      	movs	r2, #33	; 0x21
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a4d      	ldr	r2, [pc, #308]	; (8005e40 <HAL_I2C_Mem_Write+0x1f0>)
 8005d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d0e:	88f8      	ldrh	r0, [r7, #6]
 8005d10:	893a      	ldrh	r2, [r7, #8]
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fac4 	bl	80062ac <I2C_RequestMemoryWrite>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d052      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e081      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fd0a 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d107      	bne.n	8005d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e06b      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11b      	bne.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d017      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1aa      	bne.n	8005d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fcf6 	bl	80067ce <I2C_WaitOnBTFFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d107      	bne.n	8005e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e016      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	00100002 	.word	0x00100002
 8005e40:	ffff0000 	.word	0xffff0000

08005e44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	; 0x30
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	817b      	strh	r3, [r7, #10]
 8005e56:	460b      	mov	r3, r1
 8005e58:	813b      	strh	r3, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e5e:	f7fe fb57 	bl	8004510 <HAL_GetTick>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	f040 8208 	bne.w	8006282 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2319      	movs	r3, #25
 8005e78:	2201      	movs	r2, #1
 8005e7a:	497b      	ldr	r1, [pc, #492]	; (8006068 <HAL_I2C_Mem_Read+0x224>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb8f 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e1fb      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Mem_Read+0x56>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e1f4      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d007      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2222      	movs	r2, #34	; 0x22
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a5b      	ldr	r2, [pc, #364]	; (800606c <HAL_I2C_Mem_Read+0x228>)
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f02:	88f8      	ldrh	r0, [r7, #6]
 8005f04:	893a      	ldrh	r2, [r7, #8]
 8005f06:	8979      	ldrh	r1, [r7, #10]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4603      	mov	r3, r0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fa5e 	bl	80063d4 <I2C_RequestMemoryRead>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1b0      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d113      	bne.n	8005f52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	623b      	str	r3, [r7, #32]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e184      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11b      	bne.n	8005f92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e164      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	e144      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fe8:	e138      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	f200 80f1 	bhi.w	80061d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d123      	bne.n	8006044 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fc25 	bl	8006850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e139      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006042:	e10b      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b02      	cmp	r3, #2
 800604a:	d14e      	bne.n	80060ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2200      	movs	r2, #0
 8006054:	4906      	ldr	r1, [pc, #24]	; (8006070 <HAL_I2C_Mem_Read+0x22c>)
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 faa2 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e10e      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
 8006066:	bf00      	nop
 8006068:	00100002 	.word	0x00100002
 800606c:	ffff0000 	.word	0xffff0000
 8006070:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e8:	e0b8      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2200      	movs	r2, #0
 80060f2:	4966      	ldr	r1, [pc, #408]	; (800628c <HAL_I2C_Mem_Read+0x448>)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa53 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0bf      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	494f      	ldr	r1, [pc, #316]	; (800628c <HAL_I2C_Mem_Read+0x448>)
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa25 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e091      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d4:	e042      	b.n	800625c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fb38 	bl	8006850 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e04c      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d118      	bne.n	800625c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	f47f aec2 	bne.w	8005fea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	00010004 	.word	0x00010004

08006290 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2200      	movs	r2, #0
 80062de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f95c 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e05f      	b.n	80063c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006316:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	492c      	ldr	r1, [pc, #176]	; (80063d0 <I2C_RequestMemoryWrite+0x124>)
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f995 	bl	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e04c      	b.n	80063c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	6a39      	ldr	r1, [r7, #32]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f9ff 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	2b04      	cmp	r3, #4
 800635a:	d107      	bne.n	800636c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e02b      	b.n	80063c8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006376:	893b      	ldrh	r3, [r7, #8]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]
 8006380:	e021      	b.n	80063c6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	0a1b      	lsrs	r3, r3, #8
 8006386:	b29b      	uxth	r3, r3
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	6a39      	ldr	r1, [r7, #32]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f9d9 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d107      	bne.n	80063b8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e005      	b.n	80063c8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	00010002 	.word	0x00010002

080063d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	817b      	strh	r3, [r7, #10]
 80063e6:	460b      	mov	r3, r1
 80063e8:	813b      	strh	r3, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2200      	movs	r2, #0
 8006416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f8c0 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e0a9      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006440:	897b      	ldrh	r3, [r7, #10]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800644e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	4951      	ldr	r1, [pc, #324]	; (800659c <I2C_RequestMemoryRead+0x1c8>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f8f9 	bl	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e096      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	6a39      	ldr	r1, [r7, #32]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f963 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	2b04      	cmp	r3, #4
 8006492:	d107      	bne.n	80064a4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e075      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d105      	bne.n	80064ba <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ae:	893b      	ldrh	r3, [r7, #8]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]
 80064b8:	e021      	b.n	80064fe <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064ba:	893b      	ldrh	r3, [r7, #8]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	6a39      	ldr	r1, [r7, #32]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f93d 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d107      	bne.n	80064f0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e04f      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064f4:	893b      	ldrh	r3, [r7, #8]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	6a39      	ldr	r1, [r7, #32]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f922 	bl	800674c <I2C_WaitOnTXEFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00d      	beq.n	800652a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b04      	cmp	r3, #4
 8006514:	d107      	bne.n	8006526 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e034      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	2200      	movs	r2, #0
 8006542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f82a 	bl	80065a0 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e013      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800656c:	897b      	ldrh	r3, [r7, #10]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	4906      	ldr	r1, [pc, #24]	; (800659c <I2C_RequestMemoryRead+0x1c8>)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f863 	bl	800664e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	00010002 	.word	0x00010002

080065a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065b0:	e025      	b.n	80065fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d021      	beq.n	80065fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fd ffa9 	bl	8004510 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e023      	b.n	8006646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10d      	bne.n	8006624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	43da      	mvns	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	e00c      	b.n	800663e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	43da      	mvns	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4013      	ands	r3, r2
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	429a      	cmp	r2, r3
 8006642:	d0b6      	beq.n	80065b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665c:	e051      	b.n	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666c:	d123      	bne.n	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f043 0204 	orr.w	r2, r3, #4
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e046      	b.n	8006744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d021      	beq.n	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fd ff27 	bl	8004510 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d116      	bne.n	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0220 	orr.w	r2, r3, #32
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e020      	b.n	8006744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10c      	bne.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	e00b      	b.n	800673e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	43da      	mvns	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4013      	ands	r3, r2
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d18d      	bne.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006758:	e02d      	b.n	80067b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f8ce 	bl	80068fc <I2C_IsAcknowledgeFailed>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e02d      	b.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d021      	beq.n	80067b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fd fecd 	bl	8004510 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e007      	b.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d1ca      	bne.n	800675a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067da:	e02d      	b.n	8006838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f88d 	bl	80068fc <I2C_IsAcknowledgeFailed>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e02d      	b.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d021      	beq.n	8006838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f4:	f7fd fe8c 	bl	8004510 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	d302      	bcc.n	800680a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d116      	bne.n	8006838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e007      	b.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b04      	cmp	r3, #4
 8006844:	d1ca      	bne.n	80067dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800685c:	e042      	b.n	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b10      	cmp	r3, #16
 800686a:	d119      	bne.n	80068a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0210 	mvn.w	r2, #16
 8006874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e029      	b.n	80068f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a0:	f7fd fe36 	bl	8004510 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d116      	bne.n	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e007      	b.n	80068f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	d1b5      	bne.n	800685e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d11b      	bne.n	800694c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800691c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	f043 0204 	orr.w	r2, r3, #4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b20      	cmp	r3, #32
 800696e:	d129      	bne.n	80069c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2224      	movs	r2, #36	; 0x24
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0210 	bic.w	r2, r2, #16
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d12a      	bne.n	8006a42 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	f023 030f 	bic.w	r3, r3, #15
 8006a12:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	89fa      	ldrh	r2, [r7, #14]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e0bf      	b.n	8006be2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa f990 	bl	8000d9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6999      	ldr	r1, [r3, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006aa8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b4a      	ldr	r3, [pc, #296]	; (8006bec <HAL_LTDC_Init+0x19c>)
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68d9      	ldr	r1, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <HAL_LTDC_Init+0x19c>)
 8006af2:	400b      	ands	r3, r1
 8006af4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68d9      	ldr	r1, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6919      	ldr	r1, [r3, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b33      	ldr	r3, [pc, #204]	; (8006bec <HAL_LTDC_Init+0x19c>)
 8006b20:	400b      	ands	r3, r1
 8006b22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6919      	ldr	r1, [r3, #16]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6959      	ldr	r1, [r3, #20]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	4b27      	ldr	r3, [pc, #156]	; (8006bec <HAL_LTDC_Init+0x19c>)
 8006b4e:	400b      	ands	r3, r1
 8006b50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6959      	ldr	r1, [r3, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b80:	041b      	lsls	r3, r3, #16
 8006b82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0206 	orr.w	r2, r2, #6
 8006bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	f000f800 	.word	0xf000f800

08006bf0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bf0:	b5b0      	push	{r4, r5, r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_LTDC_ConfigLayer+0x1a>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e02c      	b.n	8006c64 <HAL_LTDC_ConfigLayer+0x74>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2202      	movs	r2, #2
 8006c16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2134      	movs	r1, #52	; 0x34
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	461d      	mov	r5, r3
 8006c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f83b 	bl	8006cc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bdb0      	pop	{r4, r5, r7, pc}

08006c6c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_LTDC_EnableDither+0x16>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e016      	b.n	8006cb0 <HAL_LTDC_EnableDither+0x44>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_LTDC_EnableDither+0x50>)
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <HAL_LTDC_EnableDither+0x50>)
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40016800 	.word	0x40016800

08006cc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cdc:	4413      	add	r3, r2
 8006cde:	041b      	lsls	r3, r3, #16
 8006ce0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	4413      	add	r3, r2
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	01d2      	lsls	r2, r2, #7
 8006cfc:	440a      	add	r2, r1
 8006cfe:	3284      	adds	r2, #132	; 0x84
 8006d00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d16:	4413      	add	r3, r2
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	440b      	add	r3, r1
 8006d26:	3384      	adds	r3, #132	; 0x84
 8006d28:	4619      	mov	r1, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d3e:	4413      	add	r3, r2
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	01db      	lsls	r3, r3, #7
 8006d4e:	4413      	add	r3, r2
 8006d50:	3384      	adds	r3, #132	; 0x84
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	6812      	ldr	r2, [r2, #0]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	01d2      	lsls	r2, r2, #7
 8006d5e:	440a      	add	r2, r1
 8006d60:	3284      	adds	r2, #132	; 0x84
 8006d62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d76:	4413      	add	r3, r2
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	01db      	lsls	r3, r3, #7
 8006d84:	440b      	add	r3, r1
 8006d86:	3384      	adds	r3, #132	; 0x84
 8006d88:	4619      	mov	r1, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	01db      	lsls	r3, r3, #7
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3384      	adds	r3, #132	; 0x84
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	4611      	mov	r1, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	01d2      	lsls	r2, r2, #7
 8006daa:	440a      	add	r2, r1
 8006dac:	3284      	adds	r2, #132	; 0x84
 8006dae:	f023 0307 	bic.w	r3, r3, #7
 8006db2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	01db      	lsls	r3, r3, #7
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3384      	adds	r3, #132	; 0x84
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006dda:	041b      	lsls	r3, r3, #16
 8006ddc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	061b      	lsls	r3, r3, #24
 8006de4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	01db      	lsls	r3, r3, #7
 8006df0:	4413      	add	r3, r2
 8006df2:	3384      	adds	r3, #132	; 0x84
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	4413      	add	r3, r2
 8006e02:	3384      	adds	r3, #132	; 0x84
 8006e04:	461a      	mov	r2, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e10:	461a      	mov	r2, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	01db      	lsls	r3, r3, #7
 8006e24:	440b      	add	r3, r1
 8006e26:	3384      	adds	r3, #132	; 0x84
 8006e28:	4619      	mov	r1, r3
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	01db      	lsls	r3, r3, #7
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3384      	adds	r3, #132	; 0x84
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	4611      	mov	r1, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	01d2      	lsls	r2, r2, #7
 8006e4a:	440a      	add	r2, r1
 8006e4c:	3284      	adds	r2, #132	; 0x84
 8006e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	01db      	lsls	r3, r3, #7
 8006e5e:	4413      	add	r3, r2
 8006e60:	3384      	adds	r3, #132	; 0x84
 8006e62:	461a      	mov	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	01db      	lsls	r3, r3, #7
 8006e74:	4413      	add	r3, r2
 8006e76:	3384      	adds	r3, #132	; 0x84
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	01d2      	lsls	r2, r2, #7
 8006e84:	440a      	add	r2, r1
 8006e86:	3284      	adds	r2, #132	; 0x84
 8006e88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e8c:	f023 0307 	bic.w	r3, r3, #7
 8006e90:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	69da      	ldr	r2, [r3, #28]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	6809      	ldr	r1, [r1, #0]
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	01c9      	lsls	r1, r1, #7
 8006ea4:	4401      	add	r1, r0
 8006ea6:	3184      	adds	r1, #132	; 0x84
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	01db      	lsls	r3, r3, #7
 8006eb6:	4413      	add	r3, r2
 8006eb8:	3384      	adds	r3, #132	; 0x84
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	01db      	lsls	r3, r3, #7
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3384      	adds	r3, #132	; 0x84
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	01db      	lsls	r3, r3, #7
 8006eda:	4413      	add	r3, r2
 8006edc:	3384      	adds	r3, #132	; 0x84
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006eee:	2304      	movs	r3, #4
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e01b      	b.n	8006f2c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d102      	bne.n	8006f02 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006efc:	2303      	movs	r3, #3
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	e014      	b.n	8006f2c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d00b      	beq.n	8006f22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d007      	beq.n	8006f22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d003      	beq.n	8006f22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	d102      	bne.n	8006f28 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006f22:	2302      	movs	r3, #2
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	e001      	b.n	8006f2c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	01db      	lsls	r3, r3, #7
 8006f36:	4413      	add	r3, r2
 8006f38:	3384      	adds	r3, #132	; 0x84
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	4611      	mov	r1, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	01d2      	lsls	r2, r2, #7
 8006f46:	440a      	add	r2, r1
 8006f48:	3284      	adds	r2, #132	; 0x84
 8006f4a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	041a      	lsls	r2, r3, #16
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	1acb      	subs	r3, r1, r3
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	3303      	adds	r3, #3
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	6809      	ldr	r1, [r1, #0]
 8006f72:	4608      	mov	r0, r1
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	01c9      	lsls	r1, r1, #7
 8006f78:	4401      	add	r1, r0
 8006f7a:	3184      	adds	r1, #132	; 0x84
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	01db      	lsls	r3, r3, #7
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3384      	adds	r3, #132	; 0x84
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	4611      	mov	r1, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	01d2      	lsls	r2, r2, #7
 8006f9a:	440a      	add	r2, r1
 8006f9c:	3284      	adds	r2, #132	; 0x84
 8006f9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	01db      	lsls	r3, r3, #7
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3384      	adds	r3, #132	; 0x84
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	01db      	lsls	r3, r3, #7
 8006fc8:	4413      	add	r3, r2
 8006fca:	3384      	adds	r3, #132	; 0x84
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	01d2      	lsls	r2, r2, #7
 8006fd8:	440a      	add	r2, r1
 8006fda:	3284      	adds	r2, #132	; 0x84
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6013      	str	r3, [r2, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	3724      	adds	r7, #36	; 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4b20      	ldr	r3, [pc, #128]	; (8007080 <HAL_PWREx_EnableOverDrive+0x90>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <HAL_PWREx_EnableOverDrive+0x90>)
 8007004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007008:	6413      	str	r3, [r2, #64]	; 0x40
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <HAL_PWREx_EnableOverDrive+0x90>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007016:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <HAL_PWREx_EnableOverDrive+0x94>)
 8007018:	2201      	movs	r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800701c:	f7fd fa78 	bl	8004510 <HAL_GetTick>
 8007020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007022:	e009      	b.n	8007038 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007024:	f7fd fa74 	bl	8004510 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007032:	d901      	bls.n	8007038 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e01f      	b.n	8007078 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <HAL_PWREx_EnableOverDrive+0x98>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d1ee      	bne.n	8007024 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800704c:	f7fd fa60 	bl	8004510 <HAL_GetTick>
 8007050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007052:	e009      	b.n	8007068 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007054:	f7fd fa5c 	bl	8004510 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007062:	d901      	bls.n	8007068 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e007      	b.n	8007078 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007068:	4b07      	ldr	r3, [pc, #28]	; (8007088 <HAL_PWREx_EnableOverDrive+0x98>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007074:	d1ee      	bne.n	8007054 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	420e0040 	.word	0x420e0040
 8007088:	40007000 	.word	0x40007000
 800708c:	420e0044 	.word	0x420e0044

08007090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e25b      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d075      	beq.n	800719a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ae:	4ba3      	ldr	r3, [pc, #652]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 030c 	and.w	r3, r3, #12
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d00c      	beq.n	80070d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ba:	4ba0      	ldr	r3, [pc, #640]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d112      	bne.n	80070ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070c6:	4b9d      	ldr	r3, [pc, #628]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070d2:	d10b      	bne.n	80070ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d4:	4b99      	ldr	r3, [pc, #612]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d05b      	beq.n	8007198 <HAL_RCC_OscConfig+0x108>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d157      	bne.n	8007198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e236      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f4:	d106      	bne.n	8007104 <HAL_RCC_OscConfig+0x74>
 80070f6:	4b91      	ldr	r3, [pc, #580]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a90      	ldr	r2, [pc, #576]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80070fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e01d      	b.n	8007140 <HAL_RCC_OscConfig+0xb0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800710c:	d10c      	bne.n	8007128 <HAL_RCC_OscConfig+0x98>
 800710e:	4b8b      	ldr	r3, [pc, #556]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a8a      	ldr	r2, [pc, #552]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	4b88      	ldr	r3, [pc, #544]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a87      	ldr	r2, [pc, #540]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	e00b      	b.n	8007140 <HAL_RCC_OscConfig+0xb0>
 8007128:	4b84      	ldr	r3, [pc, #528]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a83      	ldr	r2, [pc, #524]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800712e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	4b81      	ldr	r3, [pc, #516]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a80      	ldr	r2, [pc, #512]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800713a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800713e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d013      	beq.n	8007170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fd f9e2 	bl	8004510 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007150:	f7fd f9de 	bl	8004510 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e1fb      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007162:	4b76      	ldr	r3, [pc, #472]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f0      	beq.n	8007150 <HAL_RCC_OscConfig+0xc0>
 800716e:	e014      	b.n	800719a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007170:	f7fd f9ce 	bl	8004510 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007178:	f7fd f9ca 	bl	8004510 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b64      	cmp	r3, #100	; 0x64
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e1e7      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800718a:	4b6c      	ldr	r3, [pc, #432]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0xe8>
 8007196:	e000      	b.n	800719a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d063      	beq.n	800726e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071a6:	4b65      	ldr	r3, [pc, #404]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 030c 	and.w	r3, r3, #12
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071b2:	4b62      	ldr	r3, [pc, #392]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d11c      	bne.n	80071f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071be:	4b5f      	ldr	r3, [pc, #380]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d116      	bne.n	80071f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ca:	4b5c      	ldr	r3, [pc, #368]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_RCC_OscConfig+0x152>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d001      	beq.n	80071e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e1bb      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e2:	4b56      	ldr	r3, [pc, #344]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	4952      	ldr	r1, [pc, #328]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071f6:	e03a      	b.n	800726e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d020      	beq.n	8007242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007200:	4b4f      	ldr	r3, [pc, #316]	; (8007340 <HAL_RCC_OscConfig+0x2b0>)
 8007202:	2201      	movs	r2, #1
 8007204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007206:	f7fd f983 	bl	8004510 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800720e:	f7fd f97f 	bl	8004510 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e19c      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	4b46      	ldr	r3, [pc, #280]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722c:	4b43      	ldr	r3, [pc, #268]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	4940      	ldr	r1, [pc, #256]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800723c:	4313      	orrs	r3, r2
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	e015      	b.n	800726e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007242:	4b3f      	ldr	r3, [pc, #252]	; (8007340 <HAL_RCC_OscConfig+0x2b0>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fd f962 	bl	8004510 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007250:	f7fd f95e 	bl	8004510 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e17b      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	4b36      	ldr	r3, [pc, #216]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d030      	beq.n	80072dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007282:	4b30      	ldr	r3, [pc, #192]	; (8007344 <HAL_RCC_OscConfig+0x2b4>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fd f942 	bl	8004510 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007290:	f7fd f93e 	bl	8004510 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e15b      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a2:	4b26      	ldr	r3, [pc, #152]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80072a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0x200>
 80072ae:	e015      	b.n	80072dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072b0:	4b24      	ldr	r3, [pc, #144]	; (8007344 <HAL_RCC_OscConfig+0x2b4>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b6:	f7fd f92b 	bl	8004510 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072be:	f7fd f927 	bl	8004510 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e144      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d0:	4b1a      	ldr	r3, [pc, #104]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80072d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f0      	bne.n	80072be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80a0 	beq.w	800742a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10f      	bne.n	800731a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	4a0e      	ldr	r2, [pc, #56]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 8007304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007308:	6413      	str	r3, [r2, #64]	; 0x40
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <HAL_RCC_OscConfig+0x2ac>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007316:	2301      	movs	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_OscConfig+0x2b8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d121      	bne.n	800736a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_RCC_OscConfig+0x2b8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a07      	ldr	r2, [pc, #28]	; (8007348 <HAL_RCC_OscConfig+0x2b8>)
 800732c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007332:	f7fd f8ed 	bl	8004510 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007338:	e011      	b.n	800735e <HAL_RCC_OscConfig+0x2ce>
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	42470000 	.word	0x42470000
 8007344:	42470e80 	.word	0x42470e80
 8007348:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800734c:	f7fd f8e0 	bl	8004510 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e0fd      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735e:	4b81      	ldr	r3, [pc, #516]	; (8007564 <HAL_RCC_OscConfig+0x4d4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d106      	bne.n	8007380 <HAL_RCC_OscConfig+0x2f0>
 8007372:	4b7d      	ldr	r3, [pc, #500]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	4a7c      	ldr	r2, [pc, #496]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	6713      	str	r3, [r2, #112]	; 0x70
 800737e:	e01c      	b.n	80073ba <HAL_RCC_OscConfig+0x32a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b05      	cmp	r3, #5
 8007386:	d10c      	bne.n	80073a2 <HAL_RCC_OscConfig+0x312>
 8007388:	4b77      	ldr	r3, [pc, #476]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	4a76      	ldr	r2, [pc, #472]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800738e:	f043 0304 	orr.w	r3, r3, #4
 8007392:	6713      	str	r3, [r2, #112]	; 0x70
 8007394:	4b74      	ldr	r3, [pc, #464]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	4a73      	ldr	r2, [pc, #460]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	6713      	str	r3, [r2, #112]	; 0x70
 80073a0:	e00b      	b.n	80073ba <HAL_RCC_OscConfig+0x32a>
 80073a2:	4b71      	ldr	r3, [pc, #452]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	4a70      	ldr	r2, [pc, #448]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
 80073ae:	4b6e      	ldr	r3, [pc, #440]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	4a6d      	ldr	r2, [pc, #436]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80073b4:	f023 0304 	bic.w	r3, r3, #4
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d015      	beq.n	80073ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c2:	f7fd f8a5 	bl	8004510 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c8:	e00a      	b.n	80073e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073ca:	f7fd f8a1 	bl	8004510 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d8:	4293      	cmp	r3, r2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e0bc      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e0:	4b61      	ldr	r3, [pc, #388]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0ee      	beq.n	80073ca <HAL_RCC_OscConfig+0x33a>
 80073ec:	e014      	b.n	8007418 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ee:	f7fd f88f 	bl	8004510 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fd f88b 	bl	8004510 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e0a6      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800740c:	4b56      	ldr	r3, [pc, #344]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1ee      	bne.n	80073f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d105      	bne.n	800742a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800741e:	4b52      	ldr	r3, [pc, #328]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	4a51      	ldr	r2, [pc, #324]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8092 	beq.w	8007558 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007434:	4b4c      	ldr	r3, [pc, #304]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b08      	cmp	r3, #8
 800743e:	d05c      	beq.n	80074fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d141      	bne.n	80074cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007448:	4b48      	ldr	r3, [pc, #288]	; (800756c <HAL_RCC_OscConfig+0x4dc>)
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744e:	f7fd f85f 	bl	8004510 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007456:	f7fd f85b 	bl	8004510 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e078      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007468:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f0      	bne.n	8007456 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	019b      	lsls	r3, r3, #6
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	3b01      	subs	r3, #1
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	061b      	lsls	r3, r3, #24
 8007498:	4933      	ldr	r1, [pc, #204]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 800749a:	4313      	orrs	r3, r2
 800749c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800749e:	4b33      	ldr	r3, [pc, #204]	; (800756c <HAL_RCC_OscConfig+0x4dc>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a4:	f7fd f834 	bl	8004510 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fd f830 	bl	8004510 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e04d      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074be:	4b2a      	ldr	r3, [pc, #168]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x41c>
 80074ca:	e045      	b.n	8007558 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074cc:	4b27      	ldr	r3, [pc, #156]	; (800756c <HAL_RCC_OscConfig+0x4dc>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d2:	f7fd f81d 	bl	8004510 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074d8:	e008      	b.n	80074ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074da:	f7fd f819 	bl	8004510 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e036      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ec:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f0      	bne.n	80074da <HAL_RCC_OscConfig+0x44a>
 80074f8:	e02e      	b.n	8007558 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e029      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <HAL_RCC_OscConfig+0x4d8>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	429a      	cmp	r2, r3
 8007518:	d11c      	bne.n	8007554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d115      	bne.n	8007554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800752e:	4013      	ands	r3, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007534:	4293      	cmp	r3, r2
 8007536:	d10d      	bne.n	8007554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007542:	429a      	cmp	r2, r3
 8007544:	d106      	bne.n	8007554 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40007000 	.word	0x40007000
 8007568:	40023800 	.word	0x40023800
 800756c:	42470060 	.word	0x42470060

08007570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e0cc      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007584:	4b68      	ldr	r3, [pc, #416]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d90c      	bls.n	80075ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007592:	4b65      	ldr	r3, [pc, #404]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b63      	ldr	r3, [pc, #396]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0b8      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a58      	ldr	r2, [pc, #352]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075dc:	4b53      	ldr	r3, [pc, #332]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a52      	ldr	r2, [pc, #328]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e8:	4b50      	ldr	r3, [pc, #320]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	494d      	ldr	r1, [pc, #308]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d044      	beq.n	8007690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760e:	4b47      	ldr	r3, [pc, #284]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d119      	bne.n	800764e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e07f      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d003      	beq.n	800762e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800762a:	2b03      	cmp	r3, #3
 800762c:	d107      	bne.n	800763e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800762e:	4b3f      	ldr	r3, [pc, #252]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e06f      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763e:	4b3b      	ldr	r3, [pc, #236]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e067      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800764e:	4b37      	ldr	r3, [pc, #220]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f023 0203 	bic.w	r2, r3, #3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4934      	ldr	r1, [pc, #208]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	4313      	orrs	r3, r2
 800765e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007660:	f7fc ff56 	bl	8004510 <HAL_GetTick>
 8007664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007666:	e00a      	b.n	800767e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007668:	f7fc ff52 	bl	8004510 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	f241 3288 	movw	r2, #5000	; 0x1388
 8007676:	4293      	cmp	r3, r2
 8007678:	d901      	bls.n	800767e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e04f      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767e:	4b2b      	ldr	r3, [pc, #172]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 020c 	and.w	r2, r3, #12
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	429a      	cmp	r2, r3
 800768e:	d1eb      	bne.n	8007668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007690:	4b25      	ldr	r3, [pc, #148]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d20c      	bcs.n	80076b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769e:	4b22      	ldr	r3, [pc, #136]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d001      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e032      	b.n	800771e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c4:	4b19      	ldr	r3, [pc, #100]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4916      	ldr	r1, [pc, #88]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	490e      	ldr	r1, [pc, #56]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076f6:	f000 f821 	bl	800773c <HAL_RCC_GetSysClockFreq>
 80076fa:	4601      	mov	r1, r0
 80076fc:	4b0b      	ldr	r3, [pc, #44]	; (800772c <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	4a0a      	ldr	r2, [pc, #40]	; (8007730 <HAL_RCC_ClockConfig+0x1c0>)
 8007708:	5cd3      	ldrb	r3, [r2, r3]
 800770a:	fa21 f303 	lsr.w	r3, r1, r3
 800770e:	4a09      	ldr	r2, [pc, #36]	; (8007734 <HAL_RCC_ClockConfig+0x1c4>)
 8007710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_RCC_ClockConfig+0x1c8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f7fa fb8c 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40023c00 	.word	0x40023c00
 800772c:	40023800 	.word	0x40023800
 8007730:	08009918 	.word	0x08009918
 8007734:	20000010 	.word	0x20000010
 8007738:	20000098 	.word	0x20000098

0800773c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800773c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	2300      	movs	r3, #0
 800774c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007752:	4b63      	ldr	r3, [pc, #396]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b04      	cmp	r3, #4
 800775c:	d007      	beq.n	800776e <HAL_RCC_GetSysClockFreq+0x32>
 800775e:	2b08      	cmp	r3, #8
 8007760:	d008      	beq.n	8007774 <HAL_RCC_GetSysClockFreq+0x38>
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 80b4 	bne.w	80078d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007768:	4b5e      	ldr	r3, [pc, #376]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800776a:	60bb      	str	r3, [r7, #8]
       break;
 800776c:	e0b3      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800776e:	4b5e      	ldr	r3, [pc, #376]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007770:	60bb      	str	r3, [r7, #8]
      break;
 8007772:	e0b0      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007774:	4b5a      	ldr	r3, [pc, #360]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800777c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800777e:	4b58      	ldr	r3, [pc, #352]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d04a      	beq.n	8007820 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800778a:	4b55      	ldr	r3, [pc, #340]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	099b      	lsrs	r3, r3, #6
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	ea03 0501 	and.w	r5, r3, r1
 80077a0:	ea04 0602 	and.w	r6, r4, r2
 80077a4:	4629      	mov	r1, r5
 80077a6:	4632      	mov	r2, r6
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	0154      	lsls	r4, r2, #5
 80077b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077b6:	014b      	lsls	r3, r1, #5
 80077b8:	4619      	mov	r1, r3
 80077ba:	4622      	mov	r2, r4
 80077bc:	1b49      	subs	r1, r1, r5
 80077be:	eb62 0206 	sbc.w	r2, r2, r6
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	0194      	lsls	r4, r2, #6
 80077cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077d0:	018b      	lsls	r3, r1, #6
 80077d2:	1a5b      	subs	r3, r3, r1
 80077d4:	eb64 0402 	sbc.w	r4, r4, r2
 80077d8:	f04f 0100 	mov.w	r1, #0
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	00e2      	lsls	r2, r4, #3
 80077e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077e6:	00d9      	lsls	r1, r3, #3
 80077e8:	460b      	mov	r3, r1
 80077ea:	4614      	mov	r4, r2
 80077ec:	195b      	adds	r3, r3, r5
 80077ee:	eb44 0406 	adc.w	r4, r4, r6
 80077f2:	f04f 0100 	mov.w	r1, #0
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	0262      	lsls	r2, r4, #9
 80077fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007800:	0259      	lsls	r1, r3, #9
 8007802:	460b      	mov	r3, r1
 8007804:	4614      	mov	r4, r2
 8007806:	4618      	mov	r0, r3
 8007808:	4621      	mov	r1, r4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f04f 0400 	mov.w	r4, #0
 8007810:	461a      	mov	r2, r3
 8007812:	4623      	mov	r3, r4
 8007814:	f7f8 fcea 	bl	80001ec <__aeabi_uldivmod>
 8007818:	4603      	mov	r3, r0
 800781a:	460c      	mov	r4, r1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e049      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007820:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	099b      	lsrs	r3, r3, #6
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	ea03 0501 	and.w	r5, r3, r1
 8007836:	ea04 0602 	and.w	r6, r4, r2
 800783a:	4629      	mov	r1, r5
 800783c:	4632      	mov	r2, r6
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	f04f 0400 	mov.w	r4, #0
 8007846:	0154      	lsls	r4, r2, #5
 8007848:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800784c:	014b      	lsls	r3, r1, #5
 800784e:	4619      	mov	r1, r3
 8007850:	4622      	mov	r2, r4
 8007852:	1b49      	subs	r1, r1, r5
 8007854:	eb62 0206 	sbc.w	r2, r2, r6
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	f04f 0400 	mov.w	r4, #0
 8007860:	0194      	lsls	r4, r2, #6
 8007862:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007866:	018b      	lsls	r3, r1, #6
 8007868:	1a5b      	subs	r3, r3, r1
 800786a:	eb64 0402 	sbc.w	r4, r4, r2
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	00e2      	lsls	r2, r4, #3
 8007878:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800787c:	00d9      	lsls	r1, r3, #3
 800787e:	460b      	mov	r3, r1
 8007880:	4614      	mov	r4, r2
 8007882:	195b      	adds	r3, r3, r5
 8007884:	eb44 0406 	adc.w	r4, r4, r6
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	02a2      	lsls	r2, r4, #10
 8007892:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007896:	0299      	lsls	r1, r3, #10
 8007898:	460b      	mov	r3, r1
 800789a:	4614      	mov	r4, r2
 800789c:	4618      	mov	r0, r3
 800789e:	4621      	mov	r1, r4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	461a      	mov	r2, r3
 80078a8:	4623      	mov	r3, r4
 80078aa:	f7f8 fc9f 	bl	80001ec <__aeabi_uldivmod>
 80078ae:	4603      	mov	r3, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078b4:	4b0a      	ldr	r3, [pc, #40]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	0c1b      	lsrs	r3, r3, #16
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	60bb      	str	r3, [r7, #8]
      break;
 80078ce:	e002      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078d2:	60bb      	str	r3, [r7, #8]
      break;
 80078d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d6:	68bb      	ldr	r3, [r7, #8]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e0:	40023800 	.word	0x40023800
 80078e4:	00f42400 	.word	0x00f42400
 80078e8:	007a1200 	.word	0x007a1200

080078ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000010 	.word	0x20000010

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007908:	f7ff fff0 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 800790c:	4601      	mov	r1, r0
 800790e:	4b05      	ldr	r3, [pc, #20]	; (8007924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0a9b      	lsrs	r3, r3, #10
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4a03      	ldr	r2, [pc, #12]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800791a:	5cd3      	ldrb	r3, [r2, r3]
 800791c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	08009928 	.word	0x08009928

0800792c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007930:	f7ff ffdc 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007934:	4601      	mov	r1, r0
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0b5b      	lsrs	r3, r3, #13
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4a03      	ldr	r2, [pc, #12]	; (8007950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007942:	5cd3      	ldrb	r3, [r2, r3]
 8007944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40023800 	.word	0x40023800
 8007950:	08009928 	.word	0x08009928

08007954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220f      	movs	r2, #15
 8007962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007964:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0203 	and.w	r2, r3, #3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <HAL_RCC_GetClockConfig+0x60>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 020f 	and.w	r2, r3, #15
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	601a      	str	r2, [r3, #0]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40023c00 	.word	0x40023c00

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d075      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079ec:	4bad      	ldr	r3, [pc, #692]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079f2:	f7fc fd8d 	bl	8004510 <HAL_GetTick>
 80079f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079fa:	f7fc fd89 	bl	8004510 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e18b      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a0c:	4ba6      	ldr	r3, [pc, #664]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d009      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	019a      	lsls	r2, r3, #6
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	071b      	lsls	r3, r3, #28
 8007a30:	499d      	ldr	r1, [pc, #628]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a44:	4b98      	ldr	r3, [pc, #608]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	019a      	lsls	r2, r3, #6
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	061b      	lsls	r3, r3, #24
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	071b      	lsls	r3, r3, #28
 8007a64:	4990      	ldr	r1, [pc, #576]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a6c:	4b8e      	ldr	r3, [pc, #568]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a72:	f023 021f 	bic.w	r2, r3, #31
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	498a      	ldr	r1, [pc, #552]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00d      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	019a      	lsls	r2, r3, #6
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	061b      	lsls	r3, r3, #24
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	071b      	lsls	r3, r3, #28
 8007aa4:	4980      	ldr	r1, [pc, #512]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007aac:	4b7d      	ldr	r3, [pc, #500]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ab2:	f7fc fd2d 	bl	8004510 <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ab8:	e008      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007aba:	f7fc fd29 	bl	8004510 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e12b      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007acc:	4b76      	ldr	r3, [pc, #472]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d105      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d079      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007af0:	4b6e      	ldr	r3, [pc, #440]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af6:	f7fc fd0b 	bl	8004510 <HAL_GetTick>
 8007afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007afe:	f7fc fd07 	bl	8004510 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e109      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b10:	4b65      	ldr	r3, [pc, #404]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1c:	d0ef      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d020      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	0f1b      	lsrs	r3, r3, #28
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	019a      	lsls	r2, r3, #6
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	061b      	lsls	r3, r3, #24
 8007b44:	431a      	orrs	r2, r3
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	071b      	lsls	r3, r3, #28
 8007b4a:	4957      	ldr	r1, [pc, #348]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b52:	4b55      	ldr	r3, [pc, #340]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	4950      	ldr	r1, [pc, #320]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01e      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b78:	4b4b      	ldr	r3, [pc, #300]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	0e1b      	lsrs	r3, r3, #24
 8007b80:	f003 030f 	and.w	r3, r3, #15
 8007b84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	019a      	lsls	r2, r3, #6
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	061b      	lsls	r3, r3, #24
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	071b      	lsls	r3, r3, #28
 8007b98:	4943      	ldr	r1, [pc, #268]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ba0:	4b41      	ldr	r3, [pc, #260]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	493e      	ldr	r1, [pc, #248]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bb6:	4b3d      	ldr	r3, [pc, #244]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bbc:	f7fc fca8 	bl	8004510 <HAL_GetTick>
 8007bc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007bc4:	f7fc fca4 	bl	8004510 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0a6      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bd6:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d1ef      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 808d 	beq.w	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	4b2c      	ldr	r3, [pc, #176]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	4a2b      	ldr	r2, [pc, #172]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c00:	6413      	str	r3, [r2, #64]	; 0x40
 8007c02:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c0e:	4b28      	ldr	r3, [pc, #160]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a27      	ldr	r2, [pc, #156]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c1a:	f7fc fc79 	bl	8004510 <HAL_GetTick>
 8007c1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c20:	e008      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c22:	f7fc fc75 	bl	8004510 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e077      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c34:	4b1e      	ldr	r3, [pc, #120]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0f0      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d039      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d032      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c74:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d11e      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c86:	f7fc fc43 	bl	8004510 <HAL_GetTick>
 8007c8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c8c:	e014      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c8e:	f7fc fc3f 	bl	8004510 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d90b      	bls.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e03f      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007ca4:	42470068 	.word	0x42470068
 8007ca8:	40023800 	.word	0x40023800
 8007cac:	42470070 	.word	0x42470070
 8007cb0:	40007000 	.word	0x40007000
 8007cb4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb8:	4b1c      	ldr	r3, [pc, #112]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0e4      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd0:	d10d      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	4911      	ldr	r1, [pc, #68]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	608b      	str	r3, [r1, #8]
 8007cec:	e005      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4a0e      	ldr	r2, [pc, #56]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cf8:	6093      	str	r3, [r2, #8]
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d06:	4909      	ldr	r1, [pc, #36]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d1e:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007d20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	424711e0 	.word	0x424711e0

08007d34 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e025      	b.n	8007d94 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7f8 fe15 	bl	800098c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f001 fbef 	bl	8009558 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	f001 fc5a 	bl	800963e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d101      	bne.n	8007db8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
 8007db6:	e018      	b.n	8007dea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fcb7 	bl	800973c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d104      	bne.n	8007de0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2205      	movs	r2, #5
 8007dda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007dde:	e003      	b.n	8007de8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d101      	bne.n	8007e0c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e00e      	b.n	8007e2a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fcca 	bl	80097b4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e056      	b.n	8007ef2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 ff5a 	bl	8001d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	ea42 0103 	orr.w	r1, r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	f003 0104 	and.w	r1, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ee0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e01a      	b.n	8007f42 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f22:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7f9 ff3f 	bl	8001da8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x22>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e11e      	b.n	80081aa <HAL_SPI_Transmit+0x260>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f74:	f7fc facc 	bl	8004510 <HAL_GetTick>
 8007f78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d002      	beq.n	8007f90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f8e:	e103      	b.n	8008198 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <HAL_SPI_Transmit+0x52>
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa0:	e0fa      	b.n	8008198 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe8:	d107      	bne.n	8007ffa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d007      	beq.n	8008018 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008020:	d14b      	bne.n	80080ba <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_SPI_Transmit+0xe6>
 800802a:	8afb      	ldrh	r3, [r7, #22]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d13e      	bne.n	80080ae <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	881a      	ldrh	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	1c9a      	adds	r2, r3, #2
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804a:	b29b      	uxth	r3, r3
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008054:	e02b      	b.n	80080ae <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b02      	cmp	r3, #2
 8008062:	d112      	bne.n	800808a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	86da      	strh	r2, [r3, #54]	; 0x36
 8008088:	e011      	b.n	80080ae <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800808a:	f7fc fa41 	bl	8004510 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d803      	bhi.n	80080a2 <HAL_SPI_Transmit+0x158>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d102      	bne.n	80080a8 <HAL_SPI_Transmit+0x15e>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080ac:	e074      	b.n	8008198 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1ce      	bne.n	8008056 <HAL_SPI_Transmit+0x10c>
 80080b8:	e04c      	b.n	8008154 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_SPI_Transmit+0x17e>
 80080c2:	8afb      	ldrh	r3, [r7, #22]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d140      	bne.n	800814a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	330c      	adds	r3, #12
 80080d2:	7812      	ldrb	r2, [r2, #0]
 80080d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080ee:	e02c      	b.n	800814a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d113      	bne.n	8008126 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	330c      	adds	r3, #12
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	86da      	strh	r2, [r3, #54]	; 0x36
 8008124:	e011      	b.n	800814a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008126:	f7fc f9f3 	bl	8004510 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d803      	bhi.n	800813e <HAL_SPI_Transmit+0x1f4>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d102      	bne.n	8008144 <HAL_SPI_Transmit+0x1fa>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008148:	e026      	b.n	8008198 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1cd      	bne.n	80080f0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fbb3 	bl	80088c4 <SPI_EndRxTxTransaction>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e000      	b.n	8008198 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b088      	sub	sp, #32
 80081b6:	af02      	add	r7, sp, #8
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ce:	d112      	bne.n	80081f6 <HAL_SPI_Receive+0x44>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10e      	bne.n	80081f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2204      	movs	r2, #4
 80081dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f8e9 	bl	80083c4 <HAL_SPI_TransmitReceive>
 80081f2:	4603      	mov	r3, r0
 80081f4:	e0e2      	b.n	80083bc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_SPI_Receive+0x52>
 8008200:	2302      	movs	r3, #2
 8008202:	e0db      	b.n	80083bc <HAL_SPI_Receive+0x20a>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800820c:	f7fc f980 	bl	8004510 <HAL_GetTick>
 8008210:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b01      	cmp	r3, #1
 800821c:	d002      	beq.n	8008224 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800821e:	2302      	movs	r3, #2
 8008220:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008222:	e0c2      	b.n	80083aa <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <HAL_SPI_Receive+0x7e>
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008234:	e0b9      	b.n	80083aa <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2204      	movs	r2, #4
 800823a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	88fa      	ldrh	r2, [r7, #6]
 8008254:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827c:	d107      	bne.n	800828e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800828c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d007      	beq.n	80082ac <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d162      	bne.n	800837a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082b4:	e02e      	b.n	8008314 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d115      	bne.n	80082f0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f103 020c 	add.w	r2, r3, #12
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	7812      	ldrb	r2, [r2, #0]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082ee:	e011      	b.n	8008314 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082f0:	f7fc f90e 	bl	8004510 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d803      	bhi.n	8008308 <HAL_SPI_Receive+0x156>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d102      	bne.n	800830e <HAL_SPI_Receive+0x15c>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008312:	e04a      	b.n	80083aa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1cb      	bne.n	80082b6 <HAL_SPI_Receive+0x104>
 800831e:	e031      	b.n	8008384 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b01      	cmp	r3, #1
 800832c:	d113      	bne.n	8008356 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	b292      	uxth	r2, r2
 800833a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	1c9a      	adds	r2, r3, #2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008354:	e011      	b.n	800837a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008356:	f7fc f8db 	bl	8004510 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d803      	bhi.n	800836e <HAL_SPI_Receive+0x1bc>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d102      	bne.n	8008374 <HAL_SPI_Receive+0x1c2>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008378:	e017      	b.n	80083aa <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1cd      	bne.n	8008320 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fa35 	bl	80087f8 <SPI_EndRxTransaction>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2220      	movs	r2, #32
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	75fb      	strb	r3, [r7, #23]
 80083a6:	e000      	b.n	80083aa <HAL_SPI_Receive+0x1f8>
  }

error :
 80083a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	; 0x30
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083d2:	2301      	movs	r3, #1
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d101      	bne.n	80083ea <HAL_SPI_TransmitReceive+0x26>
 80083e6:	2302      	movs	r3, #2
 80083e8:	e18a      	b.n	8008700 <HAL_SPI_TransmitReceive+0x33c>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083f2:	f7fc f88d 	bl	8004510 <HAL_GetTick>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008408:	887b      	ldrh	r3, [r7, #2]
 800840a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800840c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008410:	2b01      	cmp	r3, #1
 8008412:	d00f      	beq.n	8008434 <HAL_SPI_TransmitReceive+0x70>
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800841a:	d107      	bne.n	800842c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <HAL_SPI_TransmitReceive+0x68>
 8008424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008428:	2b04      	cmp	r3, #4
 800842a:	d003      	beq.n	8008434 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800842c:	2302      	movs	r3, #2
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008432:	e15b      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x82>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x82>
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800844c:	e14e      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b04      	cmp	r3, #4
 8008458:	d003      	beq.n	8008462 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2205      	movs	r2, #5
 800845e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	887a      	ldrh	r2, [r7, #2]
 8008472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	887a      	ldrh	r2, [r7, #2]
 8008478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	887a      	ldrh	r2, [r7, #2]
 8008484:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	887a      	ldrh	r2, [r7, #2]
 800848a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d007      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084be:	d178      	bne.n	80085b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_SPI_TransmitReceive+0x10a>
 80084c8:	8b7b      	ldrh	r3, [r7, #26]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d166      	bne.n	800859c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f2:	e053      	b.n	800859c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d11b      	bne.n	800853a <HAL_SPI_TransmitReceive+0x176>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d016      	beq.n	800853a <HAL_SPI_TransmitReceive+0x176>
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b01      	cmp	r3, #1
 8008510:	d113      	bne.n	800853a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	1c9a      	adds	r2, r3, #2
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b01      	cmp	r3, #1
 8008546:	d119      	bne.n	800857c <HAL_SPI_TransmitReceive+0x1b8>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d014      	beq.n	800857c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	b292      	uxth	r2, r2
 800855e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	1c9a      	adds	r2, r3, #2
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008578:	2301      	movs	r3, #1
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800857c:	f7fb ffc8 	bl	8004510 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008588:	429a      	cmp	r2, r3
 800858a:	d807      	bhi.n	800859c <HAL_SPI_TransmitReceive+0x1d8>
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d003      	beq.n	800859c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800859a:	e0a7      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1a6      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x130>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1a1      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x130>
 80085b0:	e07c      	b.n	80086ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_SPI_TransmitReceive+0x1fc>
 80085ba:	8b7b      	ldrh	r3, [r7, #26]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d16b      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	330c      	adds	r3, #12
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085e6:	e057      	b.n	8008698 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d11c      	bne.n	8008630 <HAL_SPI_TransmitReceive+0x26c>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d017      	beq.n	8008630 <HAL_SPI_TransmitReceive+0x26c>
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	2b01      	cmp	r3, #1
 8008604:	d114      	bne.n	8008630 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	330c      	adds	r3, #12
 8008610:	7812      	ldrb	r2, [r2, #0]
 8008612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008622:	b29b      	uxth	r3, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b01      	cmp	r3, #1
 800863c:	d119      	bne.n	8008672 <HAL_SPI_TransmitReceive+0x2ae>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d014      	beq.n	8008672 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800866e:	2301      	movs	r3, #1
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008672:	f7fb ff4d 	bl	8004510 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800867e:	429a      	cmp	r2, r3
 8008680:	d803      	bhi.n	800868a <HAL_SPI_TransmitReceive+0x2c6>
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d102      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x2cc>
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	d103      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008696:	e029      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1a2      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x224>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d19d      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f907 	bl	80088c4 <SPI_EndRxTxTransaction>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d006      	beq.n	80086ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086c8:	e010      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10b      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	e000      	b.n	80086ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008700:	4618      	mov	r0, r3
 8008702:	3730      	adds	r7, #48	; 0x30
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008716:	b2db      	uxtb	r3, r3
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4613      	mov	r3, r2
 8008732:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008734:	e04c      	b.n	80087d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d048      	beq.n	80087d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800873e:	f7fb fee7 	bl	8004510 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d902      	bls.n	8008754 <SPI_WaitFlagStateUntilTimeout+0x30>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d13d      	bne.n	80087d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008762:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800876c:	d111      	bne.n	8008792 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	d004      	beq.n	8008782 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008780:	d107      	bne.n	8008792 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008790:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800879a:	d10f      	bne.n	80087bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e00f      	b.n	80087f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	429a      	cmp	r2, r3
 80087de:	bf0c      	ite	eq
 80087e0:	2301      	moveq	r3, #1
 80087e2:	2300      	movne	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d1a3      	bne.n	8008736 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800880c:	d111      	bne.n	8008832 <SPI_EndRxTransaction+0x3a>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008816:	d004      	beq.n	8008822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008820:	d107      	bne.n	8008832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008830:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800883a:	d12a      	bne.n	8008892 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008844:	d012      	beq.n	800886c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2200      	movs	r2, #0
 800884e:	2180      	movs	r1, #128	; 0x80
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff ff67 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d02d      	beq.n	80088b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e026      	b.n	80088ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2200      	movs	r2, #0
 8008874:	2101      	movs	r1, #1
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff ff54 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01a      	beq.n	80088b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	f043 0220 	orr.w	r2, r3, #32
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e013      	b.n	80088ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2200      	movs	r2, #0
 800889a:	2101      	movs	r1, #1
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff ff41 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d007      	beq.n	80088b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ac:	f043 0220 	orr.w	r2, r3, #32
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e000      	b.n	80088ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088d0:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <SPI_EndRxTxTransaction+0x7c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1b      	ldr	r2, [pc, #108]	; (8008944 <SPI_EndRxTxTransaction+0x80>)
 80088d6:	fba2 2303 	umull	r2, r3, r2, r3
 80088da:	0d5b      	lsrs	r3, r3, #21
 80088dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088e0:	fb02 f303 	mul.w	r3, r2, r3
 80088e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ee:	d112      	bne.n	8008916 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2200      	movs	r2, #0
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff ff12 	bl	8008724 <SPI_WaitFlagStateUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	f043 0220 	orr.w	r2, r3, #32
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e00f      	b.n	8008936 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	3b01      	subs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d0f2      	beq.n	8008916 <SPI_EndRxTxTransaction+0x52>
 8008930:	e000      	b.n	8008934 <SPI_EndRxTxTransaction+0x70>
        break;
 8008932:	bf00      	nop
  }

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000010 	.word	0x20000010
 8008944:	165e9f81 	.word	0x165e9f81

08008948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e01d      	b.n	8008996 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f815 	bl	800899e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f000 f968 	bl	8008c5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0201 	orr.w	r2, r2, #1
 80089c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b06      	cmp	r3, #6
 80089da:	d007      	beq.n	80089ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d122      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d11b      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f06f 0202 	mvn.w	r2, #2
 8008a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8ee 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008a42:	e005      	b.n	8008a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f8e0 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f8f1 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d122      	bne.n	8008aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d11b      	bne.n	8008aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f06f 0204 	mvn.w	r2, #4
 8008a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f8c4 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008a96:	e005      	b.n	8008aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f8b6 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f8c7 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d122      	bne.n	8008afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d11b      	bne.n	8008afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f06f 0208 	mvn.w	r2, #8
 8008ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f89a 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008aea:	e005      	b.n	8008af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f88c 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f89d 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	d122      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d11b      	bne.n	8008b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f06f 0210 	mvn.w	r2, #16
 8008b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2208      	movs	r2, #8
 8008b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f870 	bl	8008c1e <HAL_TIM_IC_CaptureCallback>
 8008b3e:	e005      	b.n	8008b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f862 	bl	8008c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f873 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d10e      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d107      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f06f 0201 	mvn.w	r2, #1
 8008b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7f8 fae7 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b88:	2b80      	cmp	r3, #128	; 0x80
 8008b8a:	d10e      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f903 	bl	8008db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc2:	2b40      	cmp	r3, #64	; 0x40
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f838 	bl	8008c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d10e      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d107      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0220 	mvn.w	r2, #32
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f8cd 	bl	8008d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c02:	bf00      	nop
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
	...

08008c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a40      	ldr	r2, [pc, #256]	; (8008d70 <TIM_Base_SetConfig+0x114>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d013      	beq.n	8008c9c <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7a:	d00f      	beq.n	8008c9c <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3d      	ldr	r2, [pc, #244]	; (8008d74 <TIM_Base_SetConfig+0x118>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00b      	beq.n	8008c9c <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a3c      	ldr	r2, [pc, #240]	; (8008d78 <TIM_Base_SetConfig+0x11c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d007      	beq.n	8008c9c <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a3b      	ldr	r2, [pc, #236]	; (8008d7c <TIM_Base_SetConfig+0x120>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a3a      	ldr	r2, [pc, #232]	; (8008d80 <TIM_Base_SetConfig+0x124>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d108      	bne.n	8008cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a2f      	ldr	r2, [pc, #188]	; (8008d70 <TIM_Base_SetConfig+0x114>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d02b      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbc:	d027      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a2c      	ldr	r2, [pc, #176]	; (8008d74 <TIM_Base_SetConfig+0x118>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d023      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2b      	ldr	r2, [pc, #172]	; (8008d78 <TIM_Base_SetConfig+0x11c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d01f      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <TIM_Base_SetConfig+0x120>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d01b      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a29      	ldr	r2, [pc, #164]	; (8008d80 <TIM_Base_SetConfig+0x124>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d017      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a28      	ldr	r2, [pc, #160]	; (8008d84 <TIM_Base_SetConfig+0x128>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d013      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a27      	ldr	r2, [pc, #156]	; (8008d88 <TIM_Base_SetConfig+0x12c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00f      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a26      	ldr	r2, [pc, #152]	; (8008d8c <TIM_Base_SetConfig+0x130>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a25      	ldr	r2, [pc, #148]	; (8008d90 <TIM_Base_SetConfig+0x134>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d007      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a24      	ldr	r2, [pc, #144]	; (8008d94 <TIM_Base_SetConfig+0x138>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a23      	ldr	r2, [pc, #140]	; (8008d98 <TIM_Base_SetConfig+0x13c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d108      	bne.n	8008d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <TIM_Base_SetConfig+0x114>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_Base_SetConfig+0xf8>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a0c      	ldr	r2, [pc, #48]	; (8008d80 <TIM_Base_SetConfig+0x124>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d103      	bne.n	8008d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	691a      	ldr	r2, [r3, #16]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	615a      	str	r2, [r3, #20]
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40010000 	.word	0x40010000
 8008d74:	40000400 	.word	0x40000400
 8008d78:	40000800 	.word	0x40000800
 8008d7c:	40000c00 	.word	0x40000c00
 8008d80:	40010400 	.word	0x40010400
 8008d84:	40014000 	.word	0x40014000
 8008d88:	40014400 	.word	0x40014400
 8008d8c:	40014800 	.word	0x40014800
 8008d90:	40001800 	.word	0x40001800
 8008d94:	40001c00 	.word	0x40001c00
 8008d98:	40002000 	.word	0x40002000

08008d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e03f      	b.n	8008e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d106      	bne.n	8008df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7f9 f8ee 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2224      	movs	r2, #36	; 0x24
 8008df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f829 	bl	8008e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ea2:	f023 030c 	bic.w	r3, r3, #12
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	430b      	orrs	r3, r1
 8008eae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ece:	f040 818b 	bne.w	80091e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4ac1      	ldr	r2, [pc, #772]	; (80091dc <UART_SetConfig+0x37c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d005      	beq.n	8008ee8 <UART_SetConfig+0x88>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4abf      	ldr	r2, [pc, #764]	; (80091e0 <UART_SetConfig+0x380>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	f040 80bd 	bne.w	8009062 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ee8:	f7fe fd20 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8008eec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	461d      	mov	r5, r3
 8008ef2:	f04f 0600 	mov.w	r6, #0
 8008ef6:	46a8      	mov	r8, r5
 8008ef8:	46b1      	mov	r9, r6
 8008efa:	eb18 0308 	adds.w	r3, r8, r8
 8008efe:	eb49 0409 	adc.w	r4, r9, r9
 8008f02:	4698      	mov	r8, r3
 8008f04:	46a1      	mov	r9, r4
 8008f06:	eb18 0805 	adds.w	r8, r8, r5
 8008f0a:	eb49 0906 	adc.w	r9, r9, r6
 8008f0e:	f04f 0100 	mov.w	r1, #0
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f22:	4688      	mov	r8, r1
 8008f24:	4691      	mov	r9, r2
 8008f26:	eb18 0005 	adds.w	r0, r8, r5
 8008f2a:	eb49 0106 	adc.w	r1, r9, r6
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	461d      	mov	r5, r3
 8008f34:	f04f 0600 	mov.w	r6, #0
 8008f38:	196b      	adds	r3, r5, r5
 8008f3a:	eb46 0406 	adc.w	r4, r6, r6
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4623      	mov	r3, r4
 8008f42:	f7f7 f953 	bl	80001ec <__aeabi_uldivmod>
 8008f46:	4603      	mov	r3, r0
 8008f48:	460c      	mov	r4, r1
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4ba5      	ldr	r3, [pc, #660]	; (80091e4 <UART_SetConfig+0x384>)
 8008f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	461d      	mov	r5, r3
 8008f5c:	f04f 0600 	mov.w	r6, #0
 8008f60:	46a9      	mov	r9, r5
 8008f62:	46b2      	mov	sl, r6
 8008f64:	eb19 0309 	adds.w	r3, r9, r9
 8008f68:	eb4a 040a 	adc.w	r4, sl, sl
 8008f6c:	4699      	mov	r9, r3
 8008f6e:	46a2      	mov	sl, r4
 8008f70:	eb19 0905 	adds.w	r9, r9, r5
 8008f74:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f78:	f04f 0100 	mov.w	r1, #0
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	4692      	mov	sl, r2
 8008f90:	eb19 0005 	adds.w	r0, r9, r5
 8008f94:	eb4a 0106 	adc.w	r1, sl, r6
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	461d      	mov	r5, r3
 8008f9e:	f04f 0600 	mov.w	r6, #0
 8008fa2:	196b      	adds	r3, r5, r5
 8008fa4:	eb46 0406 	adc.w	r4, r6, r6
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4623      	mov	r3, r4
 8008fac:	f7f7 f91e 	bl	80001ec <__aeabi_uldivmod>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4b8b      	ldr	r3, [pc, #556]	; (80091e4 <UART_SetConfig+0x384>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	; 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	3332      	adds	r3, #50	; 0x32
 8008fca:	4a86      	ldr	r2, [pc, #536]	; (80091e4 <UART_SetConfig+0x384>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	005b      	lsls	r3, r3, #1
 8008fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fd8:	4498      	add	r8, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	461d      	mov	r5, r3
 8008fde:	f04f 0600 	mov.w	r6, #0
 8008fe2:	46a9      	mov	r9, r5
 8008fe4:	46b2      	mov	sl, r6
 8008fe6:	eb19 0309 	adds.w	r3, r9, r9
 8008fea:	eb4a 040a 	adc.w	r4, sl, sl
 8008fee:	4699      	mov	r9, r3
 8008ff0:	46a2      	mov	sl, r4
 8008ff2:	eb19 0905 	adds.w	r9, r9, r5
 8008ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ffa:	f04f 0100 	mov.w	r1, #0
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800900a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800900e:	4689      	mov	r9, r1
 8009010:	4692      	mov	sl, r2
 8009012:	eb19 0005 	adds.w	r0, r9, r5
 8009016:	eb4a 0106 	adc.w	r1, sl, r6
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	461d      	mov	r5, r3
 8009020:	f04f 0600 	mov.w	r6, #0
 8009024:	196b      	adds	r3, r5, r5
 8009026:	eb46 0406 	adc.w	r4, r6, r6
 800902a:	461a      	mov	r2, r3
 800902c:	4623      	mov	r3, r4
 800902e:	f7f7 f8dd 	bl	80001ec <__aeabi_uldivmod>
 8009032:	4603      	mov	r3, r0
 8009034:	460c      	mov	r4, r1
 8009036:	461a      	mov	r2, r3
 8009038:	4b6a      	ldr	r3, [pc, #424]	; (80091e4 <UART_SetConfig+0x384>)
 800903a:	fba3 1302 	umull	r1, r3, r3, r2
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	2164      	movs	r1, #100	; 0x64
 8009042:	fb01 f303 	mul.w	r3, r1, r3
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	3332      	adds	r3, #50	; 0x32
 800904c:	4a65      	ldr	r2, [pc, #404]	; (80091e4 <UART_SetConfig+0x384>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	f003 0207 	and.w	r2, r3, #7
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4442      	add	r2, r8
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	e26f      	b.n	8009542 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009062:	f7fe fc4f 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8009066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	461d      	mov	r5, r3
 800906c:	f04f 0600 	mov.w	r6, #0
 8009070:	46a8      	mov	r8, r5
 8009072:	46b1      	mov	r9, r6
 8009074:	eb18 0308 	adds.w	r3, r8, r8
 8009078:	eb49 0409 	adc.w	r4, r9, r9
 800907c:	4698      	mov	r8, r3
 800907e:	46a1      	mov	r9, r4
 8009080:	eb18 0805 	adds.w	r8, r8, r5
 8009084:	eb49 0906 	adc.w	r9, r9, r6
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800909c:	4688      	mov	r8, r1
 800909e:	4691      	mov	r9, r2
 80090a0:	eb18 0005 	adds.w	r0, r8, r5
 80090a4:	eb49 0106 	adc.w	r1, r9, r6
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	461d      	mov	r5, r3
 80090ae:	f04f 0600 	mov.w	r6, #0
 80090b2:	196b      	adds	r3, r5, r5
 80090b4:	eb46 0406 	adc.w	r4, r6, r6
 80090b8:	461a      	mov	r2, r3
 80090ba:	4623      	mov	r3, r4
 80090bc:	f7f7 f896 	bl	80001ec <__aeabi_uldivmod>
 80090c0:	4603      	mov	r3, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b47      	ldr	r3, [pc, #284]	; (80091e4 <UART_SetConfig+0x384>)
 80090c8:	fba3 2302 	umull	r2, r3, r3, r2
 80090cc:	095b      	lsrs	r3, r3, #5
 80090ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	461d      	mov	r5, r3
 80090d6:	f04f 0600 	mov.w	r6, #0
 80090da:	46a9      	mov	r9, r5
 80090dc:	46b2      	mov	sl, r6
 80090de:	eb19 0309 	adds.w	r3, r9, r9
 80090e2:	eb4a 040a 	adc.w	r4, sl, sl
 80090e6:	4699      	mov	r9, r3
 80090e8:	46a2      	mov	sl, r4
 80090ea:	eb19 0905 	adds.w	r9, r9, r5
 80090ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80090f2:	f04f 0100 	mov.w	r1, #0
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009106:	4689      	mov	r9, r1
 8009108:	4692      	mov	sl, r2
 800910a:	eb19 0005 	adds.w	r0, r9, r5
 800910e:	eb4a 0106 	adc.w	r1, sl, r6
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	461d      	mov	r5, r3
 8009118:	f04f 0600 	mov.w	r6, #0
 800911c:	196b      	adds	r3, r5, r5
 800911e:	eb46 0406 	adc.w	r4, r6, r6
 8009122:	461a      	mov	r2, r3
 8009124:	4623      	mov	r3, r4
 8009126:	f7f7 f861 	bl	80001ec <__aeabi_uldivmod>
 800912a:	4603      	mov	r3, r0
 800912c:	460c      	mov	r4, r1
 800912e:	461a      	mov	r2, r3
 8009130:	4b2c      	ldr	r3, [pc, #176]	; (80091e4 <UART_SetConfig+0x384>)
 8009132:	fba3 1302 	umull	r1, r3, r3, r2
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	2164      	movs	r1, #100	; 0x64
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	3332      	adds	r3, #50	; 0x32
 8009144:	4a27      	ldr	r2, [pc, #156]	; (80091e4 <UART_SetConfig+0x384>)
 8009146:	fba2 2303 	umull	r2, r3, r2, r3
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009152:	4498      	add	r8, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	461d      	mov	r5, r3
 8009158:	f04f 0600 	mov.w	r6, #0
 800915c:	46a9      	mov	r9, r5
 800915e:	46b2      	mov	sl, r6
 8009160:	eb19 0309 	adds.w	r3, r9, r9
 8009164:	eb4a 040a 	adc.w	r4, sl, sl
 8009168:	4699      	mov	r9, r3
 800916a:	46a2      	mov	sl, r4
 800916c:	eb19 0905 	adds.w	r9, r9, r5
 8009170:	eb4a 0a06 	adc.w	sl, sl, r6
 8009174:	f04f 0100 	mov.w	r1, #0
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009188:	4689      	mov	r9, r1
 800918a:	4692      	mov	sl, r2
 800918c:	eb19 0005 	adds.w	r0, r9, r5
 8009190:	eb4a 0106 	adc.w	r1, sl, r6
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	461d      	mov	r5, r3
 800919a:	f04f 0600 	mov.w	r6, #0
 800919e:	196b      	adds	r3, r5, r5
 80091a0:	eb46 0406 	adc.w	r4, r6, r6
 80091a4:	461a      	mov	r2, r3
 80091a6:	4623      	mov	r3, r4
 80091a8:	f7f7 f820 	bl	80001ec <__aeabi_uldivmod>
 80091ac:	4603      	mov	r3, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	461a      	mov	r2, r3
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <UART_SetConfig+0x384>)
 80091b4:	fba3 1302 	umull	r1, r3, r3, r2
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	2164      	movs	r1, #100	; 0x64
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	3332      	adds	r3, #50	; 0x32
 80091c6:	4a07      	ldr	r2, [pc, #28]	; (80091e4 <UART_SetConfig+0x384>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	f003 0207 	and.w	r2, r3, #7
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4442      	add	r2, r8
 80091d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80091da:	e1b2      	b.n	8009542 <UART_SetConfig+0x6e2>
 80091dc:	40011000 	.word	0x40011000
 80091e0:	40011400 	.word	0x40011400
 80091e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4ad7      	ldr	r2, [pc, #860]	; (800954c <UART_SetConfig+0x6ec>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d005      	beq.n	80091fe <UART_SetConfig+0x39e>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4ad6      	ldr	r2, [pc, #856]	; (8009550 <UART_SetConfig+0x6f0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	f040 80d1 	bne.w	80093a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091fe:	f7fe fb95 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009202:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	469a      	mov	sl, r3
 8009208:	f04f 0b00 	mov.w	fp, #0
 800920c:	46d0      	mov	r8, sl
 800920e:	46d9      	mov	r9, fp
 8009210:	eb18 0308 	adds.w	r3, r8, r8
 8009214:	eb49 0409 	adc.w	r4, r9, r9
 8009218:	4698      	mov	r8, r3
 800921a:	46a1      	mov	r9, r4
 800921c:	eb18 080a 	adds.w	r8, r8, sl
 8009220:	eb49 090b 	adc.w	r9, r9, fp
 8009224:	f04f 0100 	mov.w	r1, #0
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009230:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009234:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009238:	4688      	mov	r8, r1
 800923a:	4691      	mov	r9, r2
 800923c:	eb1a 0508 	adds.w	r5, sl, r8
 8009240:	eb4b 0609 	adc.w	r6, fp, r9
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	f04f 0400 	mov.w	r4, #0
 8009256:	0094      	lsls	r4, r2, #2
 8009258:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800925c:	008b      	lsls	r3, r1, #2
 800925e:	461a      	mov	r2, r3
 8009260:	4623      	mov	r3, r4
 8009262:	4628      	mov	r0, r5
 8009264:	4631      	mov	r1, r6
 8009266:	f7f6 ffc1 	bl	80001ec <__aeabi_uldivmod>
 800926a:	4603      	mov	r3, r0
 800926c:	460c      	mov	r4, r1
 800926e:	461a      	mov	r2, r3
 8009270:	4bb8      	ldr	r3, [pc, #736]	; (8009554 <UART_SetConfig+0x6f4>)
 8009272:	fba3 2302 	umull	r2, r3, r3, r2
 8009276:	095b      	lsrs	r3, r3, #5
 8009278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	469b      	mov	fp, r3
 8009280:	f04f 0c00 	mov.w	ip, #0
 8009284:	46d9      	mov	r9, fp
 8009286:	46e2      	mov	sl, ip
 8009288:	eb19 0309 	adds.w	r3, r9, r9
 800928c:	eb4a 040a 	adc.w	r4, sl, sl
 8009290:	4699      	mov	r9, r3
 8009292:	46a2      	mov	sl, r4
 8009294:	eb19 090b 	adds.w	r9, r9, fp
 8009298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800929c:	f04f 0100 	mov.w	r1, #0
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092b0:	4689      	mov	r9, r1
 80092b2:	4692      	mov	sl, r2
 80092b4:	eb1b 0509 	adds.w	r5, fp, r9
 80092b8:	eb4c 060a 	adc.w	r6, ip, sl
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	f04f 0300 	mov.w	r3, #0
 80092ca:	f04f 0400 	mov.w	r4, #0
 80092ce:	0094      	lsls	r4, r2, #2
 80092d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092d4:	008b      	lsls	r3, r1, #2
 80092d6:	461a      	mov	r2, r3
 80092d8:	4623      	mov	r3, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	4631      	mov	r1, r6
 80092de:	f7f6 ff85 	bl	80001ec <__aeabi_uldivmod>
 80092e2:	4603      	mov	r3, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	461a      	mov	r2, r3
 80092e8:	4b9a      	ldr	r3, [pc, #616]	; (8009554 <UART_SetConfig+0x6f4>)
 80092ea:	fba3 1302 	umull	r1, r3, r3, r2
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	2164      	movs	r1, #100	; 0x64
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	3332      	adds	r3, #50	; 0x32
 80092fc:	4a95      	ldr	r2, [pc, #596]	; (8009554 <UART_SetConfig+0x6f4>)
 80092fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009308:	4498      	add	r8, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	469b      	mov	fp, r3
 800930e:	f04f 0c00 	mov.w	ip, #0
 8009312:	46d9      	mov	r9, fp
 8009314:	46e2      	mov	sl, ip
 8009316:	eb19 0309 	adds.w	r3, r9, r9
 800931a:	eb4a 040a 	adc.w	r4, sl, sl
 800931e:	4699      	mov	r9, r3
 8009320:	46a2      	mov	sl, r4
 8009322:	eb19 090b 	adds.w	r9, r9, fp
 8009326:	eb4a 0a0c 	adc.w	sl, sl, ip
 800932a:	f04f 0100 	mov.w	r1, #0
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800933a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800933e:	4689      	mov	r9, r1
 8009340:	4692      	mov	sl, r2
 8009342:	eb1b 0509 	adds.w	r5, fp, r9
 8009346:	eb4c 060a 	adc.w	r6, ip, sl
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4619      	mov	r1, r3
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	f04f 0400 	mov.w	r4, #0
 800935c:	0094      	lsls	r4, r2, #2
 800935e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009362:	008b      	lsls	r3, r1, #2
 8009364:	461a      	mov	r2, r3
 8009366:	4623      	mov	r3, r4
 8009368:	4628      	mov	r0, r5
 800936a:	4631      	mov	r1, r6
 800936c:	f7f6 ff3e 	bl	80001ec <__aeabi_uldivmod>
 8009370:	4603      	mov	r3, r0
 8009372:	460c      	mov	r4, r1
 8009374:	461a      	mov	r2, r3
 8009376:	4b77      	ldr	r3, [pc, #476]	; (8009554 <UART_SetConfig+0x6f4>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	3332      	adds	r3, #50	; 0x32
 800938a:	4a72      	ldr	r2, [pc, #456]	; (8009554 <UART_SetConfig+0x6f4>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f003 020f 	and.w	r2, r3, #15
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4442      	add	r2, r8
 800939c:	609a      	str	r2, [r3, #8]
 800939e:	e0d0      	b.n	8009542 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80093a0:	f7fe fab0 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 80093a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	469a      	mov	sl, r3
 80093aa:	f04f 0b00 	mov.w	fp, #0
 80093ae:	46d0      	mov	r8, sl
 80093b0:	46d9      	mov	r9, fp
 80093b2:	eb18 0308 	adds.w	r3, r8, r8
 80093b6:	eb49 0409 	adc.w	r4, r9, r9
 80093ba:	4698      	mov	r8, r3
 80093bc:	46a1      	mov	r9, r4
 80093be:	eb18 080a 	adds.w	r8, r8, sl
 80093c2:	eb49 090b 	adc.w	r9, r9, fp
 80093c6:	f04f 0100 	mov.w	r1, #0
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093da:	4688      	mov	r8, r1
 80093dc:	4691      	mov	r9, r2
 80093de:	eb1a 0508 	adds.w	r5, sl, r8
 80093e2:	eb4b 0609 	adc.w	r6, fp, r9
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	4619      	mov	r1, r3
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	f04f 0400 	mov.w	r4, #0
 80093f8:	0094      	lsls	r4, r2, #2
 80093fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093fe:	008b      	lsls	r3, r1, #2
 8009400:	461a      	mov	r2, r3
 8009402:	4623      	mov	r3, r4
 8009404:	4628      	mov	r0, r5
 8009406:	4631      	mov	r1, r6
 8009408:	f7f6 fef0 	bl	80001ec <__aeabi_uldivmod>
 800940c:	4603      	mov	r3, r0
 800940e:	460c      	mov	r4, r1
 8009410:	461a      	mov	r2, r3
 8009412:	4b50      	ldr	r3, [pc, #320]	; (8009554 <UART_SetConfig+0x6f4>)
 8009414:	fba3 2302 	umull	r2, r3, r3, r2
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	469b      	mov	fp, r3
 8009422:	f04f 0c00 	mov.w	ip, #0
 8009426:	46d9      	mov	r9, fp
 8009428:	46e2      	mov	sl, ip
 800942a:	eb19 0309 	adds.w	r3, r9, r9
 800942e:	eb4a 040a 	adc.w	r4, sl, sl
 8009432:	4699      	mov	r9, r3
 8009434:	46a2      	mov	sl, r4
 8009436:	eb19 090b 	adds.w	r9, r9, fp
 800943a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800943e:	f04f 0100 	mov.w	r1, #0
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800944a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800944e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009452:	4689      	mov	r9, r1
 8009454:	4692      	mov	sl, r2
 8009456:	eb1b 0509 	adds.w	r5, fp, r9
 800945a:	eb4c 060a 	adc.w	r6, ip, sl
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4619      	mov	r1, r3
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	f04f 0400 	mov.w	r4, #0
 8009470:	0094      	lsls	r4, r2, #2
 8009472:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009476:	008b      	lsls	r3, r1, #2
 8009478:	461a      	mov	r2, r3
 800947a:	4623      	mov	r3, r4
 800947c:	4628      	mov	r0, r5
 800947e:	4631      	mov	r1, r6
 8009480:	f7f6 feb4 	bl	80001ec <__aeabi_uldivmod>
 8009484:	4603      	mov	r3, r0
 8009486:	460c      	mov	r4, r1
 8009488:	461a      	mov	r2, r3
 800948a:	4b32      	ldr	r3, [pc, #200]	; (8009554 <UART_SetConfig+0x6f4>)
 800948c:	fba3 1302 	umull	r1, r3, r3, r2
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	2164      	movs	r1, #100	; 0x64
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	3332      	adds	r3, #50	; 0x32
 800949e:	4a2d      	ldr	r2, [pc, #180]	; (8009554 <UART_SetConfig+0x6f4>)
 80094a0:	fba2 2303 	umull	r2, r3, r2, r3
 80094a4:	095b      	lsrs	r3, r3, #5
 80094a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094aa:	4498      	add	r8, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	469b      	mov	fp, r3
 80094b0:	f04f 0c00 	mov.w	ip, #0
 80094b4:	46d9      	mov	r9, fp
 80094b6:	46e2      	mov	sl, ip
 80094b8:	eb19 0309 	adds.w	r3, r9, r9
 80094bc:	eb4a 040a 	adc.w	r4, sl, sl
 80094c0:	4699      	mov	r9, r3
 80094c2:	46a2      	mov	sl, r4
 80094c4:	eb19 090b 	adds.w	r9, r9, fp
 80094c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094cc:	f04f 0100 	mov.w	r1, #0
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094e0:	4689      	mov	r9, r1
 80094e2:	4692      	mov	sl, r2
 80094e4:	eb1b 0509 	adds.w	r5, fp, r9
 80094e8:	eb4c 060a 	adc.w	r6, ip, sl
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4619      	mov	r1, r3
 80094f2:	f04f 0200 	mov.w	r2, #0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f04f 0400 	mov.w	r4, #0
 80094fe:	0094      	lsls	r4, r2, #2
 8009500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009504:	008b      	lsls	r3, r1, #2
 8009506:	461a      	mov	r2, r3
 8009508:	4623      	mov	r3, r4
 800950a:	4628      	mov	r0, r5
 800950c:	4631      	mov	r1, r6
 800950e:	f7f6 fe6d 	bl	80001ec <__aeabi_uldivmod>
 8009512:	4603      	mov	r3, r0
 8009514:	460c      	mov	r4, r1
 8009516:	461a      	mov	r2, r3
 8009518:	4b0e      	ldr	r3, [pc, #56]	; (8009554 <UART_SetConfig+0x6f4>)
 800951a:	fba3 1302 	umull	r1, r3, r3, r2
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	2164      	movs	r1, #100	; 0x64
 8009522:	fb01 f303 	mul.w	r3, r1, r3
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	3332      	adds	r3, #50	; 0x32
 800952c:	4a09      	ldr	r2, [pc, #36]	; (8009554 <UART_SetConfig+0x6f4>)
 800952e:	fba2 2303 	umull	r2, r3, r2, r3
 8009532:	095b      	lsrs	r3, r3, #5
 8009534:	f003 020f 	and.w	r2, r3, #15
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4442      	add	r2, r8
 800953e:	609a      	str	r2, [r3, #8]
}
 8009540:	e7ff      	b.n	8009542 <UART_SetConfig+0x6e2>
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	40011000 	.word	0x40011000
 8009550:	40011400 	.word	0x40011400
 8009554:	51eb851f 	.word	0x51eb851f

08009558 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d029      	beq.n	80095c6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800957e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009582:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800958c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009592:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009598:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800959e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80095a4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80095aa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80095b0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80095b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	e034      	b.n	8009630 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095d2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095dc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80095e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80095f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009604:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800960a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009610:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009616:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800961c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4313      	orrs	r3, r2
 8009622:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800963e:	b480      	push	{r7}
 8009640:	b087      	sub	sp, #28
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d02e      	beq.n	80096b6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009664:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	3b01      	subs	r3, #1
 8009672:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009674:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	3b01      	subs	r3, #1
 800967c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800967e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	3b01      	subs	r3, #1
 8009686:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009688:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	3b01      	subs	r3, #1
 8009690:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009692:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	3b01      	subs	r3, #1
 800969a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800969c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80096a6:	4313      	orrs	r3, r2
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	e03b      	b.n	800972e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80096c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096c6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80096d8:	4313      	orrs	r3, r2
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096ec:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096fc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	3b01      	subs	r3, #1
 8009704:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009706:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	3b01      	subs	r3, #1
 800970e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009710:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	3b01      	subs	r3, #1
 8009718:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800971a:	4313      	orrs	r3, r2
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009758:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009762:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009774:	f7fa fecc 	bl	8004510 <HAL_GetTick>
 8009778:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800977a:	e010      	b.n	800979e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d00c      	beq.n	800979e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <FMC_SDRAM_SendCommand+0x5e>
 800978a:	f7fa fec1 	bl	8004510 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	429a      	cmp	r2, r3
 8009798:	d201      	bcs.n	800979e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e006      	b.n	80097ac <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d0e8      	beq.n	800977c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695a      	ldr	r2, [r3, #20]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <__libc_init_array>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	4e0d      	ldr	r6, [pc, #52]	; (8009814 <__libc_init_array+0x38>)
 80097e0:	4c0d      	ldr	r4, [pc, #52]	; (8009818 <__libc_init_array+0x3c>)
 80097e2:	1ba4      	subs	r4, r4, r6
 80097e4:	10a4      	asrs	r4, r4, #2
 80097e6:	2500      	movs	r5, #0
 80097e8:	42a5      	cmp	r5, r4
 80097ea:	d109      	bne.n	8009800 <__libc_init_array+0x24>
 80097ec:	4e0b      	ldr	r6, [pc, #44]	; (800981c <__libc_init_array+0x40>)
 80097ee:	4c0c      	ldr	r4, [pc, #48]	; (8009820 <__libc_init_array+0x44>)
 80097f0:	f000 f820 	bl	8009834 <_init>
 80097f4:	1ba4      	subs	r4, r4, r6
 80097f6:	10a4      	asrs	r4, r4, #2
 80097f8:	2500      	movs	r5, #0
 80097fa:	42a5      	cmp	r5, r4
 80097fc:	d105      	bne.n	800980a <__libc_init_array+0x2e>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009804:	4798      	blx	r3
 8009806:	3501      	adds	r5, #1
 8009808:	e7ee      	b.n	80097e8 <__libc_init_array+0xc>
 800980a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800980e:	4798      	blx	r3
 8009810:	3501      	adds	r5, #1
 8009812:	e7f2      	b.n	80097fa <__libc_init_array+0x1e>
 8009814:	0800c44c 	.word	0x0800c44c
 8009818:	0800c44c 	.word	0x0800c44c
 800981c:	0800c44c 	.word	0x0800c44c
 8009820:	0800c450 	.word	0x0800c450

08009824 <memset>:
 8009824:	4402      	add	r2, r0
 8009826:	4603      	mov	r3, r0
 8009828:	4293      	cmp	r3, r2
 800982a:	d100      	bne.n	800982e <memset+0xa>
 800982c:	4770      	bx	lr
 800982e:	f803 1b01 	strb.w	r1, [r3], #1
 8009832:	e7f9      	b.n	8009828 <memset+0x4>

08009834 <_init>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	bf00      	nop
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

08009840 <_fini>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr
