
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf8  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c31c  0800c31c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c31c  0800c31c  0001c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c324  0800c324  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c324  0800c324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800c32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200000a0  0800c3cc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800c3cc  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205b3  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b7f  00000000  00000000  00040683  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de8  00000000  00000000  00045208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b60  00000000  00000000  00046ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028991  00000000  00000000  00048b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c147  00000000  00000000  000714e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4546  00000000  00000000  0008d628  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a8c  00000000  00000000  00171bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000a0 	.word	0x200000a0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800970c 	.word	0x0800970c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000a4 	.word	0x200000a4
 80001e8:	0800970c 	.word	0x0800970c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <showChooseCanvaInterface>:
#include "chooseViewStructure.h"
#include "chooseCanvaInterface.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void showChooseCanvaInterface(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f002 fecc 	bl	8003290 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 80004f8:	481c      	ldr	r0, [pc, #112]	; (800056c <showChooseCanvaInterface+0x80>)
 80004fa:	f002 fdd7 	bl	80030ac <BSP_LCD_SetTextColor>

	BSP_LCD_FillRect(30, 45, 180, 70);
 80004fe:	2346      	movs	r3, #70	; 0x46
 8000500:	22b4      	movs	r2, #180	; 0xb4
 8000502:	212d      	movs	r1, #45	; 0x2d
 8000504:	201e      	movs	r0, #30
 8000506:	f003 f98b 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 125, 180, 70);
 800050a:	2346      	movs	r3, #70	; 0x46
 800050c:	22b4      	movs	r2, #180	; 0xb4
 800050e:	217d      	movs	r1, #125	; 0x7d
 8000510:	201e      	movs	r0, #30
 8000512:	f003 f985 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 205, 180, 70);
 8000516:	2346      	movs	r3, #70	; 0x46
 8000518:	22b4      	movs	r2, #180	; 0xb4
 800051a:	21cd      	movs	r1, #205	; 0xcd
 800051c:	201e      	movs	r0, #30
 800051e:	f003 f97f 	bl	8003820 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000522:	f04f 30ff 	mov.w	r0, #4294967295
 8000526:	f002 fdc1 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <showChooseCanvaInterface+0x84>)
 800052c:	f002 fdf0 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000530:	480e      	ldr	r0, [pc, #56]	; (800056c <showChooseCanvaInterface+0x80>)
 8000532:	f002 fdd3 	bl	80030dc <BSP_LCD_SetBackColor>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"CANVAS #1", CENTER_MODE);
 8000536:	2301      	movs	r3, #1
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <showChooseCanvaInterface+0x88>)
 800053a:	2144      	movs	r1, #68	; 0x44
 800053c:	2000      	movs	r0, #0
 800053e:	f002 ff13 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,148, (uint8_t*)"CANVAS #2", CENTER_MODE);
 8000542:	2301      	movs	r3, #1
 8000544:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <showChooseCanvaInterface+0x8c>)
 8000546:	2194      	movs	r1, #148	; 0x94
 8000548:	2000      	movs	r0, #0
 800054a:	f002 ff0d 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"INFO", CENTER_MODE);
 800054e:	2301      	movs	r3, #1
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <showChooseCanvaInterface+0x90>)
 8000552:	21e4      	movs	r1, #228	; 0xe4
 8000554:	2000      	movs	r0, #0
 8000556:	f002 ff07 	bl	8003368 <BSP_LCD_DisplayStringAt>
	activeView = ChooseScreen;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <showChooseCanvaInterface+0x94>)
 800055c:	2203      	movs	r2, #3
 800055e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f003 ff4c 	bl	8004400 <HAL_Delay>


}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	ff800080 	.word	0xff800080
 8000570:	2000007c 	.word	0x2000007c
 8000574:	08009724 	.word	0x08009724
 8000578:	08009730 	.word	0x08009730
 800057c:	0800973c 	.word	0x0800973c
 8000580:	20000284 	.word	0x20000284

08000584 <choose>:

void choose(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	while(activeView == ChooseScreen)
 8000588:	e032      	b.n	80005f0 <choose+0x6c>
	{
		BSP_TS_GetState(&tsChooseCanva);
 800058a:	481c      	ldr	r0, [pc, #112]	; (80005fc <choose+0x78>)
 800058c:	f003 fe44 	bl	8004218 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 45 && tsChooseCanva.Y < 115)
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <choose+0x78>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00b      	beq.n	80005b0 <choose+0x2c>
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <choose+0x78>)
 800059a:	889b      	ldrh	r3, [r3, #4]
 800059c:	2b2d      	cmp	r3, #45	; 0x2d
 800059e:	d907      	bls.n	80005b0 <choose+0x2c>
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <choose+0x78>)
 80005a2:	889b      	ldrh	r3, [r3, #4]
 80005a4:	2b72      	cmp	r3, #114	; 0x72
 80005a6:	d803      	bhi.n	80005b0 <choose+0x2c>
		{
			activeView = Canvas1;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <choose+0x7c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e01f      	b.n	80005f0 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 125 && tsChooseCanva.Y < 195)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <choose+0x78>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00b      	beq.n	80005d0 <choose+0x4c>
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <choose+0x78>)
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	2b7d      	cmp	r3, #125	; 0x7d
 80005be:	d907      	bls.n	80005d0 <choose+0x4c>
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <choose+0x78>)
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	2bc2      	cmp	r3, #194	; 0xc2
 80005c6:	d803      	bhi.n	80005d0 <choose+0x4c>
		{
			activeView = Canvas2;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <choose+0x7c>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e00f      	b.n	80005f0 <choose+0x6c>
		}
		else if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <choose+0x78>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <choose+0x6c>
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <choose+0x78>)
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	2bcd      	cmp	r3, #205	; 0xcd
 80005de:	d907      	bls.n	80005f0 <choose+0x6c>
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <choose+0x78>)
 80005e2:	889b      	ldrh	r3, [r3, #4]
 80005e4:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80005e8:	d802      	bhi.n	80005f0 <choose+0x6c>
		{
			activeView = Info;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <choose+0x7c>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	701a      	strb	r2, [r3, #0]
	while(activeView == ChooseScreen)
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <choose+0x7c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d0c8      	beq.n	800058a <choose+0x6>
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000288 	.word	0x20000288
 8000600:	20000284 	.word	0x20000284

08000604 <showInfoScreen>:

void showInfoScreen(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f002 fe40 	bl	8003290 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000610:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000614:	f002 fd4a 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f002 fd5e 	bl	80030dc <BSP_LCD_SetBackColor>


	BSP_LCD_SetFont(&Font16);
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <showInfoScreen+0xc8>)
 8000622:	f002 fd75 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,50, (uint8_t*)"App:",CENTER_MODE);
 8000626:	2301      	movs	r3, #1
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <showInfoScreen+0xcc>)
 800062a:	2132      	movs	r1, #50	; 0x32
 800062c:	2000      	movs	r0, #0
 800062e:	f002 fe9b 	bl	8003368 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 8000632:	4828      	ldr	r0, [pc, #160]	; (80006d4 <showInfoScreen+0xd0>)
 8000634:	f002 fd6c 	bl	8003110 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,68, (uint8_t*)"App has autosave mode. When you",CENTER_MODE);
 8000638:	2301      	movs	r3, #1
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <showInfoScreen+0xd4>)
 800063c:	2144      	movs	r1, #68	; 0x44
 800063e:	2000      	movs	r0, #0
 8000640:	f002 fe92 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,82, (uint8_t*)"leave canvas and return,",CENTER_MODE);
 8000644:	2301      	movs	r3, #1
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <showInfoScreen+0xd8>)
 8000648:	2152      	movs	r1, #82	; 0x52
 800064a:	2000      	movs	r0, #0
 800064c:	f002 fe8c 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,96, (uint8_t*)"you will see your last drawing.",CENTER_MODE);
 8000650:	2301      	movs	r3, #1
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <showInfoScreen+0xdc>)
 8000654:	2160      	movs	r1, #96	; 0x60
 8000656:	2000      	movs	r0, #0
 8000658:	f002 fe86 	bl	8003368 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);
 800065c:	481b      	ldr	r0, [pc, #108]	; (80006cc <showInfoScreen+0xc8>)
 800065e:	f002 fd57 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,125, (uint8_t*)"Authors:",CENTER_MODE);
 8000662:	2301      	movs	r3, #1
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <showInfoScreen+0xe0>)
 8000666:	217d      	movs	r1, #125	; 0x7d
 8000668:	2000      	movs	r0, #0
 800066a:	f002 fe7d 	bl	8003368 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font12);
 800066e:	4819      	ldr	r0, [pc, #100]	; (80006d4 <showInfoScreen+0xd0>)
 8000670:	f002 fd4e 	bl	8003110 <BSP_LCD_SetFont>

	BSP_LCD_DisplayStringAt(0,142, (uint8_t*)"Anna Bernas",CENTER_MODE);
 8000674:	2301      	movs	r3, #1
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <showInfoScreen+0xe4>)
 8000678:	218e      	movs	r1, #142	; 0x8e
 800067a:	2000      	movs	r0, #0
 800067c:	f002 fe74 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0,160, (uint8_t*)"Emilia Kalinska",CENTER_MODE);
 8000680:	2301      	movs	r3, #1
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <showInfoScreen+0xe8>)
 8000684:	21a0      	movs	r1, #160	; 0xa0
 8000686:	2000      	movs	r0, #0
 8000688:	f002 fe6e 	bl	8003368 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 800068c:	4818      	ldr	r0, [pc, #96]	; (80006f0 <showInfoScreen+0xec>)
 800068e:	f002 fd0d 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKMAGENTA);
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <showInfoScreen+0xec>)
 8000694:	f002 fd22 	bl	80030dc <BSP_LCD_SetBackColor>
	BSP_LCD_FillRect(30, 205, 180, 70);
 8000698:	2346      	movs	r3, #70	; 0x46
 800069a:	22b4      	movs	r2, #180	; 0xb4
 800069c:	21cd      	movs	r1, #205	; 0xcd
 800069e:	201e      	movs	r0, #30
 80006a0:	f003 f8be 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f002 fd00 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <showInfoScreen+0xf0>)
 80006ae:	f002 fd2f 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,228, (uint8_t*)"BACK", CENTER_MODE);
 80006b2:	2301      	movs	r3, #1
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <showInfoScreen+0xf4>)
 80006b6:	21e4      	movs	r1, #228	; 0xe4
 80006b8:	2000      	movs	r0, #0
 80006ba:	f002 fe55 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006be:	f04f 30ff 	mov.w	r0, #4294967295
 80006c2:	f002 fd0b 	bl	80030dc <BSP_LCD_SetBackColor>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	08009744 	.word	0x08009744
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	0800974c 	.word	0x0800974c
 80006dc:	0800976c 	.word	0x0800976c
 80006e0:	08009788 	.word	0x08009788
 80006e4:	080097a8 	.word	0x080097a8
 80006e8:	080097b4 	.word	0x080097b4
 80006ec:	080097c0 	.word	0x080097c0
 80006f0:	ff800080 	.word	0xff800080
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	080097d0 	.word	0x080097d0

080006fc <serviceInfoScreen>:

void serviceInfoScreen(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	showInfoScreen();
 8000700:	f7ff ff80 	bl	8000604 <showInfoScreen>
	HAL_Delay(500);
 8000704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000708:	f003 fe7a 	bl	8004400 <HAL_Delay>
	while(activeView == Info)
 800070c:	e012      	b.n	8000734 <serviceInfoScreen+0x38>
	{
		BSP_TS_GetState(&tsChooseCanva);
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <serviceInfoScreen+0x44>)
 8000710:	f003 fd82 	bl	8004218 <BSP_TS_GetState>
		if(tsChooseCanva.TouchDetected && tsChooseCanva.Y > 205 && tsChooseCanva.Y < 275)
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <serviceInfoScreen+0x44>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00b      	beq.n	8000734 <serviceInfoScreen+0x38>
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <serviceInfoScreen+0x44>)
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	2bcd      	cmp	r3, #205	; 0xcd
 8000722:	d907      	bls.n	8000734 <serviceInfoScreen+0x38>
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <serviceInfoScreen+0x44>)
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800072c:	d802      	bhi.n	8000734 <serviceInfoScreen+0x38>
		{
			activeView = ChooseScreen;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <serviceInfoScreen+0x48>)
 8000730:	2203      	movs	r2, #3
 8000732:	701a      	strb	r2, [r3, #0]
	while(activeView == Info)
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <serviceInfoScreen+0x48>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b02      	cmp	r3, #2
 800073a:	d0e8      	beq.n	800070e <serviceInfoScreen+0x12>
		}
	}
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000288 	.word	0x20000288
 8000744:	20000284 	.word	0x20000284

08000748 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_DMA2D_Init+0x34>)
 800074e:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <MX_DMA2D_Init+0x38>)
 8000750:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_DMA2D_Init+0x34>)
 8000754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000758:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_DMA2D_Init+0x34>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_DMA2D_Init+0x34>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_DMA2D_Init+0x34>)
 8000768:	f004 f90a 	bl	8004980 <HAL_DMA2D_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000772:	f000 fcfd 	bl	8001170 <Error_Handler>
  }

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000290 	.word	0x20000290
 8000780:	4002b000 	.word	0x4002b000

08000784 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_DMA2D_MspInit+0x3c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d10d      	bne.n	80007b2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 80007a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_DMA2D_MspInit+0x40>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	4002b000 	.word	0x4002b000
 80007c4:	40023800 	.word	0x40023800

080007c8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_FMC_Init+0x98>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MX_FMC_Init+0x9c>)
 80007e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_FMC_Init+0x98>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_FMC_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_FMC_Init+0x98>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_FMC_Init+0x98>)
 80007fa:	2210      	movs	r2, #16
 80007fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_FMC_Init+0x98>)
 8000800:	2240      	movs	r2, #64	; 0x40
 8000802:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_FMC_Init+0x98>)
 8000806:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800080a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_FMC_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_FMC_Init+0x98>)
 8000814:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000818:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_FMC_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_FMC_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800082a:	2307      	movs	r3, #7
 800082c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000836:	2303      	movs	r3, #3
 8000838:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_FMC_Init+0x98>)
 8000848:	f007 f9e0 	bl	8007c0c <HAL_SDRAM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000852:	f000 fc8d 	bl	8001170 <Error_Handler>
  }

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002d0 	.word	0x200002d0
 8000864:	a0000140 	.word	0xa0000140

08000868 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <HAL_FMC_MspInit+0x104>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d16f      	bne.n	8000964 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <HAL_FMC_MspInit+0x104>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <HAL_FMC_MspInit+0x108>)
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	4a37      	ldr	r2, [pc, #220]	; (8000970 <HAL_FMC_MspInit+0x108>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6393      	str	r3, [r2, #56]	; 0x38
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <HAL_FMC_MspInit+0x108>)
 800089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80008a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	482c      	ldr	r0, [pc, #176]	; (8000974 <HAL_FMC_MspInit+0x10c>)
 80008c2:	f004 fcfb 	bl	80052bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <HAL_FMC_MspInit+0x110>)
 80008e0:	f004 fcec 	bl	80052bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80008e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80008e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	481f      	ldr	r0, [pc, #124]	; (800097c <HAL_FMC_MspInit+0x114>)
 8000900:	f004 fcdc 	bl	80052bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8000904:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000908:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <HAL_FMC_MspInit+0x118>)
 8000920:	f004 fccc 	bl	80052bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8000924:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000928:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000936:	230c      	movs	r3, #12
 8000938:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <HAL_FMC_MspInit+0x11c>)
 8000940:	f004 fcbc 	bl	80052bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000944:	2360      	movs	r3, #96	; 0x60
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000954:	230c      	movs	r3, #12
 8000956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <HAL_FMC_MspInit+0x120>)
 800095e:	f004 fcad 	bl	80052bc <HAL_GPIO_Init>
 8000962:	e000      	b.n	8000966 <HAL_FMC_MspInit+0xfe>
    return;
 8000964:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000bc 	.word	0x200000bc
 8000970:	40023800 	.word	0x40023800
 8000974:	40021400 	.word	0x40021400
 8000978:	40020800 	.word	0x40020800
 800097c:	40021800 	.word	0x40021800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020c00 	.word	0x40020c00
 8000988:	40020400 	.word	0x40020400

0800098c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000994:	f7ff ff68 	bl	8000868 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009b0:	f043 0320 	orr.w	r3, r3, #32
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xf4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_GPIO_Init+0xf4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

}
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_I2C3_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_I2C3_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ad6:	f004 febf 	bl	8005858 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 fb46 	bl	8001170 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000ae8:	f005 fea3 	bl	8006832 <HAL_I2CEx_ConfigAnalogFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000af2:	f000 fb3d 	bl	8001170 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C3_Init+0x74>)
 8000afa:	f005 fed6 	bl	80068aa <HAL_I2CEx_ConfigDigitalFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fb34 	bl	8001170 <Error_Handler>
  }

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000304 	.word	0x20000304
 8000b10:	40005c00 	.word	0x40005c00
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <HAL_I2C_MspInit+0xc4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d14b      	bne.n	8000bd2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b78:	2312      	movs	r3, #18
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b84:	2304      	movs	r3, #4
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <HAL_I2C_MspInit+0xcc>)
 8000b90:	f004 fb94 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <HAL_I2C_MspInit+0xd0>)
 8000bb2:	f004 fb83 	bl	80052bc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_I2C_MspInit+0xc8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005c00 	.word	0x40005c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_I2C_MspDeInit+0x3c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d10f      	bne.n	8000c1e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_I2C_MspDeInit+0x40>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_I2C_MspDeInit+0x40>)
 8000c04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <HAL_I2C_MspDeInit+0x44>)
 8000c10:	f004 fcfe 	bl	8005610 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_I2C_MspDeInit+0x48>)
 8000c1a:	f004 fcf9 	bl	8005610 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40005c00 	.word	0x40005c00
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020000 	.word	0x40020000

08000c38 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09a      	sub	sp, #104	; 0x68
 8000c3c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c42:	2234      	movs	r2, #52	; 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f008 fd58 	bl	80096fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2234      	movs	r2, #52	; 0x34
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fd52 	bl	80096fc <memset>

  hltdc.Instance = LTDC;
 8000c58:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c5a:	4a4f      	ldr	r2, [pc, #316]	; (8000d98 <MX_LTDC_Init+0x160>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c70:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c76:	4b47      	ldr	r3, [pc, #284]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c82:	4b44      	ldr	r3, [pc, #272]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c84:	220e      	movs	r2, #14
 8000c86:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c90:	22fe      	movs	r2, #254	; 0xfe
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c96:	f240 1245 	movw	r2, #325	; 0x145
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000c9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000ca6:	f240 1247 	movw	r2, #327	; 0x147
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cc4:	4833      	ldr	r0, [pc, #204]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000cc6:	f005 fe2f 	bl	8006928 <HAL_LTDC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 fa4e 	bl	8001170 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000d22:	f005 fed1 	bl	8006ac8 <HAL_LTDC_ConfigLayer>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000d2c:	f000 fa20 	bl	8001170 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d52:	2305      	movs	r3, #5
 8000d54:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2201      	movs	r2, #1
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_LTDC_Init+0x15c>)
 8000d7c:	f005 fea4 	bl	8006ac8 <HAL_LTDC_ConfigLayer>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8000d86:	f000 f9f3 	bl	8001170 <Error_Handler>
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3768      	adds	r7, #104	; 0x68
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000358 	.word	0x20000358
 8000d98:	40016800 	.word	0x40016800

08000d9c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a77      	ldr	r2, [pc, #476]	; (8000f98 <HAL_LTDC_MspInit+0x1fc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f040 80e8 	bne.w	8000f90 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	4a74      	ldr	r2, [pc, #464]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dce:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a6d      	ldr	r2, [pc, #436]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	4b67      	ldr	r3, [pc, #412]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a66      	ldr	r2, [pc, #408]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a5f      	ldr	r2, [pc, #380]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_LTDC_MspInit+0x200>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e96:	230e      	movs	r3, #14
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <HAL_LTDC_MspInit+0x204>)
 8000ea2:	f004 fa0b 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000ea6:	f641 0358 	movw	r3, #6232	; 0x1858
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb8:	230e      	movs	r3, #14
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4838      	ldr	r0, [pc, #224]	; (8000fa4 <HAL_LTDC_MspInit+0x208>)
 8000ec4:	f004 f9fa 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ed8:	2309      	movs	r3, #9
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <HAL_LTDC_MspInit+0x20c>)
 8000ee4:	f004 f9ea 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000ee8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000efa:	230e      	movs	r3, #14
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <HAL_LTDC_MspInit+0x20c>)
 8000f06:	f004 f9d9 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000f0a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4821      	ldr	r0, [pc, #132]	; (8000fac <HAL_LTDC_MspInit+0x210>)
 8000f28:	f004 f9c8 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000f2c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <HAL_LTDC_MspInit+0x214>)
 8000f4a:	f004 f9b7 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000f4e:	2348      	movs	r3, #72	; 0x48
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5e:	230e      	movs	r3, #14
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <HAL_LTDC_MspInit+0x218>)
 8000f6a:	f004 f9a7 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f80:	2309      	movs	r3, #9
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <HAL_LTDC_MspInit+0x210>)
 8000f8c:	f004 f996 	bl	80052bc <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40016800 	.word	0x40016800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f003 f9de 	bl	800437c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f83a 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fcec 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000fc8:	f7ff fbbe 	bl	8000748 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fcc:	f7ff fbfc 	bl	80007c8 <MX_FMC_Init>
  MX_I2C3_Init();
 8000fd0:	f7ff fd62 	bl	8000a98 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fd4:	f7ff fe30 	bl	8000c38 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fd8:	f000 fdd4 	bl	8001b84 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000fdc:	f000 ff38 	bl	8001e50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	initLCD();
 8000fe0:	f000 fccc 	bl	800197c <initLCD>
	printHelloScreen();
 8000fe4:	f000 fcda 	bl	800199c <printHelloScreen>
	configTS();
 8000fe8:	f000 f8c9 	bl	800117e <configTS>
	showChooseCanvaInterface();
 8000fec:	f7ff fa7e 	bl	80004ec <showChooseCanvaInterface>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		switch(activeView)
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <main+0x7c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d81b      	bhi.n	8001030 <main+0x78>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <main+0x48>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001011 	.word	0x08001011
 8001004:	08001019 	.word	0x08001019
 8001008:	0800102b 	.word	0x0800102b
 800100c:	08001021 	.word	0x08001021
		{
		case Canvas1:
			paintService('1');
 8001010:	2031      	movs	r0, #49	; 0x31
 8001012:	f000 f98d 	bl	8001330 <paintService>
			break;
 8001016:	e00c      	b.n	8001032 <main+0x7a>
		case Canvas2:
			paintService('2');
 8001018:	2032      	movs	r0, #50	; 0x32
 800101a:	f000 f989 	bl	8001330 <paintService>
			break;
 800101e:	e008      	b.n	8001032 <main+0x7a>
		case ChooseScreen:
			showChooseCanvaInterface();
 8001020:	f7ff fa64 	bl	80004ec <showChooseCanvaInterface>
			choose();
 8001024:	f7ff faae 	bl	8000584 <choose>
			break;
 8001028:	e003      	b.n	8001032 <main+0x7a>
		case Info:
			serviceInfoScreen();
 800102a:	f7ff fb67 	bl	80006fc <serviceInfoScreen>
			break;
 800102e:	e000      	b.n	8001032 <main+0x7a>
		default:
			break;
 8001030:	bf00      	nop
		switch(activeView)
 8001032:	e7dd      	b.n	8000ff0 <main+0x38>
 8001034:	20000284 	.word	0x20000284

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0a0      	sub	sp, #128	; 0x80
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f008 fb58 	bl	80096fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f008 fb49 	bl	80096fc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <SystemClock_Config+0x10c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <SystemClock_Config+0x10c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <SystemClock_Config+0x10c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <SystemClock_Config+0x110>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <SystemClock_Config+0x110>)
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <SystemClock_Config+0x110>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010ba:	23b4      	movs	r3, #180	; 0xb4
 80010bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 ff4c 	bl	8006f68 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010d6:	f000 f84b 	bl	8001170 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010da:	f005 fef5 	bl	8006ec8 <HAL_PWREx_EnableOverDrive>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010e4:	f000 f844 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001104:	2105      	movs	r1, #5
 8001106:	4618      	mov	r0, r3
 8001108:	f006 f99e 	bl	8007448 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001112:	f000 f82d 	bl	8001170 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001116:	2308      	movs	r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800111a:	23c0      	movs	r3, #192	; 0xc0
 800111c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800111e:	2304      	movs	r3, #4
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fbaf 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001138:	f000 f81a 	bl	8001170 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3780      	adds	r7, #128	; 0x80
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115e:	f003 f92f 	bl	80043c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40001000 	.word	0x40001000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <configTS>:

#include "paint.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void configTS(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	f002 f883 	bl	8003290 <BSP_LCD_Clear>

	if(BSP_TS_Init(1000, 1000) == TS_OK)
 800118a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800118e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001192:	f003 f807 	bl	80041a4 <BSP_TS_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d107      	bne.n	80011ac <configTS+0x2e>
	{
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f002 f876 	bl	8003290 <BSP_LCD_Clear>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011a8:	f001 ff80 	bl	80030ac <BSP_LCD_SetTextColor>
	}
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <showPaintInterface>:
uint16_t LastColorMArkdownY = 96;
uint16_t LastThicknessMarkdownX = 53;
uint16_t LastThicknessMArkdownY = 3;

void showPaintInterface(uint8_t canvas)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	f002 f867 	bl	8003290 <BSP_LCD_Clear>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011c6:	f001 ff71 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 80011ca:	4851      	ldr	r0, [pc, #324]	; (8001310 <showPaintInterface+0x160>)
 80011cc:	f001 ffa0 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f001 ff82 	bl	80030dc <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(9, 5, '#');
 80011d8:	2223      	movs	r2, #35	; 0x23
 80011da:	2105      	movs	r1, #5
 80011dc:	2009      	movs	r0, #9
 80011de:	f002 f87f 	bl	80032e0 <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(20,5, canvas);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2105      	movs	r1, #5
 80011e8:	2014      	movs	r0, #20
 80011ea:	f002 f879 	bl	80032e0 <BSP_LCD_DisplayChar>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011f2:	f001 ff5b 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(55, 5, 30, 30);
 80011f6:	231e      	movs	r3, #30
 80011f8:	221e      	movs	r2, #30
 80011fa:	2105      	movs	r1, #5
 80011fc:	2037      	movs	r0, #55	; 0x37
 80011fe:	f002 f9ed 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(93, 5, 30, 30);
 8001202:	231e      	movs	r3, #30
 8001204:	221e      	movs	r2, #30
 8001206:	2105      	movs	r1, #5
 8001208:	205d      	movs	r0, #93	; 0x5d
 800120a:	f002 f9e7 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(131, 5, 30, 30);
 800120e:	231e      	movs	r3, #30
 8001210:	221e      	movs	r2, #30
 8001212:	2105      	movs	r1, #5
 8001214:	2083      	movs	r0, #131	; 0x83
 8001216:	f002 f9e1 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_FillCircle(70, 20, 5);
 800121a:	2205      	movs	r2, #5
 800121c:	2114      	movs	r1, #20
 800121e:	2046      	movs	r0, #70	; 0x46
 8001220:	f002 fb58 	bl	80038d4 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(108, 20, 10);
 8001224:	220a      	movs	r2, #10
 8001226:	2114      	movs	r1, #20
 8001228:	206c      	movs	r0, #108	; 0x6c
 800122a:	f002 fb53 	bl	80038d4 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(146, 20, 15);
 800122e:	220f      	movs	r2, #15
 8001230:	2114      	movs	r1, #20
 8001232:	2092      	movs	r0, #146	; 0x92
 8001234:	f002 fb4e 	bl	80038d4 <BSP_LCD_FillCircle>

	BSP_LCD_DrawRect(164, 5, 74, 30);
 8001238:	231e      	movs	r3, #30
 800123a:	224a      	movs	r2, #74	; 0x4a
 800123c:	2105      	movs	r1, #5
 800123e:	20a4      	movs	r0, #164	; 0xa4
 8001240:	f002 f9cc 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font16);
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <showPaintInterface+0x160>)
 8001246:	f001 ff63 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(180, 15, (uint8_t *)"EXIT",LEFT_MODE);
 800124a:	2303      	movs	r3, #3
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <showPaintInterface+0x164>)
 800124e:	210f      	movs	r1, #15
 8001250:	20b4      	movs	r0, #180	; 0xb4
 8001252:	f002 f889 	bl	8003368 <BSP_LCD_DisplayStringAt>


	BSP_LCD_DrawRect(5, 22, 30, 30);
 8001256:	231e      	movs	r3, #30
 8001258:	221e      	movs	r2, #30
 800125a:	2116      	movs	r1, #22
 800125c:	2005      	movs	r0, #5
 800125e:	f002 f9bd 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DisplayChar(15, 30, 'C');
 8001262:	2243      	movs	r2, #67	; 0x43
 8001264:	211e      	movs	r1, #30
 8001266:	200f      	movs	r0, #15
 8001268:	f002 f83a 	bl	80032e0 <BSP_LCD_DisplayChar>

	BSP_LCD_DrawRect(5, 60, 30, 30);
 800126c:	231e      	movs	r3, #30
 800126e:	221e      	movs	r2, #30
 8001270:	213c      	movs	r1, #60	; 0x3c
 8001272:	2005      	movs	r0, #5
 8001274:	f002 f9b2 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_FillRect(5, 98, 30, 30);
 8001278:	231e      	movs	r3, #30
 800127a:	221e      	movs	r2, #30
 800127c:	2162      	movs	r1, #98	; 0x62
 800127e:	2005      	movs	r0, #5
 8001280:	f002 face 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001284:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001288:	f001 ff10 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 136, 30, 30);
 800128c:	231e      	movs	r3, #30
 800128e:	221e      	movs	r2, #30
 8001290:	2188      	movs	r1, #136	; 0x88
 8001292:	2005      	movs	r0, #5
 8001294:	f002 fac4 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <showPaintInterface+0x168>)
 800129a:	f001 ff07 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 174, 30, 30);
 800129e:	231e      	movs	r3, #30
 80012a0:	221e      	movs	r2, #30
 80012a2:	21ae      	movs	r1, #174	; 0xae
 80012a4:	2005      	movs	r0, #5
 80012a6:	f002 fabb 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <showPaintInterface+0x16c>)
 80012ac:	f001 fefe 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5,212 , 30, 30);
 80012b0:	231e      	movs	r3, #30
 80012b2:	221e      	movs	r2, #30
 80012b4:	21d4      	movs	r1, #212	; 0xd4
 80012b6:	2005      	movs	r0, #5
 80012b8:	f002 fab2 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80012bc:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80012c0:	f001 fef4 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 250, 30, 30);
 80012c4:	231e      	movs	r3, #30
 80012c6:	221e      	movs	r2, #30
 80012c8:	21fa      	movs	r1, #250	; 0xfa
 80012ca:	2005      	movs	r0, #5
 80012cc:	f002 faa8 	bl	8003820 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 80012d0:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80012d4:	f001 feea 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(5, 288, 30, 30);
 80012d8:	231e      	movs	r3, #30
 80012da:	221e      	movs	r2, #30
 80012dc:	f44f 7190 	mov.w	r1, #288	; 0x120
 80012e0:	2005      	movs	r0, #5
 80012e2:	f002 fa9d 	bl	8003820 <BSP_LCD_FillRect>

	markdown(LastColorMarkdownX, LastColorMArkdownY, COLOR);
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <showPaintInterface+0x170>)
 80012e8:	8818      	ldrh	r0, [r3, #0]
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <showPaintInterface+0x174>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	f000 f9ed 	bl	80016d0 <markdown>
	markdown(LastThicknessMarkdownX, LastThicknessMArkdownY, THICKNESS);
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <showPaintInterface+0x178>)
 80012f8:	8818      	ldrh	r0, [r3, #0]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <showPaintInterface+0x17c>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f000 f9e5 	bl	80016d0 <markdown>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000084 	.word	0x20000084
 8001314:	080097d8 	.word	0x080097d8
 8001318:	ffff0000 	.word	0xffff0000
 800131c:	ff0000ff 	.word	0xff0000ff
 8001320:	20000006 	.word	0x20000006
 8001324:	20000008 	.word	0x20000008
 8001328:	2000000a 	.word	0x2000000a
 800132c:	2000000c 	.word	0x2000000c

08001330 <paintService>:

void paintService(uint8_t canvas)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	clearWorkspace(canvas);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f9fb 	bl	8001738 <clearWorkspace>
	loadP();
 8001342:	f000 fa97 	bl	8001874 <loadP>

	while(activeView == Canvas1 || activeView == Canvas2)
 8001346:	e161      	b.n	800160c <paintService+0x2dc>
	{
		BSP_TS_GetState(&ts_struct);
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <paintService+0x28c>)
 800134a:	f002 ff65 	bl	8004218 <BSP_TS_GetState>
		if(ts_struct.TouchDetected && ts_struct.X < 240-LastRadius){
 800134e:	4b9b      	ldr	r3, [pc, #620]	; (80015bc <paintService+0x28c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 815a 	beq.w	800160c <paintService+0x2dc>
 8001358:	4b98      	ldr	r3, [pc, #608]	; (80015bc <paintService+0x28c>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	461a      	mov	r2, r3
 800135e:	4b98      	ldr	r3, [pc, #608]	; (80015c0 <paintService+0x290>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001366:	429a      	cmp	r2, r3
 8001368:	f280 8150 	bge.w	800160c <paintService+0x2dc>
			if(ts_struct.TouchDetected && ts_struct.X > 37 + LastRadius && ts_struct.Y > 37+LastRadius)
 800136c:	4b93      	ldr	r3, [pc, #588]	; (80015bc <paintService+0x28c>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01e      	beq.n	80013b2 <paintService+0x82>
 8001374:	4b91      	ldr	r3, [pc, #580]	; (80015bc <paintService+0x28c>)
 8001376:	885b      	ldrh	r3, [r3, #2]
 8001378:	461a      	mov	r2, r3
 800137a:	4b91      	ldr	r3, [pc, #580]	; (80015c0 <paintService+0x290>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	3325      	adds	r3, #37	; 0x25
 8001380:	429a      	cmp	r2, r3
 8001382:	dd16      	ble.n	80013b2 <paintService+0x82>
 8001384:	4b8d      	ldr	r3, [pc, #564]	; (80015bc <paintService+0x28c>)
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	461a      	mov	r2, r3
 800138a:	4b8d      	ldr	r3, [pc, #564]	; (80015c0 <paintService+0x290>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3325      	adds	r3, #37	; 0x25
 8001390:	429a      	cmp	r2, r3
 8001392:	dd0e      	ble.n	80013b2 <paintService+0x82>
			{
				BSP_LCD_SetTextColor(LastColor);
 8001394:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <paintService+0x294>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fe87 	bl	80030ac <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(ts_struct.X, ts_struct.Y, LastRadius);
 800139e:	4b87      	ldr	r3, [pc, #540]	; (80015bc <paintService+0x28c>)
 80013a0:	8858      	ldrh	r0, [r3, #2]
 80013a2:	4b86      	ldr	r3, [pc, #536]	; (80015bc <paintService+0x28c>)
 80013a4:	8899      	ldrh	r1, [r3, #4]
 80013a6:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <paintService+0x290>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	f002 fa92 	bl	80038d4 <BSP_LCD_FillCircle>
 80013b0:	e12c      	b.n	800160c <paintService+0x2dc>
			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 164) && (ts_struct.Y < 35) && (ts_struct.X <238))
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <paintService+0x28c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d024      	beq.n	8001404 <paintService+0xd4>
 80013ba:	4b80      	ldr	r3, [pc, #512]	; (80015bc <paintService+0x28c>)
 80013bc:	885b      	ldrh	r3, [r3, #2]
 80013be:	2ba4      	cmp	r3, #164	; 0xa4
 80013c0:	d920      	bls.n	8001404 <paintService+0xd4>
 80013c2:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <paintService+0x28c>)
 80013c4:	889b      	ldrh	r3, [r3, #4]
 80013c6:	2b22      	cmp	r3, #34	; 0x22
 80013c8:	d81c      	bhi.n	8001404 <paintService+0xd4>
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <paintService+0x28c>)
 80013cc:	885b      	ldrh	r3, [r3, #2]
 80013ce:	2bed      	cmp	r3, #237	; 0xed
 80013d0:	d818      	bhi.n	8001404 <paintService+0xd4>
			{
				LastColor = LCD_COLOR_BLACK;
 80013d2:	4b7c      	ldr	r3, [pc, #496]	; (80015c4 <paintService+0x294>)
 80013d4:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80013d8:	601a      	str	r2, [r3, #0]
				LastRadius = 5;
 80013da:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <paintService+0x290>)
 80013dc:	2205      	movs	r2, #5
 80013de:	801a      	strh	r2, [r3, #0]
				LastColorMarkdownX = 3;
 80013e0:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <paintService+0x298>)
 80013e2:	2203      	movs	r2, #3
 80013e4:	801a      	strh	r2, [r3, #0]
				LastColorMArkdownY = 96;
 80013e6:	4b79      	ldr	r3, [pc, #484]	; (80015cc <paintService+0x29c>)
 80013e8:	2260      	movs	r2, #96	; 0x60
 80013ea:	801a      	strh	r2, [r3, #0]
				LastThicknessMarkdownX = 53;
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <paintService+0x2a0>)
 80013ee:	2235      	movs	r2, #53	; 0x35
 80013f0:	801a      	strh	r2, [r3, #0]
				LastThicknessMArkdownY = 3;
 80013f2:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <paintService+0x2a4>)
 80013f4:	2203      	movs	r2, #3
 80013f6:	801a      	strh	r2, [r3, #0]

				saveP();
 80013f8:	f000 f9b6 	bl	8001768 <saveP>
				activeView = ChooseScreen;
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <paintService+0x2a8>)
 80013fe:	2203      	movs	r2, #3
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e103      	b.n	800160c <paintService+0x2dc>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 22) && (ts_struct.Y < 52) && (ts_struct.X <35))
 8001404:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <paintService+0x28c>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d010      	beq.n	800142e <paintService+0xfe>
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <paintService+0x28c>)
 800140e:	889b      	ldrh	r3, [r3, #4]
 8001410:	2b16      	cmp	r3, #22
 8001412:	d90c      	bls.n	800142e <paintService+0xfe>
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <paintService+0x28c>)
 8001416:	889b      	ldrh	r3, [r3, #4]
 8001418:	2b33      	cmp	r3, #51	; 0x33
 800141a:	d808      	bhi.n	800142e <paintService+0xfe>
 800141c:	4b67      	ldr	r3, [pc, #412]	; (80015bc <paintService+0x28c>)
 800141e:	885b      	ldrh	r3, [r3, #2]
 8001420:	2b22      	cmp	r3, #34	; 0x22
 8001422:	d804      	bhi.n	800142e <paintService+0xfe>
			{
				clearWorkspace(canvas);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f986 	bl	8001738 <clearWorkspace>
 800142c:	e0ee      	b.n	800160c <paintService+0x2dc>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 60) && (ts_struct.Y < 90))
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <paintService+0x28c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d011      	beq.n	800145a <paintService+0x12a>
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <paintService+0x28c>)
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	2b3c      	cmp	r3, #60	; 0x3c
 800143c:	d90d      	bls.n	800145a <paintService+0x12a>
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <paintService+0x28c>)
 8001440:	889b      	ldrh	r3, [r3, #4]
 8001442:	2b59      	cmp	r3, #89	; 0x59
 8001444:	d809      	bhi.n	800145a <paintService+0x12a>
			{
				markdown(3, 58, COLOR);
 8001446:	2200      	movs	r2, #0
 8001448:	213a      	movs	r1, #58	; 0x3a
 800144a:	2003      	movs	r0, #3
 800144c:	f000 f940 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_WHITE;
 8001450:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <paintService+0x294>)
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e0d8      	b.n	800160c <paintService+0x2dc>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 98) && (ts_struct.Y < 128))
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <paintService+0x28c>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d011      	beq.n	8001486 <paintService+0x156>
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <paintService+0x28c>)
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	2b62      	cmp	r3, #98	; 0x62
 8001468:	d90d      	bls.n	8001486 <paintService+0x156>
 800146a:	4b54      	ldr	r3, [pc, #336]	; (80015bc <paintService+0x28c>)
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	2b7f      	cmp	r3, #127	; 0x7f
 8001470:	d809      	bhi.n	8001486 <paintService+0x156>
			{
				markdown(3, 96, COLOR);
 8001472:	2200      	movs	r2, #0
 8001474:	2160      	movs	r1, #96	; 0x60
 8001476:	2003      	movs	r0, #3
 8001478:	f000 f92a 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_BLACK;
 800147c:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <paintService+0x294>)
 800147e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e0c2      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 136) && (ts_struct.Y < 166))
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <paintService+0x28c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d011      	beq.n	80014b2 <paintService+0x182>
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <paintService+0x28c>)
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	2b88      	cmp	r3, #136	; 0x88
 8001494:	d90d      	bls.n	80014b2 <paintService+0x182>
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <paintService+0x28c>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	2ba5      	cmp	r3, #165	; 0xa5
 800149c:	d809      	bhi.n	80014b2 <paintService+0x182>
			{
				markdown(3, 134, COLOR);
 800149e:	2200      	movs	r2, #0
 80014a0:	2186      	movs	r1, #134	; 0x86
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f914 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_YELLOW;
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <paintService+0x294>)
 80014aa:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e0ac      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 174) && (ts_struct.Y < 204))
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <paintService+0x28c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <paintService+0x1ac>
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <paintService+0x28c>)
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	2bae      	cmp	r3, #174	; 0xae
 80014c0:	d90c      	bls.n	80014dc <paintService+0x1ac>
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <paintService+0x28c>)
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	2bcb      	cmp	r3, #203	; 0xcb
 80014c8:	d808      	bhi.n	80014dc <paintService+0x1ac>
			{
				markdown(3, 172, COLOR);
 80014ca:	2200      	movs	r2, #0
 80014cc:	21ac      	movs	r1, #172	; 0xac
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 f8fe 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_RED;
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <paintService+0x294>)
 80014d6:	4a41      	ldr	r2, [pc, #260]	; (80015dc <paintService+0x2ac>)
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e097      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 212) && (ts_struct.Y < 242))
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <paintService+0x28c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d010      	beq.n	8001506 <paintService+0x1d6>
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <paintService+0x28c>)
 80014e6:	889b      	ldrh	r3, [r3, #4]
 80014e8:	2bd4      	cmp	r3, #212	; 0xd4
 80014ea:	d90c      	bls.n	8001506 <paintService+0x1d6>
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <paintService+0x28c>)
 80014ee:	889b      	ldrh	r3, [r3, #4]
 80014f0:	2bf1      	cmp	r3, #241	; 0xf1
 80014f2:	d808      	bhi.n	8001506 <paintService+0x1d6>
			{
				markdown(3, 210, COLOR);
 80014f4:	2200      	movs	r2, #0
 80014f6:	21d2      	movs	r1, #210	; 0xd2
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 f8e9 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_BLUE;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <paintService+0x294>)
 8001500:	4a37      	ldr	r2, [pc, #220]	; (80015e0 <paintService+0x2b0>)
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e082      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 250) && (ts_struct.Y < 280))
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <paintService+0x28c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d012      	beq.n	8001534 <paintService+0x204>
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <paintService+0x28c>)
 8001510:	889b      	ldrh	r3, [r3, #4]
 8001512:	2bfa      	cmp	r3, #250	; 0xfa
 8001514:	d90e      	bls.n	8001534 <paintService+0x204>
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <paintService+0x28c>)
 8001518:	889b      	ldrh	r3, [r3, #4]
 800151a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800151e:	d209      	bcs.n	8001534 <paintService+0x204>
			{
				markdown(3, 248, COLOR);
 8001520:	2200      	movs	r2, #0
 8001522:	21f8      	movs	r1, #248	; 0xf8
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f8d3 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_GREEN;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <paintService+0x294>)
 800152c:	f04f 22ff 	mov.w	r2, #4278255360	; 0xff00ff00
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e06b      	b.n	800160c <paintService+0x2dc>
			}
			else if(ts_struct.TouchDetected && (ts_struct.Y > 288) && (ts_struct.Y < 318))
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <paintService+0x28c>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d014      	beq.n	8001566 <paintService+0x236>
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <paintService+0x28c>)
 800153e:	889b      	ldrh	r3, [r3, #4]
 8001540:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8001544:	d90f      	bls.n	8001566 <paintService+0x236>
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <paintService+0x28c>)
 8001548:	889b      	ldrh	r3, [r3, #4]
 800154a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800154e:	d20a      	bcs.n	8001566 <paintService+0x236>
			{
				markdown(3, 286, COLOR);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001556:	2003      	movs	r0, #3
 8001558:	f000 f8ba 	bl	80016d0 <markdown>
				LastColor = LCD_COLOR_MAGENTA;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <paintService+0x294>)
 800155e:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e052      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 55) && (ts_struct.X < 85))
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <paintService+0x28c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <paintService+0x260>
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <paintService+0x28c>)
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	2b37      	cmp	r3, #55	; 0x37
 8001574:	d90c      	bls.n	8001590 <paintService+0x260>
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <paintService+0x28c>)
 8001578:	885b      	ldrh	r3, [r3, #2]
 800157a:	2b54      	cmp	r3, #84	; 0x54
 800157c:	d808      	bhi.n	8001590 <paintService+0x260>
			{
				LastRadius = 5;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <paintService+0x290>)
 8001580:	2205      	movs	r2, #5
 8001582:	801a      	strh	r2, [r3, #0]
				markdown(53, 3, THICKNESS);
 8001584:	2201      	movs	r2, #1
 8001586:	2103      	movs	r1, #3
 8001588:	2035      	movs	r0, #53	; 0x35
 800158a:	f000 f8a1 	bl	80016d0 <markdown>
 800158e:	e03d      	b.n	800160c <paintService+0x2dc>

			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 93) && (ts_struct.X < 123))
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <paintService+0x28c>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d025      	beq.n	80015e4 <paintService+0x2b4>
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <paintService+0x28c>)
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	2b5d      	cmp	r3, #93	; 0x5d
 800159e:	d921      	bls.n	80015e4 <paintService+0x2b4>
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <paintService+0x28c>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	2b7a      	cmp	r3, #122	; 0x7a
 80015a6:	d81d      	bhi.n	80015e4 <paintService+0x2b4>
			{
				LastRadius = 10;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <paintService+0x290>)
 80015aa:	220a      	movs	r2, #10
 80015ac:	801a      	strh	r2, [r3, #0]
				markdown(91, 3, THICKNESS);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2103      	movs	r1, #3
 80015b2:	205b      	movs	r0, #91	; 0x5b
 80015b4:	f000 f88c 	bl	80016d0 <markdown>
 80015b8:	e028      	b.n	800160c <paintService+0x2dc>
 80015ba:	bf00      	nop
 80015bc:	20000400 	.word	0x20000400
 80015c0:	20000004 	.word	0x20000004
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000006 	.word	0x20000006
 80015cc:	20000008 	.word	0x20000008
 80015d0:	2000000a 	.word	0x2000000a
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20000284 	.word	0x20000284
 80015dc:	ffff0000 	.word	0xffff0000
 80015e0:	ff0000ff 	.word	0xff0000ff
			}
			else if(ts_struct.TouchDetected && (ts_struct.X > 131) && (ts_struct.X < 161))
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <paintService+0x2f8>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00f      	beq.n	800160c <paintService+0x2dc>
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <paintService+0x2f8>)
 80015ee:	885b      	ldrh	r3, [r3, #2]
 80015f0:	2b83      	cmp	r3, #131	; 0x83
 80015f2:	d90b      	bls.n	800160c <paintService+0x2dc>
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <paintService+0x2f8>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	2ba0      	cmp	r3, #160	; 0xa0
 80015fa:	d807      	bhi.n	800160c <paintService+0x2dc>
			{
				LastRadius = 15;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <paintService+0x2fc>)
 80015fe:	220f      	movs	r2, #15
 8001600:	801a      	strh	r2, [r3, #0]
				markdown(129, 3, THICKNESS);
 8001602:	2201      	movs	r2, #1
 8001604:	2103      	movs	r1, #3
 8001606:	2081      	movs	r0, #129	; 0x81
 8001608:	f000 f862 	bl	80016d0 <markdown>
	while(activeView == Canvas1 || activeView == Canvas2)
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <paintService+0x300>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f43f ae99 	beq.w	8001348 <paintService+0x18>
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <paintService+0x300>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	f43f ae94 	beq.w	8001348 <paintService+0x18>
			}
		}
	}
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000400 	.word	0x20000400
 800162c:	20000004 	.word	0x20000004
 8001630:	20000284 	.word	0x20000284

08001634 <resetColorMarkdown>:

void resetColorMarkdown(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f001 fd36 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(3, 58, 34, 34);
 8001640:	2322      	movs	r3, #34	; 0x22
 8001642:	2222      	movs	r2, #34	; 0x22
 8001644:	213a      	movs	r1, #58	; 0x3a
 8001646:	2003      	movs	r0, #3
 8001648:	f001 ffc8 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 96, 34, 34);
 800164c:	2322      	movs	r3, #34	; 0x22
 800164e:	2222      	movs	r2, #34	; 0x22
 8001650:	2160      	movs	r1, #96	; 0x60
 8001652:	2003      	movs	r0, #3
 8001654:	f001 ffc2 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 134, 34, 34);
 8001658:	2322      	movs	r3, #34	; 0x22
 800165a:	2222      	movs	r2, #34	; 0x22
 800165c:	2186      	movs	r1, #134	; 0x86
 800165e:	2003      	movs	r0, #3
 8001660:	f001 ffbc 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 172, 34, 34);
 8001664:	2322      	movs	r3, #34	; 0x22
 8001666:	2222      	movs	r2, #34	; 0x22
 8001668:	21ac      	movs	r1, #172	; 0xac
 800166a:	2003      	movs	r0, #3
 800166c:	f001 ffb6 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 210, 34, 34);
 8001670:	2322      	movs	r3, #34	; 0x22
 8001672:	2222      	movs	r2, #34	; 0x22
 8001674:	21d2      	movs	r1, #210	; 0xd2
 8001676:	2003      	movs	r0, #3
 8001678:	f001 ffb0 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 248, 34, 34);
 800167c:	2322      	movs	r3, #34	; 0x22
 800167e:	2222      	movs	r2, #34	; 0x22
 8001680:	21f8      	movs	r1, #248	; 0xf8
 8001682:	2003      	movs	r0, #3
 8001684:	f001 ffaa 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(3, 286, 34, 34);
 8001688:	2322      	movs	r3, #34	; 0x22
 800168a:	2222      	movs	r2, #34	; 0x22
 800168c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001690:	2003      	movs	r0, #3
 8001692:	f001 ffa3 	bl	80035dc <BSP_LCD_DrawRect>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <resetThicknessMarkdown>:

void resetThicknessMarkdown(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800169e:	f04f 30ff 	mov.w	r0, #4294967295
 80016a2:	f001 fd03 	bl	80030ac <BSP_LCD_SetTextColor>

	BSP_LCD_DrawRect(53, 3, 34, 34);
 80016a6:	2322      	movs	r3, #34	; 0x22
 80016a8:	2222      	movs	r2, #34	; 0x22
 80016aa:	2103      	movs	r1, #3
 80016ac:	2035      	movs	r0, #53	; 0x35
 80016ae:	f001 ff95 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(91, 3, 34, 34);
 80016b2:	2322      	movs	r3, #34	; 0x22
 80016b4:	2222      	movs	r2, #34	; 0x22
 80016b6:	2103      	movs	r1, #3
 80016b8:	205b      	movs	r0, #91	; 0x5b
 80016ba:	f001 ff8f 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(129, 3, 34, 34);
 80016be:	2322      	movs	r3, #34	; 0x22
 80016c0:	2222      	movs	r2, #34	; 0x22
 80016c2:	2103      	movs	r1, #3
 80016c4:	2081      	movs	r0, #129	; 0x81
 80016c6:	f001 ff89 	bl	80035dc <BSP_LCD_DrawRect>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <markdown>:

void markdown(uint16_t x,uint16_t y,Markdown_type type)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	460b      	mov	r3, r1
 80016dc:	80bb      	strh	r3, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	70fb      	strb	r3, [r7, #3]
	if(type == COLOR)
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d108      	bne.n	80016fa <markdown+0x2a>
	{
		resetColorMarkdown();
 80016e8:	f7ff ffa4 	bl	8001634 <resetColorMarkdown>
		LastColorMarkdownX = x;
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <markdown+0x54>)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	8013      	strh	r3, [r2, #0]
		LastColorMArkdownY = y;
 80016f2:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <markdown+0x58>)
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	8013      	strh	r3, [r2, #0]
 80016f8:	e007      	b.n	800170a <markdown+0x3a>
	}
	else
	{
		resetThicknessMarkdown();
 80016fa:	f7ff ffce 	bl	800169a <resetThicknessMarkdown>
		LastThicknessMarkdownX = x;
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <markdown+0x5c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	8013      	strh	r3, [r2, #0]
		LastThicknessMArkdownY = y;
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <markdown+0x60>)
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	8013      	strh	r3, [r2, #0]
	}
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <markdown+0x64>)
 800170c:	f001 fcce 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(x, y, 34, 34);
 8001710:	88b9      	ldrh	r1, [r7, #4]
 8001712:	88f8      	ldrh	r0, [r7, #6]
 8001714:	2322      	movs	r3, #34	; 0x22
 8001716:	2222      	movs	r2, #34	; 0x22
 8001718:	f001 ff60 	bl	80035dc <BSP_LCD_DrawRect>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000006 	.word	0x20000006
 8001728:	20000008 	.word	0x20000008
 800172c:	2000000a 	.word	0x2000000a
 8001730:	2000000c 	.word	0x2000000c
 8001734:	ffff0000 	.word	0xffff0000

08001738 <clearWorkspace>:

void clearWorkspace(uint8_t canvas)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001742:	f04f 30ff 	mov.w	r0, #4294967295
 8001746:	f001 fda3 	bl	8003290 <BSP_LCD_Clear>
	showPaintInterface(canvas);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fd2f 	bl	80011b0 <showPaintInterface>
	BSP_LCD_SetTextColor(LastColor);
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <clearWorkspace+0x2c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fca8 	bl	80030ac <BSP_LCD_SetTextColor>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000

08001768 <saveP>:

void saveP()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	f5ad 3dde 	sub.w	sp, sp, #113664	; 0x1bc00
 800176e:	b0c4      	sub	sp, #272	; 0x110
 8001770:	af00      	add	r7, sp, #0
	uint32_t bottomHalf[28482];
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001778:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800177c:	6013      	str	r3, [r2, #0]
	for(i=38 ; i < 240; ++i)
 800177e:	2326      	movs	r3, #38	; 0x26
 8001780:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001784:	f502 7287 	add.w	r2, r2, #270	; 0x10e
 8001788:	8013      	strh	r3, [r2, #0]
 800178a:	e054      	b.n	8001836 <saveP+0xce>
	{
		for(j=179; j < 320; ++j)
 800178c:	23b3      	movs	r3, #179	; 0xb3
 800178e:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001792:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8001796:	8013      	strh	r3, [r2, #0]
 8001798:	e038      	b.n	800180c <saveP+0xa4>
		{
			if(bufferIter > 28481) break;
 800179a:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800179e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f646 7241 	movw	r2, #28481	; 0x6f41
 80017a8:	4293      	cmp	r3, r2
 80017aa:	dc38      	bgt.n	800181e <saveP+0xb6>
			bottomHalf[bufferIter] = BSP_LCD_ReadPixel(i, j);
 80017ac:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80017b0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80017ba:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fcbe 	bl	8003144 <BSP_LCD_ReadPixel>
 80017c8:	4601      	mov	r1, r0
 80017ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017d2:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80017d6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			bufferIter++;
 80017e0:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80017e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80017f0:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80017f4:	6013      	str	r3, [r2, #0]
		for(j=179; j < 320; ++j)
 80017f6:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80017fa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001806:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800180a:	8013      	strh	r3, [r2, #0]
 800180c:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001810:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800181a:	d3be      	bcc.n	800179a <saveP+0x32>
 800181c:	e000      	b.n	8001820 <saveP+0xb8>
			if(bufferIter > 28481) break;
 800181e:	bf00      	nop
	for(i=38 ; i < 240; ++i)
 8001820:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001824:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001830:	f502 7287 	add.w	r2, r2, #270	; 0x10e
 8001834:	8013      	strh	r3, [r2, #0]
 8001836:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800183a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	2bef      	cmp	r3, #239	; 0xef
 8001842:	d9a3      	bls.n	800178c <saveP+0x24>
		}
	}

	SetSectorAddr(11,0x080E0000);
 8001844:	490a      	ldr	r1, [pc, #40]	; (8001870 <saveP+0x108>)
 8001846:	200b      	movs	r0, #11
 8001848:	f000 f92c 	bl	8001aa4 <SetSectorAddr>
	WriteToFlash(0, bottomHalf,28482);
 800184c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001850:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001854:	f646 7242 	movw	r2, #28482	; 0x6f42
 8001858:	4619      	mov	r1, r3
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f938 	bl	8001ad0 <WriteToFlash>
}
 8001860:	bf00      	nop
 8001862:	f507 37de 	add.w	r7, r7, #113664	; 0x1bc00
 8001866:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	080e0000 	.word	0x080e0000

08001874 <loadP>:

void loadP()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	f5ad 3dde 	sub.w	sp, sp, #113664	; 0x1bc00
 800187a:	b0c4      	sub	sp, #272	; 0x110
 800187c:	af00      	add	r7, sp, #0
	uint32_t bottomHalf[28482];
	SetSectorAddr(11,0x080E0000);
 800187e:	493e      	ldr	r1, [pc, #248]	; (8001978 <loadP+0x104>)
 8001880:	200b      	movs	r0, #11
 8001882:	f000 f90f 	bl	8001aa4 <SetSectorAddr>
	ReadFromFlash(0, bottomHalf,28482);
 8001886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800188a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800188e:	f646 7242 	movw	r2, #28482	; 0x6f42
 8001892:	4619      	mov	r1, r3
 8001894:	2000      	movs	r0, #0
 8001896:	f000 f94d 	bl	8001b34 <ReadFromFlash>
	uint16_t i;
	uint16_t j;
	int bufferIter = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018a0:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80018a4:	6013      	str	r3, [r2, #0]
	for(i=38 ; i < 240; ++i)
 80018a6:	2326      	movs	r3, #38	; 0x26
 80018a8:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018ac:	f502 7287 	add.w	r2, r2, #270	; 0x10e
 80018b0:	8013      	strh	r3, [r2, #0]
 80018b2:	e052      	b.n	800195a <loadP+0xe6>
	{
		for(j=179; j < 320; ++j)
 80018b4:	23b3      	movs	r3, #179	; 0xb3
 80018b6:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018ba:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 80018be:	8013      	strh	r3, [r2, #0]
 80018c0:	e036      	b.n	8001930 <loadP+0xbc>
		{
			if(bufferIter> 28481) break;
 80018c2:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f646 7241 	movw	r2, #28481	; 0x6f41
 80018d0:	4293      	cmp	r3, r2
 80018d2:	dc36      	bgt.n	8001942 <loadP+0xce>
			BSP_LCD_DrawPixel(i, j, bottomHalf[bufferIter]);
 80018d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018dc:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 80018e0:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018ea:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80018f2:	8819      	ldrh	r1, [r3, #0]
 80018f4:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 80018f8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 f96e 	bl	8003be0 <BSP_LCD_DrawPixel>
			bufferIter++;
 8001904:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001908:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001914:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001918:	6013      	str	r3, [r2, #0]
		for(j=179; j < 320; ++j)
 800191a:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800191e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 800192a:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800192e:	8013      	strh	r3, [r2, #0]
 8001930:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001934:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800193e:	d3c0      	bcc.n	80018c2 <loadP+0x4e>
 8001940:	e000      	b.n	8001944 <loadP+0xd0>
			if(bufferIter> 28481) break;
 8001942:	bf00      	nop
	for(i=38 ; i < 240; ++i)
 8001944:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 8001948:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	f507 32de 	add.w	r2, r7, #113664	; 0x1bc00
 8001954:	f502 7287 	add.w	r2, r2, #270	; 0x10e
 8001958:	8013      	strh	r3, [r2, #0]
 800195a:	f507 33de 	add.w	r3, r7, #113664	; 0x1bc00
 800195e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2bef      	cmp	r3, #239	; 0xef
 8001966:	d9a5      	bls.n	80018b4 <loadP+0x40>
		}
	}
}
 8001968:	bf00      	nop
 800196a:	f507 37de 	add.w	r7, r7, #113664	; 0x1bc00
 800196e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	080e0000 	.word	0x080e0000

0800197c <initLCD>:

#include "paintIntro.h"
#include "../../Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery_lcd.h"

void initLCD(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8001980:	f001 fa9e 	bl	8002ec0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 8001984:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001988:	2001      	movs	r0, #1
 800198a:	f001 fb1b 	bl	8002fc4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f001 fb7c 	bl	800308c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001994:	f002 f83e 	bl	8003a14 <BSP_LCD_DisplayOn>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <printHelloScreen>:

void printHelloScreen(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80019a2:	f04f 30ff 	mov.w	r0, #4294967295
 80019a6:	f001 fc73 	bl	8003290 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 80019aa:	4831      	ldr	r0, [pc, #196]	; (8001a70 <printHelloScreen+0xd4>)
 80019ac:	f001 fb7e 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 125, 220, 70);
 80019b0:	2346      	movs	r3, #70	; 0x46
 80019b2:	22dc      	movs	r2, #220	; 0xdc
 80019b4:	217d      	movs	r1, #125	; 0x7d
 80019b6:	200a      	movs	r0, #10
 80019b8:	f001 fe10 	bl	80035dc <BSP_LCD_DrawRect>
	BSP_LCD_SetFont(&Font24);
 80019bc:	482d      	ldr	r0, [pc, #180]	; (8001a74 <printHelloScreen+0xd8>)
 80019be:	f001 fba7 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 135, (uint8_t*)"EKAB", CENTER_MODE);
 80019c2:	2301      	movs	r3, #1
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <printHelloScreen+0xdc>)
 80019c6:	2187      	movs	r1, #135	; 0x87
 80019c8:	2000      	movs	r0, #0
 80019ca:	f001 fccd 	bl	8003368 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80019ce:	482b      	ldr	r0, [pc, #172]	; (8001a7c <printHelloScreen+0xe0>)
 80019d0:	f001 fb9e 	bl	8003110 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 155, (uint8_t*)"DRAW", CENTER_MODE);
 80019d4:	2301      	movs	r3, #1
 80019d6:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <printHelloScreen+0xe4>)
 80019d8:	219b      	movs	r1, #155	; 0x9b
 80019da:	2000      	movs	r0, #0
 80019dc:	f001 fcc4 	bl	8003368 <BSP_LCD_DisplayStringAt>
	HAL_Delay(750);
 80019e0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80019e4:	f002 fd0c 	bl	8004400 <HAL_Delay>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 80019e8:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 80019ec:	f001 fb5e 	bl	80030ac <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(100, 176, 5);
 80019f0:	2205      	movs	r2, #5
 80019f2:	21b0      	movs	r1, #176	; 0xb0
 80019f4:	2064      	movs	r0, #100	; 0x64
 80019f6:	f001 ff6d 	bl	80038d4 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(115, 176, 5);
 80019fa:	2205      	movs	r2, #5
 80019fc:	21b0      	movs	r1, #176	; 0xb0
 80019fe:	2073      	movs	r0, #115	; 0x73
 8001a00:	f001 ff68 	bl	80038d4 <BSP_LCD_FillCircle>
	BSP_LCD_FillCircle(130, 176, 5);
 8001a04:	2205      	movs	r2, #5
 8001a06:	21b0      	movs	r1, #176	; 0xb0
 8001a08:	2082      	movs	r0, #130	; 0x82
 8001a0a:	f001 ff63 	bl	80038d4 <BSP_LCD_FillCircle>
	HAL_Delay(1000);
 8001a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a12:	f002 fcf5 	bl	8004400 <HAL_Delay>
	int i =0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]

	for(i = 100; i <=130; i+=15)
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	e01f      	b.n	8001a60 <printHelloScreen+0xc4>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001a20:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001a24:	f001 fb42 	bl	80030ac <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	21b0      	movs	r1, #176	; 0xb0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 ff4f 	bl	80038d4 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001a36:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001a3a:	f002 fce1 	bl	8004400 <HAL_Delay>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <printHelloScreen+0xd4>)
 8001a40:	f001 fb34 	bl	80030ac <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(i, 176, 5);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2205      	movs	r2, #5
 8001a4a:	21b0      	movs	r1, #176	; 0xb0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 ff41 	bl	80038d4 <BSP_LCD_FillCircle>
		HAL_Delay(750);
 8001a52:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001a56:	f002 fcd3 	bl	8004400 <HAL_Delay>
	for(i = 100; i <=130; i+=15)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	330f      	adds	r3, #15
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b82      	cmp	r3, #130	; 0x82
 8001a64:	dddc      	ble.n	8001a20 <printHelloScreen+0x84>
	}
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	ff800080 	.word	0xff800080
 8001a74:	2000007c 	.word	0x2000007c
 8001a78:	080097e0 	.word	0x080097e0
 8001a7c:	20000084 	.word	0x20000084
 8001a80:	080097e8 	.word	0x080097e8

08001a84 <EraseSector>:

static uint32_t SectorAddr;
static uint8_t SectorNum;

void EraseSector(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001a88:	f003 fa5a 	bl	8004f40 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <EraseSector+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fbc4 	bl	8005220 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8001a98:	f003 fa74 	bl	8004f84 <HAL_FLASH_Lock>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200000c4 	.word	0x200000c4

08001aa4 <SetSectorAddr>:

void SetSectorAddr(uint8_t sector, uint32_t addr)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
	SectorNum = sector;
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <SetSectorAddr+0x24>)
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	7013      	strb	r3, [r2, #0]
	SectorAddr = addr;
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SetSectorAddr+0x28>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	200000c4 	.word	0x200000c4
 8001acc:	200000c0 	.word	0x200000c0

08001ad0 <WriteToFlash>:

void WriteToFlash(uint32_t idx, void *wrBuf, uint32_t Nsize)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <WriteToFlash+0x60>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

	EraseSector();
 8001ae6:	f7ff ffcd 	bl	8001a84 <EraseSector>

	HAL_FLASH_Unlock();
 8001aea:	f003 fa29 	bl	8004f40 <HAL_FLASH_Unlock>

	for(uint32_t i=0; i<Nsize; i++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e012      	b.n	8001b1a <WriteToFlash+0x4a>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f04f 0400 	mov.w	r4, #0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	6979      	ldr	r1, [r7, #20]
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f003 f9c5 	bl	8004e98 <HAL_FLASH_Program>
		flashAddress+=4;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3304      	adds	r3, #4
 8001b12:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0; i<Nsize; i++)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3301      	adds	r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3e8      	bcc.n	8001af4 <WriteToFlash+0x24>
	}

	HAL_FLASH_Lock();
 8001b22:	f003 fa2f 	bl	8004f84 <HAL_FLASH_Lock>
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200000c0 	.word	0x200000c0

08001b34 <ReadFromFlash>:

void ReadFromFlash(uint32_t idx, void *rdBuf, uint32_t Nsize)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	uint32_t flashAddress = SectorAddr + idx;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <ReadFromFlash+0x4c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]


		for(uint32_t i=0; i<Nsize; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e00c      	b.n	8001b6a <ReadFromFlash+0x36>
		{
			*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	440b      	add	r3, r1
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	601a      	str	r2, [r3, #0]
			flashAddress+=4;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
		for(uint32_t i=0; i<Nsize; i++)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	3301      	adds	r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3ee      	bcc.n	8001b50 <ReadFromFlash+0x1c>
		}

}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200000c0 	.word	0x200000c0

08001b84 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <MX_SPI5_Init+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bd0:	220a      	movs	r2, #10
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_SPI5_Init+0x64>)
 8001bd6:	f006 f898 	bl	8007d0a <HAL_SPI_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001be0:	f7ff fac6 	bl	8001170 <Error_Handler>
  }

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000408 	.word	0x20000408
 8001bec:	40015000 	.word	0x40015000

08001bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_SPI_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_SPI_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_SPI_MspInit+0x8c>)
 8001c68:	f003 fb28 	bl	80052bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40015000 	.word	0x40015000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021400 	.word	0x40021400

08001c80 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_SPI_MspDeInit+0x30>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10a      	bne.n	8001ca8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_SPI_MspDeInit+0x34>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_SPI_MspDeInit+0x34>)
 8001c98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001c9e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <HAL_SPI_MspDeInit+0x38>)
 8001ca4:	f003 fcb4 	bl	8005610 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40015000 	.word	0x40015000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021400 	.word	0x40021400

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	2036      	movs	r0, #54	; 0x36
 8001d22:	f002 fc47 	bl	80045b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001d26:	2036      	movs	r0, #54	; 0x36
 8001d28:	f002 fc60 	bl	80045ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_InitTick+0xa4>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_InitTick+0xa4>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_InitTick+0xa4>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fd6a 	bl	800782c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d58:	f005 fd40 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_InitTick+0xa8>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9b      	lsrs	r3, r3, #18
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_InitTick+0xac>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_InitTick+0xb0>)
 8001d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_InitTick+0xac>)
 8001d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_InitTick+0xac>)
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_InitTick+0xac>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_InitTick+0xac>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_InitTick+0xac>)
 8001d92:	f006 fd45 	bl	8008820 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_InitTick+0xac>)
 8001d9e:	f006 fd74 	bl	800888a <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	20000460 	.word	0x20000460
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM6_DAC_IRQHandler+0x10>)
 8001e16:	f006 fd5c 	bl	80088d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000460 	.word	0x20000460

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <SystemInit+0x28>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <SystemInit+0x28>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SystemInit+0x28>)
 8001e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f006 ff08 	bl	8008c9c <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f7ff f96d 	bl	8001170 <Error_Handler>
  }

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200004a0 	.word	0x200004a0
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12c      	bne.n	8001f20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001efe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f10:	2307      	movs	r3, #7
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_UART_MspInit+0x8c>)
 8001f1c:	f003 f9ce 	bl	80052bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f6c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f3a:	e003      	b.n	8001f44 <LoopCopyDataInit>

08001f3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f42:	3104      	adds	r1, #4

08001f44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f44:	480b      	ldr	r0, [pc, #44]	; (8001f74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f4c:	d3f6      	bcc.n	8001f3c <CopyDataInit>
  ldr  r2, =_sbss
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f50:	e002      	b.n	8001f58 <LoopFillZerobss>

08001f52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f54:	f842 3b04 	str.w	r3, [r2], #4

08001f58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f5c:	d3f9      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f5e:	f7ff ff61 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f007 fba7 	bl	80096b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7ff f827 	bl	8000fb8 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f70:	0800c32c 	.word	0x0800c32c
  ldr  r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f78:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8001f7c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8001f80:	20000604 	.word	0x20000604

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>

08001f86 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f8a:	f000 fe4b 	bl	8002c24 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f8e:	20ca      	movs	r0, #202	; 0xca
 8001f90:	f000 f95d 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f94:	20c3      	movs	r0, #195	; 0xc3
 8001f96:	f000 f967 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f000 f964 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001fa0:	2050      	movs	r0, #80	; 0x50
 8001fa2:	f000 f961 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001fa6:	20cf      	movs	r0, #207	; 0xcf
 8001fa8:	f000 f951 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 f95b 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001fb2:	20c1      	movs	r0, #193	; 0xc1
 8001fb4:	f000 f958 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001fb8:	2030      	movs	r0, #48	; 0x30
 8001fba:	f000 f955 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001fbe:	20ed      	movs	r0, #237	; 0xed
 8001fc0:	f000 f945 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001fc4:	2064      	movs	r0, #100	; 0x64
 8001fc6:	f000 f94f 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 f94c 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001fd0:	2012      	movs	r0, #18
 8001fd2:	f000 f949 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001fd6:	2081      	movs	r0, #129	; 0x81
 8001fd8:	f000 f946 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001fdc:	20e8      	movs	r0, #232	; 0xe8
 8001fde:	f000 f936 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001fe2:	2085      	movs	r0, #133	; 0x85
 8001fe4:	f000 f940 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f000 f93d 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 f93a 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001ff4:	20cb      	movs	r0, #203	; 0xcb
 8001ff6:	f000 f92a 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001ffa:	2039      	movs	r0, #57	; 0x39
 8001ffc:	f000 f934 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002000:	202c      	movs	r0, #44	; 0x2c
 8002002:	f000 f931 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f92e 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800200c:	2034      	movs	r0, #52	; 0x34
 800200e:	f000 f92b 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002012:	2002      	movs	r0, #2
 8002014:	f000 f928 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002018:	20f7      	movs	r0, #247	; 0xf7
 800201a:	f000 f918 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800201e:	2020      	movs	r0, #32
 8002020:	f000 f922 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002024:	20ea      	movs	r0, #234	; 0xea
 8002026:	f000 f912 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f91c 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f919 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002036:	20b1      	movs	r0, #177	; 0xb1
 8002038:	f000 f909 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f913 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002042:	201b      	movs	r0, #27
 8002044:	f000 f910 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002048:	20b6      	movs	r0, #182	; 0xb6
 800204a:	f000 f900 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800204e:	200a      	movs	r0, #10
 8002050:	f000 f90a 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002054:	20a2      	movs	r0, #162	; 0xa2
 8002056:	f000 f907 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800205a:	20c0      	movs	r0, #192	; 0xc0
 800205c:	f000 f8f7 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002060:	2010      	movs	r0, #16
 8002062:	f000 f901 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002066:	20c1      	movs	r0, #193	; 0xc1
 8002068:	f000 f8f1 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800206c:	2010      	movs	r0, #16
 800206e:	f000 f8fb 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002072:	20c5      	movs	r0, #197	; 0xc5
 8002074:	f000 f8eb 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002078:	2045      	movs	r0, #69	; 0x45
 800207a:	f000 f8f5 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800207e:	2015      	movs	r0, #21
 8002080:	f000 f8f2 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002084:	20c7      	movs	r0, #199	; 0xc7
 8002086:	f000 f8e2 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800208a:	2090      	movs	r0, #144	; 0x90
 800208c:	f000 f8ec 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002090:	2036      	movs	r0, #54	; 0x36
 8002092:	f000 f8dc 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002096:	20c8      	movs	r0, #200	; 0xc8
 8002098:	f000 f8e6 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800209c:	20f2      	movs	r0, #242	; 0xf2
 800209e:	f000 f8d6 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 f8e0 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80020a8:	20b0      	movs	r0, #176	; 0xb0
 80020aa:	f000 f8d0 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80020ae:	20c2      	movs	r0, #194	; 0xc2
 80020b0:	f000 f8da 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80020b4:	20b6      	movs	r0, #182	; 0xb6
 80020b6:	f000 f8ca 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f000 f8d4 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80020c0:	20a7      	movs	r0, #167	; 0xa7
 80020c2:	f000 f8d1 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80020c6:	2027      	movs	r0, #39	; 0x27
 80020c8:	f000 f8ce 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80020cc:	2004      	movs	r0, #4
 80020ce:	f000 f8cb 	bl	8002268 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80020d2:	202a      	movs	r0, #42	; 0x2a
 80020d4:	f000 f8bb 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f000 f8c5 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f8c2 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f000 f8bf 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80020ea:	20ef      	movs	r0, #239	; 0xef
 80020ec:	f000 f8bc 	bl	8002268 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80020f0:	202b      	movs	r0, #43	; 0x2b
 80020f2:	f000 f8ac 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f8b6 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 f8b3 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f8b0 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002108:	203f      	movs	r0, #63	; 0x3f
 800210a:	f000 f8ad 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800210e:	20f6      	movs	r0, #246	; 0xf6
 8002110:	f000 f89d 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002114:	2001      	movs	r0, #1
 8002116:	f000 f8a7 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f8a4 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002120:	2006      	movs	r0, #6
 8002122:	f000 f8a1 	bl	8002268 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002126:	202c      	movs	r0, #44	; 0x2c
 8002128:	f000 f891 	bl	800224e <ili9341_WriteReg>
  LCD_Delay(200);
 800212c:	20c8      	movs	r0, #200	; 0xc8
 800212e:	f000 fe67 	bl	8002e00 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002132:	2026      	movs	r0, #38	; 0x26
 8002134:	f000 f88b 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002138:	2001      	movs	r0, #1
 800213a:	f000 f895 	bl	8002268 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800213e:	20e0      	movs	r0, #224	; 0xe0
 8002140:	f000 f885 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002144:	200f      	movs	r0, #15
 8002146:	f000 f88f 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800214a:	2029      	movs	r0, #41	; 0x29
 800214c:	f000 f88c 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002150:	2024      	movs	r0, #36	; 0x24
 8002152:	f000 f889 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002156:	200c      	movs	r0, #12
 8002158:	f000 f886 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800215c:	200e      	movs	r0, #14
 800215e:	f000 f883 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002162:	2009      	movs	r0, #9
 8002164:	f000 f880 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002168:	204e      	movs	r0, #78	; 0x4e
 800216a:	f000 f87d 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800216e:	2078      	movs	r0, #120	; 0x78
 8002170:	f000 f87a 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002174:	203c      	movs	r0, #60	; 0x3c
 8002176:	f000 f877 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800217a:	2009      	movs	r0, #9
 800217c:	f000 f874 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002180:	2013      	movs	r0, #19
 8002182:	f000 f871 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002186:	2005      	movs	r0, #5
 8002188:	f000 f86e 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800218c:	2017      	movs	r0, #23
 800218e:	f000 f86b 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002192:	2011      	movs	r0, #17
 8002194:	f000 f868 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002198:	2000      	movs	r0, #0
 800219a:	f000 f865 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800219e:	20e1      	movs	r0, #225	; 0xe1
 80021a0:	f000 f855 	bl	800224e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f000 f85f 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80021aa:	2016      	movs	r0, #22
 80021ac:	f000 f85c 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80021b0:	201b      	movs	r0, #27
 80021b2:	f000 f859 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80021b6:	2004      	movs	r0, #4
 80021b8:	f000 f856 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80021bc:	2011      	movs	r0, #17
 80021be:	f000 f853 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80021c2:	2007      	movs	r0, #7
 80021c4:	f000 f850 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80021c8:	2031      	movs	r0, #49	; 0x31
 80021ca:	f000 f84d 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80021ce:	2033      	movs	r0, #51	; 0x33
 80021d0:	f000 f84a 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80021d4:	2042      	movs	r0, #66	; 0x42
 80021d6:	f000 f847 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80021da:	2005      	movs	r0, #5
 80021dc:	f000 f844 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80021e0:	200c      	movs	r0, #12
 80021e2:	f000 f841 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80021e6:	200a      	movs	r0, #10
 80021e8:	f000 f83e 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80021ec:	2028      	movs	r0, #40	; 0x28
 80021ee:	f000 f83b 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80021f2:	202f      	movs	r0, #47	; 0x2f
 80021f4:	f000 f838 	bl	8002268 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80021f8:	200f      	movs	r0, #15
 80021fa:	f000 f835 	bl	8002268 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80021fe:	2011      	movs	r0, #17
 8002200:	f000 f825 	bl	800224e <ili9341_WriteReg>
  LCD_Delay(200);
 8002204:	20c8      	movs	r0, #200	; 0xc8
 8002206:	f000 fdfb 	bl	8002e00 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800220a:	2029      	movs	r0, #41	; 0x29
 800220c:	f000 f81f 	bl	800224e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002210:	202c      	movs	r0, #44	; 0x2c
 8002212:	f000 f81c 	bl	800224e <ili9341_WriteReg>
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}

0800221a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800221e:	f000 fd01 	bl	8002c24 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002222:	2103      	movs	r1, #3
 8002224:	20d3      	movs	r0, #211	; 0xd3
 8002226:	f000 f82c 	bl	8002282 <ili9341_ReadData>
 800222a:	4603      	mov	r3, r0
 800222c:	b29b      	uxth	r3, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}

08002232 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002236:	2029      	movs	r0, #41	; 0x29
 8002238:	f000 f809 	bl	800224e <ili9341_WriteReg>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002244:	2028      	movs	r0, #40	; 0x28
 8002246:	f000 f802 	bl	800224e <ili9341_WriteReg>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fd7c 	bl	8002d58 <LCD_IO_WriteReg>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fd4d 	bl	8002d14 <LCD_IO_WriteData>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	460a      	mov	r2, r1
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002292:	797a      	ldrb	r2, [r7, #5]
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fd7f 	bl	8002d9c <LCD_IO_ReadData>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80022ac:	23f0      	movs	r3, #240	; 0xf0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80022bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa59 	bl	8002790 <stmpe811_GetInstance>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	d112      	bne.n	800230e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f000 fa51 	bl	8002790 <stmpe811_GetInstance>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d80a      	bhi.n	800230e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	b2d1      	uxtb	r1, r2
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <stmpe811_Init+0x4c>)
 8002300:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002302:	f000 fd88 	bl	8002e16 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f807 	bl	800231c <stmpe811_Reset>
    }
  }
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200000c8 	.word	0x200000c8

0800231c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2202      	movs	r2, #2
 800232c:	2103      	movs	r1, #3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fd7d 	bl	8002e2e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002334:	200a      	movs	r0, #10
 8002336:	f000 fdb7 	bl	8002ea8 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2200      	movs	r2, #0
 8002340:	2103      	movs	r1, #3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd73 	bl	8002e2e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002348:	2002      	movs	r0, #2
 800234a:	f000 fdad 	bl	8002ea8 <IOE_Delay>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002356:	b590      	push	{r4, r7, lr}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002360:	f000 fd59 	bl	8002e16 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fd72 	bl	8002e54 <IOE_Read>
 8002370:	4603      	mov	r3, r0
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fd69 	bl	8002e54 <IOE_Read>
 8002382:	4603      	mov	r3, r0
 8002384:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002386:	4323      	orrs	r3, r4
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29b      	uxth	r3, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2109      	movs	r1, #9
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd53 	bl	8002e54 <IOE_Read>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	2109      	movs	r1, #9
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fd33 	bl	8002e2e <IOE_Write>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2109      	movs	r1, #9
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fd35 	bl	8002e54 <IOE_Read>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	2109      	movs	r1, #9
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fd15 	bl	8002e2e <IOE_Write>
    
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	80fb      	strh	r3, [r7, #6]
 8002418:	4613      	mov	r3, r2
 800241a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	210a      	movs	r1, #10
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fd14 	bl	8002e54 <IOE_Read>
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	4313      	orrs	r3, r2
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	210a      	movs	r1, #10
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fcf4 	bl	8002e2e <IOE_Write>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	460a      	mov	r2, r1
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	4613      	mov	r3, r2
 800245c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	210a      	movs	r1, #10
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fcf3 	bl	8002e54 <IOE_Read>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002472:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002476:	43db      	mvns	r3, r3
 8002478:	b25a      	sxtb	r2, r3
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4013      	ands	r3, r2
 8002480:	b25b      	sxtb	r3, r3
 8002482:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	210a      	movs	r1, #10
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fcce 	bl	8002e2e <IOE_Write>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	460a      	mov	r2, r1
 80024a4:	80fb      	strh	r3, [r7, #6]
 80024a6:	4613      	mov	r3, r2
 80024a8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	210b      	movs	r1, #11
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fccf 	bl	8002e54 <IOE_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	797b      	ldrb	r3, [r7, #5]
 80024bc:	4013      	ands	r3, r2
 80024be:	b2db      	uxtb	r3, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	460a      	mov	r2, r1
 80024d2:	80fb      	strh	r3, [r7, #6]
 80024d4:	4613      	mov	r3, r2
 80024d6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	797a      	ldrb	r2, [r7, #5]
 80024de:	210b      	movs	r1, #11
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fca4 	bl	8002e2e <IOE_Write>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	6039      	str	r1, [r7, #0]
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2117      	movs	r1, #23
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fca5 	bl	8002e54 <IOE_Read>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b25b      	sxtb	r3, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	b25a      	sxtb	r2, r3
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	4013      	ands	r3, r2
 800251c:	b25b      	sxtb	r3, r3
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	2117      	movs	r1, #23
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fc80 	bl	8002e2e <IOE_Write>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2104      	movs	r1, #4
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fc84 	bl	8002e54 <IOE_Read>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	f023 0304 	bic.w	r3, r3, #4
 8002556:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	2104      	movs	r1, #4
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fc64 	bl	8002e2e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	21f0      	movs	r1, #240	; 0xf0
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffbf 	bl	80024ee <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	2104      	movs	r1, #4
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fc54 	bl	8002e2e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2249      	movs	r2, #73	; 0x49
 800258c:	2120      	movs	r1, #32
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fc4d 	bl	8002e2e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002594:	2002      	movs	r0, #2
 8002596:	f000 fc87 	bl	8002ea8 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2201      	movs	r2, #1
 80025a0:	2121      	movs	r1, #33	; 0x21
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fc43 	bl	8002e2e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	229a      	movs	r2, #154	; 0x9a
 80025ae:	2141      	movs	r1, #65	; 0x41
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fc3c 	bl	8002e2e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2201      	movs	r2, #1
 80025bc:	214a      	movs	r1, #74	; 0x4a
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fc35 	bl	8002e2e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2201      	movs	r2, #1
 80025ca:	214b      	movs	r1, #75	; 0x4b
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fc2e 	bl	8002e2e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	214b      	movs	r1, #75	; 0x4b
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fc27 	bl	8002e2e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2201      	movs	r2, #1
 80025e6:	2156      	movs	r1, #86	; 0x56
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fc20 	bl	8002e2e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2201      	movs	r2, #1
 80025f4:	2158      	movs	r1, #88	; 0x58
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fc19 	bl	8002e2e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2201      	movs	r2, #1
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fc12 	bl	8002e2e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	22ff      	movs	r2, #255	; 0xff
 8002610:	210b      	movs	r1, #11
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fc0b 	bl	8002e2e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002618:	2002      	movs	r0, #2
 800261a:	f000 fc45 	bl	8002ea8 <IOE_Delay>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fc0a 	bl	8002e54 <IOE_Read>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b80      	cmp	r3, #128	; 0x80
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	214c      	movs	r1, #76	; 0x4c
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fbf8 	bl	8002e54 <IOE_Read>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e00d      	b.n	800268c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2201      	movs	r2, #1
 8002676:	214b      	movs	r1, #75	; 0x4b
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fbd8 	bl	8002e2e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2200      	movs	r2, #0
 8002684:	214b      	movs	r1, #75	; 0x4b
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fbd1 	bl	8002e2e <IOE_Write>
  }
  
  return ret;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	f107 0210 	add.w	r2, r7, #16
 80026ac:	2304      	movs	r3, #4
 80026ae:	21d7      	movs	r1, #215	; 0xd7
 80026b0:	f000 fbe3 	bl	8002e7a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80026b4:	7c3b      	ldrb	r3, [r7, #16]
 80026b6:	061a      	lsls	r2, r3, #24
 80026b8:	7c7b      	ldrb	r3, [r7, #17]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431a      	orrs	r2, r3
 80026be:	7cbb      	ldrb	r3, [r7, #18]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	4313      	orrs	r3, r2
 80026c4:	7cfa      	ldrb	r2, [r7, #19]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	0d1b      	lsrs	r3, r3, #20
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2201      	movs	r2, #1
 80026ea:	214b      	movs	r1, #75	; 0x4b
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fb9e 	bl	8002e2e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2200      	movs	r2, #0
 80026f8:	214b      	movs	r1, #75	; 0x4b
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fb97 	bl	8002e2e <IOE_Write>
}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002712:	f000 fb86 	bl	8002e22 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	211f      	movs	r1, #31
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe76 	bl	800240c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fe36 	bl	8002394 <stmpe811_EnableGlobalIT>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe47 	bl	80023d0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	211f      	movs	r1, #31
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fe81 	bl	800244e <stmpe811_DisableITSource>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	211f      	movs	r1, #31
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fe99 	bl	800249a <stmpe811_ReadGITStatus>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	211f      	movs	r1, #31
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fea1 	bl	80024c8 <stmpe811_ClearGlobalIT>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e00b      	b.n	80027bc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <stmpe811_GetInstance+0x40>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d101      	bne.n	80027b6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	e006      	b.n	80027c4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	3301      	adds	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d9f0      	bls.n	80027a4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80027c2:	23ff      	movs	r3, #255	; 0xff
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	200000c8 	.word	0x200000c8

080027d4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <I2Cx_MspInit+0xdc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d15f      	bne.n	80028a6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <I2Cx_MspInit+0xe0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a31      	ldr	r2, [pc, #196]	; (80028b4 <I2Cx_MspInit+0xe0>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <I2Cx_MspInit+0xe0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <I2Cx_MspInit+0xe0>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002824:	2312      	movs	r3, #18
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002830:	2304      	movs	r3, #4
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	481f      	ldr	r0, [pc, #124]	; (80028b8 <I2Cx_MspInit+0xe4>)
 800283c:	f002 fd3e 	bl	80052bc <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	481b      	ldr	r0, [pc, #108]	; (80028bc <I2Cx_MspInit+0xe8>)
 800284e:	f002 fd35 	bl	80052bc <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <I2Cx_MspInit+0xe0>)
 800285c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002878:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <I2Cx_MspInit+0xe0>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <I2Cx_MspInit+0xe0>)
 8002880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002884:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	210f      	movs	r1, #15
 800288a:	2048      	movs	r0, #72	; 0x48
 800288c:	f001 fe92 	bl	80045b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002890:	2048      	movs	r0, #72	; 0x48
 8002892:	f001 feab 	bl	80045ec <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	210f      	movs	r1, #15
 800289a:	2049      	movs	r0, #73	; 0x49
 800289c:	f001 fe8a 	bl	80045b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80028a0:	2049      	movs	r0, #73	; 0x49
 80028a2:	f001 fea3 	bl	80045ec <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3728      	adds	r7, #40	; 0x28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40005c00 	.word	0x40005c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020800 	.word	0x40020800

080028c0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80028c4:	4814      	ldr	r0, [pc, #80]	; (8002918 <I2Cx_Init+0x58>)
 80028c6:	f003 fc4f 	bl	8006168 <HAL_I2C_GetState>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d121      	bne.n	8002914 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <I2Cx_Init+0x58>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <I2Cx_Init+0x5c>)
 80028d4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <I2Cx_Init+0x58>)
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <I2Cx_Init+0x60>)
 80028da:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <I2Cx_Init+0x58>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <I2Cx_Init+0x58>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <I2Cx_Init+0x58>)
 80028ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ee:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <I2Cx_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <I2Cx_Init+0x58>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <I2Cx_Init+0x58>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <I2Cx_Init+0x58>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <I2Cx_Init+0x58>)
 800290a:	f7ff ff63 	bl	80027d4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800290e:	4802      	ldr	r0, [pc, #8]	; (8002918 <I2Cx_Init+0x58>)
 8002910:	f002 ffa2 	bl	8005858 <HAL_I2C_Init>
  }
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	200004e0 	.word	0x200004e0
 800291c:	40005c00 	.word	0x40005c00
 8002920:	000186a0 	.word	0x000186a0

08002924 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <I2Cx_ITConfig+0x58>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <I2Cx_ITConfig+0x58>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <I2Cx_ITConfig+0x58>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800294c:	2301      	movs	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <I2Cx_ITConfig+0x5c>)
 8002956:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <I2Cx_ITConfig+0x60>)
 800295e:	f002 fcad 	bl	80052bc <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002962:	2200      	movs	r2, #0
 8002964:	210f      	movs	r1, #15
 8002966:	2028      	movs	r0, #40	; 0x28
 8002968:	f001 fe24 	bl	80045b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800296c:	2028      	movs	r0, #40	; 0x28
 800296e:	f001 fe3d 	bl	80045ec <HAL_NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	10210000 	.word	0x10210000
 8002984:	40020000 	.word	0x40020000

08002988 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af04      	add	r7, sp, #16
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	460b      	mov	r3, r1
 8002994:	71bb      	strb	r3, [r7, #6]
 8002996:	4613      	mov	r3, r2
 8002998:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	b299      	uxth	r1, r3
 80029a2:	79bb      	ldrb	r3, [r7, #6]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <I2Cx_WriteData+0x4c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	2301      	movs	r3, #1
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	1d7b      	adds	r3, r7, #5
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2301      	movs	r3, #1
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <I2Cx_WriteData+0x50>)
 80029b8:	f003 f8b6 	bl	8005b28 <HAL_I2C_Mem_Write>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80029c6:	f000 f863 	bl	8002a90 <I2Cx_Error>
  }        
}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000074 	.word	0x20000074
 80029d8:	200004e0 	.word	0x200004e0

080029dc <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	b299      	uxth	r1, r3
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <I2Cx_ReadData+0x50>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2301      	movs	r3, #1
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	f107 030e 	add.w	r3, r7, #14
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4808      	ldr	r0, [pc, #32]	; (8002a30 <I2Cx_ReadData+0x54>)
 8002a10:	f003 f984 	bl	8005d1c <HAL_I2C_Mem_Read>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a1e:	f000 f837 	bl	8002a90 <I2Cx_Error>
  
  }
  return value;
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000074 	.word	0x20000074
 8002a30:	200004e0 	.word	0x200004e0

08002a34 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	603a      	str	r2, [r7, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	460b      	mov	r3, r1
 8002a44:	71bb      	strb	r3, [r7, #6]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	b299      	uxth	r1, r3
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <I2Cx_ReadBuffer+0x54>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	88bb      	ldrh	r3, [r7, #4]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	4809      	ldr	r0, [pc, #36]	; (8002a8c <I2Cx_ReadBuffer+0x58>)
 8002a68:	f003 f958 	bl	8005d1c <HAL_I2C_Mem_Read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e002      	b.n	8002a80 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002a7a:	f000 f809 	bl	8002a90 <I2Cx_Error>

    return 1;
 8002a7e:	2301      	movs	r3, #1
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000074 	.word	0x20000074
 8002a8c:	200004e0 	.word	0x200004e0

08002a90 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <I2Cx_Error+0x14>)
 8002a96:	f003 f817 	bl	8005ac8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002a9a:	f7ff ff11 	bl	80028c0 <I2Cx_Init>
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200004e0 	.word	0x200004e0

08002aa8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002aac:	4819      	ldr	r0, [pc, #100]	; (8002b14 <SPIx_Init+0x6c>)
 8002aae:	f005 fd97 	bl	80085e0 <HAL_SPI_GetState>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d12b      	bne.n	8002b10 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <SPIx_Init+0x6c>)
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <SPIx_Init+0x70>)
 8002abc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <SPIx_Init+0x6c>)
 8002ac0:	2218      	movs	r2, #24
 8002ac2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <SPIx_Init+0x6c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <SPIx_Init+0x6c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <SPIx_Init+0x6c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <SPIx_Init+0x6c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002adc:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <SPIx_Init+0x6c>)
 8002ade:	2207      	movs	r2, #7
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <SPIx_Init+0x6c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <SPIx_Init+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <SPIx_Init+0x6c>)
 8002af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <SPIx_Init+0x6c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SPIx_Init+0x6c>)
 8002afe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b02:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <SPIx_Init+0x6c>)
 8002b06:	f000 f853 	bl	8002bb0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002b0a:	4802      	ldr	r0, [pc, #8]	; (8002b14 <SPIx_Init+0x6c>)
 8002b0c:	f005 f8fd 	bl	8007d0a <HAL_SPI_Init>
  } 
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200000cc 	.word	0x200000cc
 8002b18:	40015000 	.word	0x40015000

08002b1c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <SPIx_Read+0x38>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f107 0108 	add.w	r1, r7, #8
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <SPIx_Read+0x3c>)
 8002b38:	f005 faa7 	bl	800808a <HAL_SPI_Receive>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b46:	f000 f827 	bl	8002b98 <SPIx_Error>
  }
  
  return readvalue;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000078 	.word	0x20000078
 8002b58:	200000cc 	.word	0x200000cc

08002b5c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <SPIx_Write+0x34>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	1db9      	adds	r1, r7, #6
 8002b70:	2201      	movs	r2, #1
 8002b72:	4808      	ldr	r0, [pc, #32]	; (8002b94 <SPIx_Write+0x38>)
 8002b74:	f005 f955 	bl	8007e22 <HAL_SPI_Transmit>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b82:	f000 f809 	bl	8002b98 <SPIx_Error>
  }
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000078 	.word	0x20000078
 8002b94:	200000cc 	.word	0x200000cc

08002b98 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002b9c:	4803      	ldr	r0, [pc, #12]	; (8002bac <SPIx_Error+0x14>)
 8002b9e:	f005 f918 	bl	8007dd2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002ba2:	f7ff ff81 	bl	8002aa8 <SPIx_Init>
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200000cc 	.word	0x200000cc

08002bb0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	6313      	str	r3, [r2, #48]	; 0x30
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <SPIx_MspInit+0x6c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002bf0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002c02:	2305      	movs	r3, #5
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <SPIx_MspInit+0x70>)
 8002c0e:	f002 fb55 	bl	80052bc <HAL_GPIO_Init>
}
 8002c12:	bf00      	nop
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40021400 	.word	0x40021400

08002c24 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <LCD_IO_Init+0xe0>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d164      	bne.n	8002cfc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <LCD_IO_Init+0xe0>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4827      	ldr	r0, [pc, #156]	; (8002d0c <LCD_IO_Init+0xe8>)
 8002c6e:	f002 fb25 	bl	80052bc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c7c:	f043 0308 	orr.w	r3, r3, #8
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4819      	ldr	r0, [pc, #100]	; (8002d0c <LCD_IO_Init+0xe8>)
 8002ca8:	f002 fb08 	bl	80052bc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <LCD_IO_Init+0xe4>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480c      	ldr	r0, [pc, #48]	; (8002d10 <LCD_IO_Init+0xec>)
 8002ce0:	f002 faec 	bl	80052bc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <LCD_IO_Init+0xec>)
 8002cea:	f002 fd9b 	bl	8005824 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002cee:	2201      	movs	r2, #1
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	4807      	ldr	r0, [pc, #28]	; (8002d10 <LCD_IO_Init+0xec>)
 8002cf4:	f002 fd96 	bl	8005824 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002cf8:	f7ff fed6 	bl	8002aa8 <SPIx_Init>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000124 	.word	0x20000124
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40020800 	.word	0x40020800

08002d14 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d24:	480a      	ldr	r0, [pc, #40]	; (8002d50 <LCD_IO_WriteData+0x3c>)
 8002d26:	f002 fd7d 	bl	8005824 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <LCD_IO_WriteData+0x40>)
 8002d30:	f002 fd78 	bl	8005824 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff10 	bl	8002b5c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2104      	movs	r1, #4
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <LCD_IO_WriteData+0x40>)
 8002d42:	f002 fd6f 	bl	8005824 <HAL_GPIO_WritePin>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40020800 	.word	0x40020800

08002d58 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002d62:	2200      	movs	r2, #0
 8002d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d68:	480a      	ldr	r0, [pc, #40]	; (8002d94 <LCD_IO_WriteReg+0x3c>)
 8002d6a:	f002 fd5b 	bl	8005824 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2104      	movs	r1, #4
 8002d72:	4809      	ldr	r0, [pc, #36]	; (8002d98 <LCD_IO_WriteReg+0x40>)
 8002d74:	f002 fd56 	bl	8005824 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff feed 	bl	8002b5c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d82:	2201      	movs	r2, #1
 8002d84:	2104      	movs	r1, #4
 8002d86:	4804      	ldr	r0, [pc, #16]	; (8002d98 <LCD_IO_WriteReg+0x40>)
 8002d88:	f002 fd4c 	bl	8005824 <HAL_GPIO_WritePin>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40020800 	.word	0x40020800

08002d9c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	460a      	mov	r2, r1
 8002da6:	80fb      	strh	r3, [r7, #6]
 8002da8:	4613      	mov	r3, r2
 8002daa:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002db0:	2200      	movs	r2, #0
 8002db2:	2104      	movs	r1, #4
 8002db4:	4810      	ldr	r0, [pc, #64]	; (8002df8 <LCD_IO_ReadData+0x5c>)
 8002db6:	f002 fd35 	bl	8005824 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <LCD_IO_ReadData+0x60>)
 8002dc2:	f002 fd2f 	bl	8005824 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fec7 	bl	8002b5c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002dce:	797b      	ldrb	r3, [r7, #5]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fea3 	bl	8002b1c <SPIx_Read>
 8002dd6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dde:	4807      	ldr	r0, [pc, #28]	; (8002dfc <LCD_IO_ReadData+0x60>)
 8002de0:	f002 fd20 	bl	8005824 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002de4:	2201      	movs	r2, #1
 8002de6:	2104      	movs	r1, #4
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <LCD_IO_ReadData+0x5c>)
 8002dea:	f002 fd1b 	bl	8005824 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00

08002e00 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 faf9 	bl	8004400 <HAL_Delay>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002e1a:	f7ff fd51 	bl	80028c0 <I2Cx_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002e26:	f7ff fd7d 	bl	8002924 <I2Cx_ITConfig>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	71bb      	strb	r3, [r7, #6]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002e40:	797a      	ldrb	r2, [r7, #5]
 8002e42:	79b9      	ldrb	r1, [r7, #6]
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd9e 	bl	8002988 <I2Cx_WriteData>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002e64:	79ba      	ldrb	r2, [r7, #6]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fdb6 	bl	80029dc <I2Cx_ReadData>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	603a      	str	r2, [r7, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	71bb      	strb	r3, [r7, #6]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	79b9      	ldrb	r1, [r7, #6]
 8002e94:	79f8      	ldrb	r0, [r7, #7]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	f7ff fdcc 	bl	8002a34 <I2Cx_ReadBuffer>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	b29b      	uxth	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f001 faa5 	bl	8004400 <HAL_Delay>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <BSP_LCD_Init+0xc0>)
 8002ec8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ecc:	2209      	movs	r2, #9
 8002ece:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ed6:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ed8:	221d      	movs	r2, #29
 8002eda:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ede:	2203      	movs	r2, #3
 8002ee0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ee4:	f240 120d 	movw	r2, #269	; 0x10d
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002eec:	f240 1243 	movw	r2, #323	; 0x143
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002ef4:	f240 1217 	movw	r2, #279	; 0x117
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002efc:	f240 1247 	movw	r2, #327	; 0x147
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <BSP_LCD_Init+0xc4>)
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <BSP_LCD_Init+0xc4>)
 8002f22:	22c0      	movs	r2, #192	; 0xc0
 8002f24:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <BSP_LCD_Init+0xc4>)
 8002f28:	2204      	movs	r2, #4
 8002f2a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <BSP_LCD_Init+0xc4>)
 8002f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002f34:	4813      	ldr	r0, [pc, #76]	; (8002f84 <BSP_LCD_Init+0xc4>)
 8002f36:	f004 fcab 	bl	8007890 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002f52:	f000 fd6f 	bl	8003a34 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002f56:	4809      	ldr	r0, [pc, #36]	; (8002f7c <BSP_LCD_Init+0xbc>)
 8002f58:	f003 fce6 	bl	8006928 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <BSP_LCD_Init+0xc8>)
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <BSP_LCD_Init+0xcc>)
 8002f60:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <BSP_LCD_Init+0xc8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002f6a:	f000 ff51 	bl	8003e10 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f6e:	4808      	ldr	r0, [pc, #32]	; (8002f90 <BSP_LCD_Init+0xd0>)
 8002f70:	f000 f8ce 	bl	8003110 <BSP_LCD_SetFont>

  return LCD_OK;
 8002f74:	2300      	movs	r3, #0
}  
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000534 	.word	0x20000534
 8002f80:	40016800 	.word	0x40016800
 8002f84:	20000168 	.word	0x20000168
 8002f88:	200005dc 	.word	0x200005dc
 8002f8c:	20000014 	.word	0x20000014
 8002f90:	2000007c 	.word	0x2000007c

08002f94 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <BSP_LCD_GetXSize+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	4798      	blx	r3
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200005dc 	.word	0x200005dc

08002fac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <BSP_LCD_GetYSize+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	4798      	blx	r3
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200005dc 	.word	0x200005dc

08002fc4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002fd4:	f7ff ffde 	bl	8002f94 <BSP_LCD_GetXSize>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002fe0:	f7ff ffe4 	bl	8002fac <BSP_LCD_GetYSize>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002ff0:	23ff      	movs	r3, #255	; 0xff
 8002ff2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800300a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003010:	2307      	movs	r3, #7
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003014:	f7ff ffbe 	bl	8002f94 <BSP_LCD_GetXSize>
 8003018:	4603      	mov	r3, r0
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800301c:	f7ff ffc6 	bl	8002fac <BSP_LCD_GetYSize>
 8003020:	4603      	mov	r3, r0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4619      	mov	r1, r3
 800302c:	4814      	ldr	r0, [pc, #80]	; (8003080 <BSP_LCD_LayerDefaultInit+0xbc>)
 800302e:	f003 fd4b 	bl	8006ac8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	4913      	ldr	r1, [pc, #76]	; (8003084 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3304      	adds	r3, #4
 8003042:	f04f 32ff 	mov.w	r2, #4294967295
 8003046:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003048:	88fa      	ldrh	r2, [r7, #6]
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <BSP_LCD_LayerDefaultInit+0xc0>)
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3308      	adds	r3, #8
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <BSP_LCD_LayerDefaultInit+0xc4>)
 800305a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	4909      	ldr	r1, [pc, #36]	; (8003084 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800306e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003072:	f003 fd67 	bl	8006b44 <HAL_LTDC_EnableDither>
}
 8003076:	bf00      	nop
 8003078:	3740      	adds	r7, #64	; 0x40
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000534 	.word	0x20000534
 8003084:	2000019c 	.word	0x2000019c
 8003088:	2000007c 	.word	0x2000007c

0800308c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <BSP_LCD_SelectLayer+0x1c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000198 	.word	0x20000198

080030ac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <BSP_LCD_SetTextColor+0x28>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4907      	ldr	r1, [pc, #28]	; (80030d8 <BSP_LCD_SetTextColor+0x2c>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20000198 	.word	0x20000198
 80030d8:	2000019c 	.word	0x2000019c

080030dc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <BSP_LCD_SetBackColor+0x2c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4908      	ldr	r1, [pc, #32]	; (800310c <BSP_LCD_SetBackColor+0x30>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3304      	adds	r3, #4
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000198 	.word	0x20000198
 800310c:	2000019c 	.word	0x2000019c

08003110 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <BSP_LCD_SetFont+0x2c>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4908      	ldr	r1, [pc, #32]	; (8003140 <BSP_LCD_SetFont+0x30>)
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3308      	adds	r3, #8
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000198 	.word	0x20000198
 8003140:	2000019c 	.word	0x2000019c

08003144 <BSP_LCD_ReadPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	460a      	mov	r2, r1
 800314e:	80fb      	strh	r3, [r7, #6]
 8003150:	4613      	mov	r3, r2
 8003152:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4b      	ldr	r2, [pc, #300]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 800315e:	2134      	movs	r1, #52	; 0x34
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3348      	adds	r3, #72	; 0x48
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a46      	ldr	r2, [pc, #280]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 8003174:	2134      	movs	r1, #52	; 0x34
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	335c      	adds	r3, #92	; 0x5c
 800317e:	681c      	ldr	r4, [r3, #0]
 8003180:	88bd      	ldrh	r5, [r7, #4]
 8003182:	f7ff ff07 	bl	8002f94 <BSP_LCD_GetXSize>
 8003186:	4603      	mov	r3, r0
 8003188:	fb03 f205 	mul.w	r2, r3, r5
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4423      	add	r3, r4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e070      	b.n	800327c <BSP_LCD_ReadPixel+0x138>
  }
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3b      	ldr	r2, [pc, #236]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 80031a0:	2134      	movs	r1, #52	; 0x34
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3348      	adds	r3, #72	; 0x48
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d117      	bne.n	80031e0 <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 80031b0:	4b35      	ldr	r3, [pc, #212]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 80031b6:	2134      	movs	r1, #52	; 0x34
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	335c      	adds	r3, #92	; 0x5c
 80031c0:	681c      	ldr	r4, [r3, #0]
 80031c2:	88bd      	ldrh	r5, [r7, #4]
 80031c4:	f7ff fee6 	bl	8002f94 <BSP_LCD_GetXSize>
 80031c8:	4603      	mov	r3, r0
 80031ca:	fb03 f205 	mul.w	r2, r3, r5
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4423      	add	r3, r4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e04d      	b.n	800327c <BSP_LCD_ReadPixel+0x138>
  }
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a29      	ldr	r2, [pc, #164]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 80031e6:	2134      	movs	r1, #52	; 0x34
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d015      	beq.n	8003222 <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a24      	ldr	r2, [pc, #144]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 80031fc:	2134      	movs	r1, #52	; 0x34
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3348      	adds	r3, #72	; 0x48
 8003206:	681b      	ldr	r3, [r3, #0]
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00a      	beq.n	8003222 <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1e      	ldr	r2, [pc, #120]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 8003212:	2134      	movs	r1, #52	; 0x34
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3348      	adds	r3, #72	; 0x48
 800321c:	681b      	ldr	r3, [r3, #0]
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800321e:	2b07      	cmp	r3, #7
 8003220:	d116      	bne.n	8003250 <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 8003228:	2134      	movs	r1, #52	; 0x34
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	335c      	adds	r3, #92	; 0x5c
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	88bd      	ldrh	r5, [r7, #4]
 8003236:	f7ff fead 	bl	8002f94 <BSP_LCD_GetXSize>
 800323a:	4603      	mov	r3, r0
 800323c:	fb03 f205 	mul.w	r2, r3, r5
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4423      	add	r3, r4
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e015      	b.n	800327c <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <BSP_LCD_ReadPixel+0x144>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <BSP_LCD_ReadPixel+0x148>)
 8003256:	2134      	movs	r1, #52	; 0x34
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	335c      	adds	r3, #92	; 0x5c
 8003260:	681c      	ldr	r4, [r3, #0]
 8003262:	88bd      	ldrh	r5, [r7, #4]
 8003264:	f7ff fe96 	bl	8002f94 <BSP_LCD_GetXSize>
 8003268:	4603      	mov	r3, r0
 800326a:	fb03 f205 	mul.w	r2, r3, r5
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4413      	add	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4423      	add	r3, r4
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bdb0      	pop	{r4, r5, r7, pc}
 8003286:	bf00      	nop
 8003288:	20000198 	.word	0x20000198
 800328c:	20000534 	.word	0x20000534

08003290 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <BSP_LCD_Clear+0x48>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <BSP_LCD_Clear+0x48>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <BSP_LCD_Clear+0x4c>)
 80032a2:	2134      	movs	r1, #52	; 0x34
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461d      	mov	r5, r3
 80032b0:	f7ff fe70 	bl	8002f94 <BSP_LCD_GetXSize>
 80032b4:	4606      	mov	r6, r0
 80032b6:	f7ff fe79 	bl	8002fac <BSP_LCD_GetYSize>
 80032ba:	4602      	mov	r2, r0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	4632      	mov	r2, r6
 80032c8:	4629      	mov	r1, r5
 80032ca:	4620      	mov	r0, r4
 80032cc:	f000 fd68 	bl	8003da0 <FillBuffer>
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d8:	20000198 	.word	0x20000198
 80032dc:	20000534 	.word	0x20000534

080032e0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
 80032ea:	460b      	mov	r3, r1
 80032ec:	80bb      	strh	r3, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <BSP_LCD_DisplayChar+0x80>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	491b      	ldr	r1, [pc, #108]	; (8003364 <BSP_LCD_DisplayChar+0x84>)
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3308      	adds	r3, #8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <BSP_LCD_DisplayChar+0x80>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4c14      	ldr	r4, [pc, #80]	; (8003364 <BSP_LCD_DisplayChar+0x84>)
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4423      	add	r3, r4
 800331e:	3308      	adds	r3, #8
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003324:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <BSP_LCD_DisplayChar+0x80>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <BSP_LCD_DisplayChar+0x84>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4423      	add	r3, r4
 8003338:	3308      	adds	r3, #8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	889b      	ldrh	r3, [r3, #4]
 800333e:	3307      	adds	r3, #7
 8003340:	2b00      	cmp	r3, #0
 8003342:	da00      	bge.n	8003346 <BSP_LCD_DisplayChar+0x66>
 8003344:	3307      	adds	r3, #7
 8003346:	10db      	asrs	r3, r3, #3
 8003348:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800334c:	18ca      	adds	r2, r1, r3
 800334e:	88b9      	ldrh	r1, [r7, #4]
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fc6a 	bl	8003c2c <DrawChar>
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	20000198 	.word	0x20000198
 8003364:	2000019c 	.word	0x2000019c

08003368 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	81fb      	strh	r3, [r7, #14]
 8003376:	460b      	mov	r3, r1
 8003378:	81bb      	strh	r3, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800337e:	2301      	movs	r3, #1
 8003380:	83fb      	strh	r3, [r7, #30]
 8003382:	2300      	movs	r3, #0
 8003384:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003392:	e002      	b.n	800339a <BSP_LCD_DisplayStringAt+0x32>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3301      	adds	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	617a      	str	r2, [r7, #20]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f6      	bne.n	8003394 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80033a6:	f7ff fdf5 	bl	8002f94 <BSP_LCD_GetXSize>
 80033aa:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	494a      	ldr	r1, [pc, #296]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3308      	adds	r3, #8
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	889b      	ldrh	r3, [r3, #4]
 80033c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d01c      	beq.n	8003406 <BSP_LCD_DisplayStringAt+0x9e>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d017      	beq.n	8003400 <BSP_LCD_DisplayStringAt+0x98>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d12e      	bne.n	8003432 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad1      	subs	r1, r2, r3
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	483e      	ldr	r0, [pc, #248]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4403      	add	r3, r0
 80033ea:	3308      	adds	r3, #8
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	889b      	ldrh	r3, [r3, #4]
 80033f0:	fb03 f301 	mul.w	r3, r3, r1
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	4413      	add	r3, r2
 80033fc:	83fb      	strh	r3, [r7, #30]
      break;
 80033fe:	e01b      	b.n	8003438 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003400:	89fb      	ldrh	r3, [r7, #14]
 8003402:	83fb      	strh	r3, [r7, #30]
      break;
 8003404:	e018      	b.n	8003438 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b299      	uxth	r1, r3
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4831      	ldr	r0, [pc, #196]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4403      	add	r3, r0
 800341e:	3308      	adds	r3, #8
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	889b      	ldrh	r3, [r3, #4]
 8003424:	fb11 f303 	smulbb	r3, r1, r3
 8003428:	b29a      	uxth	r2, r3
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	4413      	add	r3, r2
 800342e:	83fb      	strh	r3, [r7, #30]
      break;
 8003430:	e002      	b.n	8003438 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	83fb      	strh	r3, [r7, #30]
      break;
 8003436:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003438:	e01a      	b.n	8003470 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	89b9      	ldrh	r1, [r7, #12]
 8003440:	8bfb      	ldrh	r3, [r7, #30]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff4c 	bl	80032e0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003448:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4922      	ldr	r1, [pc, #136]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3308      	adds	r3, #8
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	889a      	ldrh	r2, [r3, #4]
 800345e:	8bfb      	ldrh	r3, [r7, #30]
 8003460:	4413      	add	r3, r2
 8003462:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
    i++;
 800346a:	8bbb      	ldrh	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2dc      	uxtb	r4, r3
 800347e:	f7ff fd89 	bl	8002f94 <BSP_LCD_GetXSize>
 8003482:	4605      	mov	r5, r0
 8003484:	8bb9      	ldrh	r1, [r7, #28]
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4813      	ldr	r0, [pc, #76]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4403      	add	r3, r0
 8003496:	3308      	adds	r3, #8
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	889b      	ldrh	r3, [r3, #4]
 800349c:	fb03 f301 	mul.w	r3, r3, r1
 80034a0:	1aeb      	subs	r3, r5, r3
 80034a2:	b299      	uxth	r1, r3
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <BSP_LCD_DisplayStringAt+0x16c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <BSP_LCD_DisplayStringAt+0x170>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4403      	add	r3, r0
 80034b4:	3308      	adds	r3, #8
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	889b      	ldrh	r3, [r3, #4]
 80034ba:	4299      	cmp	r1, r3
 80034bc:	bf2c      	ite	cs
 80034be:	2301      	movcs	r3, #1
 80034c0:	2300      	movcc	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4023      	ands	r3, r4
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1b6      	bne.n	800343a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80034cc:	bf00      	nop
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bdb0      	pop	{r4, r5, r7, pc}
 80034d4:	20000198 	.word	0x20000198
 80034d8:	2000019c 	.word	0x2000019c

080034dc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80034dc:	b5b0      	push	{r4, r5, r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
 80034e6:	460b      	mov	r3, r1
 80034e8:	80bb      	strh	r3, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <BSP_LCD_DrawHLine+0x70>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	; (8003550 <BSP_LCD_DrawHLine+0x74>)
 80034f8:	2134      	movs	r1, #52	; 0x34
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	335c      	adds	r3, #92	; 0x5c
 8003502:	681c      	ldr	r4, [r3, #0]
 8003504:	f7ff fd46 	bl	8002f94 <BSP_LCD_GetXSize>
 8003508:	4602      	mov	r2, r0
 800350a:	88bb      	ldrh	r3, [r7, #4]
 800350c:	fb03 f202 	mul.w	r2, r3, r2
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4423      	add	r3, r4
 8003518:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <BSP_LCD_DrawHLine+0x70>)
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	68fc      	ldr	r4, [r7, #12]
 8003520:	887d      	ldrh	r5, [r7, #2]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <BSP_LCD_DrawHLine+0x70>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	490b      	ldr	r1, [pc, #44]	; (8003554 <BSP_LCD_DrawHLine+0x78>)
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2301      	movs	r3, #1
 800353c:	462a      	mov	r2, r5
 800353e:	4621      	mov	r1, r4
 8003540:	f000 fc2e 	bl	8003da0 <FillBuffer>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bdb0      	pop	{r4, r5, r7, pc}
 800354c:	20000198 	.word	0x20000198
 8003550:	20000534 	.word	0x20000534
 8003554:	2000019c 	.word	0x2000019c

08003558 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af02      	add	r7, sp, #8
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
 8003562:	460b      	mov	r3, r1
 8003564:	80bb      	strh	r3, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800356e:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <BSP_LCD_DrawVLine+0x78>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <BSP_LCD_DrawVLine+0x7c>)
 8003574:	2134      	movs	r1, #52	; 0x34
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	335c      	adds	r3, #92	; 0x5c
 800357e:	681c      	ldr	r4, [r3, #0]
 8003580:	f7ff fd08 	bl	8002f94 <BSP_LCD_GetXSize>
 8003584:	4602      	mov	r2, r0
 8003586:	88bb      	ldrh	r3, [r7, #4]
 8003588:	fb03 f202 	mul.w	r2, r3, r2
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4423      	add	r3, r4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <BSP_LCD_DrawVLine+0x78>)
 8003598:	681c      	ldr	r4, [r3, #0]
 800359a:	68fd      	ldr	r5, [r7, #12]
 800359c:	887e      	ldrh	r6, [r7, #2]
 800359e:	f7ff fcf9 	bl	8002f94 <BSP_LCD_GetXSize>
 80035a2:	4603      	mov	r3, r0
 80035a4:	1e59      	subs	r1, r3, #1
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <BSP_LCD_DrawVLine+0x78>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	480b      	ldr	r0, [pc, #44]	; (80035d8 <BSP_LCD_DrawVLine+0x80>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	9100      	str	r1, [sp, #0]
 80035bc:	4633      	mov	r3, r6
 80035be:	2201      	movs	r2, #1
 80035c0:	4629      	mov	r1, r5
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 fbec 	bl	8003da0 <FillBuffer>
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d0:	20000198 	.word	0x20000198
 80035d4:	20000534 	.word	0x20000534
 80035d8:	2000019c 	.word	0x2000019c

080035dc <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	4603      	mov	r3, r0
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]
 80035f6:	4613      	mov	r3, r2
 80035f8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	88b9      	ldrh	r1, [r7, #4]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff6b 	bl	80034dc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003606:	88ba      	ldrh	r2, [r7, #4]
 8003608:	883b      	ldrh	r3, [r7, #0]
 800360a:	4413      	add	r3, r2
 800360c:	b299      	uxth	r1, r3
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ff62 	bl	80034dc <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003618:	883a      	ldrh	r2, [r7, #0]
 800361a:	88b9      	ldrh	r1, [r7, #4]
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ff9a 	bl	8003558 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003624:	88fa      	ldrh	r2, [r7, #6]
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	4413      	add	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	883a      	ldrh	r2, [r7, #0]
 800362e:	88b9      	ldrh	r1, [r7, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff91 	bl	8003558 <BSP_LCD_DrawVLine>
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
	...

08003640 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
 800364a:	460b      	mov	r3, r1
 800364c:	80bb      	strh	r3, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	f1c3 0303 	rsb	r3, r3, #3
 800365a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003664:	e0cf      	b.n	8003806 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b29a      	uxth	r2, r3
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	4413      	add	r3, r2
 800366e:	b298      	uxth	r0, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	b29b      	uxth	r3, r3
 8003674:	88ba      	ldrh	r2, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	b29c      	uxth	r4, r3
 800367a:	4b67      	ldr	r3, [pc, #412]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4967      	ldr	r1, [pc, #412]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4621      	mov	r1, r4
 8003690:	f000 faa6 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	b29b      	uxth	r3, r3
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	b298      	uxth	r0, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	88ba      	ldrh	r2, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b29c      	uxth	r4, r3
 80036a8:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	495b      	ldr	r1, [pc, #364]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4621      	mov	r1, r4
 80036be:	f000 fa8f 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4413      	add	r3, r2
 80036ca:	b298      	uxth	r0, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	88ba      	ldrh	r2, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	b29c      	uxth	r4, r3
 80036d6:	4b50      	ldr	r3, [pc, #320]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4950      	ldr	r1, [pc, #320]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4621      	mov	r1, r4
 80036ec:	f000 fa78 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	b298      	uxth	r0, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	88ba      	ldrh	r2, [r7, #4]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	b29c      	uxth	r4, r3
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4621      	mov	r1, r4
 800371a:	f000 fa61 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	b29a      	uxth	r2, r3
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	4413      	add	r3, r2
 8003726:	b298      	uxth	r0, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	b29a      	uxth	r2, r3
 800372c:	88bb      	ldrh	r3, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	b29c      	uxth	r4, r3
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4939      	ldr	r1, [pc, #228]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4621      	mov	r1, r4
 8003748:	f000 fa4a 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	b29b      	uxth	r3, r3
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	b298      	uxth	r0, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	b29a      	uxth	r2, r3
 800375a:	88bb      	ldrh	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	b29c      	uxth	r4, r3
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	492d      	ldr	r1, [pc, #180]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4621      	mov	r1, r4
 8003776:	f000 fa33 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	b29a      	uxth	r2, r3
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	4413      	add	r3, r2
 8003782:	b298      	uxth	r0, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	b29a      	uxth	r2, r3
 8003788:	88bb      	ldrh	r3, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	b29c      	uxth	r4, r3
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4922      	ldr	r1, [pc, #136]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	f000 fa1c 	bl	8003be0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	b298      	uxth	r0, r3
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	b29c      	uxth	r4, r3
 80037bc:	4b16      	ldr	r3, [pc, #88]	; (8003818 <BSP_LCD_DrawCircle+0x1d8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4916      	ldr	r1, [pc, #88]	; (800381c <BSP_LCD_DrawCircle+0x1dc>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	4621      	mov	r1, r4
 80037d2:	f000 fa05 	bl	8003be0 <BSP_LCD_DrawPixel>

    if (d < 0)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	da06      	bge.n	80037ea <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4413      	add	r3, r2
 80037e4:	3306      	adds	r3, #6
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e00a      	b.n	8003800 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	009a      	lsls	r2, r3, #2
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4413      	add	r3, r2
 80037f6:	330a      	adds	r3, #10
 80037f8:	617b      	str	r3, [r7, #20]
      cury--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	3301      	adds	r3, #1
 8003804:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	429a      	cmp	r2, r3
 800380c:	f67f af2b 	bls.w	8003666 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	20000198 	.word	0x20000198
 800381c:	2000019c 	.word	0x2000019c

08003820 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af02      	add	r7, sp, #8
 8003828:	4604      	mov	r4, r0
 800382a:	4608      	mov	r0, r1
 800382c:	4611      	mov	r1, r2
 800382e:	461a      	mov	r2, r3
 8003830:	4623      	mov	r3, r4
 8003832:	80fb      	strh	r3, [r7, #6]
 8003834:	4603      	mov	r3, r0
 8003836:	80bb      	strh	r3, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <BSP_LCD_FillRect+0xa8>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4920      	ldr	r1, [pc, #128]	; (80038cc <BSP_LCD_FillRect+0xac>)
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fc28 	bl	80030ac <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <BSP_LCD_FillRect+0xa8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <BSP_LCD_FillRect+0xb0>)
 8003862:	2134      	movs	r1, #52	; 0x34
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	335c      	adds	r3, #92	; 0x5c
 800386c:	681c      	ldr	r4, [r3, #0]
 800386e:	f7ff fb91 	bl	8002f94 <BSP_LCD_GetXSize>
 8003872:	4602      	mov	r2, r0
 8003874:	88bb      	ldrh	r3, [r7, #4]
 8003876:	fb03 f202 	mul.w	r2, r3, r2
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4423      	add	r3, r4
 8003882:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <BSP_LCD_FillRect+0xa8>)
 8003886:	681c      	ldr	r4, [r3, #0]
 8003888:	68fd      	ldr	r5, [r7, #12]
 800388a:	887e      	ldrh	r6, [r7, #2]
 800388c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003890:	f7ff fb80 	bl	8002f94 <BSP_LCD_GetXSize>
 8003894:	4602      	mov	r2, r0
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	1ad1      	subs	r1, r2, r3
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <BSP_LCD_FillRect+0xa8>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	480b      	ldr	r0, [pc, #44]	; (80038cc <BSP_LCD_FillRect+0xac>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4403      	add	r3, r0
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	9100      	str	r1, [sp, #0]
 80038b0:	4643      	mov	r3, r8
 80038b2:	4632      	mov	r2, r6
 80038b4:	4629      	mov	r1, r5
 80038b6:	4620      	mov	r0, r4
 80038b8:	f000 fa72 	bl	8003da0 <FillBuffer>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c6:	bf00      	nop
 80038c8:	20000198 	.word	0x20000198
 80038cc:	2000019c 	.word	0x2000019c
 80038d0:	20000534 	.word	0x20000534

080038d4 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
 80038de:	460b      	mov	r3, r1
 80038e0:	80bb      	strh	r3, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	f1c3 0303 	rsb	r3, r3, #3
 80038ee:	617b      	str	r3, [r7, #20]

  curx = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80038f8:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <BSP_LCD_FillCircle+0x138>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4944      	ldr	r1, [pc, #272]	; (8003a10 <BSP_LCD_FillCircle+0x13c>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fbce 	bl	80030ac <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003910:	e061      	b.n	80039d6 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d021      	beq.n	800395c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	b29b      	uxth	r3, r3
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	b298      	uxth	r0, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	b29a      	uxth	r2, r3
 8003926:	88bb      	ldrh	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	b299      	uxth	r1, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	b29b      	uxth	r3, r3
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	f7ff fdd1 	bl	80034dc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	b29b      	uxth	r3, r3
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b298      	uxth	r0, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	b29b      	uxth	r3, r3
 8003948:	88ba      	ldrh	r2, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b299      	uxth	r1, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	b29b      	uxth	r3, r3
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	f7ff fdc0 	bl	80034dc <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d021      	beq.n	80039a6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	b29b      	uxth	r3, r3
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	b298      	uxth	r0, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	b29b      	uxth	r3, r3
 8003970:	88ba      	ldrh	r2, [r7, #4]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	b299      	uxth	r1, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	b29b      	uxth	r3, r3
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	f7ff fdac 	bl	80034dc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	b29b      	uxth	r3, r3
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	b298      	uxth	r0, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	b29a      	uxth	r2, r3
 8003992:	88bb      	ldrh	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	b299      	uxth	r1, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	b29b      	uxth	r3, r3
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	f7ff fd9b 	bl	80034dc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da06      	bge.n	80039ba <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	009a      	lsls	r2, r3, #2
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4413      	add	r3, r2
 80039b4:	3306      	adds	r3, #6
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e00a      	b.n	80039d0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	009a      	lsls	r2, r3, #2
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4413      	add	r3, r2
 80039c6:	330a      	adds	r3, #10
 80039c8:	617b      	str	r3, [r7, #20]
      cury--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	3301      	adds	r3, #1
 80039d4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d999      	bls.n	8003912 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <BSP_LCD_FillCircle+0x138>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	490b      	ldr	r1, [pc, #44]	; (8003a10 <BSP_LCD_FillCircle+0x13c>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fb5b 	bl	80030ac <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	88b9      	ldrh	r1, [r7, #4]
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe1f 	bl	8003640 <BSP_LCD_DrawCircle>
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000198 	.word	0x20000198
 8003a10:	2000019c 	.word	0x2000019c

08003a14 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <BSP_LCD_DisplayOn+0x1c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003a22:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <BSP_LCD_DisplayOn+0x1c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4798      	blx	r3
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200005dc 	.word	0x200005dc

08003a34 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08e      	sub	sp, #56	; 0x38
 8003a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a48:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	4b45      	ldr	r3, [pc, #276]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a44      	ldr	r2, [pc, #272]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a3d      	ldr	r2, [pc, #244]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a36      	ldr	r2, [pc, #216]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	4b30      	ldr	r3, [pc, #192]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <BSP_LCD_MspInit+0x190>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003b1a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003b2c:	230e      	movs	r3, #14
 8003b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b34:	4619      	mov	r1, r3
 8003b36:	4824      	ldr	r0, [pc, #144]	; (8003bc8 <BSP_LCD_MspInit+0x194>)
 8003b38:	f001 fbc0 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003b3c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b46:	4619      	mov	r1, r3
 8003b48:	4820      	ldr	r0, [pc, #128]	; (8003bcc <BSP_LCD_MspInit+0x198>)
 8003b4a:	f001 fbb7 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003b4e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	481d      	ldr	r0, [pc, #116]	; (8003bd0 <BSP_LCD_MspInit+0x19c>)
 8003b5c:	f001 fbae 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003b60:	2348      	movs	r3, #72	; 0x48
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	481a      	ldr	r0, [pc, #104]	; (8003bd4 <BSP_LCD_MspInit+0x1a0>)
 8003b6c:	f001 fba6 	bl	80052bc <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4816      	ldr	r0, [pc, #88]	; (8003bd8 <BSP_LCD_MspInit+0x1a4>)
 8003b7e:	f001 fb9d 	bl	80052bc <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003b82:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4813      	ldr	r0, [pc, #76]	; (8003bdc <BSP_LCD_MspInit+0x1a8>)
 8003b90:	f001 fb94 	bl	80052bc <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003b94:	2303      	movs	r3, #3
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003b98:	2309      	movs	r3, #9
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	480a      	ldr	r0, [pc, #40]	; (8003bcc <BSP_LCD_MspInit+0x198>)
 8003ba4:	f001 fb8a 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003ba8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4809      	ldr	r0, [pc, #36]	; (8003bdc <BSP_LCD_MspInit+0x1a8>)
 8003bb6:	f001 fb81 	bl	80052bc <HAL_GPIO_Init>
}
 8003bba:	bf00      	nop
 8003bbc:	3738      	adds	r7, #56	; 0x38
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021400 	.word	0x40021400
 8003bdc:	40021800 	.word	0x40021800

08003be0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	603a      	str	r2, [r7, #0]
 8003bea:	80fb      	strh	r3, [r7, #6]
 8003bec:	460b      	mov	r3, r1
 8003bee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <BSP_LCD_DrawPixel+0x44>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <BSP_LCD_DrawPixel+0x48>)
 8003bf6:	2134      	movs	r1, #52	; 0x34
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	335c      	adds	r3, #92	; 0x5c
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	88bd      	ldrh	r5, [r7, #4]
 8003c04:	f7ff f9c6 	bl	8002f94 <BSP_LCD_GetXSize>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	fb03 f205 	mul.w	r2, r3, r5
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4423      	add	r3, r4
 8003c16:	461a      	mov	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6013      	str	r3, [r2, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bdb0      	pop	{r4, r5, r7, pc}
 8003c24:	20000198 	.word	0x20000198
 8003c28:	20000534 	.word	0x20000534

08003c2c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	603a      	str	r2, [r7, #0]
 8003c36:	80fb      	strh	r3, [r7, #6]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003c48:	4b53      	ldr	r3, [pc, #332]	; (8003d98 <DrawChar+0x16c>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4953      	ldr	r1, [pc, #332]	; (8003d9c <DrawChar+0x170>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3308      	adds	r3, #8
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	88db      	ldrh	r3, [r3, #6]
 8003c5e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <DrawChar+0x16c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	494d      	ldr	r1, [pc, #308]	; (8003d9c <DrawChar+0x170>)
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3308      	adds	r3, #8
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	889b      	ldrh	r3, [r3, #4]
 8003c76:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003c78:	8a3b      	ldrh	r3, [r7, #16]
 8003c7a:	3307      	adds	r3, #7
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da00      	bge.n	8003c82 <DrawChar+0x56>
 8003c80:	3307      	adds	r3, #7
 8003c82:	10db      	asrs	r3, r3, #3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	8a3b      	ldrh	r3, [r7, #16]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e076      	b.n	8003d86 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003c98:	8a3b      	ldrh	r3, [r7, #16]
 8003c9a:	3307      	adds	r3, #7
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da00      	bge.n	8003ca2 <DrawChar+0x76>
 8003ca0:	3307      	adds	r3, #7
 8003ca2:	10db      	asrs	r3, r3, #3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fb03 f302 	mul.w	r3, r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003cb2:	8a3b      	ldrh	r3, [r7, #16]
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da00      	bge.n	8003cbc <DrawChar+0x90>
 8003cba:	3307      	adds	r3, #7
 8003cbc:	10db      	asrs	r3, r3, #3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d002      	beq.n	8003cc8 <DrawChar+0x9c>
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d004      	beq.n	8003cd0 <DrawChar+0xa4>
 8003cc6:	e00c      	b.n	8003ce2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	617b      	str	r3, [r7, #20]
      break;
 8003cce:	e016      	b.n	8003cfe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	3201      	adds	r2, #1
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
      break;
 8003ce0:	e00d      	b.n	8003cfe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	041a      	lsls	r2, r3, #16
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	3301      	adds	r3, #1
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	3202      	adds	r2, #2
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
      break;
 8003cfc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e036      	b.n	8003d72 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003d04:	8a3a      	ldrh	r2, [r7, #16]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	2201      	movs	r2, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	4413      	add	r3, r2
 8003d28:	b298      	uxth	r0, r3
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <DrawChar+0x16c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <DrawChar+0x170>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f7ff ff4e 	bl	8003be0 <BSP_LCD_DrawPixel>
 8003d44:	e012      	b.n	8003d6c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b298      	uxth	r0, r3
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <DrawChar+0x16c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4911      	ldr	r1, [pc, #68]	; (8003d9c <DrawChar+0x170>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3304      	adds	r3, #4
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	88bb      	ldrh	r3, [r7, #4]
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7ff ff3a 	bl	8003be0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	8a3b      	ldrh	r3, [r7, #16]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3c4      	bcc.n	8003d04 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003d7a:	88bb      	ldrh	r3, [r7, #4]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	8a7b      	ldrh	r3, [r7, #18]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d384      	bcc.n	8003c98 <DrawChar+0x6c>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000198 	.word	0x20000198
 8003d9c:	2000019c 	.word	0x2000019c

08003da0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003dae:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <FillBuffer+0x68>)
 8003db0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003db4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <FillBuffer+0x68>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <FillBuffer+0x68>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <FillBuffer+0x68>)
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <FillBuffer+0x6c>)
 8003dc6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003dc8:	480f      	ldr	r0, [pc, #60]	; (8003e08 <FillBuffer+0x68>)
 8003dca:	f000 fdd9 	bl	8004980 <HAL_DMA2D_Init>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d115      	bne.n	8003e00 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	480c      	ldr	r0, [pc, #48]	; (8003e08 <FillBuffer+0x68>)
 8003dd8:	f000 ff30 	bl	8004c3c <HAL_DMA2D_ConfigLayer>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69f9      	ldr	r1, [r7, #28]
 8003dec:	4806      	ldr	r0, [pc, #24]	; (8003e08 <FillBuffer+0x68>)
 8003dee:	f000 fe10 	bl	8004a12 <HAL_DMA2D_Start>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d103      	bne.n	8003e00 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003df8:	210a      	movs	r1, #10
 8003dfa:	4803      	ldr	r0, [pc, #12]	; (8003e08 <FillBuffer+0x68>)
 8003dfc:	f000 fe34 	bl	8004a68 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000128 	.word	0x20000128
 8003e0c:	4002b000 	.word	0x4002b000

08003e10 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e16:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <BSP_SDRAM_Init+0xb0>)
 8003e18:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e22:	2207      	movs	r2, #7
 8003e24:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e28:	2204      	movs	r2, #4
 8003e2a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e2e:	2207      	movs	r2, #7
 8003e30:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e34:	2202      	movs	r2, #2
 8003e36:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e40:	2202      	movs	r2, #2
 8003e42:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e52:	2204      	movs	r2, #4
 8003e54:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e58:	2210      	movs	r2, #16
 8003e5a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003e5c:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e5e:	2240      	movs	r2, #64	; 0x40
 8003e60:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e64:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003e68:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e76:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003e86:	2100      	movs	r1, #0
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e8a:	f000 f87f 	bl	8003f8c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <BSP_SDRAM_Init+0xb4>)
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <BSP_SDRAM_Init+0xac>)
 8003e92:	f003 febb 	bl	8007c0c <HAL_SDRAM_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <BSP_SDRAM_Init+0xb8>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e002      	b.n	8003eaa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <BSP_SDRAM_Init+0xb8>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003eaa:	f240 506a 	movw	r0, #1386	; 0x56a
 8003eae:	f000 f80d 	bl	8003ecc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <BSP_SDRAM_Init+0xb8>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200001b4 	.word	0x200001b4
 8003ec0:	a0000140 	.word	0xa0000140
 8003ec4:	200001e8 	.word	0x200001e8
 8003ec8:	20000094 	.word	0x20000094

08003ecc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef4:	4923      	ldr	r1, [pc, #140]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ef6:	4824      	ldr	r0, [pc, #144]	; (8003f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ef8:	f003 febc 	bl	8007c74 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003efc:	2001      	movs	r0, #1
 8003efe:	f000 fa7f 	bl	8004400 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f04:	2202      	movs	r2, #2
 8003f06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1e:	4919      	ldr	r1, [pc, #100]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f20:	4819      	ldr	r0, [pc, #100]	; (8003f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f22:	f003 fea7 	bl	8007c74 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f28:	2203      	movs	r2, #3
 8003f2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f2c:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f2e:	2208      	movs	r2, #8
 8003f30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f34:	2204      	movs	r2, #4
 8003f36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f42:	4910      	ldr	r1, [pc, #64]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f44:	4810      	ldr	r0, [pc, #64]	; (8003f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f46:	f003 fe95 	bl	8007c74 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003f4a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003f4e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f52:	2204      	movs	r2, #4
 8003f54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f58:	2208      	movs	r2, #8
 8003f5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f66:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6c:	4905      	ldr	r1, [pc, #20]	; (8003f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f6e:	4806      	ldr	r0, [pc, #24]	; (8003f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f70:	f003 fe80 	bl	8007c74 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4804      	ldr	r0, [pc, #16]	; (8003f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f78:	f003 fea7 	bl	8007cca <HAL_SDRAM_ProgramRefreshRate>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000204 	.word	0x20000204
 8003f88:	200001b4 	.word	0x200001b4

08003f8c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b090      	sub	sp, #64	; 0x40
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80ec 	beq.w	8004176 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	4b77      	ldr	r3, [pc, #476]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	4a76      	ldr	r2, [pc, #472]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6393      	str	r3, [r2, #56]	; 0x38
 8003fae:	4b74      	ldr	r3, [pc, #464]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	4b70      	ldr	r3, [pc, #448]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a6f      	ldr	r2, [pc, #444]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	4b69      	ldr	r3, [pc, #420]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a68      	ldr	r2, [pc, #416]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b66      	ldr	r3, [pc, #408]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	4b62      	ldr	r3, [pc, #392]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a61      	ldr	r2, [pc, #388]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b5f      	ldr	r3, [pc, #380]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	4b5b      	ldr	r3, [pc, #364]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a5a      	ldr	r2, [pc, #360]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	6313      	str	r3, [r2, #48]	; 0x30
 800401e:	4b58      	ldr	r3, [pc, #352]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a53      	ldr	r2, [pc, #332]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b51      	ldr	r3, [pc, #324]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a4c      	ldr	r2, [pc, #304]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a45      	ldr	r2, [pc, #276]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 800406c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b43      	ldr	r3, [pc, #268]	; (8004180 <BSP_SDRAM_MspInit+0x1f4>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004082:	2302      	movs	r3, #2
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800408a:	230c      	movs	r3, #12
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800408e:	2360      	movs	r3, #96	; 0x60
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004096:	4619      	mov	r1, r3
 8004098:	483a      	ldr	r0, [pc, #232]	; (8004184 <BSP_SDRAM_MspInit+0x1f8>)
 800409a:	f001 f90f 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800409e:	2301      	movs	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80040a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040a6:	4619      	mov	r1, r3
 80040a8:	4837      	ldr	r0, [pc, #220]	; (8004188 <BSP_SDRAM_MspInit+0x1fc>)
 80040aa:	f001 f907 	bl	80052bc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80040ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80040b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b8:	4619      	mov	r1, r3
 80040ba:	4834      	ldr	r0, [pc, #208]	; (800418c <BSP_SDRAM_MspInit+0x200>)
 80040bc:	f001 f8fe 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80040c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80040c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ca:	4619      	mov	r1, r3
 80040cc:	4830      	ldr	r0, [pc, #192]	; (8004190 <BSP_SDRAM_MspInit+0x204>)
 80040ce:	f001 f8f5 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80040d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80040d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040dc:	4619      	mov	r1, r3
 80040de:	482d      	ldr	r0, [pc, #180]	; (8004194 <BSP_SDRAM_MspInit+0x208>)
 80040e0:	f001 f8ec 	bl	80052bc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80040e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80040ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ee:	4619      	mov	r1, r3
 80040f0:	4829      	ldr	r0, [pc, #164]	; (8004198 <BSP_SDRAM_MspInit+0x20c>)
 80040f2:	f001 f8e3 	bl	80052bc <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004108:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800410c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004110:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004112:	4b22      	ldr	r3, [pc, #136]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004118:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800411c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004120:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004128:	4b1c      	ldr	r3, [pc, #112]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800412a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800412e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004132:	2200      	movs	r2, #0
 8004134:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004138:	2203      	movs	r2, #3
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800413e:	2200      	movs	r2, #0
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800414a:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <BSP_SDRAM_MspInit+0x214>)
 800414c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
 8004154:	4a11      	ldr	r2, [pc, #68]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800415a:	4810      	ldr	r0, [pc, #64]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 800415c:	f000 fb02 	bl	8004764 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004160:	480e      	ldr	r0, [pc, #56]	; (800419c <BSP_SDRAM_MspInit+0x210>)
 8004162:	f000 fa51 	bl	8004608 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	210f      	movs	r1, #15
 800416a:	2038      	movs	r0, #56	; 0x38
 800416c:	f000 fa22 	bl	80045b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004170:	2038      	movs	r0, #56	; 0x38
 8004172:	f000 fa3b 	bl	80045ec <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004176:	bf00      	nop
 8004178:	3740      	adds	r7, #64	; 0x40
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40020400 	.word	0x40020400
 8004188:	40020800 	.word	0x40020800
 800418c:	40020c00 	.word	0x40020c00
 8004190:	40021000 	.word	0x40021000
 8004194:	40021400 	.word	0x40021400
 8004198:	40021800 	.word	0x40021800
 800419c:	20000214 	.word	0x20000214
 80041a0:	40026410 	.word	0x40026410

080041a4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	460a      	mov	r2, r1
 80041ae:	80fb      	strh	r3, [r7, #6]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <BSP_TS_Init+0x64>)
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80041be:	4a13      	ldr	r2, [pc, #76]	; (800420c <BSP_TS_Init+0x68>)
 80041c0:	88bb      	ldrh	r3, [r7, #4]
 80041c2:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <BSP_TS_Init+0x6c>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2082      	movs	r0, #130	; 0x82
 80041ca:	4798      	blx	r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	f640 0311 	movw	r3, #2065	; 0x811
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <BSP_TS_Init+0x70>)
 80041da:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <BSP_TS_Init+0x6c>)
 80041dc:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <BSP_TS_Init+0x70>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2082      	movs	r0, #130	; 0x82
 80041f0:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <BSP_TS_Init+0x70>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2082      	movs	r0, #130	; 0x82
 80041fa:	4798      	blx	r3
  }

  return ret;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000278 	.word	0x20000278
 800420c:	2000027a 	.word	0x2000027a
 8004210:	2000004c 	.word	0x2000004c
 8004214:	20000274 	.word	0x20000274

08004218 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <BSP_TS_GetState+0x148>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2082      	movs	r0, #130	; 0x82
 8004228:	4798      	blx	r3
 800422a:	4603      	mov	r3, r0
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 808d 	beq.w	8004356 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800423c:	4b48      	ldr	r3, [pc, #288]	; (8004360 <BSP_TS_GetState+0x148>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f107 020c 	add.w	r2, r7, #12
 8004246:	f107 010e 	add.w	r1, r7, #14
 800424a:	2082      	movs	r0, #130	; 0x82
 800424c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800424e:	89bb      	ldrh	r3, [r7, #12]
 8004250:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004254:	b29b      	uxth	r3, r3
 8004256:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004258:	89bb      	ldrh	r3, [r7, #12]
 800425a:	4a42      	ldr	r2, [pc, #264]	; (8004364 <BSP_TS_GetState+0x14c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004264:	8abb      	ldrh	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	82bb      	strh	r3, [r7, #20]
 800426e:	e008      	b.n	8004282 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004270:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <BSP_TS_GetState+0x150>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	8aba      	ldrh	r2, [r7, #20]
 8004276:	429a      	cmp	r2, r3
 8004278:	d903      	bls.n	8004282 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800427a:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <BSP_TS_GetState+0x150>)
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004282:	8abb      	ldrh	r3, [r7, #20]
 8004284:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800428c:	4293      	cmp	r3, r2
 800428e:	d806      	bhi.n	800429e <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004296:	330e      	adds	r3, #14
 8004298:	b29b      	uxth	r3, r3
 800429a:	81fb      	strh	r3, [r7, #14]
 800429c:	e005      	b.n	80042aa <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800429e:	89fb      	ldrh	r3, [r7, #14]
 80042a0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80042a4:	3308      	adds	r3, #8
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	4a2f      	ldr	r2, [pc, #188]	; (800436c <BSP_TS_GetState+0x154>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	08db      	lsrs	r3, r3, #3
 80042b4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80042b6:	8afb      	ldrh	r3, [r7, #22]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	82fb      	strh	r3, [r7, #22]
 80042c0:	e008      	b.n	80042d4 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80042c2:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <BSP_TS_GetState+0x158>)
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	8afa      	ldrh	r2, [r7, #22]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d903      	bls.n	80042d4 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80042cc:	4b28      	ldr	r3, [pc, #160]	; (8004370 <BSP_TS_GetState+0x158>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80042d8:	89fb      	ldrh	r3, [r7, #14]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <BSP_TS_GetState+0x15c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d906      	bls.n	80042f2 <BSP_TS_GetState+0xda>
 80042e4:	89fa      	ldrh	r2, [r7, #14]
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <BSP_TS_GetState+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	e005      	b.n	80042fe <BSP_TS_GetState+0xe6>
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <BSP_TS_GetState+0x15c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004300:	89bb      	ldrh	r3, [r7, #12]
 8004302:	461a      	mov	r2, r3
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <BSP_TS_GetState+0x160>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d906      	bls.n	800431a <BSP_TS_GetState+0x102>
 800430c:	89ba      	ldrh	r2, [r7, #12]
 800430e:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <BSP_TS_GetState+0x160>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b29b      	uxth	r3, r3
 8004318:	e005      	b.n	8004326 <BSP_TS_GetState+0x10e>
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <BSP_TS_GetState+0x160>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b29a      	uxth	r2, r3
 8004320:	89bb      	ldrh	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004328:	8a7a      	ldrh	r2, [r7, #18]
 800432a:	8a3b      	ldrh	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	2b05      	cmp	r3, #5
 8004330:	dd07      	ble.n	8004342 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	461a      	mov	r2, r3
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <BSP_TS_GetState+0x15c>)
 8004338:	601a      	str	r2, [r3, #0]
      _y = y; 
 800433a:	89bb      	ldrh	r3, [r7, #12]
 800433c:	461a      	mov	r2, r3
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <BSP_TS_GetState+0x160>)
 8004340:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <BSP_TS_GetState+0x15c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <BSP_TS_GetState+0x160>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	809a      	strh	r2, [r3, #4]
  }
}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000274 	.word	0x20000274
 8004364:	ba2e8ba3 	.word	0xba2e8ba3
 8004368:	2000027a 	.word	0x2000027a
 800436c:	88888889 	.word	0x88888889
 8004370:	20000278 	.word	0x20000278
 8004374:	2000027c 	.word	0x2000027c
 8004378:	20000280 	.word	0x20000280

0800437c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_Init+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <HAL_Init+0x40>)
 8004386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800438a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <HAL_Init+0x40>)
 8004392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a07      	ldr	r2, [pc, #28]	; (80043bc <HAL_Init+0x40>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a4:	2003      	movs	r0, #3
 80043a6:	f000 f8fa 	bl	800459e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fd fcae 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b0:	f7fd fc84 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_IncTick+0x20>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_IncTick+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_IncTick+0x24>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000009c 	.word	0x2000009c
 80043e4:	200005e0 	.word	0x200005e0

080043e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return uwTick;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_GetTick+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	200005e0 	.word	0x200005e0

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff ffee 	bl	80043e8 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d005      	beq.n	8004426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <HAL_Delay+0x40>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004426:	bf00      	nop
 8004428:	f7ff ffde 	bl	80043e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d8f7      	bhi.n	8004428 <HAL_Delay+0x28>
  {
  }
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	2000009c 	.word	0x2000009c

08004444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004460:	4013      	ands	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800446c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <__NVIC_SetPriorityGrouping+0x44>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	60d3      	str	r3, [r2, #12]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f003 0307 	and.w	r3, r3, #7
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db0b      	blt.n	80044d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4907      	ldr	r1, [pc, #28]	; (80044e0 <__NVIC_EnableIRQ+0x38>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2001      	movs	r0, #1
 80044ca:	fa00 f202 	lsl.w	r2, r0, r2
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e100 	.word	0xe000e100

080044e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db0a      	blt.n	800450e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	490c      	ldr	r1, [pc, #48]	; (8004530 <__NVIC_SetPriority+0x4c>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	440b      	add	r3, r1
 8004508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800450c:	e00a      	b.n	8004524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4908      	ldr	r1, [pc, #32]	; (8004534 <__NVIC_SetPriority+0x50>)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	3b04      	subs	r3, #4
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	440b      	add	r3, r1
 8004522:	761a      	strb	r2, [r3, #24]
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000e100 	.word	0xe000e100
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f1c3 0307 	rsb	r3, r3, #7
 8004552:	2b04      	cmp	r3, #4
 8004554:	bf28      	it	cs
 8004556:	2304      	movcs	r3, #4
 8004558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3304      	adds	r3, #4
 800455e:	2b06      	cmp	r3, #6
 8004560:	d902      	bls.n	8004568 <NVIC_EncodePriority+0x30>
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3b03      	subs	r3, #3
 8004566:	e000      	b.n	800456a <NVIC_EncodePriority+0x32>
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	401a      	ands	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004580:	f04f 31ff 	mov.w	r1, #4294967295
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	43d9      	mvns	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004590:	4313      	orrs	r3, r2
         );
}
 8004592:	4618      	mov	r0, r3
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ff4c 	bl	8004444 <__NVIC_SetPriorityGrouping>
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c6:	f7ff ff61 	bl	800448c <__NVIC_GetPriorityGrouping>
 80045ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f7ff ffb1 	bl	8004538 <NVIC_EncodePriority>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff80 	bl	80044e4 <__NVIC_SetPriority>
}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff54 	bl	80044a8 <__NVIC_EnableIRQ>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7ff fee8 	bl	80043e8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e099      	b.n	8004758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004644:	e00f      	b.n	8004666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004646:	f7ff fecf 	bl	80043e8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b05      	cmp	r3, #5
 8004652:	d908      	bls.n	8004666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e078      	b.n	8004758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e8      	bne.n	8004646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_DMA_Init+0x158>)
 8004680:	4013      	ands	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d107      	bne.n	80046d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	4313      	orrs	r3, r2
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d117      	bne.n	800472a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8bd 	bl	800488c <DMA_CheckFifoParam>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004726:	2301      	movs	r3, #1
 8004728:	e016      	b.n	8004758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f874 	bl	8004820 <DMA_CalcBaseAndBitshift>
 8004738:	4603      	mov	r3, r0
 800473a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	223f      	movs	r2, #63	; 0x3f
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	f010803f 	.word	0xf010803f

08004764 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e050      	b.n	8004818 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d101      	bne.n	8004786 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	e048      	b.n	8004818 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f82a 	bl	8004820 <DMA_CalcBaseAndBitshift>
 80047cc:	4603      	mov	r3, r0
 80047ce:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	223f      	movs	r2, #63	; 0x3f
 80047fa:	409a      	lsls	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3b10      	subs	r3, #16
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <DMA_CalcBaseAndBitshift+0x64>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800483a:	4a13      	ldr	r2, [pc, #76]	; (8004888 <DMA_CalcBaseAndBitshift+0x68>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d909      	bls.n	8004862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	659a      	str	r2, [r3, #88]	; 0x58
 8004860:	e007      	b.n	8004872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	aaaaaaab 	.word	0xaaaaaaab
 8004888:	0800c314 	.word	0x0800c314

0800488c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11f      	bne.n	80048e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d855      	bhi.n	8004958 <DMA_CheckFifoParam+0xcc>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <DMA_CheckFifoParam+0x28>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d7 	.word	0x080048d7
 80048bc:	080048c5 	.word	0x080048c5
 80048c0:	08004959 	.word	0x08004959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d045      	beq.n	800495c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d4:	e042      	b.n	800495c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048de:	d13f      	bne.n	8004960 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e4:	e03c      	b.n	8004960 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	d121      	bne.n	8004934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d836      	bhi.n	8004964 <DMA_CheckFifoParam+0xd8>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <DMA_CheckFifoParam+0x70>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	08004913 	.word	0x08004913
 8004904:	0800490d 	.word	0x0800490d
 8004908:	08004925 	.word	0x08004925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e02f      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004922:	e021      	b.n	8004968 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800492c:	d11e      	bne.n	800496c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004932:	e01b      	b.n	800496c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <DMA_CheckFifoParam+0xb4>
 800493a:	2b03      	cmp	r3, #3
 800493c:	d003      	beq.n	8004946 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800493e:	e018      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e015      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00e      	beq.n	8004970 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
      break;
 8004956:	e00b      	b.n	8004970 <DMA_CheckFifoParam+0xe4>
      break;
 8004958:	bf00      	nop
 800495a:	e00a      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 800495c:	bf00      	nop
 800495e:	e008      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 8004960:	bf00      	nop
 8004962:	e006      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 8004964:	bf00      	nop
 8004966:	e004      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 8004968:	bf00      	nop
 800496a:	e002      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;   
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <DMA_CheckFifoParam+0xe6>
      break;
 8004970:	bf00      	nop
    }
  } 
  
  return status; 
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e03b      	b.n	8004a0a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fb feec 	bl	8000784 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	f023 0107 	bic.w	r1, r3, #7
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68d1      	ldr	r1, [r2, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_DMA2D_Start+0x1c>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e018      	b.n	8004a60 <HAL_DMA2D_Start+0x4e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f989 	bl	8004d60 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d056      	beq.n	8004b32 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004a84:	f7ff fcb0 	bl	80043e8 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a8a:	e04b      	b.n	8004b24 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d023      	beq.n	8004ae6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	f043 0202 	orr.w	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0a5      	b.n	8004c32 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d01a      	beq.n	8004b24 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004aee:	f7ff fc7b 	bl	80043e8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <HAL_DMA2D_PollForTransfer+0x9c>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e086      	b.n	8004c32 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ac      	beq.n	8004a8c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d061      	beq.n	8004c18 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b54:	f7ff fc48 	bl	80043e8 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b5a:	e056      	b.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02e      	beq.n	8004bcc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	f043 0204 	orr.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	f043 0202 	orr.w	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2229      	movs	r2, #41	; 0x29
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2204      	movs	r2, #4
 8004bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e032      	b.n	8004c32 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d01a      	beq.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004bd4:	f7ff fc08 	bl	80043e8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <HAL_DMA2D_PollForTransfer+0x182>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e013      	b.n	8004c32 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0a1      	beq.n	8004b5c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2212      	movs	r2, #18
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA2D_ConfigLayer+0x20>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e079      	b.n	8004d50 <HAL_DMA2D_ConfigLayer+0x114>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	3318      	adds	r3, #24
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004c86:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <HAL_DMA2D_ConfigLayer+0x120>)
 8004c88:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b0a      	cmp	r3, #10
 8004c90:	d003      	beq.n	8004c9a <HAL_DMA2D_ConfigLayer+0x5e>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b09      	cmp	r3, #9
 8004c98:	d107      	bne.n	8004caa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e005      	b.n	8004cb6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d120      	bne.n	8004cfe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	ea02 0103 	and.w	r1, r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d003      	beq.n	8004cee <HAL_DMA2D_ConfigLayer+0xb2>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b09      	cmp	r3, #9
 8004cec:	d127      	bne.n	8004d3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8004cfc:	e01f      	b.n	8004d3e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	ea02 0103 	and.w	r1, r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b0a      	cmp	r3, #10
 8004d26:	d003      	beq.n	8004d30 <HAL_DMA2D_ConfigLayer+0xf4>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	d106      	bne.n	8004d3e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d3c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	ff03000f 	.word	0xff03000f

08004d60 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b08b      	sub	sp, #44	; 0x2c
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	041a      	lsls	r2, r3, #16
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d98:	d174      	bne.n	8004e84 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004da0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004da8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004db0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd0:	e053      	b.n	8004e7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d106      	bne.n	8004de8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	e048      	b.n	8004e7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d111      	bne.n	8004e14 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	0cdb      	lsrs	r3, r3, #19
 8004df4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	0a9b      	lsrs	r3, r3, #10
 8004dfa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	02db      	lsls	r3, r3, #11
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	e032      	b.n	8004e7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d117      	bne.n	8004e4c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	0fdb      	lsrs	r3, r3, #31
 8004e20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	0cdb      	lsrs	r3, r3, #19
 8004e26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	0adb      	lsrs	r3, r3, #11
 8004e2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	03db      	lsls	r3, r3, #15
 8004e42:	4313      	orrs	r3, r2
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4a:	e016      	b.n	8004e7a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	0f1b      	lsrs	r3, r3, #28
 8004e50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	0d1b      	lsrs	r3, r3, #20
 8004e56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	0b1b      	lsrs	r3, r3, #12
 8004e5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	011a      	lsls	r2, r3, #4
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	4313      	orrs	r3, r2
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004e82:	e003      	b.n	8004e8c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	372c      	adds	r7, #44	; 0x2c
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <HAL_FLASH_Program+0xa0>)
 8004eac:	7e1b      	ldrb	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_FLASH_Program+0x1e>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e03b      	b.n	8004f2e <HAL_FLASH_Program+0x96>
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_FLASH_Program+0xa0>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ebc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ec0:	f000 f870 	bl	8004fa4 <FLASH_WaitForLastOperation>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d12b      	bne.n	8004f26 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004ed4:	783b      	ldrb	r3, [r7, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68b8      	ldr	r0, [r7, #8]
 8004eda:	f000 f919 	bl	8005110 <FLASH_Program_Byte>
 8004ede:	e016      	b.n	8004f0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004ee6:	883b      	ldrh	r3, [r7, #0]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	68b8      	ldr	r0, [r7, #8]
 8004eec:	f000 f8ec 	bl	80050c8 <FLASH_Program_HalfWord>
 8004ef0:	e00d      	b.n	8004f0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d105      	bne.n	8004f04 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	68b8      	ldr	r0, [r7, #8]
 8004efe:	f000 f8c1 	bl	8005084 <FLASH_Program_Word>
 8004f02:	e004      	b.n	8004f0e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	68b8      	ldr	r0, [r7, #8]
 8004f0a:	f000 f88b 	bl	8005024 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f12:	f000 f847 	bl	8004fa4 <FLASH_WaitForLastOperation>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004f1a:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_FLASH_Program+0xa4>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_FLASH_Program+0xa4>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f26:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <HAL_FLASH_Program+0xa0>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200005e4 	.word	0x200005e4
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_FLASH_Unlock+0x38>)
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da0b      	bge.n	8004f6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_FLASH_Unlock+0x38>)
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_FLASH_Unlock+0x3c>)
 8004f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_FLASH_Unlock+0x38>)
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_FLASH_Unlock+0x40>)
 8004f5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_FLASH_Unlock+0x38>)
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da01      	bge.n	8004f6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40023c00 	.word	0x40023c00
 8004f7c:	45670123 	.word	0x45670123
 8004f80:	cdef89ab 	.word	0xcdef89ab

08004f84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_FLASH_Lock+0x1c>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_FLASH_Lock+0x1c>)
 8004f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40023c00 	.word	0x40023c00

08004fa4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	; (800501c <FLASH_WaitForLastOperation+0x78>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb6:	f7ff fa17 	bl	80043e8 <HAL_GetTick>
 8004fba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004fbc:	e010      	b.n	8004fe0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d00c      	beq.n	8004fe0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <FLASH_WaitForLastOperation+0x38>
 8004fcc:	f7ff fa0c 	bl	80043e8 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d201      	bcs.n	8004fe0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e019      	b.n	8005014 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <FLASH_WaitForLastOperation+0x7c>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e8      	bne.n	8004fbe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <FLASH_WaitForLastOperation+0x7c>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <FLASH_WaitForLastOperation+0x7c>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <FLASH_WaitForLastOperation+0x7c>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800500a:	f000 f8a3 	bl	8005154 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
  
}  
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	200005e4 	.word	0x200005e4
 8005020:	40023c00 	.word	0x40023c00

08005024 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005024:	b490      	push	{r4, r7}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4a12      	ldr	r2, [pc, #72]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 8005042:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <FLASH_Program_DoubleWord+0x5c>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800505a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800505e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	0013      	movs	r3, r2
 800506c:	2400      	movs	r4, #0
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	3204      	adds	r2, #4
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bc90      	pop	{r4, r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40023c00 	.word	0x40023c00

08005084 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <FLASH_Program_Word+0x40>)
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <FLASH_Program_Word+0x40>)
 8005094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <FLASH_Program_Word+0x40>)
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <FLASH_Program_Word+0x40>)
 80050a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <FLASH_Program_Word+0x40>)
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	4a06      	ldr	r2, [pc, #24]	; (80050c4 <FLASH_Program_Word+0x40>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40023c00 	.word	0x40023c00

080050c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050d4:	4b0d      	ldr	r3, [pc, #52]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	4a0c      	ldr	r2, [pc, #48]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	4a06      	ldr	r2, [pc, #24]	; (800510c <FLASH_Program_HalfWord+0x44>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	801a      	strh	r2, [r3, #0]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40023c00 	.word	0x40023c00

08005110 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <FLASH_Program_Byte+0x40>)
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <FLASH_Program_Byte+0x40>)
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <FLASH_Program_Byte+0x40>)
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <FLASH_Program_Byte+0x40>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <FLASH_Program_Byte+0x40>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4a06      	ldr	r2, [pc, #24]	; (8005150 <FLASH_Program_Byte+0x40>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	701a      	strb	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023c00 	.word	0x40023c00

08005154 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005158:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <FLASH_SetErrorCode+0xc8>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <FLASH_SetErrorCode+0xc8>)
 800516e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 8005172:	2210      	movs	r2, #16
 8005174:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005176:	4b28      	ldr	r3, [pc, #160]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005182:	4b26      	ldr	r3, [pc, #152]	; (800521c <FLASH_SetErrorCode+0xc8>)
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f043 0308 	orr.w	r3, r3, #8
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <FLASH_SetErrorCode+0xc8>)
 800518c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800518e:	4b22      	ldr	r3, [pc, #136]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 8005190:	2220      	movs	r2, #32
 8005192:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80051a0:	4b1e      	ldr	r3, [pc, #120]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f043 0304 	orr.w	r3, r3, #4
 80051a8:	4a1c      	ldr	r2, [pc, #112]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f043 0302 	orr.w	r3, r3, #2
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80051ca:	4b13      	ldr	r3, [pc, #76]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051cc:	2280      	movs	r2, #128	; 0x80
 80051ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <FLASH_SetErrorCode+0xc8>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f043 0320 	orr.w	r3, r3, #32
 8005204:	4a05      	ldr	r2, [pc, #20]	; (800521c <FLASH_SetErrorCode+0xc8>)
 8005206:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <FLASH_SetErrorCode+0xc4>)
 800520a:	2202      	movs	r2, #2
 800520c:	60da      	str	r2, [r3, #12]
  }
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40023c00 	.word	0x40023c00
 800521c:	200005e4 	.word	0x200005e4

08005220 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e010      	b.n	800525e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d103      	bne.n	800524a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e009      	b.n	800525e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d103      	bne.n	8005258 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e002      	b.n	800525e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b0b      	cmp	r3, #11
 8005262:	d902      	bls.n	800526a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	490f      	ldr	r1, [pc, #60]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 8005288:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800528c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4313      	orrs	r3, r2
 8005298:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <FLASH_Erase_Sector+0x98>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052aa:	6113      	str	r3, [r2, #16]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40023c00 	.word	0x40023c00

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e177      	b.n	80055c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052d8:	2201      	movs	r2, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	f040 8166 	bne.w	80055c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d00b      	beq.n	8005316 <HAL_GPIO_Init+0x5a>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d007      	beq.n	8005316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800530a:	2b11      	cmp	r3, #17
 800530c:	d003      	beq.n	8005316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b12      	cmp	r3, #18
 8005314:	d130      	bne.n	8005378 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	2203      	movs	r2, #3
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800534c:	2201      	movs	r2, #1
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 0201 	and.w	r2, r3, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	2203      	movs	r2, #3
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0xfc>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b12      	cmp	r3, #18
 80053b6:	d123      	bne.n	8005400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	08da      	lsrs	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3208      	adds	r2, #8
 80053c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	220f      	movs	r2, #15
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	08da      	lsrs	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3208      	adds	r2, #8
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	2203      	movs	r2, #3
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4013      	ands	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0203 	and.w	r2, r3, #3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4313      	orrs	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80c0 	beq.w	80055c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_GPIO_Init+0x320>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a64      	ldr	r2, [pc, #400]	; (80055dc <HAL_GPIO_Init+0x320>)
 800544c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b62      	ldr	r3, [pc, #392]	; (80055dc <HAL_GPIO_Init+0x320>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800545e:	4a60      	ldr	r2, [pc, #384]	; (80055e0 <HAL_GPIO_Init+0x324>)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	3302      	adds	r3, #2
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a57      	ldr	r2, [pc, #348]	; (80055e4 <HAL_GPIO_Init+0x328>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d037      	beq.n	80054fa <HAL_GPIO_Init+0x23e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a56      	ldr	r2, [pc, #344]	; (80055e8 <HAL_GPIO_Init+0x32c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_GPIO_Init+0x23a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a55      	ldr	r2, [pc, #340]	; (80055ec <HAL_GPIO_Init+0x330>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d02b      	beq.n	80054f2 <HAL_GPIO_Init+0x236>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a54      	ldr	r2, [pc, #336]	; (80055f0 <HAL_GPIO_Init+0x334>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d025      	beq.n	80054ee <HAL_GPIO_Init+0x232>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a53      	ldr	r2, [pc, #332]	; (80055f4 <HAL_GPIO_Init+0x338>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <HAL_GPIO_Init+0x22e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a52      	ldr	r2, [pc, #328]	; (80055f8 <HAL_GPIO_Init+0x33c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d019      	beq.n	80054e6 <HAL_GPIO_Init+0x22a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a51      	ldr	r2, [pc, #324]	; (80055fc <HAL_GPIO_Init+0x340>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_GPIO_Init+0x226>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_GPIO_Init+0x344>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00d      	beq.n	80054de <HAL_GPIO_Init+0x222>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <HAL_GPIO_Init+0x348>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <HAL_GPIO_Init+0x21e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a4e      	ldr	r2, [pc, #312]	; (8005608 <HAL_GPIO_Init+0x34c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <HAL_GPIO_Init+0x21a>
 80054d2:	2309      	movs	r3, #9
 80054d4:	e012      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054d6:	230a      	movs	r3, #10
 80054d8:	e010      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054da:	2308      	movs	r3, #8
 80054dc:	e00e      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054de:	2307      	movs	r3, #7
 80054e0:	e00c      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e2:	2306      	movs	r3, #6
 80054e4:	e00a      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e6:	2305      	movs	r3, #5
 80054e8:	e008      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e004      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e002      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054fa:	2300      	movs	r3, #0
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f002 0203 	and.w	r2, r2, #3
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	4093      	lsls	r3, r2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800550c:	4934      	ldr	r1, [pc, #208]	; (80055e0 <HAL_GPIO_Init+0x324>)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800551a:	4b3c      	ldr	r3, [pc, #240]	; (800560c <HAL_GPIO_Init+0x350>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800553e:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_GPIO_Init+0x350>)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005544:	4b31      	ldr	r3, [pc, #196]	; (800560c <HAL_GPIO_Init+0x350>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_GPIO_Init+0x350>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_GPIO_Init+0x350>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_GPIO_Init+0x350>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005598:	4b1c      	ldr	r3, [pc, #112]	; (800560c <HAL_GPIO_Init+0x350>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <HAL_GPIO_Init+0x350>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	f67f ae84 	bls.w	80052d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d0:	bf00      	nop
 80055d2:	3724      	adds	r7, #36	; 0x24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40013800 	.word	0x40013800
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40020800 	.word	0x40020800
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021400 	.word	0x40021400
 80055fc:	40021800 	.word	0x40021800
 8005600:	40021c00 	.word	0x40021c00
 8005604:	40022000 	.word	0x40022000
 8005608:	40022400 	.word	0x40022400
 800560c:	40013c00 	.word	0x40013c00

08005610 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e0d9      	b.n	80057e0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800562c:	2201      	movs	r2, #1
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	f040 80c9 	bne.w	80057da <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005648:	4a6a      	ldr	r2, [pc, #424]	; (80057f4 <HAL_GPIO_DeInit+0x1e4>)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	3302      	adds	r3, #2
 8005650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005654:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	220f      	movs	r2, #15
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a62      	ldr	r2, [pc, #392]	; (80057f8 <HAL_GPIO_DeInit+0x1e8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d037      	beq.n	80056e2 <HAL_GPIO_DeInit+0xd2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a61      	ldr	r2, [pc, #388]	; (80057fc <HAL_GPIO_DeInit+0x1ec>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d031      	beq.n	80056de <HAL_GPIO_DeInit+0xce>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a60      	ldr	r2, [pc, #384]	; (8005800 <HAL_GPIO_DeInit+0x1f0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02b      	beq.n	80056da <HAL_GPIO_DeInit+0xca>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a5f      	ldr	r2, [pc, #380]	; (8005804 <HAL_GPIO_DeInit+0x1f4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d025      	beq.n	80056d6 <HAL_GPIO_DeInit+0xc6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_GPIO_DeInit+0x1f8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01f      	beq.n	80056d2 <HAL_GPIO_DeInit+0xc2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_GPIO_DeInit+0x1fc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d019      	beq.n	80056ce <HAL_GPIO_DeInit+0xbe>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a5c      	ldr	r2, [pc, #368]	; (8005810 <HAL_GPIO_DeInit+0x200>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <HAL_GPIO_DeInit+0xba>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a5b      	ldr	r2, [pc, #364]	; (8005814 <HAL_GPIO_DeInit+0x204>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00d      	beq.n	80056c6 <HAL_GPIO_DeInit+0xb6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a5a      	ldr	r2, [pc, #360]	; (8005818 <HAL_GPIO_DeInit+0x208>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <HAL_GPIO_DeInit+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a59      	ldr	r2, [pc, #356]	; (800581c <HAL_GPIO_DeInit+0x20c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_GPIO_DeInit+0xae>
 80056ba:	2309      	movs	r3, #9
 80056bc:	e012      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056be:	230a      	movs	r3, #10
 80056c0:	e010      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056c2:	2308      	movs	r3, #8
 80056c4:	e00e      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056c6:	2307      	movs	r3, #7
 80056c8:	e00c      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056ca:	2306      	movs	r3, #6
 80056cc:	e00a      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056ce:	2305      	movs	r3, #5
 80056d0:	e008      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e006      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056d6:	2303      	movs	r3, #3
 80056d8:	e004      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056da:	2302      	movs	r3, #2
 80056dc:	e002      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <HAL_GPIO_DeInit+0xd4>
 80056e2:	2300      	movs	r3, #0
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	f002 0203 	and.w	r2, r2, #3
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	4093      	lsls	r3, r2
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d132      	bne.n	800575a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80056f4:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	4948      	ldr	r1, [pc, #288]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 80056fe:	4013      	ands	r3, r2
 8005700:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005702:	4b47      	ldr	r3, [pc, #284]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	43db      	mvns	r3, r3
 800570a:	4945      	ldr	r1, [pc, #276]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 800570c:	4013      	ands	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005710:	4b43      	ldr	r3, [pc, #268]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43db      	mvns	r3, r3
 8005718:	4941      	ldr	r1, [pc, #260]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 800571a:	4013      	ands	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800571e:	4b40      	ldr	r3, [pc, #256]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	43db      	mvns	r3, r3
 8005726:	493e      	ldr	r1, [pc, #248]	; (8005820 <HAL_GPIO_DeInit+0x210>)
 8005728:	4013      	ands	r3, r2
 800572a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	220f      	movs	r2, #15
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800573c:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_GPIO_DeInit+0x1e4>)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	089b      	lsrs	r3, r3, #2
 8005742:	3302      	adds	r3, #2
 8005744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	43da      	mvns	r2, r3
 800574c:	4829      	ldr	r0, [pc, #164]	; (80057f4 <HAL_GPIO_DeInit+0x1e4>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	089b      	lsrs	r3, r3, #2
 8005752:	400a      	ands	r2, r1
 8005754:	3302      	adds	r3, #2
 8005756:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2103      	movs	r1, #3
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	401a      	ands	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	08da      	lsrs	r2, r3, #3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3208      	adds	r2, #8
 8005778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	220f      	movs	r2, #15
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	08d2      	lsrs	r2, r2, #3
 8005790:	4019      	ands	r1, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3208      	adds	r2, #8
 8005796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2103      	movs	r1, #3
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	2101      	movs	r1, #1
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	401a      	ands	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	2103      	movs	r1, #3
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	43db      	mvns	r3, r3
 80057d4:	401a      	ands	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	3301      	adds	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	f67f af22 	bls.w	800562c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40013800 	.word	0x40013800
 80057f8:	40020000 	.word	0x40020000
 80057fc:	40020400 	.word	0x40020400
 8005800:	40020800 	.word	0x40020800
 8005804:	40020c00 	.word	0x40020c00
 8005808:	40021000 	.word	0x40021000
 800580c:	40021400 	.word	0x40021400
 8005810:	40021800 	.word	0x40021800
 8005814:	40021c00 	.word	0x40021c00
 8005818:	40022000 	.word	0x40022000
 800581c:	40022400 	.word	0x40022400
 8005820:	40013c00 	.word	0x40013c00

08005824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
 8005830:	4613      	mov	r3, r2
 8005832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005834:	787b      	ldrb	r3, [r7, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005840:	e003      	b.n	800584a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	041a      	lsls	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	619a      	str	r2, [r3, #24]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e11f      	b.n	8005aaa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb f94a 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058bc:	f001 ff8e 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 80058c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4a7b      	ldr	r2, [pc, #492]	; (8005ab4 <HAL_I2C_Init+0x25c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d807      	bhi.n	80058dc <HAL_I2C_Init+0x84>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a7a      	ldr	r2, [pc, #488]	; (8005ab8 <HAL_I2C_Init+0x260>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf94      	ite	ls
 80058d4:	2301      	movls	r3, #1
 80058d6:	2300      	movhi	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	e006      	b.n	80058ea <HAL_I2C_Init+0x92>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a77      	ldr	r2, [pc, #476]	; (8005abc <HAL_I2C_Init+0x264>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	bf94      	ite	ls
 80058e4:	2301      	movls	r3, #1
 80058e6:	2300      	movhi	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0db      	b.n	8005aaa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a72      	ldr	r2, [pc, #456]	; (8005ac0 <HAL_I2C_Init+0x268>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	0c9b      	lsrs	r3, r3, #18
 80058fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a64      	ldr	r2, [pc, #400]	; (8005ab4 <HAL_I2C_Init+0x25c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d802      	bhi.n	800592c <HAL_I2C_Init+0xd4>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3301      	adds	r3, #1
 800592a:	e009      	b.n	8005940 <HAL_I2C_Init+0xe8>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	4a63      	ldr	r2, [pc, #396]	; (8005ac4 <HAL_I2C_Init+0x26c>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	099b      	lsrs	r3, r3, #6
 800593e:	3301      	adds	r3, #1
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	430b      	orrs	r3, r1
 8005946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005952:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4956      	ldr	r1, [pc, #344]	; (8005ab4 <HAL_I2C_Init+0x25c>)
 800595c:	428b      	cmp	r3, r1
 800595e:	d80d      	bhi.n	800597c <HAL_I2C_Init+0x124>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e59      	subs	r1, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	fbb1 f3f3 	udiv	r3, r1, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	2b04      	cmp	r3, #4
 8005976:	bf38      	it	cc
 8005978:	2304      	movcc	r3, #4
 800597a:	e04f      	b.n	8005a1c <HAL_I2C_Init+0x1c4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d111      	bne.n	80059a8 <HAL_I2C_Init+0x150>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e58      	subs	r0, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	440b      	add	r3, r1
 8005992:	fbb0 f3f3 	udiv	r3, r0, r3
 8005996:	3301      	adds	r3, #1
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e012      	b.n	80059ce <HAL_I2C_Init+0x176>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e58      	subs	r0, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	0099      	lsls	r1, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Init+0x17e>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e022      	b.n	8005a1c <HAL_I2C_Init+0x1c4>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10e      	bne.n	80059fc <HAL_I2C_Init+0x1a4>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1e58      	subs	r0, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	440b      	add	r3, r1
 80059ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f0:	3301      	adds	r3, #1
 80059f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	e00f      	b.n	8005a1c <HAL_I2C_Init+0x1c4>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1e58      	subs	r0, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	0099      	lsls	r1, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a12:	3301      	adds	r3, #1
 8005a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	6809      	ldr	r1, [r1, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6911      	ldr	r1, [r2, #16]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68d2      	ldr	r2, [r2, #12]
 8005a56:	4311      	orrs	r1, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	000186a0 	.word	0x000186a0
 8005ab8:	001e847f 	.word	0x001e847f
 8005abc:	003d08ff 	.word	0x003d08ff
 8005ac0:	431bde83 	.word	0x431bde83
 8005ac4:	10624dd3 	.word	0x10624dd3

08005ac8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e021      	b.n	8005b1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2224      	movs	r2, #36	; 0x24
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb f87a 	bl	8000bec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	817b      	strh	r3, [r7, #10]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	813b      	strh	r3, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b42:	f7fe fc51 	bl	80043e8 <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	f040 80d9 	bne.w	8005d08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	2319      	movs	r3, #25
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	496d      	ldr	r1, [pc, #436]	; (8005d14 <HAL_I2C_Mem_Write+0x1ec>)
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fc89 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0cc      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_I2C_Mem_Write+0x56>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0c5      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d007      	beq.n	8005ba4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2221      	movs	r2, #33	; 0x21
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a4d      	ldr	r2, [pc, #308]	; (8005d18 <HAL_I2C_Mem_Write+0x1f0>)
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005be6:	88f8      	ldrh	r0, [r7, #6]
 8005be8:	893a      	ldrh	r2, [r7, #8]
 8005bea:	8979      	ldrh	r1, [r7, #10]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fac4 	bl	8006184 <I2C_RequestMemoryWrite>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d052      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e081      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fd0a 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d107      	bne.n	8005c2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e06b      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d017      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1aa      	bne.n	8005c06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fcf6 	bl	80066a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00d      	beq.n	8005cdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d107      	bne.n	8005cd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e016      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	00100002 	.word	0x00100002
 8005d18:	ffff0000 	.word	0xffff0000

08005d1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	813b      	strh	r3, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d36:	f7fe fb57 	bl	80043e8 <HAL_GetTick>
 8005d3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 8208 	bne.w	800615a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2319      	movs	r3, #25
 8005d50:	2201      	movs	r2, #1
 8005d52:	497b      	ldr	r1, [pc, #492]	; (8005f40 <HAL_I2C_Mem_Read+0x224>)
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fb8f 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
 8005d62:	e1fb      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Mem_Read+0x56>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e1f4      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d007      	beq.n	8005d98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2222      	movs	r2, #34	; 0x22
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a5b      	ldr	r2, [pc, #364]	; (8005f44 <HAL_I2C_Mem_Read+0x228>)
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dda:	88f8      	ldrh	r0, [r7, #6]
 8005ddc:	893a      	ldrh	r2, [r7, #8]
 8005dde:	8979      	ldrh	r1, [r7, #10]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	4603      	mov	r3, r0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fa5e 	bl	80062ac <I2C_RequestMemoryRead>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e1b0      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e184      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d11b      	bne.n	8005e6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e164      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d11b      	bne.n	8005eaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	e144      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec0:	e138      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	f200 80f1 	bhi.w	80060ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d123      	bne.n	8005f1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fc25 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e139      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1a:	e10b      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d14e      	bne.n	8005fc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_I2C_Mem_Read+0x22c>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 faa2 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e10e      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
 8005f3e:	bf00      	nop
 8005f40:	00100002 	.word	0x00100002
 8005f44:	ffff0000 	.word	0xffff0000
 8005f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc0:	e0b8      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4966      	ldr	r1, [pc, #408]	; (8006164 <HAL_I2C_Mem_Read+0x448>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fa53 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0bf      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	2200      	movs	r2, #0
 8006026:	494f      	ldr	r1, [pc, #316]	; (8006164 <HAL_I2C_Mem_Read+0x448>)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fa25 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e091      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ac:	e042      	b.n	8006134 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fb38 	bl	8006728 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e04c      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d118      	bne.n	8006134 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f aec2 	bne.w	8005ec2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	00010004 	.word	0x00010004

08006168 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006176:	b2db      	uxtb	r3, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	461a      	mov	r2, r3
 8006192:	4603      	mov	r3, r0
 8006194:	817b      	strh	r3, [r7, #10]
 8006196:	460b      	mov	r3, r1
 8006198:	813b      	strh	r3, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f95c 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e05f      	b.n	80062a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061e0:	897b      	ldrh	r3, [r7, #10]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	492c      	ldr	r1, [pc, #176]	; (80062a8 <I2C_RequestMemoryWrite+0x124>)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f995 	bl	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e04c      	b.n	80062a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	6a39      	ldr	r1, [r7, #32]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f9ff 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2b04      	cmp	r3, #4
 8006232:	d107      	bne.n	8006244 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006242:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e02b      	b.n	80062a0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800624e:	893b      	ldrh	r3, [r7, #8]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]
 8006258:	e021      	b.n	800629e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	b29b      	uxth	r3, r3
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626a:	6a39      	ldr	r1, [r7, #32]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f9d9 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00d      	beq.n	8006294 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	2b04      	cmp	r3, #4
 800627e:	d107      	bne.n	8006290 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e005      	b.n	80062a0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	00010002 	.word	0x00010002

080062ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	817b      	strh	r3, [r7, #10]
 80062be:	460b      	mov	r3, r1
 80062c0:	813b      	strh	r3, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8c0 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e0a9      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006318:	897b      	ldrh	r3, [r7, #10]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006326:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	4951      	ldr	r1, [pc, #324]	; (8006474 <I2C_RequestMemoryRead+0x1c8>)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f8f9 	bl	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e096      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006356:	6a39      	ldr	r1, [r7, #32]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f963 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00d      	beq.n	8006380 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2b04      	cmp	r3, #4
 800636a:	d107      	bne.n	800637c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e075      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]
 8006390:	e021      	b.n	80063d6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	b29b      	uxth	r3, r3
 8006398:	b2da      	uxtb	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	6a39      	ldr	r1, [r7, #32]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f93d 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d107      	bne.n	80063c8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e04f      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063cc:	893b      	ldrh	r3, [r7, #8]
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d8:	6a39      	ldr	r1, [r7, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f922 	bl	8006624 <I2C_WaitOnTXEFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d107      	bne.n	80063fe <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e034      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2200      	movs	r2, #0
 800641a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f82a 	bl	8006478 <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e013      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006444:	897b      	ldrh	r3, [r7, #10]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	b2da      	uxtb	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	6a3a      	ldr	r2, [r7, #32]
 8006458:	4906      	ldr	r1, [pc, #24]	; (8006474 <I2C_RequestMemoryRead+0x1c8>)
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f863 	bl	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	00010002 	.word	0x00010002

08006478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	4613      	mov	r3, r2
 8006486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006488:	e025      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d021      	beq.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006492:	f7fd ffa9 	bl	80043e8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d116      	bne.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f043 0220 	orr.w	r2, r3, #32
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e023      	b.n	800651e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d10d      	bne.n	80064fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	43da      	mvns	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	e00c      	b.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	43da      	mvns	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	429a      	cmp	r2, r3
 800651a:	d0b6      	beq.n	800648a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006534:	e051      	b.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006544:	d123      	bne.n	800658e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800655e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e046      	b.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	d021      	beq.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006596:	f7fd ff27 	bl	80043e8 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d302      	bcc.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d116      	bne.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e020      	b.n	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10c      	bne.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	43da      	mvns	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e00b      	b.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	43da      	mvns	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d18d      	bne.n	8006536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006630:	e02d      	b.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f8ce 	bl	80067d4 <I2C_IsAcknowledgeFailed>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e02d      	b.n	800669e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d021      	beq.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664a:	f7fd fecd 	bl	80043e8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	d302      	bcc.n	8006660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e007      	b.n	800669e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	d1ca      	bne.n	8006632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066b2:	e02d      	b.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f88d 	bl	80067d4 <I2C_IsAcknowledgeFailed>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e02d      	b.n	8006720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d021      	beq.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066cc:	f7fd fe8c 	bl	80043e8 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d116      	bne.n	8006710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e007      	b.n	8006720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b04      	cmp	r3, #4
 800671c:	d1ca      	bne.n	80066b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006734:	e042      	b.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d119      	bne.n	8006778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0210 	mvn.w	r2, #16
 800674c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e029      	b.n	80067cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7fd fe36 	bl	80043e8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d116      	bne.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e007      	b.n	80067cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d1b5      	bne.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ea:	d11b      	bne.n	8006824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f043 0204 	orr.w	r2, r3, #4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	d129      	bne.n	800689c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2224      	movs	r2, #36	; 0x24
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0210 	bic.w	r2, r2, #16
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d12a      	bne.n	800691a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80068e4:	89fb      	ldrh	r3, [r7, #14]
 80068e6:	f023 030f 	bic.w	r3, r3, #15
 80068ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	89fa      	ldrh	r2, [r7, #14]
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e000      	b.n	800691c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800691a:	2302      	movs	r3, #2
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0bf      	b.n	8006aba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa fa24 	bl	8000d9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800696a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6999      	ldr	r1, [r3, #24]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006980:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b4a      	ldr	r3, [pc, #296]	; (8006ac4 <HAL_LTDC_Init+0x19c>)
 800699c:	400b      	ands	r3, r1
 800699e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6899      	ldr	r1, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68d9      	ldr	r1, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b3e      	ldr	r3, [pc, #248]	; (8006ac4 <HAL_LTDC_Init+0x19c>)
 80069ca:	400b      	ands	r3, r1
 80069cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68d9      	ldr	r1, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6919      	ldr	r1, [r3, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <HAL_LTDC_Init+0x19c>)
 80069f8:	400b      	ands	r3, r1
 80069fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6919      	ldr	r1, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6959      	ldr	r1, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_LTDC_Init+0x19c>)
 8006a26:	400b      	ands	r3, r1
 8006a28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6959      	ldr	r1, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0206 	orr.w	r2, r2, #6
 8006a96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	f000f800 	.word	0xf000f800

08006ac8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ac8:	b5b0      	push	{r4, r5, r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_LTDC_ConfigLayer+0x1a>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e02c      	b.n	8006b3c <HAL_LTDC_ConfigLayer+0x74>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2134      	movs	r1, #52	; 0x34
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	4413      	add	r3, r2
 8006afe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f83b 	bl	8006b98 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2201      	movs	r2, #1
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bdb0      	pop	{r4, r5, r7, pc}

08006b44 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_LTDC_EnableDither+0x16>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e016      	b.n	8006b88 <HAL_LTDC_EnableDither+0x44>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <HAL_LTDC_EnableDither+0x50>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	4a09      	ldr	r2, [pc, #36]	; (8006b94 <HAL_LTDC_EnableDither+0x50>)
 8006b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b74:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40016800 	.word	0x40016800

08006b98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b089      	sub	sp, #36	; 0x24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	0c1b      	lsrs	r3, r3, #16
 8006bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb4:	4413      	add	r3, r2
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	01db      	lsls	r3, r3, #7
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3384      	adds	r3, #132	; 0x84
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	01d2      	lsls	r2, r2, #7
 8006bd4:	440a      	add	r2, r1
 8006bd6:	3284      	adds	r2, #132	; 0x84
 8006bd8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006bdc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bee:	4413      	add	r3, r2
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	01db      	lsls	r3, r3, #7
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3384      	adds	r3, #132	; 0x84
 8006c00:	4619      	mov	r1, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c16:	4413      	add	r3, r2
 8006c18:	041b      	lsls	r3, r3, #16
 8006c1a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	01db      	lsls	r3, r3, #7
 8006c26:	4413      	add	r3, r2
 8006c28:	3384      	adds	r3, #132	; 0x84
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	4611      	mov	r1, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	01d2      	lsls	r2, r2, #7
 8006c36:	440a      	add	r2, r1
 8006c38:	3284      	adds	r2, #132	; 0x84
 8006c3a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c3e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c4e:	4413      	add	r3, r2
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	01db      	lsls	r3, r3, #7
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3384      	adds	r3, #132	; 0x84
 8006c60:	4619      	mov	r1, r3
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	01db      	lsls	r3, r3, #7
 8006c72:	4413      	add	r3, r2
 8006c74:	3384      	adds	r3, #132	; 0x84
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	01d2      	lsls	r2, r2, #7
 8006c82:	440a      	add	r2, r1
 8006c84:	3284      	adds	r2, #132	; 0x84
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	; 0x84
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cb2:	041b      	lsls	r3, r3, #16
 8006cb4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	061b      	lsls	r3, r3, #24
 8006cbc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	01db      	lsls	r3, r3, #7
 8006cc8:	4413      	add	r3, r2
 8006cca:	3384      	adds	r3, #132	; 0x84
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	01db      	lsls	r3, r3, #7
 8006cd8:	4413      	add	r3, r2
 8006cda:	3384      	adds	r3, #132	; 0x84
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ce8:	461a      	mov	r2, r3
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	01db      	lsls	r3, r3, #7
 8006cfc:	440b      	add	r3, r1
 8006cfe:	3384      	adds	r3, #132	; 0x84
 8006d00:	4619      	mov	r1, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	01db      	lsls	r3, r3, #7
 8006d12:	4413      	add	r3, r2
 8006d14:	3384      	adds	r3, #132	; 0x84
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	01d2      	lsls	r2, r2, #7
 8006d22:	440a      	add	r2, r1
 8006d24:	3284      	adds	r2, #132	; 0x84
 8006d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d2a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	01db      	lsls	r3, r3, #7
 8006d36:	4413      	add	r3, r2
 8006d38:	3384      	adds	r3, #132	; 0x84
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	01db      	lsls	r3, r3, #7
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3384      	adds	r3, #132	; 0x84
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	4611      	mov	r1, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	01d2      	lsls	r2, r2, #7
 8006d5c:	440a      	add	r2, r1
 8006d5e:	3284      	adds	r2, #132	; 0x84
 8006d60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d64:	f023 0307 	bic.w	r3, r3, #7
 8006d68:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	69da      	ldr	r2, [r3, #28]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	6809      	ldr	r1, [r1, #0]
 8006d76:	4608      	mov	r0, r1
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	01c9      	lsls	r1, r1, #7
 8006d7c:	4401      	add	r1, r0
 8006d7e:	3184      	adds	r1, #132	; 0x84
 8006d80:	4313      	orrs	r3, r2
 8006d82:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	01db      	lsls	r3, r3, #7
 8006d8e:	4413      	add	r3, r2
 8006d90:	3384      	adds	r3, #132	; 0x84
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	01db      	lsls	r3, r3, #7
 8006d9e:	4413      	add	r3, r2
 8006da0:	3384      	adds	r3, #132	; 0x84
 8006da2:	461a      	mov	r2, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	01db      	lsls	r3, r3, #7
 8006db2:	4413      	add	r3, r2
 8006db4:	3384      	adds	r3, #132	; 0x84
 8006db6:	461a      	mov	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e01b      	b.n	8006e04 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d102      	bne.n	8006dda <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	61fb      	str	r3, [r7, #28]
 8006dd8:	e014      	b.n	8006e04 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00b      	beq.n	8006dfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d007      	beq.n	8006dfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d003      	beq.n	8006dfa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	d102      	bne.n	8006e00 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	e001      	b.n	8006e04 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	4413      	add	r3, r2
 8006e10:	3384      	adds	r3, #132	; 0x84
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	6812      	ldr	r2, [r2, #0]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	01d2      	lsls	r2, r2, #7
 8006e1e:	440a      	add	r2, r1
 8006e20:	3284      	adds	r2, #132	; 0x84
 8006e22:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	041a      	lsls	r2, r3, #16
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	1acb      	subs	r3, r1, r3
 8006e3e:	69f9      	ldr	r1, [r7, #28]
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	3303      	adds	r3, #3
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6809      	ldr	r1, [r1, #0]
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	01c9      	lsls	r1, r1, #7
 8006e50:	4401      	add	r1, r0
 8006e52:	3184      	adds	r1, #132	; 0x84
 8006e54:	4313      	orrs	r3, r2
 8006e56:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	01db      	lsls	r3, r3, #7
 8006e62:	4413      	add	r3, r2
 8006e64:	3384      	adds	r3, #132	; 0x84
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	01d2      	lsls	r2, r2, #7
 8006e72:	440a      	add	r2, r1
 8006e74:	3284      	adds	r2, #132	; 0x84
 8006e76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	01db      	lsls	r3, r3, #7
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3384      	adds	r3, #132	; 0x84
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	01db      	lsls	r3, r3, #7
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3384      	adds	r3, #132	; 0x84
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	01d2      	lsls	r2, r2, #7
 8006eb0:	440a      	add	r2, r1
 8006eb2:	3284      	adds	r2, #132	; 0x84
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	6013      	str	r3, [r2, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	3724      	adds	r7, #36	; 0x24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006eee:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <HAL_PWREx_EnableOverDrive+0x94>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ef4:	f7fd fa78 	bl	80043e8 <HAL_GetTick>
 8006ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006efa:	e009      	b.n	8006f10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006efc:	f7fd fa74 	bl	80043e8 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0a:	d901      	bls.n	8006f10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e01f      	b.n	8006f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f10:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1c:	d1ee      	bne.n	8006efc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f24:	f7fd fa60 	bl	80043e8 <HAL_GetTick>
 8006f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f2a:	e009      	b.n	8006f40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f2c:	f7fd fa5c 	bl	80043e8 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3a:	d901      	bls.n	8006f40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e007      	b.n	8006f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4c:	d1ee      	bne.n	8006f2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	420e0040 	.word	0x420e0040
 8006f60:	40007000 	.word	0x40007000
 8006f64:	420e0044 	.word	0x420e0044

08006f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e25b      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d075      	beq.n	8007072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f86:	4ba3      	ldr	r3, [pc, #652]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d00c      	beq.n	8006fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f92:	4ba0      	ldr	r3, [pc, #640]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d112      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f9e:	4b9d      	ldr	r3, [pc, #628]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	4b99      	ldr	r3, [pc, #612]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d05b      	beq.n	8007070 <HAL_RCC_OscConfig+0x108>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d157      	bne.n	8007070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e236      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x74>
 8006fce:	4b91      	ldr	r3, [pc, #580]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a90      	ldr	r2, [pc, #576]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e01d      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0x98>
 8006fe6:	4b8b      	ldr	r3, [pc, #556]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a8a      	ldr	r2, [pc, #552]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b88      	ldr	r3, [pc, #544]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a87      	ldr	r2, [pc, #540]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e00b      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8007000:	4b84      	ldr	r3, [pc, #528]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a83      	ldr	r2, [pc, #524]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	4b81      	ldr	r3, [pc, #516]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a80      	ldr	r2, [pc, #512]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d013      	beq.n	8007048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fd f9e2 	bl	80043e8 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007028:	f7fd f9de 	bl	80043e8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e1fb      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	4b76      	ldr	r3, [pc, #472]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0xc0>
 8007046:	e014      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007048:	f7fd f9ce 	bl	80043e8 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007050:	f7fd f9ca 	bl	80043e8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e1e7      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	4b6c      	ldr	r3, [pc, #432]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0xe8>
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d063      	beq.n	8007146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800707e:	4b65      	ldr	r3, [pc, #404]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b62      	ldr	r3, [pc, #392]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007092:	2b08      	cmp	r3, #8
 8007094:	d11c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007096:	4b5f      	ldr	r3, [pc, #380]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	4b5c      	ldr	r3, [pc, #368]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e1bb      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b56      	ldr	r3, [pc, #344]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4952      	ldr	r1, [pc, #328]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ce:	e03a      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d8:	4b4f      	ldr	r3, [pc, #316]	; (8007218 <HAL_RCC_OscConfig+0x2b0>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fd f983 	bl	80043e8 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070e6:	f7fd f97f 	bl	80043e8 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e19c      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f8:	4b46      	ldr	r3, [pc, #280]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007104:	4b43      	ldr	r3, [pc, #268]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4940      	ldr	r1, [pc, #256]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	e015      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711a:	4b3f      	ldr	r3, [pc, #252]	; (8007218 <HAL_RCC_OscConfig+0x2b0>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fd f962 	bl	80043e8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007128:	f7fd f95e 	bl	80043e8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e17b      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	4b36      	ldr	r3, [pc, #216]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d030      	beq.n	80071b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b30      	ldr	r3, [pc, #192]	; (800721c <HAL_RCC_OscConfig+0x2b4>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fd f942 	bl	80043e8 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007168:	f7fd f93e 	bl	80043e8 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e15b      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717a:	4b26      	ldr	r3, [pc, #152]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x200>
 8007186:	e015      	b.n	80071b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007188:	4b24      	ldr	r3, [pc, #144]	; (800721c <HAL_RCC_OscConfig+0x2b4>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718e:	f7fd f92b 	bl	80043e8 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007196:	f7fd f927 	bl	80043e8 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e144      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80071aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80a0 	beq.w	8007302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c6:	4b13      	ldr	r3, [pc, #76]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10f      	bne.n	80071f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	4a0e      	ldr	r2, [pc, #56]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e0:	6413      	str	r3, [r2, #64]	; 0x40
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <HAL_RCC_OscConfig+0x2ac>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_OscConfig+0x2b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d121      	bne.n	8007242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <HAL_RCC_OscConfig+0x2b8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a07      	ldr	r2, [pc, #28]	; (8007220 <HAL_RCC_OscConfig+0x2b8>)
 8007204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800720a:	f7fd f8ed 	bl	80043e8 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	e011      	b.n	8007236 <HAL_RCC_OscConfig+0x2ce>
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	42470000 	.word	0x42470000
 800721c:	42470e80 	.word	0x42470e80
 8007220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007224:	f7fd f8e0 	bl	80043e8 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e0fd      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007236:	4b81      	ldr	r3, [pc, #516]	; (800743c <HAL_RCC_OscConfig+0x4d4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f0      	beq.n	8007224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d106      	bne.n	8007258 <HAL_RCC_OscConfig+0x2f0>
 800724a:	4b7d      	ldr	r3, [pc, #500]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a7c      	ldr	r2, [pc, #496]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
 8007256:	e01c      	b.n	8007292 <HAL_RCC_OscConfig+0x32a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b05      	cmp	r3, #5
 800725e:	d10c      	bne.n	800727a <HAL_RCC_OscConfig+0x312>
 8007260:	4b77      	ldr	r3, [pc, #476]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4a76      	ldr	r2, [pc, #472]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007266:	f043 0304 	orr.w	r3, r3, #4
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
 800726c:	4b74      	ldr	r3, [pc, #464]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	4a73      	ldr	r2, [pc, #460]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	6713      	str	r3, [r2, #112]	; 0x70
 8007278:	e00b      	b.n	8007292 <HAL_RCC_OscConfig+0x32a>
 800727a:	4b71      	ldr	r3, [pc, #452]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a70      	ldr	r2, [pc, #448]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	6713      	str	r3, [r2, #112]	; 0x70
 8007286:	4b6e      	ldr	r3, [pc, #440]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	4a6d      	ldr	r2, [pc, #436]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 800728c:	f023 0304 	bic.w	r3, r3, #4
 8007290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d015      	beq.n	80072c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729a:	f7fd f8a5 	bl	80043e8 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a0:	e00a      	b.n	80072b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a2:	f7fd f8a1 	bl	80043e8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e0bc      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ee      	beq.n	80072a2 <HAL_RCC_OscConfig+0x33a>
 80072c4:	e014      	b.n	80072f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c6:	f7fd f88f 	bl	80043e8 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fd f88b 	bl	80043e8 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0a6      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e4:	4b56      	ldr	r3, [pc, #344]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ee      	bne.n	80072ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d105      	bne.n	8007302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f6:	4b52      	ldr	r3, [pc, #328]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	4a51      	ldr	r2, [pc, #324]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80072fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8092 	beq.w	8007430 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800730c:	4b4c      	ldr	r3, [pc, #304]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b08      	cmp	r3, #8
 8007316:	d05c      	beq.n	80073d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d141      	bne.n	80073a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007320:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCC_OscConfig+0x4dc>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007326:	f7fd f85f 	bl	80043e8 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800732e:	f7fd f85b 	bl	80043e8 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e078      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007340:	4b3f      	ldr	r3, [pc, #252]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	019b      	lsls	r3, r3, #6
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	3b01      	subs	r3, #1
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	4933      	ldr	r1, [pc, #204]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007372:	4313      	orrs	r3, r2
 8007374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007376:	4b33      	ldr	r3, [pc, #204]	; (8007444 <HAL_RCC_OscConfig+0x4dc>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737c:	f7fd f834 	bl	80043e8 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007384:	f7fd f830 	bl	80043e8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e04d      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007396:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f0      	beq.n	8007384 <HAL_RCC_OscConfig+0x41c>
 80073a2:	e045      	b.n	8007430 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a4:	4b27      	ldr	r3, [pc, #156]	; (8007444 <HAL_RCC_OscConfig+0x4dc>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073aa:	f7fd f81d 	bl	80043e8 <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073b2:	f7fd f819 	bl	80043e8 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e036      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f0      	bne.n	80073b2 <HAL_RCC_OscConfig+0x44a>
 80073d0:	e02e      	b.n	8007430 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e029      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <HAL_RCC_OscConfig+0x4d8>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d11c      	bne.n	800742c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d115      	bne.n	800742c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007406:	4013      	ands	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800740c:	4293      	cmp	r3, r2
 800740e:	d10d      	bne.n	800742c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800741a:	429a      	cmp	r2, r3
 800741c:	d106      	bne.n	800742c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d001      	beq.n	8007430 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40007000 	.word	0x40007000
 8007440:	40023800 	.word	0x40023800
 8007444:	42470060 	.word	0x42470060

08007448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0cc      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b68      	ldr	r3, [pc, #416]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d90c      	bls.n	8007484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b65      	ldr	r3, [pc, #404]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b63      	ldr	r3, [pc, #396]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0b8      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800749c:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b4:	4b53      	ldr	r3, [pc, #332]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4a52      	ldr	r2, [pc, #328]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c0:	4b50      	ldr	r3, [pc, #320]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	494d      	ldr	r1, [pc, #308]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d044      	beq.n	8007568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e6:	4b47      	ldr	r3, [pc, #284]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d119      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007502:	2b03      	cmp	r3, #3
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007506:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e06f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e067      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007526:	4b37      	ldr	r3, [pc, #220]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0203 	bic.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4934      	ldr	r1, [pc, #208]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007538:	f7fc ff56 	bl	80043e8 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	e00a      	b.n	8007556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007540:	f7fc ff52 	bl	80043e8 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 020c 	and.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d1eb      	bne.n	8007540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b25      	ldr	r3, [pc, #148]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d20c      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e032      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4916      	ldr	r1, [pc, #88]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	490e      	ldr	r1, [pc, #56]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075ce:	f000 f821 	bl	8007614 <HAL_RCC_GetSysClockFreq>
 80075d2:	4601      	mov	r1, r0
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <HAL_RCC_ClockConfig+0x1c0>)
 80075e0:	5cd3      	ldrb	r3, [r2, r3]
 80075e2:	fa21 f303 	lsr.w	r3, r1, r3
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x1c8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fa fb8c 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40023c00 	.word	0x40023c00
 8007604:	40023800 	.word	0x40023800
 8007608:	080097f0 	.word	0x080097f0
 800760c:	20000010 	.word	0x20000010
 8007610:	20000098 	.word	0x20000098

08007614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	2300      	movs	r3, #0
 8007624:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762a:	4b63      	ldr	r3, [pc, #396]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 030c 	and.w	r3, r3, #12
 8007632:	2b04      	cmp	r3, #4
 8007634:	d007      	beq.n	8007646 <HAL_RCC_GetSysClockFreq+0x32>
 8007636:	2b08      	cmp	r3, #8
 8007638:	d008      	beq.n	800764c <HAL_RCC_GetSysClockFreq+0x38>
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 80b4 	bne.w	80077a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007640:	4b5e      	ldr	r3, [pc, #376]	; (80077bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007642:	60bb      	str	r3, [r7, #8]
       break;
 8007644:	e0b3      	b.n	80077ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007646:	4b5e      	ldr	r3, [pc, #376]	; (80077c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007648:	60bb      	str	r3, [r7, #8]
      break;
 800764a:	e0b0      	b.n	80077ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800764c:	4b5a      	ldr	r3, [pc, #360]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007654:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007656:	4b58      	ldr	r3, [pc, #352]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d04a      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007662:	4b55      	ldr	r3, [pc, #340]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	ea03 0501 	and.w	r5, r3, r1
 8007678:	ea04 0602 	and.w	r6, r4, r2
 800767c:	4629      	mov	r1, r5
 800767e:	4632      	mov	r2, r6
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	f04f 0400 	mov.w	r4, #0
 8007688:	0154      	lsls	r4, r2, #5
 800768a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800768e:	014b      	lsls	r3, r1, #5
 8007690:	4619      	mov	r1, r3
 8007692:	4622      	mov	r2, r4
 8007694:	1b49      	subs	r1, r1, r5
 8007696:	eb62 0206 	sbc.w	r2, r2, r6
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	f04f 0400 	mov.w	r4, #0
 80076a2:	0194      	lsls	r4, r2, #6
 80076a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076a8:	018b      	lsls	r3, r1, #6
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	eb64 0402 	sbc.w	r4, r4, r2
 80076b0:	f04f 0100 	mov.w	r1, #0
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	00e2      	lsls	r2, r4, #3
 80076ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076be:	00d9      	lsls	r1, r3, #3
 80076c0:	460b      	mov	r3, r1
 80076c2:	4614      	mov	r4, r2
 80076c4:	195b      	adds	r3, r3, r5
 80076c6:	eb44 0406 	adc.w	r4, r4, r6
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	0262      	lsls	r2, r4, #9
 80076d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80076d8:	0259      	lsls	r1, r3, #9
 80076da:	460b      	mov	r3, r1
 80076dc:	4614      	mov	r4, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	4621      	mov	r1, r4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f04f 0400 	mov.w	r4, #0
 80076e8:	461a      	mov	r2, r3
 80076ea:	4623      	mov	r3, r4
 80076ec:	f7f8 fd7e 	bl	80001ec <__aeabi_uldivmod>
 80076f0:	4603      	mov	r3, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e049      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f8:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	099b      	lsrs	r3, r3, #6
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	ea03 0501 	and.w	r5, r3, r1
 800770e:	ea04 0602 	and.w	r6, r4, r2
 8007712:	4629      	mov	r1, r5
 8007714:	4632      	mov	r2, r6
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	f04f 0400 	mov.w	r4, #0
 800771e:	0154      	lsls	r4, r2, #5
 8007720:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007724:	014b      	lsls	r3, r1, #5
 8007726:	4619      	mov	r1, r3
 8007728:	4622      	mov	r2, r4
 800772a:	1b49      	subs	r1, r1, r5
 800772c:	eb62 0206 	sbc.w	r2, r2, r6
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	f04f 0400 	mov.w	r4, #0
 8007738:	0194      	lsls	r4, r2, #6
 800773a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800773e:	018b      	lsls	r3, r1, #6
 8007740:	1a5b      	subs	r3, r3, r1
 8007742:	eb64 0402 	sbc.w	r4, r4, r2
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	00e2      	lsls	r2, r4, #3
 8007750:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007754:	00d9      	lsls	r1, r3, #3
 8007756:	460b      	mov	r3, r1
 8007758:	4614      	mov	r4, r2
 800775a:	195b      	adds	r3, r3, r5
 800775c:	eb44 0406 	adc.w	r4, r4, r6
 8007760:	f04f 0100 	mov.w	r1, #0
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	02a2      	lsls	r2, r4, #10
 800776a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800776e:	0299      	lsls	r1, r3, #10
 8007770:	460b      	mov	r3, r1
 8007772:	4614      	mov	r4, r2
 8007774:	4618      	mov	r0, r3
 8007776:	4621      	mov	r1, r4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f04f 0400 	mov.w	r4, #0
 800777e:	461a      	mov	r2, r3
 8007780:	4623      	mov	r3, r4
 8007782:	f7f8 fd33 	bl	80001ec <__aeabi_uldivmod>
 8007786:	4603      	mov	r3, r0
 8007788:	460c      	mov	r4, r1
 800778a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	0c1b      	lsrs	r3, r3, #16
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	3301      	adds	r3, #1
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	60bb      	str	r3, [r7, #8]
      break;
 80077a6:	e002      	b.n	80077ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80077aa:	60bb      	str	r3, [r7, #8]
      break;
 80077ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ae:	68bb      	ldr	r3, [r7, #8]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b8:	40023800 	.word	0x40023800
 80077bc:	00f42400 	.word	0x00f42400
 80077c0:	007a1200 	.word	0x007a1200

080077c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c8:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077ca:	681b      	ldr	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000010 	.word	0x20000010

080077dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077e0:	f7ff fff0 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 80077e4:	4601      	mov	r1, r0
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0a9b      	lsrs	r3, r3, #10
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	4a03      	ldr	r2, [pc, #12]	; (8007800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077f2:	5cd3      	ldrb	r3, [r2, r3]
 80077f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	08009800 	.word	0x08009800

08007804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007808:	f7ff ffdc 	bl	80077c4 <HAL_RCC_GetHCLKFreq>
 800780c:	4601      	mov	r1, r0
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0b5b      	lsrs	r3, r3, #13
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4a03      	ldr	r2, [pc, #12]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800781a:	5cd3      	ldrb	r3, [r2, r3]
 800781c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40023800 	.word	0x40023800
 8007828:	08009800 	.word	0x08009800

0800782c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	220f      	movs	r2, #15
 800783a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800783c:	4b12      	ldr	r3, [pc, #72]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0203 	and.w	r2, r3, #3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007860:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_RCC_GetClockConfig+0x5c>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <HAL_RCC_GetClockConfig+0x60>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40023800 	.word	0x40023800
 800788c:	40023c00 	.word	0x40023c00

08007890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d075      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078c4:	4bad      	ldr	r3, [pc, #692]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078ca:	f7fc fd8d 	bl	80043e8 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078d2:	f7fc fd89 	bl	80043e8 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e18b      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078e4:	4ba6      	ldr	r3, [pc, #664]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f0      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	019a      	lsls	r2, r3, #6
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	071b      	lsls	r3, r3, #28
 8007908:	499d      	ldr	r1, [pc, #628]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01f      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800791c:	4b98      	ldr	r3, [pc, #608]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	0f1b      	lsrs	r3, r3, #28
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	019a      	lsls	r2, r3, #6
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	061b      	lsls	r3, r3, #24
 8007936:	431a      	orrs	r2, r3
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	071b      	lsls	r3, r3, #28
 800793c:	4990      	ldr	r1, [pc, #576]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007944:	4b8e      	ldr	r3, [pc, #568]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800794a:	f023 021f 	bic.w	r2, r3, #31
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	3b01      	subs	r3, #1
 8007954:	498a      	ldr	r1, [pc, #552]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	019a      	lsls	r2, r3, #6
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	061b      	lsls	r3, r3, #24
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	071b      	lsls	r3, r3, #28
 800797c:	4980      	ldr	r1, [pc, #512]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007984:	4b7d      	ldr	r3, [pc, #500]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800798a:	f7fc fd2d 	bl	80043e8 <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007992:	f7fc fd29 	bl	80043e8 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e12b      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079a4:	4b76      	ldr	r3, [pc, #472]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d079      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c8:	4b6e      	ldr	r3, [pc, #440]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079ce:	f7fc fd0b 	bl	80043e8 <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80079d6:	f7fc fd07 	bl	80043e8 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e109      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079e8:	4b65      	ldr	r3, [pc, #404]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f4:	d0ef      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d020      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a02:	4b5f      	ldr	r3, [pc, #380]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a08:	0f1b      	lsrs	r3, r3, #28
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	019a      	lsls	r2, r3, #6
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	061b      	lsls	r3, r3, #24
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	071b      	lsls	r3, r3, #28
 8007a22:	4957      	ldr	r1, [pc, #348]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a2a:	4b55      	ldr	r3, [pc, #340]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	4950      	ldr	r1, [pc, #320]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01e      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a50:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	0e1b      	lsrs	r3, r3, #24
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	019a      	lsls	r2, r3, #6
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	061b      	lsls	r3, r3, #24
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	071b      	lsls	r3, r3, #28
 8007a70:	4943      	ldr	r1, [pc, #268]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a78:	4b41      	ldr	r3, [pc, #260]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	493e      	ldr	r1, [pc, #248]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a8e:	4b3d      	ldr	r3, [pc, #244]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a94:	f7fc fca8 	bl	80043e8 <HAL_GetTick>
 8007a98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a9c:	f7fc fca4 	bl	80043e8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0a6      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aae:	4b34      	ldr	r3, [pc, #208]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aba:	d1ef      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 808d 	beq.w	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	4b2c      	ldr	r3, [pc, #176]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	4a2b      	ldr	r2, [pc, #172]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8007ada:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ae6:	4b28      	ldr	r3, [pc, #160]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007af2:	f7fc fc79 	bl	80043e8 <HAL_GetTick>
 8007af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007afa:	f7fc fc75 	bl	80043e8 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e077      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b0c:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b18:	4b19      	ldr	r3, [pc, #100]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d039      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d032      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b40:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d11e      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b5e:	f7fc fc43 	bl	80043e8 <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b64:	e014      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b66:	f7fc fc3f 	bl	80043e8 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d90b      	bls.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e03f      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007b7c:	42470068 	.word	0x42470068
 8007b80:	40023800 	.word	0x40023800
 8007b84:	42470070 	.word	0x42470070
 8007b88:	40007000 	.word	0x40007000
 8007b8c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b90:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0e4      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba8:	d10d      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bbe:	4911      	ldr	r1, [pc, #68]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	608b      	str	r3, [r1, #8]
 8007bc4:	e005      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bcc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bde:	4909      	ldr	r1, [pc, #36]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007bf6:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007bf8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40023800 	.word	0x40023800
 8007c08:	424711e0 	.word	0x424711e0

08007c0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e025      	b.n	8007c6c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7f8 fea9 	bl	800098c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f001 fbef 	bl	8009430 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	f001 fc5a 	bl	8009516 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d101      	bne.n	8007c90 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e018      	b.n	8007cc2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 fcb7 	bl	8009614 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d104      	bne.n	8007cb8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007cb6:	e003      	b.n	8007cc0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d101      	bne.n	8007ce4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e00e      	b.n	8007d02 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 fcca 	bl	800968c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e056      	b.n	8007dca <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7f9 ff5a 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	ea42 0103 	orr.w	r1, r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	f003 0104 	and.w	r1, r3, #4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e01a      	b.n	8007e1a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dfa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7f9 ff3f 	bl	8001c80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b088      	sub	sp, #32
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_SPI_Transmit+0x22>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e11e      	b.n	8008082 <HAL_SPI_Transmit+0x260>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e4c:	f7fc facc 	bl	80043e8 <HAL_GetTick>
 8007e50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007e62:	2302      	movs	r3, #2
 8007e64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e66:	e103      	b.n	8008070 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_SPI_Transmit+0x52>
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007e78:	e0fa      	b.n	8008070 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	d107      	bne.n	8007ed2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ed0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d007      	beq.n	8007ef0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef8:	d14b      	bne.n	8007f92 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_SPI_Transmit+0xe6>
 8007f02:	8afb      	ldrh	r3, [r7, #22]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d13e      	bne.n	8007f86 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	881a      	ldrh	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	1c9a      	adds	r2, r3, #2
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f2c:	e02b      	b.n	8007f86 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d112      	bne.n	8007f62 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	881a      	ldrh	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	1c9a      	adds	r2, r3, #2
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f60:	e011      	b.n	8007f86 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f62:	f7fc fa41 	bl	80043e8 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d803      	bhi.n	8007f7a <HAL_SPI_Transmit+0x158>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d102      	bne.n	8007f80 <HAL_SPI_Transmit+0x15e>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f84:	e074      	b.n	8008070 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ce      	bne.n	8007f2e <HAL_SPI_Transmit+0x10c>
 8007f90:	e04c      	b.n	800802c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_SPI_Transmit+0x17e>
 8007f9a:	8afb      	ldrh	r3, [r7, #22]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d140      	bne.n	8008022 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007fc6:	e02c      	b.n	8008022 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d113      	bne.n	8007ffe <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ffc:	e011      	b.n	8008022 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ffe:	f7fc f9f3 	bl	80043e8 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d803      	bhi.n	8008016 <HAL_SPI_Transmit+0x1f4>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d102      	bne.n	800801c <HAL_SPI_Transmit+0x1fa>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008020:	e026      	b.n	8008070 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1cd      	bne.n	8007fc8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fbb3 	bl	800879c <SPI_EndRxTxTransaction>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e000      	b.n	8008070 <HAL_SPI_Transmit+0x24e>
  }

error:
 800806e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008080:	7ffb      	ldrb	r3, [r7, #31]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b088      	sub	sp, #32
 800808e:	af02      	add	r7, sp, #8
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a6:	d112      	bne.n	80080ce <HAL_SPI_Receive+0x44>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10e      	bne.n	80080ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2204      	movs	r2, #4
 80080b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f8e9 	bl	800829c <HAL_SPI_TransmitReceive>
 80080ca:	4603      	mov	r3, r0
 80080cc:	e0e2      	b.n	8008294 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_SPI_Receive+0x52>
 80080d8:	2302      	movs	r3, #2
 80080da:	e0db      	b.n	8008294 <HAL_SPI_Receive+0x20a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080e4:	f7fc f980 	bl	80043e8 <HAL_GetTick>
 80080e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d002      	beq.n	80080fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80080f6:	2302      	movs	r3, #2
 80080f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80080fa:	e0c2      	b.n	8008282 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_SPI_Receive+0x7e>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800810c:	e0b9      	b.n	8008282 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2204      	movs	r2, #4
 8008112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008154:	d107      	bne.n	8008166 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008164:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d007      	beq.n	8008184 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008182:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d162      	bne.n	8008252 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800818c:	e02e      	b.n	80081ec <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d115      	bne.n	80081c8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f103 020c 	add.w	r2, r3, #12
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081c6:	e011      	b.n	80081ec <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c8:	f7fc f90e 	bl	80043e8 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d803      	bhi.n	80081e0 <HAL_SPI_Receive+0x156>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	d102      	bne.n	80081e6 <HAL_SPI_Receive+0x15c>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081ea:	e04a      	b.n	8008282 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1cb      	bne.n	800818e <HAL_SPI_Receive+0x104>
 80081f6:	e031      	b.n	800825c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d113      	bne.n	800822e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	b292      	uxth	r2, r2
 8008212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	1c9a      	adds	r2, r3, #2
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800822c:	e011      	b.n	8008252 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800822e:	f7fc f8db 	bl	80043e8 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d803      	bhi.n	8008246 <HAL_SPI_Receive+0x1bc>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d102      	bne.n	800824c <HAL_SPI_Receive+0x1c2>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008250:	e017      	b.n	8008282 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1cd      	bne.n	80081f8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fa35 	bl	80086d0 <SPI_EndRxTransaction>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	75fb      	strb	r3, [r7, #23]
 800827e:	e000      	b.n	8008282 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08c      	sub	sp, #48	; 0x30
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082aa:	2301      	movs	r3, #1
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_SPI_TransmitReceive+0x26>
 80082be:	2302      	movs	r3, #2
 80082c0:	e18a      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x33c>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ca:	f7fc f88d 	bl	80043e8 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d00f      	beq.n	800830c <HAL_SPI_TransmitReceive+0x70>
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f2:	d107      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x68>
 80082fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008300:	2b04      	cmp	r3, #4
 8008302:	d003      	beq.n	800830c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008304:	2302      	movs	r3, #2
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800830a:	e15b      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_SPI_TransmitReceive+0x82>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_SPI_TransmitReceive+0x82>
 8008318:	887b      	ldrh	r3, [r7, #2]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008324:	e14e      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b04      	cmp	r3, #4
 8008330:	d003      	beq.n	800833a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2205      	movs	r2, #5
 8008336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	887a      	ldrh	r2, [r7, #2]
 800834a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	887a      	ldrh	r2, [r7, #2]
 8008350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	887a      	ldrh	r2, [r7, #2]
 8008362:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d007      	beq.n	800838e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008396:	d178      	bne.n	800848a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x10a>
 80083a0:	8b7b      	ldrh	r3, [r7, #26]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d166      	bne.n	8008474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	881a      	ldrh	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	1c9a      	adds	r2, r3, #2
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ca:	e053      	b.n	8008474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d11b      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x176>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d016      	beq.n	8008412 <HAL_SPI_TransmitReceive+0x176>
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d113      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	881a      	ldrh	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d119      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x1b8>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d014      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	b292      	uxth	r2, r2
 8008436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008450:	2301      	movs	r3, #1
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008454:	f7fb ffc8 	bl	80043e8 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008460:	429a      	cmp	r2, r3
 8008462:	d807      	bhi.n	8008474 <HAL_SPI_TransmitReceive+0x1d8>
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d003      	beq.n	8008474 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008472:	e0a7      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1a6      	bne.n	80083cc <HAL_SPI_TransmitReceive+0x130>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008482:	b29b      	uxth	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1a1      	bne.n	80083cc <HAL_SPI_TransmitReceive+0x130>
 8008488:	e07c      	b.n	8008584 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <HAL_SPI_TransmitReceive+0x1fc>
 8008492:	8b7b      	ldrh	r3, [r7, #26]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d16b      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	330c      	adds	r3, #12
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084be:	e057      	b.n	8008570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d11c      	bne.n	8008508 <HAL_SPI_TransmitReceive+0x26c>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d017      	beq.n	8008508 <HAL_SPI_TransmitReceive+0x26c>
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d114      	bne.n	8008508 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	330c      	adds	r3, #12
 80084e8:	7812      	ldrb	r2, [r2, #0]
 80084ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b01      	cmp	r3, #1
 8008514:	d119      	bne.n	800854a <HAL_SPI_TransmitReceive+0x2ae>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851a:	b29b      	uxth	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d014      	beq.n	800854a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008546:	2301      	movs	r3, #1
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800854a:	f7fb ff4d 	bl	80043e8 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008556:	429a      	cmp	r2, r3
 8008558:	d803      	bhi.n	8008562 <HAL_SPI_TransmitReceive+0x2c6>
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d102      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x2cc>
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800856e:	e029      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1a2      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x224>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d19d      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f907 	bl	800879c <SPI_EndRxTxTransaction>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085a0:	e010      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	e000      	b.n	80085c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80085c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3730      	adds	r7, #48	; 0x30
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085ee:	b2db      	uxtb	r3, r3
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800860c:	e04c      	b.n	80086a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d048      	beq.n	80086a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008616:	f7fb fee7 	bl	80043e8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d902      	bls.n	800862c <SPI_WaitFlagStateUntilTimeout+0x30>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d13d      	bne.n	80086a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800863a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008644:	d111      	bne.n	800866a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d004      	beq.n	800865a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d107      	bne.n	800866a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	d10f      	bne.n	8008694 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e00f      	b.n	80086c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4013      	ands	r3, r2
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d1a3      	bne.n	800860e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e4:	d111      	bne.n	800870a <SPI_EndRxTransaction+0x3a>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ee:	d004      	beq.n	80086fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f8:	d107      	bne.n	800870a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008708:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008712:	d12a      	bne.n	800876a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800871c:	d012      	beq.n	8008744 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff ff67 	bl	80085fc <SPI_WaitFlagStateUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02d      	beq.n	8008790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008738:	f043 0220 	orr.w	r2, r3, #32
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e026      	b.n	8008792 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	2101      	movs	r1, #1
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f7ff ff54 	bl	80085fc <SPI_WaitFlagStateUntilTimeout>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01a      	beq.n	8008790 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e013      	b.n	8008792 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	2101      	movs	r1, #1
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff ff41 	bl	80085fc <SPI_WaitFlagStateUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008784:	f043 0220 	orr.w	r2, r3, #32
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e000      	b.n	8008792 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087a8:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <SPI_EndRxTxTransaction+0x7c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <SPI_EndRxTxTransaction+0x80>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	0d5b      	lsrs	r3, r3, #21
 80087b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087c6:	d112      	bne.n	80087ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2200      	movs	r2, #0
 80087d0:	2180      	movs	r1, #128	; 0x80
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff ff12 	bl	80085fc <SPI_WaitFlagStateUntilTimeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d016      	beq.n	800880c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	f043 0220 	orr.w	r2, r3, #32
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e00f      	b.n	800880e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00a      	beq.n	800880a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008804:	2b80      	cmp	r3, #128	; 0x80
 8008806:	d0f2      	beq.n	80087ee <SPI_EndRxTxTransaction+0x52>
 8008808:	e000      	b.n	800880c <SPI_EndRxTxTransaction+0x70>
        break;
 800880a:	bf00      	nop
  }

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000010 	.word	0x20000010
 800881c:	165e9f81 	.word	0x165e9f81

08008820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01d      	b.n	800886e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f815 	bl	8008876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f000 f968 	bl	8008b34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0201 	orr.w	r2, r2, #1
 80088a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b06      	cmp	r3, #6
 80088b2:	d007      	beq.n	80088c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0201 	orr.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d122      	bne.n	800892e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d11b      	bne.n	800892e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f06f 0202 	mvn.w	r2, #2
 80088fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8ee 	bl	8008af6 <HAL_TIM_IC_CaptureCallback>
 800891a:	e005      	b.n	8008928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8e0 	bl	8008ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f8f1 	bl	8008b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b04      	cmp	r3, #4
 800893a:	d122      	bne.n	8008982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b04      	cmp	r3, #4
 8008948:	d11b      	bne.n	8008982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0204 	mvn.w	r2, #4
 8008952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f8c4 	bl	8008af6 <HAL_TIM_IC_CaptureCallback>
 800896e:	e005      	b.n	800897c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8b6 	bl	8008ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f8c7 	bl	8008b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b08      	cmp	r3, #8
 800898e:	d122      	bne.n	80089d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b08      	cmp	r3, #8
 800899c:	d11b      	bne.n	80089d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f06f 0208 	mvn.w	r2, #8
 80089a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2204      	movs	r2, #4
 80089ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f003 0303 	and.w	r3, r3, #3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f89a 	bl	8008af6 <HAL_TIM_IC_CaptureCallback>
 80089c2:	e005      	b.n	80089d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f88c 	bl	8008ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f89d 	bl	8008b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d122      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d11b      	bne.n	8008a2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f06f 0210 	mvn.w	r2, #16
 80089fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2208      	movs	r2, #8
 8008a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f870 	bl	8008af6 <HAL_TIM_IC_CaptureCallback>
 8008a16:	e005      	b.n	8008a24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f862 	bl	8008ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f873 	bl	8008b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d10e      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d107      	bne.n	8008a56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f06f 0201 	mvn.w	r2, #1
 8008a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7f8 fb7b 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a60:	2b80      	cmp	r3, #128	; 0x80
 8008a62:	d10e      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b80      	cmp	r3, #128	; 0x80
 8008a70:	d107      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f903 	bl	8008c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d10e      	bne.n	8008aae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d107      	bne.n	8008aae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f838 	bl	8008b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d10e      	bne.n	8008ada <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d107      	bne.n	8008ada <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f06f 0220 	mvn.w	r2, #32
 8008ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8cd 	bl	8008c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a40      	ldr	r2, [pc, #256]	; (8008c48 <TIM_Base_SetConfig+0x114>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d013      	beq.n	8008b74 <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b52:	d00f      	beq.n	8008b74 <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a3d      	ldr	r2, [pc, #244]	; (8008c4c <TIM_Base_SetConfig+0x118>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00b      	beq.n	8008b74 <TIM_Base_SetConfig+0x40>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a3c      	ldr	r2, [pc, #240]	; (8008c50 <TIM_Base_SetConfig+0x11c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d007      	beq.n	8008b74 <TIM_Base_SetConfig+0x40>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a3b      	ldr	r2, [pc, #236]	; (8008c54 <TIM_Base_SetConfig+0x120>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d003      	beq.n	8008b74 <TIM_Base_SetConfig+0x40>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a3a      	ldr	r2, [pc, #232]	; (8008c58 <TIM_Base_SetConfig+0x124>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d108      	bne.n	8008b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2f      	ldr	r2, [pc, #188]	; (8008c48 <TIM_Base_SetConfig+0x114>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d02b      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d027      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2c      	ldr	r2, [pc, #176]	; (8008c4c <TIM_Base_SetConfig+0x118>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d023      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a2b      	ldr	r2, [pc, #172]	; (8008c50 <TIM_Base_SetConfig+0x11c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01f      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <TIM_Base_SetConfig+0x120>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01b      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a29      	ldr	r2, [pc, #164]	; (8008c58 <TIM_Base_SetConfig+0x124>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d017      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a28      	ldr	r2, [pc, #160]	; (8008c5c <TIM_Base_SetConfig+0x128>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a27      	ldr	r2, [pc, #156]	; (8008c60 <TIM_Base_SetConfig+0x12c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a26      	ldr	r2, [pc, #152]	; (8008c64 <TIM_Base_SetConfig+0x130>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a25      	ldr	r2, [pc, #148]	; (8008c68 <TIM_Base_SetConfig+0x134>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a24      	ldr	r2, [pc, #144]	; (8008c6c <TIM_Base_SetConfig+0x138>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_Base_SetConfig+0xb2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a23      	ldr	r2, [pc, #140]	; (8008c70 <TIM_Base_SetConfig+0x13c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d108      	bne.n	8008bf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <TIM_Base_SetConfig+0x114>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d003      	beq.n	8008c2c <TIM_Base_SetConfig+0xf8>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a0c      	ldr	r2, [pc, #48]	; (8008c58 <TIM_Base_SetConfig+0x124>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d103      	bne.n	8008c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	615a      	str	r2, [r3, #20]
}
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40010000 	.word	0x40010000
 8008c4c:	40000400 	.word	0x40000400
 8008c50:	40000800 	.word	0x40000800
 8008c54:	40000c00 	.word	0x40000c00
 8008c58:	40010400 	.word	0x40010400
 8008c5c:	40014000 	.word	0x40014000
 8008c60:	40014400 	.word	0x40014400
 8008c64:	40014800 	.word	0x40014800
 8008c68:	40001800 	.word	0x40001800
 8008c6c:	40001c00 	.word	0x40001c00
 8008c70:	40002000 	.word	0x40002000

08008c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e03f      	b.n	8008d2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7f9 f8ee 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2224      	movs	r2, #36	; 0x24
 8008ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f829 	bl	8008d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008d7a:	f023 030c 	bic.w	r3, r3, #12
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	68f9      	ldr	r1, [r7, #12]
 8008d84:	430b      	orrs	r3, r1
 8008d86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699a      	ldr	r2, [r3, #24]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008da6:	f040 818b 	bne.w	80090c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4ac1      	ldr	r2, [pc, #772]	; (80090b4 <UART_SetConfig+0x37c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d005      	beq.n	8008dc0 <UART_SetConfig+0x88>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4abf      	ldr	r2, [pc, #764]	; (80090b8 <UART_SetConfig+0x380>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	f040 80bd 	bne.w	8008f3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dc0:	f7fe fd20 	bl	8007804 <HAL_RCC_GetPCLK2Freq>
 8008dc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	461d      	mov	r5, r3
 8008dca:	f04f 0600 	mov.w	r6, #0
 8008dce:	46a8      	mov	r8, r5
 8008dd0:	46b1      	mov	r9, r6
 8008dd2:	eb18 0308 	adds.w	r3, r8, r8
 8008dd6:	eb49 0409 	adc.w	r4, r9, r9
 8008dda:	4698      	mov	r8, r3
 8008ddc:	46a1      	mov	r9, r4
 8008dde:	eb18 0805 	adds.w	r8, r8, r5
 8008de2:	eb49 0906 	adc.w	r9, r9, r6
 8008de6:	f04f 0100 	mov.w	r1, #0
 8008dea:	f04f 0200 	mov.w	r2, #0
 8008dee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008df2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008df6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	4691      	mov	r9, r2
 8008dfe:	eb18 0005 	adds.w	r0, r8, r5
 8008e02:	eb49 0106 	adc.w	r1, r9, r6
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	461d      	mov	r5, r3
 8008e0c:	f04f 0600 	mov.w	r6, #0
 8008e10:	196b      	adds	r3, r5, r5
 8008e12:	eb46 0406 	adc.w	r4, r6, r6
 8008e16:	461a      	mov	r2, r3
 8008e18:	4623      	mov	r3, r4
 8008e1a:	f7f7 f9e7 	bl	80001ec <__aeabi_uldivmod>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	461a      	mov	r2, r3
 8008e24:	4ba5      	ldr	r3, [pc, #660]	; (80090bc <UART_SetConfig+0x384>)
 8008e26:	fba3 2302 	umull	r2, r3, r3, r2
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	461d      	mov	r5, r3
 8008e34:	f04f 0600 	mov.w	r6, #0
 8008e38:	46a9      	mov	r9, r5
 8008e3a:	46b2      	mov	sl, r6
 8008e3c:	eb19 0309 	adds.w	r3, r9, r9
 8008e40:	eb4a 040a 	adc.w	r4, sl, sl
 8008e44:	4699      	mov	r9, r3
 8008e46:	46a2      	mov	sl, r4
 8008e48:	eb19 0905 	adds.w	r9, r9, r5
 8008e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e64:	4689      	mov	r9, r1
 8008e66:	4692      	mov	sl, r2
 8008e68:	eb19 0005 	adds.w	r0, r9, r5
 8008e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	461d      	mov	r5, r3
 8008e76:	f04f 0600 	mov.w	r6, #0
 8008e7a:	196b      	adds	r3, r5, r5
 8008e7c:	eb46 0406 	adc.w	r4, r6, r6
 8008e80:	461a      	mov	r2, r3
 8008e82:	4623      	mov	r3, r4
 8008e84:	f7f7 f9b2 	bl	80001ec <__aeabi_uldivmod>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4b8b      	ldr	r3, [pc, #556]	; (80090bc <UART_SetConfig+0x384>)
 8008e90:	fba3 1302 	umull	r1, r3, r3, r2
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	2164      	movs	r1, #100	; 0x64
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	3332      	adds	r3, #50	; 0x32
 8008ea2:	4a86      	ldr	r2, [pc, #536]	; (80090bc <UART_SetConfig+0x384>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008eb0:	4498      	add	r8, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	461d      	mov	r5, r3
 8008eb6:	f04f 0600 	mov.w	r6, #0
 8008eba:	46a9      	mov	r9, r5
 8008ebc:	46b2      	mov	sl, r6
 8008ebe:	eb19 0309 	adds.w	r3, r9, r9
 8008ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ec6:	4699      	mov	r9, r3
 8008ec8:	46a2      	mov	sl, r4
 8008eca:	eb19 0905 	adds.w	r9, r9, r5
 8008ece:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ed2:	f04f 0100 	mov.w	r1, #0
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	4692      	mov	sl, r2
 8008eea:	eb19 0005 	adds.w	r0, r9, r5
 8008eee:	eb4a 0106 	adc.w	r1, sl, r6
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	461d      	mov	r5, r3
 8008ef8:	f04f 0600 	mov.w	r6, #0
 8008efc:	196b      	adds	r3, r5, r5
 8008efe:	eb46 0406 	adc.w	r4, r6, r6
 8008f02:	461a      	mov	r2, r3
 8008f04:	4623      	mov	r3, r4
 8008f06:	f7f7 f971 	bl	80001ec <__aeabi_uldivmod>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4b6a      	ldr	r3, [pc, #424]	; (80090bc <UART_SetConfig+0x384>)
 8008f12:	fba3 1302 	umull	r1, r3, r3, r2
 8008f16:	095b      	lsrs	r3, r3, #5
 8008f18:	2164      	movs	r1, #100	; 0x64
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	3332      	adds	r3, #50	; 0x32
 8008f24:	4a65      	ldr	r2, [pc, #404]	; (80090bc <UART_SetConfig+0x384>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	f003 0207 	and.w	r2, r3, #7
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4442      	add	r2, r8
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	e26f      	b.n	800941a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f3a:	f7fe fc4f 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 8008f3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	461d      	mov	r5, r3
 8008f44:	f04f 0600 	mov.w	r6, #0
 8008f48:	46a8      	mov	r8, r5
 8008f4a:	46b1      	mov	r9, r6
 8008f4c:	eb18 0308 	adds.w	r3, r8, r8
 8008f50:	eb49 0409 	adc.w	r4, r9, r9
 8008f54:	4698      	mov	r8, r3
 8008f56:	46a1      	mov	r9, r4
 8008f58:	eb18 0805 	adds.w	r8, r8, r5
 8008f5c:	eb49 0906 	adc.w	r9, r9, r6
 8008f60:	f04f 0100 	mov.w	r1, #0
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f74:	4688      	mov	r8, r1
 8008f76:	4691      	mov	r9, r2
 8008f78:	eb18 0005 	adds.w	r0, r8, r5
 8008f7c:	eb49 0106 	adc.w	r1, r9, r6
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	461d      	mov	r5, r3
 8008f86:	f04f 0600 	mov.w	r6, #0
 8008f8a:	196b      	adds	r3, r5, r5
 8008f8c:	eb46 0406 	adc.w	r4, r6, r6
 8008f90:	461a      	mov	r2, r3
 8008f92:	4623      	mov	r3, r4
 8008f94:	f7f7 f92a 	bl	80001ec <__aeabi_uldivmod>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4b47      	ldr	r3, [pc, #284]	; (80090bc <UART_SetConfig+0x384>)
 8008fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	461d      	mov	r5, r3
 8008fae:	f04f 0600 	mov.w	r6, #0
 8008fb2:	46a9      	mov	r9, r5
 8008fb4:	46b2      	mov	sl, r6
 8008fb6:	eb19 0309 	adds.w	r3, r9, r9
 8008fba:	eb4a 040a 	adc.w	r4, sl, sl
 8008fbe:	4699      	mov	r9, r3
 8008fc0:	46a2      	mov	sl, r4
 8008fc2:	eb19 0905 	adds.w	r9, r9, r5
 8008fc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fca:	f04f 0100 	mov.w	r1, #0
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fde:	4689      	mov	r9, r1
 8008fe0:	4692      	mov	sl, r2
 8008fe2:	eb19 0005 	adds.w	r0, r9, r5
 8008fe6:	eb4a 0106 	adc.w	r1, sl, r6
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	461d      	mov	r5, r3
 8008ff0:	f04f 0600 	mov.w	r6, #0
 8008ff4:	196b      	adds	r3, r5, r5
 8008ff6:	eb46 0406 	adc.w	r4, r6, r6
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	f7f7 f8f5 	bl	80001ec <__aeabi_uldivmod>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
 8009006:	461a      	mov	r2, r3
 8009008:	4b2c      	ldr	r3, [pc, #176]	; (80090bc <UART_SetConfig+0x384>)
 800900a:	fba3 1302 	umull	r1, r3, r3, r2
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	2164      	movs	r1, #100	; 0x64
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	3332      	adds	r3, #50	; 0x32
 800901c:	4a27      	ldr	r2, [pc, #156]	; (80090bc <UART_SetConfig+0x384>)
 800901e:	fba2 2303 	umull	r2, r3, r2, r3
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800902a:	4498      	add	r8, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	461d      	mov	r5, r3
 8009030:	f04f 0600 	mov.w	r6, #0
 8009034:	46a9      	mov	r9, r5
 8009036:	46b2      	mov	sl, r6
 8009038:	eb19 0309 	adds.w	r3, r9, r9
 800903c:	eb4a 040a 	adc.w	r4, sl, sl
 8009040:	4699      	mov	r9, r3
 8009042:	46a2      	mov	sl, r4
 8009044:	eb19 0905 	adds.w	r9, r9, r5
 8009048:	eb4a 0a06 	adc.w	sl, sl, r6
 800904c:	f04f 0100 	mov.w	r1, #0
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800905c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009060:	4689      	mov	r9, r1
 8009062:	4692      	mov	sl, r2
 8009064:	eb19 0005 	adds.w	r0, r9, r5
 8009068:	eb4a 0106 	adc.w	r1, sl, r6
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	461d      	mov	r5, r3
 8009072:	f04f 0600 	mov.w	r6, #0
 8009076:	196b      	adds	r3, r5, r5
 8009078:	eb46 0406 	adc.w	r4, r6, r6
 800907c:	461a      	mov	r2, r3
 800907e:	4623      	mov	r3, r4
 8009080:	f7f7 f8b4 	bl	80001ec <__aeabi_uldivmod>
 8009084:	4603      	mov	r3, r0
 8009086:	460c      	mov	r4, r1
 8009088:	461a      	mov	r2, r3
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <UART_SetConfig+0x384>)
 800908c:	fba3 1302 	umull	r1, r3, r3, r2
 8009090:	095b      	lsrs	r3, r3, #5
 8009092:	2164      	movs	r1, #100	; 0x64
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	3332      	adds	r3, #50	; 0x32
 800909e:	4a07      	ldr	r2, [pc, #28]	; (80090bc <UART_SetConfig+0x384>)
 80090a0:	fba2 2303 	umull	r2, r3, r2, r3
 80090a4:	095b      	lsrs	r3, r3, #5
 80090a6:	f003 0207 	and.w	r2, r3, #7
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4442      	add	r2, r8
 80090b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80090b2:	e1b2      	b.n	800941a <UART_SetConfig+0x6e2>
 80090b4:	40011000 	.word	0x40011000
 80090b8:	40011400 	.word	0x40011400
 80090bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4ad7      	ldr	r2, [pc, #860]	; (8009424 <UART_SetConfig+0x6ec>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d005      	beq.n	80090d6 <UART_SetConfig+0x39e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4ad6      	ldr	r2, [pc, #856]	; (8009428 <UART_SetConfig+0x6f0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	f040 80d1 	bne.w	8009278 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80090d6:	f7fe fb95 	bl	8007804 <HAL_RCC_GetPCLK2Freq>
 80090da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	469a      	mov	sl, r3
 80090e0:	f04f 0b00 	mov.w	fp, #0
 80090e4:	46d0      	mov	r8, sl
 80090e6:	46d9      	mov	r9, fp
 80090e8:	eb18 0308 	adds.w	r3, r8, r8
 80090ec:	eb49 0409 	adc.w	r4, r9, r9
 80090f0:	4698      	mov	r8, r3
 80090f2:	46a1      	mov	r9, r4
 80090f4:	eb18 080a 	adds.w	r8, r8, sl
 80090f8:	eb49 090b 	adc.w	r9, r9, fp
 80090fc:	f04f 0100 	mov.w	r1, #0
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800910c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009110:	4688      	mov	r8, r1
 8009112:	4691      	mov	r9, r2
 8009114:	eb1a 0508 	adds.w	r5, sl, r8
 8009118:	eb4b 0609 	adc.w	r6, fp, r9
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4619      	mov	r1, r3
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	f04f 0300 	mov.w	r3, #0
 800912a:	f04f 0400 	mov.w	r4, #0
 800912e:	0094      	lsls	r4, r2, #2
 8009130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009134:	008b      	lsls	r3, r1, #2
 8009136:	461a      	mov	r2, r3
 8009138:	4623      	mov	r3, r4
 800913a:	4628      	mov	r0, r5
 800913c:	4631      	mov	r1, r6
 800913e:	f7f7 f855 	bl	80001ec <__aeabi_uldivmod>
 8009142:	4603      	mov	r3, r0
 8009144:	460c      	mov	r4, r1
 8009146:	461a      	mov	r2, r3
 8009148:	4bb8      	ldr	r3, [pc, #736]	; (800942c <UART_SetConfig+0x6f4>)
 800914a:	fba3 2302 	umull	r2, r3, r3, r2
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	469b      	mov	fp, r3
 8009158:	f04f 0c00 	mov.w	ip, #0
 800915c:	46d9      	mov	r9, fp
 800915e:	46e2      	mov	sl, ip
 8009160:	eb19 0309 	adds.w	r3, r9, r9
 8009164:	eb4a 040a 	adc.w	r4, sl, sl
 8009168:	4699      	mov	r9, r3
 800916a:	46a2      	mov	sl, r4
 800916c:	eb19 090b 	adds.w	r9, r9, fp
 8009170:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009174:	f04f 0100 	mov.w	r1, #0
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009188:	4689      	mov	r9, r1
 800918a:	4692      	mov	sl, r2
 800918c:	eb1b 0509 	adds.w	r5, fp, r9
 8009190:	eb4c 060a 	adc.w	r6, ip, sl
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4619      	mov	r1, r3
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	f04f 0400 	mov.w	r4, #0
 80091a6:	0094      	lsls	r4, r2, #2
 80091a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091ac:	008b      	lsls	r3, r1, #2
 80091ae:	461a      	mov	r2, r3
 80091b0:	4623      	mov	r3, r4
 80091b2:	4628      	mov	r0, r5
 80091b4:	4631      	mov	r1, r6
 80091b6:	f7f7 f819 	bl	80001ec <__aeabi_uldivmod>
 80091ba:	4603      	mov	r3, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	461a      	mov	r2, r3
 80091c0:	4b9a      	ldr	r3, [pc, #616]	; (800942c <UART_SetConfig+0x6f4>)
 80091c2:	fba3 1302 	umull	r1, r3, r3, r2
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	2164      	movs	r1, #100	; 0x64
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	3332      	adds	r3, #50	; 0x32
 80091d4:	4a95      	ldr	r2, [pc, #596]	; (800942c <UART_SetConfig+0x6f4>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e0:	4498      	add	r8, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	469b      	mov	fp, r3
 80091e6:	f04f 0c00 	mov.w	ip, #0
 80091ea:	46d9      	mov	r9, fp
 80091ec:	46e2      	mov	sl, ip
 80091ee:	eb19 0309 	adds.w	r3, r9, r9
 80091f2:	eb4a 040a 	adc.w	r4, sl, sl
 80091f6:	4699      	mov	r9, r3
 80091f8:	46a2      	mov	sl, r4
 80091fa:	eb19 090b 	adds.w	r9, r9, fp
 80091fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009202:	f04f 0100 	mov.w	r1, #0
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800920e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009216:	4689      	mov	r9, r1
 8009218:	4692      	mov	sl, r2
 800921a:	eb1b 0509 	adds.w	r5, fp, r9
 800921e:	eb4c 060a 	adc.w	r6, ip, sl
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	4619      	mov	r1, r3
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	f04f 0300 	mov.w	r3, #0
 8009230:	f04f 0400 	mov.w	r4, #0
 8009234:	0094      	lsls	r4, r2, #2
 8009236:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800923a:	008b      	lsls	r3, r1, #2
 800923c:	461a      	mov	r2, r3
 800923e:	4623      	mov	r3, r4
 8009240:	4628      	mov	r0, r5
 8009242:	4631      	mov	r1, r6
 8009244:	f7f6 ffd2 	bl	80001ec <__aeabi_uldivmod>
 8009248:	4603      	mov	r3, r0
 800924a:	460c      	mov	r4, r1
 800924c:	461a      	mov	r2, r3
 800924e:	4b77      	ldr	r3, [pc, #476]	; (800942c <UART_SetConfig+0x6f4>)
 8009250:	fba3 1302 	umull	r1, r3, r3, r2
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	2164      	movs	r1, #100	; 0x64
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	3332      	adds	r3, #50	; 0x32
 8009262:	4a72      	ldr	r2, [pc, #456]	; (800942c <UART_SetConfig+0x6f4>)
 8009264:	fba2 2303 	umull	r2, r3, r2, r3
 8009268:	095b      	lsrs	r3, r3, #5
 800926a:	f003 020f 	and.w	r2, r3, #15
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4442      	add	r2, r8
 8009274:	609a      	str	r2, [r3, #8]
 8009276:	e0d0      	b.n	800941a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009278:	f7fe fab0 	bl	80077dc <HAL_RCC_GetPCLK1Freq>
 800927c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	469a      	mov	sl, r3
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	46d0      	mov	r8, sl
 8009288:	46d9      	mov	r9, fp
 800928a:	eb18 0308 	adds.w	r3, r8, r8
 800928e:	eb49 0409 	adc.w	r4, r9, r9
 8009292:	4698      	mov	r8, r3
 8009294:	46a1      	mov	r9, r4
 8009296:	eb18 080a 	adds.w	r8, r8, sl
 800929a:	eb49 090b 	adc.w	r9, r9, fp
 800929e:	f04f 0100 	mov.w	r1, #0
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092b2:	4688      	mov	r8, r1
 80092b4:	4691      	mov	r9, r2
 80092b6:	eb1a 0508 	adds.w	r5, sl, r8
 80092ba:	eb4b 0609 	adc.w	r6, fp, r9
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	4619      	mov	r1, r3
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	f04f 0400 	mov.w	r4, #0
 80092d0:	0094      	lsls	r4, r2, #2
 80092d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092d6:	008b      	lsls	r3, r1, #2
 80092d8:	461a      	mov	r2, r3
 80092da:	4623      	mov	r3, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	4631      	mov	r1, r6
 80092e0:	f7f6 ff84 	bl	80001ec <__aeabi_uldivmod>
 80092e4:	4603      	mov	r3, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	461a      	mov	r2, r3
 80092ea:	4b50      	ldr	r3, [pc, #320]	; (800942c <UART_SetConfig+0x6f4>)
 80092ec:	fba3 2302 	umull	r2, r3, r3, r2
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	469b      	mov	fp, r3
 80092fa:	f04f 0c00 	mov.w	ip, #0
 80092fe:	46d9      	mov	r9, fp
 8009300:	46e2      	mov	sl, ip
 8009302:	eb19 0309 	adds.w	r3, r9, r9
 8009306:	eb4a 040a 	adc.w	r4, sl, sl
 800930a:	4699      	mov	r9, r3
 800930c:	46a2      	mov	sl, r4
 800930e:	eb19 090b 	adds.w	r9, r9, fp
 8009312:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009316:	f04f 0100 	mov.w	r1, #0
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800932a:	4689      	mov	r9, r1
 800932c:	4692      	mov	sl, r2
 800932e:	eb1b 0509 	adds.w	r5, fp, r9
 8009332:	eb4c 060a 	adc.w	r6, ip, sl
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4619      	mov	r1, r3
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	f04f 0400 	mov.w	r4, #0
 8009348:	0094      	lsls	r4, r2, #2
 800934a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800934e:	008b      	lsls	r3, r1, #2
 8009350:	461a      	mov	r2, r3
 8009352:	4623      	mov	r3, r4
 8009354:	4628      	mov	r0, r5
 8009356:	4631      	mov	r1, r6
 8009358:	f7f6 ff48 	bl	80001ec <__aeabi_uldivmod>
 800935c:	4603      	mov	r3, r0
 800935e:	460c      	mov	r4, r1
 8009360:	461a      	mov	r2, r3
 8009362:	4b32      	ldr	r3, [pc, #200]	; (800942c <UART_SetConfig+0x6f4>)
 8009364:	fba3 1302 	umull	r1, r3, r3, r2
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	2164      	movs	r1, #100	; 0x64
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	3332      	adds	r3, #50	; 0x32
 8009376:	4a2d      	ldr	r2, [pc, #180]	; (800942c <UART_SetConfig+0x6f4>)
 8009378:	fba2 2303 	umull	r2, r3, r2, r3
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009382:	4498      	add	r8, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	469b      	mov	fp, r3
 8009388:	f04f 0c00 	mov.w	ip, #0
 800938c:	46d9      	mov	r9, fp
 800938e:	46e2      	mov	sl, ip
 8009390:	eb19 0309 	adds.w	r3, r9, r9
 8009394:	eb4a 040a 	adc.w	r4, sl, sl
 8009398:	4699      	mov	r9, r3
 800939a:	46a2      	mov	sl, r4
 800939c:	eb19 090b 	adds.w	r9, r9, fp
 80093a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093a4:	f04f 0100 	mov.w	r1, #0
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093b8:	4689      	mov	r9, r1
 80093ba:	4692      	mov	sl, r2
 80093bc:	eb1b 0509 	adds.w	r5, fp, r9
 80093c0:	eb4c 060a 	adc.w	r6, ip, sl
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4619      	mov	r1, r3
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	f04f 0400 	mov.w	r4, #0
 80093d6:	0094      	lsls	r4, r2, #2
 80093d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093dc:	008b      	lsls	r3, r1, #2
 80093de:	461a      	mov	r2, r3
 80093e0:	4623      	mov	r3, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	4631      	mov	r1, r6
 80093e6:	f7f6 ff01 	bl	80001ec <__aeabi_uldivmod>
 80093ea:	4603      	mov	r3, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	461a      	mov	r2, r3
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <UART_SetConfig+0x6f4>)
 80093f2:	fba3 1302 	umull	r1, r3, r3, r2
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	2164      	movs	r1, #100	; 0x64
 80093fa:	fb01 f303 	mul.w	r3, r1, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	3332      	adds	r3, #50	; 0x32
 8009404:	4a09      	ldr	r2, [pc, #36]	; (800942c <UART_SetConfig+0x6f4>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	095b      	lsrs	r3, r3, #5
 800940c:	f003 020f 	and.w	r2, r3, #15
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4442      	add	r2, r8
 8009416:	609a      	str	r2, [r3, #8]
}
 8009418:	e7ff      	b.n	800941a <UART_SetConfig+0x6e2>
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009424:	40011000 	.word	0x40011000
 8009428:	40011400 	.word	0x40011400
 800942c:	51eb851f 	.word	0x51eb851f

08009430 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d029      	beq.n	800949e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800945a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009464:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800946a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009470:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009476:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800947c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009482:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009488:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800948e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	e034      	b.n	8009508 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094aa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80094b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80094ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094d2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80094dc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80094e2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80094e8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80094ee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80094f4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009516:	b480      	push	{r7}
 8009518:	b087      	sub	sp, #28
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d02e      	beq.n	800958e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800953c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	3b01      	subs	r3, #1
 800954a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800954c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	3b01      	subs	r3, #1
 8009554:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009556:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	3b01      	subs	r3, #1
 800955e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009560:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	3b01      	subs	r3, #1
 8009568:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800956a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	3b01      	subs	r3, #1
 8009572:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009574:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	3b01      	subs	r3, #1
 800957c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800957e:	4313      	orrs	r3, r2
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	609a      	str	r2, [r3, #8]
 800958c:	e03b      	b.n	8009606 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800959a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800959e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80095b0:	4313      	orrs	r3, r2
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095c4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80095d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	3b01      	subs	r3, #1
 80095dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80095de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80095e8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80095f2:	4313      	orrs	r3, r2
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009630:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	3b01      	subs	r3, #1
 8009638:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800963a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009642:	4313      	orrs	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800964c:	f7fa fecc 	bl	80043e8 <HAL_GetTick>
 8009650:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009652:	e010      	b.n	8009676 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d00c      	beq.n	8009676 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <FMC_SDRAM_SendCommand+0x5e>
 8009662:	f7fa fec1 	bl	80043e8 <HAL_GetTick>
 8009666:	4602      	mov	r2, r0
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d201      	bcs.n	8009676 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e006      	b.n	8009684 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b20      	cmp	r3, #32
 8009680:	d0e8      	beq.n	8009654 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695a      	ldr	r2, [r3, #20]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	431a      	orrs	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <__libc_init_array>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4e0d      	ldr	r6, [pc, #52]	; (80096ec <__libc_init_array+0x38>)
 80096b8:	4c0d      	ldr	r4, [pc, #52]	; (80096f0 <__libc_init_array+0x3c>)
 80096ba:	1ba4      	subs	r4, r4, r6
 80096bc:	10a4      	asrs	r4, r4, #2
 80096be:	2500      	movs	r5, #0
 80096c0:	42a5      	cmp	r5, r4
 80096c2:	d109      	bne.n	80096d8 <__libc_init_array+0x24>
 80096c4:	4e0b      	ldr	r6, [pc, #44]	; (80096f4 <__libc_init_array+0x40>)
 80096c6:	4c0c      	ldr	r4, [pc, #48]	; (80096f8 <__libc_init_array+0x44>)
 80096c8:	f000 f820 	bl	800970c <_init>
 80096cc:	1ba4      	subs	r4, r4, r6
 80096ce:	10a4      	asrs	r4, r4, #2
 80096d0:	2500      	movs	r5, #0
 80096d2:	42a5      	cmp	r5, r4
 80096d4:	d105      	bne.n	80096e2 <__libc_init_array+0x2e>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096dc:	4798      	blx	r3
 80096de:	3501      	adds	r5, #1
 80096e0:	e7ee      	b.n	80096c0 <__libc_init_array+0xc>
 80096e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096e6:	4798      	blx	r3
 80096e8:	3501      	adds	r5, #1
 80096ea:	e7f2      	b.n	80096d2 <__libc_init_array+0x1e>
 80096ec:	0800c324 	.word	0x0800c324
 80096f0:	0800c324 	.word	0x0800c324
 80096f4:	0800c324 	.word	0x0800c324
 80096f8:	0800c328 	.word	0x0800c328

080096fc <memset>:
 80096fc:	4402      	add	r2, r0
 80096fe:	4603      	mov	r3, r0
 8009700:	4293      	cmp	r3, r2
 8009702:	d100      	bne.n	8009706 <memset+0xa>
 8009704:	4770      	bx	lr
 8009706:	f803 1b01 	strb.w	r1, [r3], #1
 800970a:	e7f9      	b.n	8009700 <memset+0x4>

0800970c <_init>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr

08009718 <_fini>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr
