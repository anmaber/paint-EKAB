
EKAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e28  08003e28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08003e3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003e3c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d24  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f8  00000000  00000000  00036d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  00039f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001418  00000000  00000000  0003b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025dff  00000000  00000000  0003c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001382d  00000000  00000000  0006272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df7a0  00000000  00000000  00075f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001556fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b14  00000000  00000000  00155778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003df0 	.word	0x08003df0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003df0 	.word	0x08003df0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <MX_DMA2D_Init+0x38>)
 80004f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MX_DMA2D_Init+0x34>)
 80004f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004fc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_DMA2D_Init+0x34>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_DMA2D_Init+0x34>)
 800050c:	f000 ffc2 	bl	8001494 <HAL_DMA2D_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000516:	f000 fcad 	bl	8000e74 <Error_Handler>
  }

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000002c 	.word	0x2000002c
 8000524:	4002b000 	.word	0x4002b000

08000528 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_DMA2D_MspInit+0x3c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10d      	bne.n	8000556 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 8000544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <HAL_DMA2D_MspInit+0x40>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	4002b000 	.word	0x4002b000
 8000568:	40023800 	.word	0x40023800

0800056c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_FMC_Init+0x98>)
 8000586:	4a20      	ldr	r2, [pc, #128]	; (8000608 <MX_FMC_Init+0x9c>)
 8000588:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_FMC_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_FMC_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_FMC_Init+0x98>)
 8000598:	2204      	movs	r2, #4
 800059a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_FMC_Init+0x98>)
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_FMC_Init+0x98>)
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_FMC_Init+0x98>)
 80005aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_FMC_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_FMC_Init+0x98>)
 80005b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_FMC_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_FMC_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80005da:	2303      	movs	r3, #3
 80005dc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_FMC_Init+0x98>)
 80005ec:	f002 fc42 	bl	8002e74 <HAL_SDRAM_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 80005f6:	f000 fc3d 	bl	8000e74 <Error_Handler>
  }

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000006c 	.word	0x2000006c
 8000608:	a0000140 	.word	0xa0000140

0800060c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_FMC_MspInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d16f      	bne.n	8000708 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <HAL_FMC_MspInit+0x104>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6393      	str	r3, [r2, #56]	; 0x38
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_FMC_MspInit+0x108>)
 8000640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800064a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800064e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800065c:	230c      	movs	r3, #12
 800065e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	482c      	ldr	r0, [pc, #176]	; (8000718 <HAL_FMC_MspInit+0x10c>)
 8000666:	f000 ff5f 	bl	8001528 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067a:	230c      	movs	r3, #12
 800067c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <HAL_FMC_MspInit+0x110>)
 8000684:	f000 ff50 	bl	8001528 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8000688:	f248 1333 	movw	r3, #33075	; 0x8133
 800068c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069a:	230c      	movs	r3, #12
 800069c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <HAL_FMC_MspInit+0x114>)
 80006a4:	f000 ff40 	bl	8001528 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80006a8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80006ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ba:	230c      	movs	r3, #12
 80006bc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <HAL_FMC_MspInit+0x118>)
 80006c4:	f000 ff30 	bl	8001528 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80006c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80006cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006da:	230c      	movs	r3, #12
 80006dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <HAL_FMC_MspInit+0x11c>)
 80006e4:	f000 ff20 	bl	8001528 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f8:	230c      	movs	r3, #12
 80006fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <HAL_FMC_MspInit+0x120>)
 8000702:	f000 ff11 	bl	8001528 <HAL_GPIO_Init>
 8000706:	e000      	b.n	800070a <HAL_FMC_MspInit+0xfe>
    return;
 8000708:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40023800 	.word	0x40023800
 8000718:	40021400 	.word	0x40021400
 800071c:	40020800 	.word	0x40020800
 8000720:	40021800 	.word	0x40021800
 8000724:	40021000 	.word	0x40021000
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40020400 	.word	0x40020400

08000730 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000738:	f7ff ff68 	bl	800060c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <MX_GPIO_Init+0xf4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0xf4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a32      	ldr	r2, [pc, #200]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <MX_GPIO_Init+0xf4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <MX_GPIO_Init+0xf4>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_GPIO_Init+0xf4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

}
 800082a:	bf00      	nop
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_I2C3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_I2C3_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_I2C3_Init+0x74>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_I2C3_Init+0x74>)
 800087a:	f000 ffff 	bl	800187c <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 faf6 	bl	8000e74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <MX_I2C3_Init+0x74>)
 800088c:	f001 f92e 	bl	8001aec <HAL_I2CEx_ConfigAnalogFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000896:	f000 faed 	bl	8000e74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2C3_Init+0x74>)
 800089e:	f001 f961 	bl	8001b64 <HAL_I2CEx_ConfigDigitalFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fae4 	bl	8000e74 <Error_Handler>
  }

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000a0 	.word	0x200000a0
 80008b4:	40005c00 	.word	0x40005c00
 80008b8:	000186a0 	.word	0x000186a0

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_I2C_MspInit+0xc4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d14b      	bne.n	8000976 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091c:	2312      	movs	r3, #18
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000928:	2304      	movs	r3, #4
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <HAL_I2C_MspInit+0xcc>)
 8000934:	f000 fdf8 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800094a:	2304      	movs	r3, #4
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <HAL_I2C_MspInit+0xd0>)
 8000956:	f000 fde7 	bl	8001528 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 8000964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_MspInit+0xc8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005c00 	.word	0x40005c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09a      	sub	sp, #104	; 0x68
 8000994:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099a:	2234      	movs	r2, #52	; 0x34
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fa1e 	bl	8003de0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fa18 	bl	8003de0 <memset>

  hltdc.Instance = LTDC;
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009b2:	4a4f      	ldr	r2, [pc, #316]	; (8000af0 <MX_LTDC_Init+0x160>)
 80009b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009b6:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009c2:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009c8:	4b48      	ldr	r3, [pc, #288]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80009ce:	4b47      	ldr	r3, [pc, #284]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80009d4:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009dc:	220e      	movs	r2, #14
 80009de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 293;
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009e8:	f240 1225 	movw	r2, #293	; 0x125
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 332;
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009f0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 299;
 80009f6:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <MX_LTDC_Init+0x15c>)
 80009f8:	f240 122b 	movw	r2, #299	; 0x12b
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 334;
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a00:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a0e:	4b37      	ldr	r3, [pc, #220]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a20:	f001 f8e0 	bl	8001be4 <HAL_LTDC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a2a:	f000 fa23 	bl	8000e74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a50:	2305      	movs	r3, #5
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481c      	ldr	r0, [pc, #112]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000a7c:	f001 f982 	bl	8001d84 <HAL_LTDC_ConfigLayer>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a86:	f000 f9f5 	bl	8000e74 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aaa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aac:	2305      	movs	r3, #5
 8000aae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_LTDC_Init+0x15c>)
 8000ad6:	f001 f955 	bl	8001d84 <HAL_LTDC_ConfigLayer>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ae0:	f000 f9c8 	bl	8000e74 <Error_Handler>
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3768      	adds	r7, #104	; 0x68
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000f4 	.word	0x200000f4
 8000af0:	40016800 	.word	0x40016800

08000af4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	; 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a77      	ldr	r2, [pc, #476]	; (8000cf0 <HAL_LTDC_MspInit+0x1fc>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f040 80e8 	bne.w	8000ce8 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	4b75      	ldr	r3, [pc, #468]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a74      	ldr	r2, [pc, #464]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a6d      	ldr	r2, [pc, #436]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a66      	ldr	r2, [pc, #408]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a5f      	ldr	r2, [pc, #380]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b5d      	ldr	r3, [pc, #372]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a58      	ldr	r2, [pc, #352]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b48      	ldr	r3, [pc, #288]	; (8000cf4 <HAL_LTDC_MspInit+0x200>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	230e      	movs	r3, #14
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483f      	ldr	r0, [pc, #252]	; (8000cf8 <HAL_LTDC_MspInit+0x204>)
 8000bfa:	f000 fc95 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000bfe:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c10:	230e      	movs	r3, #14
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4838      	ldr	r0, [pc, #224]	; (8000cfc <HAL_LTDC_MspInit+0x208>)
 8000c1c:	f000 fc84 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c20:	2303      	movs	r3, #3
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c30:	2309      	movs	r3, #9
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <HAL_LTDC_MspInit+0x20c>)
 8000c3c:	f000 fc74 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000c40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c52:	230e      	movs	r3, #14
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4828      	ldr	r0, [pc, #160]	; (8000d00 <HAL_LTDC_MspInit+0x20c>)
 8000c5e:	f000 fc63 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000c62:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4821      	ldr	r0, [pc, #132]	; (8000d04 <HAL_LTDC_MspInit+0x210>)
 8000c80:	f000 fc52 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000c84:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c96:	230e      	movs	r3, #14
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <HAL_LTDC_MspInit+0x214>)
 8000ca2:	f000 fc41 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ca6:	2348      	movs	r3, #72	; 0x48
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb6:	230e      	movs	r3, #14
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HAL_LTDC_MspInit+0x218>)
 8000cc2:	f000 fc31 	bl	8001528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <HAL_LTDC_MspInit+0x210>)
 8000ce4:	f000 fc20 	bl	8001528 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40016800 	.word	0x40016800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021400 	.word	0x40021400
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40021800 	.word	0x40021800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fa9a 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f810 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fd12 	bl	8000744 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000d20:	f7ff fbe4 	bl	80004ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d24:	f7ff fc22 	bl	800056c <MX_FMC_Init>
  MX_I2C3_Init();
 8000d28:	f7ff fd88 	bl	800083c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000d2c:	f7ff fe30 	bl	8000990 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000d30:	f000 f8a8 	bl	8000e84 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000d34:	f000 f9ee 	bl	8001114 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x28>
	...

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a0      	sub	sp, #128	; 0x80
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 f848 	bl	8003de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2230      	movs	r2, #48	; 0x30
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 f839 	bl	8003de0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <SystemClock_Config+0x10c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a34      	ldr	r2, [pc, #208]	; (8000e48 <SystemClock_Config+0x10c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <SystemClock_Config+0x10c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <SystemClock_Config+0x110>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <SystemClock_Config+0x110>)
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <SystemClock_Config+0x110>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dbe:	23b4      	movs	r3, #180	; 0xb4
 8000dc0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f9fe 	bl	80021d0 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dda:	f000 f84b 	bl	8000e74 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dde:	f001 f9a7 	bl	8002130 <HAL_PWREx_EnableOverDrive>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000de8:	f000 f844 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e08:	2105      	movs	r1, #5
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fc50 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e16:	f000 f82d 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000e22:	2304      	movs	r3, #4
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fe61 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000e3c:	f000 f81a 	bl	8000e74 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3780      	adds	r7, #128	; 0x80
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e62:	f000 fa15 	bl	8001290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40001000 	.word	0x40001000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <MX_SPI5_Init+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_SPI5_Init+0x64>)
 8000ed6:	f002 f801 	bl	8002edc <HAL_SPI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ee0:	f7ff ffc8 	bl	8000e74 <Error_Handler>
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000019c 	.word	0x2000019c
 8000eec:	40015000 	.word	0x40015000

08000ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12c      	bne.n	8000f6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_SPI_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_SPI_MspInit+0x8c>)
 8000f68:	f000 fade 	bl	8001528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40015000 	.word	0x40015000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40021400 	.word	0x40021400

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	2036      	movs	r0, #54	; 0x36
 8000fe6:	f000 fa2b 	bl	8001440 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000fea:	2036      	movs	r0, #54	; 0x36
 8000fec:	f000 fa44 	bl	8001478 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_InitTick+0xa4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <HAL_InitTick+0xa4>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_InitTick+0xa4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 0310 	and.w	r3, r3, #16
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100c:	f107 0210 	add.w	r2, r7, #16
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fd3c 	bl	8002a94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800101c:	f001 fd12 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8001020:	4603      	mov	r3, r0
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_InitTick+0xa8>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3b01      	subs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_InitTick+0xac>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_InitTick+0xb0>)
 8001038:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_InitTick+0xac>)
 800103c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001040:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_InitTick+0xac>)
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_InitTick+0xac>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_InitTick+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <HAL_InitTick+0xac>)
 8001056:	f001 ffa5 	bl	8002fa4 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d104      	bne.n	800106a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <HAL_InitTick+0xac>)
 8001062:	f001 ffd4 	bl	800300e <HAL_TIM_Base_Start_IT>
 8001066:	4603      	mov	r3, r0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3730      	adds	r7, #48	; 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	431bde83 	.word	0x431bde83
 800107c:	200001f4 	.word	0x200001f4
 8001080:	40001000 	.word	0x40001000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM6_DAC_IRQHandler+0x10>)
 80010da:	f001 ffbc 	bl	8003056 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001f4 	.word	0x200001f4

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <SystemInit+0x28>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <SystemInit+0x28>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SystemInit+0x28>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART1_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART1_UART_Init+0x4c>)
 800114c:	f002 f968 	bl	8003420 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f7ff fe8d 	bl	8000e74 <Error_Handler>
  }

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000234 	.word	0x20000234
 8001164:	40011000 	.word	0x40011000

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x84>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12c      	bne.n	80011e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0x88>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x88>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0x88>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_UART_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d4:	2307      	movs	r3, #7
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_UART_MspInit+0x8c>)
 80011e0:	f000 f9a2 	bl	8001528 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40011000 	.word	0x40011000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011fe:	e003      	b.n	8001208 <LoopCopyDataInit>

08001200 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001202:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001204:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001206:	3104      	adds	r1, #4

08001208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800120c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001210:	d3f6      	bcc.n	8001200 <CopyDataInit>
  ldr  r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001214:	e002      	b.n	800121c <LoopFillZerobss>

08001216 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001216:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001218:	f842 3b04 	str.w	r3, [r2], #4

0800121c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800121e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001220:	d3f9      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001222:	f7ff ff61 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f002 fdb7 	bl	8003d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fd71 	bl	8000d10 <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001230:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001234:	08003e30 	.word	0x08003e30
  ldr  r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800123c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001240:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001244:	20000278 	.word	0x20000278

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f8d8 	bl	800142a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fea8 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fe7e 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000274 	.word	0x20000274

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000274 	.word	0x20000274

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff4c 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001452:	f7ff ff61 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffb1 	bl	80013c4 <NVIC_EncodePriority>
 8001462:	4602      	mov	r2, r0
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff80 	bl	8001370 <__NVIC_SetPriority>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff54 	bl	8001334 <__NVIC_EnableIRQ>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e03b      	b.n	800151e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff f834 	bl	8000528 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	f023 0107 	bic.w	r1, r3, #7
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68d1      	ldr	r1, [r2, #12]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	430b      	orrs	r3, r1
 800150c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e177      	b.n	8001834 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8166 	bne.w	800182e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d00b      	beq.n	8001582 <HAL_GPIO_Init+0x5a>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001576:	2b11      	cmp	r3, #17
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b12      	cmp	r3, #18
 8001580:	d130      	bne.n	80015e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 0201 	and.w	r2, r3, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0xfc>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80c0 	beq.w	800182e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_GPIO_Init+0x320>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a64      	ldr	r2, [pc, #400]	; (8001848 <HAL_GPIO_Init+0x320>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_GPIO_Init+0x320>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a60      	ldr	r2, [pc, #384]	; (800184c <HAL_GPIO_Init+0x324>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x328>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d037      	beq.n	8001766 <HAL_GPIO_Init+0x23e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_GPIO_Init+0x32c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d031      	beq.n	8001762 <HAL_GPIO_Init+0x23a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a55      	ldr	r2, [pc, #340]	; (8001858 <HAL_GPIO_Init+0x330>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x236>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a54      	ldr	r2, [pc, #336]	; (800185c <HAL_GPIO_Init+0x334>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x232>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a53      	ldr	r2, [pc, #332]	; (8001860 <HAL_GPIO_Init+0x338>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x22e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_GPIO_Init+0x33c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x22a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a51      	ldr	r2, [pc, #324]	; (8001868 <HAL_GPIO_Init+0x340>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x226>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_GPIO_Init+0x344>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x222>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <HAL_GPIO_Init+0x348>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x21e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_GPIO_Init+0x34c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x21a>
 800173e:	2309      	movs	r3, #9
 8001740:	e012      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001742:	230a      	movs	r3, #10
 8001744:	e010      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001746:	2308      	movs	r3, #8
 8001748:	e00e      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800174a:	2307      	movs	r3, #7
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800174e:	2306      	movs	r3, #6
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x240>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x240>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4934      	ldr	r1, [pc, #208]	; (800184c <HAL_GPIO_Init+0x324>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <HAL_GPIO_Init+0x350>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017aa:	4a33      	ldr	r2, [pc, #204]	; (8001878 <HAL_GPIO_Init+0x350>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_GPIO_Init+0x350>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_GPIO_Init+0x350>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_GPIO_Init+0x350>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_GPIO_Init+0x350>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_GPIO_Init+0x350>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_GPIO_Init+0x350>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae84 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40021c00 	.word	0x40021c00
 8001870:	40022000 	.word	0x40022000
 8001874:	40022400 	.word	0x40022400
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e11f      	b.n	8001ace <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff f80a 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e0:	f001 f8b0 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	; (8001ad8 <HAL_I2C_Init+0x25c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d807      	bhi.n	8001900 <HAL_I2C_Init+0x84>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_I2C_Init+0x260>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e006      	b.n	800190e <HAL_I2C_Init+0x92>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a77      	ldr	r2, [pc, #476]	; (8001ae0 <HAL_I2C_Init+0x264>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0db      	b.n	8001ace <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_I2C_Init+0x268>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <HAL_I2C_Init+0x25c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d802      	bhi.n	8001950 <HAL_I2C_Init+0xd4>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	e009      	b.n	8001964 <HAL_I2C_Init+0xe8>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_I2C_Init+0x26c>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	3301      	adds	r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4956      	ldr	r1, [pc, #344]	; (8001ad8 <HAL_I2C_Init+0x25c>)
 8001980:	428b      	cmp	r3, r1
 8001982:	d80d      	bhi.n	80019a0 <HAL_I2C_Init+0x124>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e59      	subs	r1, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	bf38      	it	cc
 800199c:	2304      	movcc	r3, #4
 800199e:	e04f      	b.n	8001a40 <HAL_I2C_Init+0x1c4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_I2C_Init+0x150>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e012      	b.n	80019f2 <HAL_I2C_Init+0x176>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e58      	subs	r0, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	0099      	lsls	r1, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x17e>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e022      	b.n	8001a40 <HAL_I2C_Init+0x1c4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10e      	bne.n	8001a20 <HAL_I2C_Init+0x1a4>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e58      	subs	r0, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	440b      	add	r3, r1
 8001a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Init+0x1c4>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	0099      	lsls	r1, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6809      	ldr	r1, [r1, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6911      	ldr	r1, [r2, #16]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68d2      	ldr	r2, [r2, #12]
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	000186a0 	.word	0x000186a0
 8001adc:	001e847f 	.word	0x001e847f
 8001ae0:	003d08ff 	.word	0x003d08ff
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d129      	bne.n	8001b56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2224      	movs	r2, #36	; 0x24
 8001b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0210 	bic.w	r2, r2, #16
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d12a      	bne.n	8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2224      	movs	r2, #36	; 0x24
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	f023 030f 	bic.w	r3, r3, #15
 8001ba4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	89fa      	ldrh	r2, [r7, #14]
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0bf      	b.n	8001d76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe ff72 	bl	8000af4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001c26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6999      	ldr	r1, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001c3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_LTDC_Init+0x19c>)
 8001c58:	400b      	ands	r3, r1
 8001c5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6899      	ldr	r1, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_LTDC_Init+0x19c>)
 8001c86:	400b      	ands	r3, r1
 8001c88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_LTDC_Init+0x19c>)
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6959      	ldr	r1, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_LTDC_Init+0x19c>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6959      	ldr	r1, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0206 	orr.w	r2, r2, #6
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	f000f800 	.word	0xf000f800

08001d84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_LTDC_ConfigLayer+0x1a>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e02c      	b.n	8001df8 <HAL_LTDC_ConfigLayer+0x74>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2134      	movs	r1, #52	; 0x34
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4614      	mov	r4, r2
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f811 	bl	8001e00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}

08001e00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	4413      	add	r3, r2
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3384      	adds	r3, #132	; 0x84
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	4611      	mov	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	01d2      	lsls	r2, r2, #7
 8001e3c:	440a      	add	r2, r1
 8001e3e:	3284      	adds	r2, #132	; 0x84
 8001e40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001e44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	4413      	add	r3, r2
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	01db      	lsls	r3, r3, #7
 8001e64:	440b      	add	r3, r1
 8001e66:	3384      	adds	r3, #132	; 0x84
 8001e68:	4619      	mov	r1, r3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e7e:	4413      	add	r3, r2
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	01db      	lsls	r3, r3, #7
 8001e8e:	4413      	add	r3, r2
 8001e90:	3384      	adds	r3, #132	; 0x84
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	01d2      	lsls	r2, r2, #7
 8001e9e:	440a      	add	r2, r1
 8001ea0:	3284      	adds	r2, #132	; 0x84
 8001ea2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001ea6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb6:	4413      	add	r3, r2
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3384      	adds	r3, #132	; 0x84
 8001ec8:	4619      	mov	r1, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	01db      	lsls	r3, r3, #7
 8001eda:	4413      	add	r3, r2
 8001edc:	3384      	adds	r3, #132	; 0x84
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	01d2      	lsls	r2, r2, #7
 8001eea:	440a      	add	r2, r1
 8001eec:	3284      	adds	r2, #132	; 0x84
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	01db      	lsls	r3, r3, #7
 8001efe:	4413      	add	r3, r2
 8001f00:	3384      	adds	r3, #132	; 0x84
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4413      	add	r3, r2
 8001f32:	3384      	adds	r3, #132	; 0x84
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	01db      	lsls	r3, r3, #7
 8001f40:	4413      	add	r3, r2
 8001f42:	3384      	adds	r3, #132	; 0x84
 8001f44:	461a      	mov	r2, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f50:	461a      	mov	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	440b      	add	r3, r1
 8001f66:	3384      	adds	r3, #132	; 0x84
 8001f68:	4619      	mov	r1, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3384      	adds	r3, #132	; 0x84
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4611      	mov	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	01d2      	lsls	r2, r2, #7
 8001f8a:	440a      	add	r2, r1
 8001f8c:	3284      	adds	r2, #132	; 0x84
 8001f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	01db      	lsls	r3, r3, #7
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3384      	adds	r3, #132	; 0x84
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3384      	adds	r3, #132	; 0x84
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	01d2      	lsls	r2, r2, #7
 8001fc4:	440a      	add	r2, r1
 8001fc6:	3284      	adds	r2, #132	; 0x84
 8001fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fcc:	f023 0307 	bic.w	r3, r3, #7
 8001fd0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	6809      	ldr	r1, [r1, #0]
 8001fde:	4608      	mov	r0, r1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	01c9      	lsls	r1, r1, #7
 8001fe4:	4401      	add	r1, r0
 8001fe6:	3184      	adds	r1, #132	; 0x84
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	01db      	lsls	r3, r3, #7
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3384      	adds	r3, #132	; 0x84
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	01db      	lsls	r3, r3, #7
 8002006:	4413      	add	r3, r2
 8002008:	3384      	adds	r3, #132	; 0x84
 800200a:	461a      	mov	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	01db      	lsls	r3, r3, #7
 800201a:	4413      	add	r3, r2
 800201c:	3384      	adds	r3, #132	; 0x84
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800202e:	2304      	movs	r3, #4
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e01b      	b.n	800206c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800203c:	2303      	movs	r3, #3
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	e014      	b.n	800206c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00b      	beq.n	8002062 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d007      	beq.n	8002062 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002056:	2b03      	cmp	r3, #3
 8002058:	d003      	beq.n	8002062 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800205e:	2b07      	cmp	r3, #7
 8002060:	d102      	bne.n	8002068 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e001      	b.n	800206c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002068:	2301      	movs	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	01db      	lsls	r3, r3, #7
 8002076:	4413      	add	r3, r2
 8002078:	3384      	adds	r3, #132	; 0x84
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4611      	mov	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	01d2      	lsls	r2, r2, #7
 8002086:	440a      	add	r2, r1
 8002088:	3284      	adds	r2, #132	; 0x84
 800208a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800208e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1acb      	subs	r3, r1, r3
 80020a6:	69f9      	ldr	r1, [r7, #28]
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	3303      	adds	r3, #3
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	6809      	ldr	r1, [r1, #0]
 80020b2:	4608      	mov	r0, r1
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	01c9      	lsls	r1, r1, #7
 80020b8:	4401      	add	r1, r0
 80020ba:	3184      	adds	r1, #132	; 0x84
 80020bc:	4313      	orrs	r3, r2
 80020be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	01db      	lsls	r3, r3, #7
 80020ca:	4413      	add	r3, r2
 80020cc:	3384      	adds	r3, #132	; 0x84
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	4611      	mov	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	01d2      	lsls	r2, r2, #7
 80020da:	440a      	add	r2, r1
 80020dc:	3284      	adds	r2, #132	; 0x84
 80020de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	01db      	lsls	r3, r3, #7
 80020f2:	4413      	add	r3, r2
 80020f4:	3384      	adds	r3, #132	; 0x84
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	01db      	lsls	r3, r3, #7
 8002108:	4413      	add	r3, r2
 800210a:	3384      	adds	r3, #132	; 0x84
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4611      	mov	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	01d2      	lsls	r2, r2, #7
 8002118:	440a      	add	r2, r1
 800211a:	3284      	adds	r2, #132	; 0x84
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6013      	str	r3, [r2, #0]
}
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800215c:	f7ff f8ac 	bl	80012b8 <HAL_GetTick>
 8002160:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002162:	e009      	b.n	8002178 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002164:	f7ff f8a8 	bl	80012b8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002172:	d901      	bls.n	8002178 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e01f      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d1ee      	bne.n	8002164 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff f894 	bl	80012b8 <HAL_GetTick>
 8002190:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002192:	e009      	b.n	80021a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002194:	f7ff f890 	bl	80012b8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a2:	d901      	bls.n	80021a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e007      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021b4:	d1ee      	bne.n	8002194 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	420e0040 	.word	0x420e0040
 80021c8:	40007000 	.word	0x40007000
 80021cc:	420e0044 	.word	0x420e0044

080021d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e25b      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d075      	beq.n	80022da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ee:	4ba3      	ldr	r3, [pc, #652]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d00c      	beq.n	8002214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fa:	4ba0      	ldr	r3, [pc, #640]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d112      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4b9d      	ldr	r3, [pc, #628]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002212:	d10b      	bne.n	800222c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	4b99      	ldr	r3, [pc, #612]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d05b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x108>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e236      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x74>
 8002236:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a90      	ldr	r2, [pc, #576]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x98>
 800224e:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a8a      	ldr	r2, [pc, #552]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a87      	ldr	r2, [pc, #540]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xb0>
 8002268:	4b84      	ldr	r3, [pc, #528]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a83      	ldr	r2, [pc, #524]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a80      	ldr	r2, [pc, #512]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f816 	bl	80012b8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff f812 	bl	80012b8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1fb      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xc0>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f802 	bl	80012b8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe fffe 	bl	80012b8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1e7      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0xe8>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e6:	4b65      	ldr	r3, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f2:	4b62      	ldr	r3, [pc, #392]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b5c      	ldr	r3, [pc, #368]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1bb      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4952      	ldr	r1, [pc, #328]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCC_OscConfig+0x2b0>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe ffb7 	bl	80012b8 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe ffb3 	bl	80012b8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e19c      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b46      	ldr	r3, [pc, #280]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4940      	ldr	r1, [pc, #256]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_OscConfig+0x2b0>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe ff96 	bl	80012b8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002390:	f7fe ff92 	bl	80012b8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e17b      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d030      	beq.n	800241c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d016      	beq.n	80023f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_OscConfig+0x2b4>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7fe ff76 	bl	80012b8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe ff72 	bl	80012b8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e15b      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x200>
 80023ee:	e015      	b.n	800241c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_OscConfig+0x2b4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe ff5f 	bl	80012b8 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe ff5b 	bl	80012b8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e144      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a0 	beq.w	800256a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_OscConfig+0x2ac>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x2b8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d121      	bne.n	80024aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCC_OscConfig+0x2b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_RCC_OscConfig+0x2b8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7fe ff21 	bl	80012b8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e011      	b.n	800249e <HAL_RCC_OscConfig+0x2ce>
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	42470000 	.word	0x42470000
 8002484:	42470e80 	.word	0x42470e80
 8002488:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248c:	f7fe ff14 	bl	80012b8 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0fd      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x4d4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d106      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
 80024b2:	4b7d      	ldr	r3, [pc, #500]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a7c      	ldr	r2, [pc, #496]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	e01c      	b.n	80024fa <HAL_RCC_OscConfig+0x32a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d10c      	bne.n	80024e2 <HAL_RCC_OscConfig+0x312>
 80024c8:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a76      	ldr	r2, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	4b74      	ldr	r3, [pc, #464]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a73      	ldr	r2, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	e00b      	b.n	80024fa <HAL_RCC_OscConfig+0x32a>
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a70      	ldr	r2, [pc, #448]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d015      	beq.n	800252e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe fed9 	bl	80012b8 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fed5 	bl	80012b8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0bc      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ee      	beq.n	800250a <HAL_RCC_OscConfig+0x33a>
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fec3 	bl	80012b8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe febf 	bl	80012b8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0a6      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8092 	beq.w	8002698 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d05c      	beq.n	800263a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d141      	bne.n	800260c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_RCC_OscConfig+0x4dc>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fe93 	bl	80012b8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fe8f 	bl	80012b8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e078      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	019b      	lsls	r3, r3, #6
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	4933      	ldr	r1, [pc, #204]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025de:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fe68 	bl	80012b8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fe64 	bl	80012b8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04d      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x41c>
 800260a:	e045      	b.n	8002698 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x4dc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fe51 	bl	80012b8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fe4d 	bl	80012b8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e036      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x44a>
 8002638:	e02e      	b.n	8002698 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e029      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_RCC_OscConfig+0x4d8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	429a      	cmp	r2, r3
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d115      	bne.n	8002694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002674:	4293      	cmp	r3, r2
 8002676:	d10d      	bne.n	8002694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470060 	.word	0x42470060

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0cc      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d90c      	bls.n	80026ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d044      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e067      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4934      	ldr	r1, [pc, #208]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fd8a 	bl	80012b8 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7fe fd86 	bl	80012b8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e04f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4601      	mov	r1, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	fa21 f303 	lsr.w	r3, r1, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fbba 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08003e08 	.word	0x08003e08
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d007      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x32>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x38>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80b4 	bne.w	8002a10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028aa:	60bb      	str	r3, [r7, #8]
       break;
 80028ac:	e0b3      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ae:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028b0:	60bb      	str	r3, [r7, #8]
      break;
 80028b2:	e0b0      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b5a      	ldr	r3, [pc, #360]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04a      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	ea03 0501 	and.w	r5, r3, r1
 80028e0:	ea04 0602 	and.w	r6, r4, r2
 80028e4:	4629      	mov	r1, r5
 80028e6:	4632      	mov	r2, r6
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	0154      	lsls	r4, r2, #5
 80028f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f6:	014b      	lsls	r3, r1, #5
 80028f8:	4619      	mov	r1, r3
 80028fa:	4622      	mov	r2, r4
 80028fc:	1b49      	subs	r1, r1, r5
 80028fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	0194      	lsls	r4, r2, #6
 800290c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002910:	018b      	lsls	r3, r1, #6
 8002912:	1a5b      	subs	r3, r3, r1
 8002914:	eb64 0402 	sbc.w	r4, r4, r2
 8002918:	f04f 0100 	mov.w	r1, #0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	00e2      	lsls	r2, r4, #3
 8002922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002926:	00d9      	lsls	r1, r3, #3
 8002928:	460b      	mov	r3, r1
 800292a:	4614      	mov	r4, r2
 800292c:	195b      	adds	r3, r3, r5
 800292e:	eb44 0406 	adc.w	r4, r4, r6
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	0262      	lsls	r2, r4, #9
 800293c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002940:	0259      	lsls	r1, r3, #9
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	4618      	mov	r0, r3
 8002948:	4621      	mov	r1, r4
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	461a      	mov	r2, r3
 8002952:	4623      	mov	r3, r4
 8002954:	f7fd fc4a 	bl	80001ec <__aeabi_uldivmod>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e049      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	f04f 0400 	mov.w	r4, #0
 800296a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	ea03 0501 	and.w	r5, r3, r1
 8002976:	ea04 0602 	and.w	r6, r4, r2
 800297a:	4629      	mov	r1, r5
 800297c:	4632      	mov	r2, r6
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	f04f 0400 	mov.w	r4, #0
 8002986:	0154      	lsls	r4, r2, #5
 8002988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298c:	014b      	lsls	r3, r1, #5
 800298e:	4619      	mov	r1, r3
 8002990:	4622      	mov	r2, r4
 8002992:	1b49      	subs	r1, r1, r5
 8002994:	eb62 0206 	sbc.w	r2, r2, r6
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	0194      	lsls	r4, r2, #6
 80029a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	1a5b      	subs	r3, r3, r1
 80029aa:	eb64 0402 	sbc.w	r4, r4, r2
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	00e2      	lsls	r2, r4, #3
 80029b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029bc:	00d9      	lsls	r1, r3, #3
 80029be:	460b      	mov	r3, r1
 80029c0:	4614      	mov	r4, r2
 80029c2:	195b      	adds	r3, r3, r5
 80029c4:	eb44 0406 	adc.w	r4, r4, r6
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	02a2      	lsls	r2, r4, #10
 80029d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029d6:	0299      	lsls	r1, r3, #10
 80029d8:	460b      	mov	r3, r1
 80029da:	4614      	mov	r4, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	461a      	mov	r2, r3
 80029e8:	4623      	mov	r3, r4
 80029ea:	f7fd fbff 	bl	80001ec <__aeabi_uldivmod>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	68bb      	ldr	r3, [r7, #8]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08003e18 	.word	0x08003e18

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4601      	mov	r1, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08003e18 	.word	0x08003e18

08002a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCC_GetClockConfig+0x60>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40023c00 	.word	0x40023c00

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d075      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b2c:	4bad      	ldr	r3, [pc, #692]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b32:	f7fe fbc1 	bl	80012b8 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b3a:	f7fe fbbd 	bl	80012b8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e18b      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b4c:	4ba6      	ldr	r3, [pc, #664]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	019a      	lsls	r2, r3, #6
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	071b      	lsls	r3, r3, #28
 8002b70:	499d      	ldr	r1, [pc, #628]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b84:	4b98      	ldr	r3, [pc, #608]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8a:	0f1b      	lsrs	r3, r3, #28
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	019a      	lsls	r2, r3, #6
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	4990      	ldr	r1, [pc, #576]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bac:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb2:	f023 021f 	bic.w	r2, r3, #31
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	498a      	ldr	r1, [pc, #552]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	019a      	lsls	r2, r3, #6
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	071b      	lsls	r3, r3, #28
 8002be4:	4980      	ldr	r1, [pc, #512]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bec:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bf2:	f7fe fb61 	bl	80012b8 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bfa:	f7fe fb5d 	bl	80012b8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e12b      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d079      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c30:	4b6e      	ldr	r3, [pc, #440]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fb3f 	bl	80012b8 <HAL_GetTick>
 8002c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c3e:	f7fe fb3b 	bl	80012b8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e109      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5c:	d0ef      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d020      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	0f1b      	lsrs	r3, r3, #28
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	019a      	lsls	r2, r3, #6
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4957      	ldr	r1, [pc, #348]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	4950      	ldr	r1, [pc, #320]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01e      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	0e1b      	lsrs	r3, r3, #24
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	019a      	lsls	r2, r3, #6
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	061b      	lsls	r3, r3, #24
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	071b      	lsls	r3, r3, #28
 8002cd8:	4943      	ldr	r1, [pc, #268]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	493e      	ldr	r1, [pc, #248]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fadc 	bl	80012b8 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d04:	f7fe fad8 	bl	80012b8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0a6      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d22:	d1ef      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 808d 	beq.w	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5a:	f7fe faad 	bl	80012b8 <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7fe faa9 	bl	80012b8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e077      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d039      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d032      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11e      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fa77 	bl	80012b8 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e014      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fa73 	bl	80012b8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d90b      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e03f      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002de4:	42470068 	.word	0x42470068
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470070 	.word	0x42470070
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0e4      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e26:	4911      	ldr	r1, [pc, #68]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
 8002e2c:	e005      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	4909      	ldr	r1, [pc, #36]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002e60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	424711e0 	.word	0x424711e0

08002e74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e025      	b.n	8002ed4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd fc47 	bl	8000730 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f000 fe7d 	bl	8003bb4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	f000 fee8 	bl	8003c9a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e056      	b.n	8002f9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fff1 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	ea42 0103 	orr.w	r1, r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	f003 0104 	and.w	r1, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e01d      	b.n	8002ff2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f815 	bl	8002ffa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 f968 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d007      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d122      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11b      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0202 	mvn.w	r2, #2
 8003082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8ee 	bl	800327a <HAL_TIM_IC_CaptureCallback>
 800309e:	e005      	b.n	80030ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8e0 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8f1 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d122      	bne.n	8003106 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d11b      	bne.n	8003106 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0204 	mvn.w	r2, #4
 80030d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8c4 	bl	800327a <HAL_TIM_IC_CaptureCallback>
 80030f2:	e005      	b.n	8003100 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8b6 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8c7 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b08      	cmp	r3, #8
 8003112:	d122      	bne.n	800315a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11b      	bne.n	800315a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f06f 0208 	mvn.w	r2, #8
 800312a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2204      	movs	r2, #4
 8003130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f89a 	bl	800327a <HAL_TIM_IC_CaptureCallback>
 8003146:	e005      	b.n	8003154 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f88c 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f89d 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	d122      	bne.n	80031ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d11b      	bne.n	80031ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0210 	mvn.w	r2, #16
 800317e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2208      	movs	r2, #8
 8003184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f870 	bl	800327a <HAL_TIM_IC_CaptureCallback>
 800319a:	e005      	b.n	80031a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f862 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f873 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10e      	bne.n	80031da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0201 	mvn.w	r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fe3b 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d10e      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f903 	bl	800340c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d10e      	bne.n	8003232 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f838 	bl	80032a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d10e      	bne.n	800325e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d107      	bne.n	800325e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f06f 0220 	mvn.w	r2, #32
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8cd 	bl	80033f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a40      	ldr	r2, [pc, #256]	; (80033cc <TIM_Base_SetConfig+0x114>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d00f      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3d      	ldr	r2, [pc, #244]	; (80033d0 <TIM_Base_SetConfig+0x118>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00b      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <TIM_Base_SetConfig+0x11c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <TIM_Base_SetConfig+0x120>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <TIM_Base_SetConfig+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <TIM_Base_SetConfig+0x114>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d027      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2c      	ldr	r2, [pc, #176]	; (80033d0 <TIM_Base_SetConfig+0x118>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d023      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <TIM_Base_SetConfig+0x11c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <TIM_Base_SetConfig+0x120>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <TIM_Base_SetConfig+0x124>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d017      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <TIM_Base_SetConfig+0x128>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <TIM_Base_SetConfig+0x12c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00f      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <TIM_Base_SetConfig+0x130>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00b      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a25      	ldr	r2, [pc, #148]	; (80033ec <TIM_Base_SetConfig+0x134>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <TIM_Base_SetConfig+0x138>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <TIM_Base_SetConfig+0x13c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d108      	bne.n	800337c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <TIM_Base_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0xf8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <TIM_Base_SetConfig+0x124>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d103      	bne.n	80033b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	615a      	str	r2, [r3, #20]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40010400 	.word	0x40010400
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40014400 	.word	0x40014400
 80033e8:	40014800 	.word	0x40014800
 80033ec:	40001800 	.word	0x40001800
 80033f0:	40001c00 	.word	0x40001c00
 80033f4:	40002000 	.word	0x40002000

080033f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e03f      	b.n	80034b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fe8e 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003462:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f829 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003478:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003488:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003498:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034fe:	f023 030c 	bic.w	r3, r3, #12
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	430b      	orrs	r3, r1
 800350a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	f040 818b 	bne.w	8003844 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4ac1      	ldr	r2, [pc, #772]	; (8003838 <UART_SetConfig+0x37c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d005      	beq.n	8003544 <UART_SetConfig+0x88>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4abf      	ldr	r2, [pc, #764]	; (800383c <UART_SetConfig+0x380>)
 800353e:	4293      	cmp	r3, r2
 8003540:	f040 80bd 	bne.w	80036be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff fa92 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003548:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	461d      	mov	r5, r3
 800354e:	f04f 0600 	mov.w	r6, #0
 8003552:	46a8      	mov	r8, r5
 8003554:	46b1      	mov	r9, r6
 8003556:	eb18 0308 	adds.w	r3, r8, r8
 800355a:	eb49 0409 	adc.w	r4, r9, r9
 800355e:	4698      	mov	r8, r3
 8003560:	46a1      	mov	r9, r4
 8003562:	eb18 0805 	adds.w	r8, r8, r5
 8003566:	eb49 0906 	adc.w	r9, r9, r6
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003576:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800357a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800357e:	4688      	mov	r8, r1
 8003580:	4691      	mov	r9, r2
 8003582:	eb18 0005 	adds.w	r0, r8, r5
 8003586:	eb49 0106 	adc.w	r1, r9, r6
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	461d      	mov	r5, r3
 8003590:	f04f 0600 	mov.w	r6, #0
 8003594:	196b      	adds	r3, r5, r5
 8003596:	eb46 0406 	adc.w	r4, r6, r6
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	f7fc fe25 	bl	80001ec <__aeabi_uldivmod>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4ba5      	ldr	r3, [pc, #660]	; (8003840 <UART_SetConfig+0x384>)
 80035aa:	fba3 2302 	umull	r2, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	461d      	mov	r5, r3
 80035b8:	f04f 0600 	mov.w	r6, #0
 80035bc:	46a9      	mov	r9, r5
 80035be:	46b2      	mov	sl, r6
 80035c0:	eb19 0309 	adds.w	r3, r9, r9
 80035c4:	eb4a 040a 	adc.w	r4, sl, sl
 80035c8:	4699      	mov	r9, r3
 80035ca:	46a2      	mov	sl, r4
 80035cc:	eb19 0905 	adds.w	r9, r9, r5
 80035d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035e8:	4689      	mov	r9, r1
 80035ea:	4692      	mov	sl, r2
 80035ec:	eb19 0005 	adds.w	r0, r9, r5
 80035f0:	eb4a 0106 	adc.w	r1, sl, r6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	461d      	mov	r5, r3
 80035fa:	f04f 0600 	mov.w	r6, #0
 80035fe:	196b      	adds	r3, r5, r5
 8003600:	eb46 0406 	adc.w	r4, r6, r6
 8003604:	461a      	mov	r2, r3
 8003606:	4623      	mov	r3, r4
 8003608:	f7fc fdf0 	bl	80001ec <__aeabi_uldivmod>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	461a      	mov	r2, r3
 8003612:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <UART_SetConfig+0x384>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a86      	ldr	r2, [pc, #536]	; (8003840 <UART_SetConfig+0x384>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003634:	4498      	add	r8, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	461d      	mov	r5, r3
 800363a:	f04f 0600 	mov.w	r6, #0
 800363e:	46a9      	mov	r9, r5
 8003640:	46b2      	mov	sl, r6
 8003642:	eb19 0309 	adds.w	r3, r9, r9
 8003646:	eb4a 040a 	adc.w	r4, sl, sl
 800364a:	4699      	mov	r9, r3
 800364c:	46a2      	mov	sl, r4
 800364e:	eb19 0905 	adds.w	r9, r9, r5
 8003652:	eb4a 0a06 	adc.w	sl, sl, r6
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003662:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003666:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800366a:	4689      	mov	r9, r1
 800366c:	4692      	mov	sl, r2
 800366e:	eb19 0005 	adds.w	r0, r9, r5
 8003672:	eb4a 0106 	adc.w	r1, sl, r6
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	461d      	mov	r5, r3
 800367c:	f04f 0600 	mov.w	r6, #0
 8003680:	196b      	adds	r3, r5, r5
 8003682:	eb46 0406 	adc.w	r4, r6, r6
 8003686:	461a      	mov	r2, r3
 8003688:	4623      	mov	r3, r4
 800368a:	f7fc fdaf 	bl	80001ec <__aeabi_uldivmod>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	461a      	mov	r2, r3
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <UART_SetConfig+0x384>)
 8003696:	fba3 1302 	umull	r1, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2164      	movs	r1, #100	; 0x64
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <UART_SetConfig+0x384>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 0207 	and.w	r2, r3, #7
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4442      	add	r2, r8
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	e26f      	b.n	8003b9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036be:	f7ff f9c1 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80036c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	461d      	mov	r5, r3
 80036c8:	f04f 0600 	mov.w	r6, #0
 80036cc:	46a8      	mov	r8, r5
 80036ce:	46b1      	mov	r9, r6
 80036d0:	eb18 0308 	adds.w	r3, r8, r8
 80036d4:	eb49 0409 	adc.w	r4, r9, r9
 80036d8:	4698      	mov	r8, r3
 80036da:	46a1      	mov	r9, r4
 80036dc:	eb18 0805 	adds.w	r8, r8, r5
 80036e0:	eb49 0906 	adc.w	r9, r9, r6
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036f8:	4688      	mov	r8, r1
 80036fa:	4691      	mov	r9, r2
 80036fc:	eb18 0005 	adds.w	r0, r8, r5
 8003700:	eb49 0106 	adc.w	r1, r9, r6
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	461d      	mov	r5, r3
 800370a:	f04f 0600 	mov.w	r6, #0
 800370e:	196b      	adds	r3, r5, r5
 8003710:	eb46 0406 	adc.w	r4, r6, r6
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fd68 	bl	80001ec <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	461a      	mov	r2, r3
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <UART_SetConfig+0x384>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	461d      	mov	r5, r3
 8003732:	f04f 0600 	mov.w	r6, #0
 8003736:	46a9      	mov	r9, r5
 8003738:	46b2      	mov	sl, r6
 800373a:	eb19 0309 	adds.w	r3, r9, r9
 800373e:	eb4a 040a 	adc.w	r4, sl, sl
 8003742:	4699      	mov	r9, r3
 8003744:	46a2      	mov	sl, r4
 8003746:	eb19 0905 	adds.w	r9, r9, r5
 800374a:	eb4a 0a06 	adc.w	sl, sl, r6
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800375e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003762:	4689      	mov	r9, r1
 8003764:	4692      	mov	sl, r2
 8003766:	eb19 0005 	adds.w	r0, r9, r5
 800376a:	eb4a 0106 	adc.w	r1, sl, r6
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	461d      	mov	r5, r3
 8003774:	f04f 0600 	mov.w	r6, #0
 8003778:	196b      	adds	r3, r5, r5
 800377a:	eb46 0406 	adc.w	r4, r6, r6
 800377e:	461a      	mov	r2, r3
 8003780:	4623      	mov	r3, r4
 8003782:	f7fc fd33 	bl	80001ec <__aeabi_uldivmod>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	461a      	mov	r2, r3
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <UART_SetConfig+0x384>)
 800378e:	fba3 1302 	umull	r1, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2164      	movs	r1, #100	; 0x64
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	3332      	adds	r3, #50	; 0x32
 80037a0:	4a27      	ldr	r2, [pc, #156]	; (8003840 <UART_SetConfig+0x384>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037ae:	4498      	add	r8, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	461d      	mov	r5, r3
 80037b4:	f04f 0600 	mov.w	r6, #0
 80037b8:	46a9      	mov	r9, r5
 80037ba:	46b2      	mov	sl, r6
 80037bc:	eb19 0309 	adds.w	r3, r9, r9
 80037c0:	eb4a 040a 	adc.w	r4, sl, sl
 80037c4:	4699      	mov	r9, r3
 80037c6:	46a2      	mov	sl, r4
 80037c8:	eb19 0905 	adds.w	r9, r9, r5
 80037cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037e4:	4689      	mov	r9, r1
 80037e6:	4692      	mov	sl, r2
 80037e8:	eb19 0005 	adds.w	r0, r9, r5
 80037ec:	eb4a 0106 	adc.w	r1, sl, r6
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	461d      	mov	r5, r3
 80037f6:	f04f 0600 	mov.w	r6, #0
 80037fa:	196b      	adds	r3, r5, r5
 80037fc:	eb46 0406 	adc.w	r4, r6, r6
 8003800:	461a      	mov	r2, r3
 8003802:	4623      	mov	r3, r4
 8003804:	f7fc fcf2 	bl	80001ec <__aeabi_uldivmod>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	461a      	mov	r2, r3
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <UART_SetConfig+0x384>)
 8003810:	fba3 1302 	umull	r1, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2164      	movs	r1, #100	; 0x64
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <UART_SetConfig+0x384>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 0207 	and.w	r2, r3, #7
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4442      	add	r2, r8
 8003834:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003836:	e1b2      	b.n	8003b9e <UART_SetConfig+0x6e2>
 8003838:	40011000 	.word	0x40011000
 800383c:	40011400 	.word	0x40011400
 8003840:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4ad7      	ldr	r2, [pc, #860]	; (8003ba8 <UART_SetConfig+0x6ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d005      	beq.n	800385a <UART_SetConfig+0x39e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4ad6      	ldr	r2, [pc, #856]	; (8003bac <UART_SetConfig+0x6f0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	f040 80d1 	bne.w	80039fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800385a:	f7ff f907 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 800385e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	469a      	mov	sl, r3
 8003864:	f04f 0b00 	mov.w	fp, #0
 8003868:	46d0      	mov	r8, sl
 800386a:	46d9      	mov	r9, fp
 800386c:	eb18 0308 	adds.w	r3, r8, r8
 8003870:	eb49 0409 	adc.w	r4, r9, r9
 8003874:	4698      	mov	r8, r3
 8003876:	46a1      	mov	r9, r4
 8003878:	eb18 080a 	adds.w	r8, r8, sl
 800387c:	eb49 090b 	adc.w	r9, r9, fp
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800388c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003890:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003894:	4688      	mov	r8, r1
 8003896:	4691      	mov	r9, r2
 8003898:	eb1a 0508 	adds.w	r5, sl, r8
 800389c:	eb4b 0609 	adc.w	r6, fp, r9
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4619      	mov	r1, r3
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	0094      	lsls	r4, r2, #2
 80038b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038b8:	008b      	lsls	r3, r1, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	4623      	mov	r3, r4
 80038be:	4628      	mov	r0, r5
 80038c0:	4631      	mov	r1, r6
 80038c2:	f7fc fc93 	bl	80001ec <__aeabi_uldivmod>
 80038c6:	4603      	mov	r3, r0
 80038c8:	460c      	mov	r4, r1
 80038ca:	461a      	mov	r2, r3
 80038cc:	4bb8      	ldr	r3, [pc, #736]	; (8003bb0 <UART_SetConfig+0x6f4>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	469b      	mov	fp, r3
 80038dc:	f04f 0c00 	mov.w	ip, #0
 80038e0:	46d9      	mov	r9, fp
 80038e2:	46e2      	mov	sl, ip
 80038e4:	eb19 0309 	adds.w	r3, r9, r9
 80038e8:	eb4a 040a 	adc.w	r4, sl, sl
 80038ec:	4699      	mov	r9, r3
 80038ee:	46a2      	mov	sl, r4
 80038f0:	eb19 090b 	adds.w	r9, r9, fp
 80038f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800390c:	4689      	mov	r9, r1
 800390e:	4692      	mov	sl, r2
 8003910:	eb1b 0509 	adds.w	r5, fp, r9
 8003914:	eb4c 060a 	adc.w	r6, ip, sl
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	f04f 0400 	mov.w	r4, #0
 800392a:	0094      	lsls	r4, r2, #2
 800392c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003930:	008b      	lsls	r3, r1, #2
 8003932:	461a      	mov	r2, r3
 8003934:	4623      	mov	r3, r4
 8003936:	4628      	mov	r0, r5
 8003938:	4631      	mov	r1, r6
 800393a:	f7fc fc57 	bl	80001ec <__aeabi_uldivmod>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
 8003942:	461a      	mov	r2, r3
 8003944:	4b9a      	ldr	r3, [pc, #616]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2164      	movs	r1, #100	; 0x64
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a95      	ldr	r2, [pc, #596]	; (8003bb0 <UART_SetConfig+0x6f4>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	4498      	add	r8, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	469b      	mov	fp, r3
 800396a:	f04f 0c00 	mov.w	ip, #0
 800396e:	46d9      	mov	r9, fp
 8003970:	46e2      	mov	sl, ip
 8003972:	eb19 0309 	adds.w	r3, r9, r9
 8003976:	eb4a 040a 	adc.w	r4, sl, sl
 800397a:	4699      	mov	r9, r3
 800397c:	46a2      	mov	sl, r4
 800397e:	eb19 090b 	adds.w	r9, r9, fp
 8003982:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800399a:	4689      	mov	r9, r1
 800399c:	4692      	mov	sl, r2
 800399e:	eb1b 0509 	adds.w	r5, fp, r9
 80039a2:	eb4c 060a 	adc.w	r6, ip, sl
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4619      	mov	r1, r3
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	0094      	lsls	r4, r2, #2
 80039ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039be:	008b      	lsls	r3, r1, #2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	4628      	mov	r0, r5
 80039c6:	4631      	mov	r1, r6
 80039c8:	f7fc fc10 	bl	80001ec <__aeabi_uldivmod>
 80039cc:	4603      	mov	r3, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <UART_SetConfig+0x6f4>)
 80039d4:	fba3 1302 	umull	r1, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	2164      	movs	r1, #100	; 0x64
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	3332      	adds	r3, #50	; 0x32
 80039e6:	4a72      	ldr	r2, [pc, #456]	; (8003bb0 <UART_SetConfig+0x6f4>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	f003 020f 	and.w	r2, r3, #15
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4442      	add	r2, r8
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	e0d0      	b.n	8003b9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039fc:	f7ff f822 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003a00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	469a      	mov	sl, r3
 8003a06:	f04f 0b00 	mov.w	fp, #0
 8003a0a:	46d0      	mov	r8, sl
 8003a0c:	46d9      	mov	r9, fp
 8003a0e:	eb18 0308 	adds.w	r3, r8, r8
 8003a12:	eb49 0409 	adc.w	r4, r9, r9
 8003a16:	4698      	mov	r8, r3
 8003a18:	46a1      	mov	r9, r4
 8003a1a:	eb18 080a 	adds.w	r8, r8, sl
 8003a1e:	eb49 090b 	adc.w	r9, r9, fp
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a36:	4688      	mov	r8, r1
 8003a38:	4691      	mov	r9, r2
 8003a3a:	eb1a 0508 	adds.w	r5, sl, r8
 8003a3e:	eb4b 0609 	adc.w	r6, fp, r9
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4619      	mov	r1, r3
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	f04f 0400 	mov.w	r4, #0
 8003a54:	0094      	lsls	r4, r2, #2
 8003a56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a5a:	008b      	lsls	r3, r1, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4623      	mov	r3, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	4631      	mov	r1, r6
 8003a64:	f7fc fbc2 	bl	80001ec <__aeabi_uldivmod>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003a70:	fba3 2302 	umull	r2, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	469b      	mov	fp, r3
 8003a7e:	f04f 0c00 	mov.w	ip, #0
 8003a82:	46d9      	mov	r9, fp
 8003a84:	46e2      	mov	sl, ip
 8003a86:	eb19 0309 	adds.w	r3, r9, r9
 8003a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a8e:	4699      	mov	r9, r3
 8003a90:	46a2      	mov	sl, r4
 8003a92:	eb19 090b 	adds.w	r9, r9, fp
 8003a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aae:	4689      	mov	r9, r1
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	0094      	lsls	r4, r2, #2
 8003ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ad2:	008b      	lsls	r3, r1, #2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	4631      	mov	r1, r6
 8003adc:	f7fc fb86 	bl	80001ec <__aeabi_uldivmod>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	3332      	adds	r3, #50	; 0x32
 8003afa:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b06:	4498      	add	r8, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	469b      	mov	fp, r3
 8003b0c:	f04f 0c00 	mov.w	ip, #0
 8003b10:	46d9      	mov	r9, fp
 8003b12:	46e2      	mov	sl, ip
 8003b14:	eb19 0309 	adds.w	r3, r9, r9
 8003b18:	eb4a 040a 	adc.w	r4, sl, sl
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	46a2      	mov	sl, r4
 8003b20:	eb19 090b 	adds.w	r9, r9, fp
 8003b24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b3c:	4689      	mov	r9, r1
 8003b3e:	4692      	mov	sl, r2
 8003b40:	eb1b 0509 	adds.w	r5, fp, r9
 8003b44:	eb4c 060a 	adc.w	r6, ip, sl
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f04f 0400 	mov.w	r4, #0
 8003b5a:	0094      	lsls	r4, r2, #2
 8003b5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b60:	008b      	lsls	r3, r1, #2
 8003b62:	461a      	mov	r2, r3
 8003b64:	4623      	mov	r3, r4
 8003b66:	4628      	mov	r0, r5
 8003b68:	4631      	mov	r1, r6
 8003b6a:	f7fc fb3f 	bl	80001ec <__aeabi_uldivmod>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003b76:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2164      	movs	r1, #100	; 0x64
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	3332      	adds	r3, #50	; 0x32
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <UART_SetConfig+0x6f4>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4442      	add	r2, r8
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	e7ff      	b.n	8003b9e <UART_SetConfig+0x6e2>
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba8:	40011000 	.word	0x40011000
 8003bac:	40011400 	.word	0x40011400
 8003bb0:	51eb851f 	.word	0x51eb851f

08003bb4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d029      	beq.n	8003c22 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bde:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003be8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003bee:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003bf4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8003bfa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003c00:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003c06:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003c0c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003c12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e034      	b.n	8003c8c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c2e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c38:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003c3e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c56:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c60:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003c66:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003c6c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003c72:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8003c78:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d02e      	beq.n	8003d12 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cc0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003cd0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003cda:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003ce4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003cee:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003cf8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003d02:	4313      	orrs	r3, r2
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e03b      	b.n	8003d8a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d22:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003d34:	4313      	orrs	r3, r2
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d48:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003d58:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003d62:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003d6c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003d76:	4313      	orrs	r3, r2
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <__libc_init_array>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4e0d      	ldr	r6, [pc, #52]	; (8003dd0 <__libc_init_array+0x38>)
 8003d9c:	4c0d      	ldr	r4, [pc, #52]	; (8003dd4 <__libc_init_array+0x3c>)
 8003d9e:	1ba4      	subs	r4, r4, r6
 8003da0:	10a4      	asrs	r4, r4, #2
 8003da2:	2500      	movs	r5, #0
 8003da4:	42a5      	cmp	r5, r4
 8003da6:	d109      	bne.n	8003dbc <__libc_init_array+0x24>
 8003da8:	4e0b      	ldr	r6, [pc, #44]	; (8003dd8 <__libc_init_array+0x40>)
 8003daa:	4c0c      	ldr	r4, [pc, #48]	; (8003ddc <__libc_init_array+0x44>)
 8003dac:	f000 f820 	bl	8003df0 <_init>
 8003db0:	1ba4      	subs	r4, r4, r6
 8003db2:	10a4      	asrs	r4, r4, #2
 8003db4:	2500      	movs	r5, #0
 8003db6:	42a5      	cmp	r5, r4
 8003db8:	d105      	bne.n	8003dc6 <__libc_init_array+0x2e>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dc0:	4798      	blx	r3
 8003dc2:	3501      	adds	r5, #1
 8003dc4:	e7ee      	b.n	8003da4 <__libc_init_array+0xc>
 8003dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dca:	4798      	blx	r3
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7f2      	b.n	8003db6 <__libc_init_array+0x1e>
 8003dd0:	08003e28 	.word	0x08003e28
 8003dd4:	08003e28 	.word	0x08003e28
 8003dd8:	08003e28 	.word	0x08003e28
 8003ddc:	08003e2c 	.word	0x08003e2c

08003de0 <memset>:
 8003de0:	4402      	add	r2, r0
 8003de2:	4603      	mov	r3, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
